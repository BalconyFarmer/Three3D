{
    "version": 3,
    "sources": [
        "webpack://VISION/webpack/universalModuleDefinition",
        "webpack://VISION/webpack/bootstrap",
        "webpack://VISION/./src/Math/Vector3.ts",
        "webpack://VISION/./src/Math/MathUtils.ts",
        "webpack://VISION/./src/Math/Vector2.ts",
        "webpack://VISION/./src/Materials/Material.ts",
        "webpack://VISION/./src/Math/index.ts",
        "webpack://VISION/./src/Math/MathTmp.ts",
        "webpack://VISION/./src/Csg/CSG.ts",
        "webpack://VISION/./src/Csg/CSGMatrix4x4.ts",
        "webpack://VISION/./src/Csg/CSGPlane.ts",
        "webpack://VISION/./src/Csg/CSGVector3D.ts",
        "webpack://VISION/./src/Math/Curves/Curve.ts",
        "webpack://VISION/./src/Engines/index.ts",
        "webpack://VISION/./src/Engines/Constants.ts",
        "webpack://VISION/./src/Engines/WebGLEngine.ts",
        "webpack://VISION/./src/Csg/CSGVector2D.ts",
        "webpack://VISION/./src/Lights/Light.ts",
        "webpack://VISION/./src/Math/Vector4.ts",
        "webpack://VISION/./src/Math/Matrix4.ts",
        "webpack://VISION/./src/Math/Matrix3.ts",
        "webpack://VISION/./src/Math/Algorithm/Intervals.ts",
        "webpack://VISION/./src/Math/Sphere.ts",
        "webpack://VISION/./src/Events/index.ts",
        "webpack://VISION/./src/Scene/Geometries/BufferAttribute.ts",
        "webpack://VISION/./src/Engines/Textures/Texture.ts",
        "webpack://VISION/./src/Scene/TransformObject.ts",
        "webpack://VISION/./src/Math/Box3.ts",
        "webpack://VISION/./src/Math/ColorRGB.ts",
        "webpack://VISION/./src/Math/Curves/EllipseCurve.ts",
        "webpack://VISION/./src/Math/Curves/BezierCurveFunc.ts",
        "webpack://VISION/./src/Csg/CSGVertex.ts",
        "webpack://VISION/./src/Csg/CSGPolygon.ts",
        "webpack://VISION/./src/Csg/CAG.ts",
        "webpack://VISION/./src/Scene/Geometries/Geometry.ts",
        "webpack://VISION/./src/Math/Euler.ts",
        "webpack://VISION/./src/Enums/index.ts",
        "webpack://VISION/./src/Math/Quaternion.ts",
        "webpack://VISION/./src/Math/Box2.ts",
        "webpack://VISION/./src/Math/Line3.ts",
        "webpack://VISION/./src/Math/Curves/LineCurve.ts",
        "webpack://VISION/./src/Math/Curves/SplineCurve.ts",
        "webpack://VISION/./src/Csg/CSGOrthoNormalBasis.ts",
        "webpack://VISION/./src/Cameras/Camera.ts",
        "webpack://VISION/./src/Enums/PlanePolygonIntersectType.ts",
        "webpack://VISION/./src/Math/Algorithm/LCPSolver.ts",
        "webpack://VISION/./src/Math/ColorRGBA.ts",
        "webpack://VISION/./src/Math/Plane.ts",
        "webpack://VISION/./src/Math/LineSegment3.ts",
        "webpack://VISION/./src/Math/Line2.ts",
        "webpack://VISION/./src/Math/Curves/CubicBezierCurve.ts",
        "webpack://VISION/./src/Math/Curves/LineCurve3.ts",
        "webpack://VISION/./src/Math/Curves/QuadraticBezierCurve.ts",
        "webpack://VISION/./src/Math/Shape/Path.ts",
        "webpack://VISION/./src/Libs/index.ts",
        "webpack://VISION/./src/Libs/Utf8.ts",
        "webpack://VISION/./src/Misc/VisibleLayers.ts",
        "webpack://VISION/./src/Csg/CAGVertex.ts",
        "webpack://VISION/./src/Csg/CAGSide.ts",
        "webpack://VISION/./src/Csg/CSGLine3D.ts",
        "webpack://VISION/./src/Engines/Textures/TextureRaw.ts",
        "webpack://VISION/./src/Scene/Geometries/TypeBufferAttribute.ts",
        "webpack://VISION/./src/Scene/Geometries/BufferAttributeKind.ts",
        "webpack://VISION/./src/Misc/index.ts",
        "webpack://VISION/./src/Misc/DefaultValue.ts",
        "webpack://VISION/./src/Enums/EulerOrder.ts",
        "webpack://VISION/./src/Enums/CatmullRomType.ts",
        "webpack://VISION/./src/Enums/SphereSphereIntersectType.ts",
        "webpack://VISION/./src/Math/Curves/ArcCurve.ts",
        "webpack://VISION/./src/Math/Curves/CatmullRomCurve.ts",
        "webpack://VISION/./src/Math/Curves/CatmullRomCurve3.ts",
        "webpack://VISION/./src/Math/Curves/CubicBezierCurve3.ts",
        "webpack://VISION/./src/Math/Curves/CurvePath.ts",
        "webpack://VISION/./src/Math/Curves/QuadraticBezierCurve3.ts",
        "webpack://VISION/./src/Math/Shape/Shape.ts",
        "webpack://VISION/./src/Math/Shape/ShapeUtils.ts",
        "webpack://VISION/./src/Scene/AbstractObject.ts",
        "webpack://VISION/./src/Csg/CSGConnector.ts",
        "webpack://VISION/./src/Csg/CSGLine2D.ts",
        "webpack://VISION/./src/Csg/CSGFuzzyFactory.ts",
        "webpack://VISION/./src/Csg/CSGPolygonShared.ts",
        "webpack://VISION/./src/Engines/Textures/TextureCube.ts",
        "webpack://VISION/./src/Misc/DataTypeFormat.ts",
        "webpack://VISION/./src/Scene/Geometries/InterleavedBuffer.ts",
        "webpack://VISION/./src/Scene/Geometries/InterleavedBufferAttribute.ts",
        "webpack://VISION/./src/Materials/MeshBasicMaterial.ts",
        "webpack://VISION/./src/Scene/Renderable.ts",
        "webpack://VISION/./src/Scene/Mesh.ts",
        "webpack://VISION/./src/Misc/SmartArray.ts",
        "webpack://VISION/./src/index.ts",
        "webpack://VISION/./src/Animation/index.ts",
        "webpack://VISION/./src/Animation/AnimationBlendMode.ts",
        "webpack://VISION/./src/Animation/AnimationLoopMode.ts",
        "webpack://VISION/./src/Cameras/index.ts",
        "webpack://VISION/./src/Math/Cylindrical.ts",
        "webpack://VISION/./src/Math/Ellipsoid.ts",
        "webpack://VISION/./src/Math/Frustum.ts",
        "webpack://VISION/./src/Math/HeadingPitchRang.ts",
        "webpack://VISION/./src/Math/HeadingPitchRoll.ts",
        "webpack://VISION/./src/Math/LineSegment2.ts",
        "webpack://VISION/./src/Math/Matrix2D.ts",
        "webpack://VISION/./src/Math/OBB.ts",
        "webpack://VISION/./src/Math/Polygon.ts",
        "webpack://VISION/./src/Math/Ray2.ts",
        "webpack://VISION/./src/Math/Ray3.ts",
        "webpack://VISION/./src/Math/Spherical.ts",
        "webpack://VISION/./src/Math/SphericalHarmonics3.ts",
        "webpack://VISION/./src/Math/Triangle.ts",
        "webpack://VISION/./src/Math/Curves/Curves.ts",
        "webpack://VISION/./src/Math/Shape/ShapePath.ts",
        "webpack://VISION/./src/Libs/IOBuffer.ts",
        "webpack://VISION/./src/Libs/Earcut.ts",
        "webpack://VISION/./src/Events/Event.ts",
        "webpack://VISION/./src/Events/EventDispatcher.ts",
        "webpack://VISION/./src/Math/Viewport.ts",
        "webpack://VISION/./src/Cameras/OrthographicCamera.ts",
        "webpack://VISION/./src/Cameras/PerspectiveCamera.ts",
        "webpack://VISION/./src/Csg/index.ts",
        "webpack://VISION/./src/Csg/CSGProperties.ts",
        "webpack://VISION/./src/Csg/CAGFuzzyFactory.ts",
        "webpack://VISION/./src/Csg/CSGPath2D.ts",
        "webpack://VISION/./src/Csg/CSGTree.ts",
        "webpack://VISION/./src/Csg/CSGPolygonTreeNode.ts",
        "webpack://VISION/./src/Csg/CSGNode.ts",
        "webpack://VISION/./src/Csg/CSGFuzzyCSGFactory.ts",
        "webpack://VISION/./src/Engines/GLConstants.ts",
        "webpack://VISION/./src/Engines/BaseEngine.ts",
        "webpack://VISION/./src/Engines/GLPipelineContext.ts",
        "webpack://VISION/./src/Engines/WebGL/index.ts",
        "webpack://VISION/./src/Engines/WebGL/Engine.BlendState.ts",
        "webpack://VISION/./src/Engines/WebGL/Engine.ColorState.ts",
        "webpack://VISION/./src/Engines/WebGL/Engine.CullState.ts",
        "webpack://VISION/./src/Engines/WebGL/Engine.DepthState.ts",
        "webpack://VISION/./src/Engines/WebGL/Engine.StencilState.ts",
        "webpack://VISION/./src/Engines/WebGL/Engine.QueryState.ts",
        "webpack://VISION/./src/Engines/GLQuery.ts",
        "webpack://VISION/./src/Engines/WebGL/Engine.TextureState.ts",
        "webpack://VISION/./src/Engines/GLTexture.ts",
        "webpack://VISION/./src/Engines/GLTextureSource.ts",
        "webpack://VISION/./src/Engines/WebGL/Engine.TransformFeedback.ts",
        "webpack://VISION/./src/Engines/Textures/Texture2D.ts",
        "webpack://VISION/./src/Engines/Textures/TextureCanvas.ts",
        "webpack://VISION/./src/Engines/Textures/TextureRaw2DArray.ts",
        "webpack://VISION/./src/Engines/Textures/TextureRaw3D.ts",
        "webpack://VISION/./src/Engines/Textures/TextureRawCube.ts",
        "webpack://VISION/./src/Engines/Textures/TextureVideo.ts",
        "webpack://VISION/./src/Misc/BinaryBuffer.ts",
        "webpack://VISION/./src/Misc/PixelFormat.ts",
        "webpack://VISION/./src/Misc/ArrayUtils.ts",
        "webpack://VISION/./src/Scene/Geometries/index.ts",
        "webpack://VISION/./src/Scene/Geometries/InstancedBufferAttribute.ts",
        "webpack://VISION/./src/Scene/Geometries/InstancedGeometry.ts",
        "webpack://VISION/./src/Scene/Geometries/InstancedInterleavedBuffer.ts",
        "webpack://VISION/./src/Scene/Geometries/InstancedInterleavedBufferAttribute.ts",
        "webpack://VISION/./src/Scene/Geometries/Builder/BoxGeometryBuilder.ts",
        "webpack://VISION/./src/Lights/index.ts",
        "webpack://VISION/./src/Lights/AmbientLight.ts",
        "webpack://VISION/./src/Lights/DirectionalLight.ts",
        "webpack://VISION/./src/Lights/HemisphereLight.ts",
        "webpack://VISION/./src/Lights/PointLight.ts",
        "webpack://VISION/./src/Lights/RectAreaLight.ts",
        "webpack://VISION/./src/Lights/SpotLight.ts",
        "webpack://VISION/./src/Materials/index.ts",
        "webpack://VISION/./src/Materials/LineBasicMaterial.ts",
        "webpack://VISION/./src/Materials/LineDashedMaterial.ts",
        "webpack://VISION/./src/Materials/LineFlatMaterial.ts",
        "webpack://VISION/./src/Materials/MeshDepthMaterial.ts",
        "webpack://VISION/./src/Materials/MeshDistanceMaterial.ts",
        "webpack://VISION/./src/Materials/MeshLambertMaterial.ts",
        "webpack://VISION/./src/Materials/MeshMatcapMaterial.ts",
        "webpack://VISION/./src/Materials/MeshNormalMaterial.ts",
        "webpack://VISION/./src/Materials/MeshPhongMaterial.ts",
        "webpack://VISION/./src/Materials/MeshPhysicalMaterial.ts",
        "webpack://VISION/./src/Materials/MeshStandardMaterial.ts",
        "webpack://VISION/./src/Materials/MeshToonMaterial.ts",
        "webpack://VISION/./src/Materials/MultiMaterial.ts",
        "webpack://VISION/./src/Materials/PointsMaterial.ts",
        "webpack://VISION/./src/Materials/ShaderMaterial.ts",
        "webpack://VISION/./src/Materials/ShadowMaterial.ts",
        "webpack://VISION/./src/Materials/SpriteMaterial.ts",
        "webpack://VISION/./src/Scene/index.ts",
        "webpack://VISION/./src/Scene/Scene.ts",
        "webpack://VISION/./src/Scene/Rendering/RenderingManager.ts",
        "webpack://VISION/./src/Scene/Rendering/RenderingGroup.ts",
        "webpack://VISION/./src/Scene/Projecting/ProjectingManager.ts"
    ],
    "names": [
        "root",
        "factory",
        "exports",
        "module",
        "define",
        "amd",
        "window",
        "installedModules",
        "__webpack_require__",
        "moduleId",
        "i",
        "l",
        "modules",
        "call",
        "m",
        "c",
        "d",
        "name",
        "getter",
        "o",
        "Object",
        "defineProperty",
        "enumerable",
        "get",
        "r",
        "Symbol",
        "toStringTag",
        "value",
        "t",
        "mode",
        "__esModule",
        "ns",
        "create",
        "key",
        "bind",
        "n",
        "object",
        "property",
        "prototype",
        "hasOwnProperty",
        "p",
        "s",
        "x",
        "y",
        "z",
        "this",
        "_p",
        "_notify",
        "_onNotify",
        "Build",
        "Vector3",
        "_zeroReadOnly",
        "_oneReadOnly",
        "_oneInvReadOnly",
        "_unitXReadOnly",
        "_unitYReadOnly",
        "_unitZReadOnly",
        "_unitXInvReadOnly",
        "_unitYInvReadOnly",
        "_unitZInvReadOnly",
        "computeOrthogonalComplement",
        "numInputs",
        "v",
        "Math",
        "abs",
        "crossVectors",
        "orthonormalize",
        "minLength",
        "length",
        "normalize",
        "j",
        "dot",
        "sub",
        "multiplyScalar",
        "_x",
        "triggerNotify",
        "_y",
        "_z",
        "setNotifyFunc",
        "set",
        "setScalar",
        "scalar",
        "setX",
        "setY",
        "setZ",
        "setComponent",
        "index",
        "Error",
        "getComponent",
        "maximumComponent",
        "max",
        "minimumComponent",
        "min",
        "clone",
        "copy",
        "source",
        "add",
        "vec",
        "addScalar",
        "addVectors",
        "aVec",
        "bVec",
        "addScaledVector",
        "subScalar",
        "subVectors",
        "multiply",
        "multiplyVectors",
        "divide",
        "divideScalar",
        "applyEuler",
        "euler",
        "applyQuaternion",
        "MathTmp",
        "Quaternion",
        "setFromEuler",
        "applyAxisAngle",
        "axis",
        "angle",
        "setFromAxisAngle",
        "applyMatrix3",
        "matrix3",
        "e",
        "elements",
        "applyNormalMatrix",
        "applyMatrix4",
        "matrix4",
        "w",
        "quaternion",
        "qx",
        "qy",
        "qz",
        "qw",
        "ix",
        "iy",
        "iz",
        "iw",
        "project",
        "camera",
        "matrixWorldInverse",
        "projectionMatrix",
        "unproject",
        "projectionMatrixInverse",
        "matrixWorld",
        "clamp",
        "minVec",
        "maxVec",
        "clampScalar",
        "minScalar",
        "maxScalar",
        "clampLength",
        "floor",
        "ceil",
        "round",
        "roundToZero",
        "negate",
        "cross",
        "ax",
        "ay",
        "az",
        "bx",
        "by",
        "bz",
        "dotCross",
        "lengthSq",
        "sqrt",
        "manhattanLength",
        "manhattanDistanceTo",
        "angleTo",
        "denominator",
        "PI",
        "theta",
        "acos",
        "MathUtils",
        "distanceTo",
        "distanceToSquared",
        "dx",
        "dy",
        "dz",
        "setLength",
        "lerp",
        "alpha",
        "lerpVectors",
        "vec1",
        "vec2",
        "angleBetween",
        "n1",
        "n2",
        "cosine",
        "sine",
        "atan2",
        "midpoint",
        "midpointVectors",
        "projectOnVector",
        "projectOnPlane",
        "planeNormal",
        "reflect",
        "normal",
        "mostOrthogonalAxis",
        "UNIT_X",
        "UNIT_Z",
        "UNIT_Y",
        "setFromSpherical",
        "spherical",
        "setFromSphericalCoords",
        "radius",
        "phi",
        "sinPhiRadius",
        "sin",
        "cos",
        "setFromCylindrical",
        "cylindrical",
        "setFromCylindricalCoords",
        "setFromMatrixPosition",
        "setFromMatrixScale",
        "matrix",
        "sx",
        "setFromMatrixColumn",
        "sy",
        "sz",
        "fromArray",
        "random",
        "equals",
        "equalsEpsilon",
        "right",
        "relativeEpsilon",
        "absoluteEpsilon",
        "array",
        "offset",
        "toArray",
        "fromDataBuffer",
        "dataBuffer",
        "readFloat32",
        "toDataBuffer",
        "writeFloat32",
        "fromBufferAttribute",
        "attribute",
        "getX",
        "getY",
        "getZ",
        "_lut",
        "toString",
        "_seed",
        "generateUUID",
        "d0",
        "d1",
        "d2",
        "d3",
        "toUpperCase",
        "acosClamped",
        "asinClamped",
        "asin",
        "chordLength",
        "wrap",
        "mapLinear",
        "a1",
        "a2",
        "b1",
        "b2",
        "smoothstep",
        "smootherstep",
        "randInt",
        "low",
        "high",
        "randFloat",
        "randFloatSpread",
        "range",
        "seededRandom",
        "degToRad",
        "degrees",
        "DEG2RAD",
        "radToDeg",
        "radians",
        "RAD2DEG",
        "isPowerOfTwo",
        "ceilPowerOfTwo",
        "pow",
        "log",
        "LN2",
        "floorPowerOfTwo",
        "signNotZero",
        "toSNorm",
        "rangeMax",
        "fromSNorm",
        "mod",
        "fog",
        "distance",
        "density",
        "exp",
        "zeroToTwoPi",
        "TWO_PI",
        "EPSILON14",
        "negativePiToPi",
        "equalsZero",
        "fvalue",
        "left",
        "defaultValue",
        "absDiff",
        "lessThan",
        "lessThanOrEquals",
        "greaterThan",
        "greaterThanOrEquals",
        "scaleToGeodeticSurface",
        "cartesian",
        "oneOverRadii",
        "oneOverRadiiSquared",
        "centerToleranceSquared",
        "result",
        "positionX",
        "positionY",
        "positionZ",
        "oneOverRadiiX",
        "oneOverRadiiY",
        "oneOverRadiiZ",
        "x2",
        "y2",
        "z2",
        "squaredNorm",
        "ratio",
        "intersection",
        "isFinite",
        "oneOverRadiiSquaredX",
        "oneOverRadiiSquaredY",
        "oneOverRadiiSquaredZ",
        "gradient",
        "func",
        "xMultiplier",
        "yMultiplier",
        "zMultiplier",
        "xMultiplier2",
        "yMultiplier2",
        "zMultiplier2",
        "lambda",
        "correction",
        "EPSILON12",
        "EPSILON1",
        "EPSILON2",
        "EPSILON3",
        "EPSILON4",
        "EPSILON5",
        "EPSILON6",
        "EPSILON7",
        "EPSILON8",
        "EPSILON9",
        "EPSILON10",
        "EPSILON11",
        "EPSILON13",
        "EPSILON15",
        "EPSILON16",
        "EPSILON17",
        "EPSILON18",
        "EPSILON19",
        "EPSILON20",
        "EPSILON21",
        "ONE_OVER_PI",
        "PI_OVER_TWO",
        "PI_OVER_THREE",
        "PI_OVER_FOUR",
        "PI_OVER_SIX",
        "THREE_PI_OVER_TWO",
        "ONE_OVER_TWO_PI",
        "SIXTY_FOUR_KILOBYTES",
        "RAD2ARCSECOND",
        "Vector2",
        "perp",
        "dotPerp",
        "p2",
        "rotateAround",
        "center",
        "uuid",
        "_fog",
        "_blending",
        "Constants",
        "CombineBlending",
        "_side",
        "FrontSide",
        "_flatShading",
        "_vertexTangents",
        "_vertexColors",
        "_drawMode",
        "TrianglesDrawMode",
        "_opacity",
        "_transparent",
        "_blendSrc",
        "SrcAlphaFactor",
        "_blendDst",
        "OneMinusSrcAlphaFactor",
        "_blendEquation",
        "AddEquation",
        "_blendSrcAlpha",
        "_blendDstAlpha",
        "_blendEquationAlpha",
        "_blendColor",
        "ColorRGBA",
        "_depthFunc",
        "LessEqualDepth",
        "_depthTest",
        "_depthWrite",
        "_logDepth",
        "_disableFragLogDepth",
        "_stencilWrite",
        "_stencilWriteMask",
        "_stencilFunc",
        "AlwaysStencilFunc",
        "_stencilRef",
        "_stencilFuncMask",
        "_stencilFail",
        "KeepStencilOp",
        "_stencilZFail",
        "_stencilZPass",
        "_clipping",
        "_clippingPlanes",
        "_clipIntersection",
        "_clipEdgeWidth",
        "_clipEdgeColor",
        "ColorRGB",
        "WHITE",
        "_clipShadows",
        "_colorWrite",
        "_dithering",
        "_polygonOffset",
        "_polygonOffsetFactor",
        "_polygonOffsetUnits",
        "_alphaTest",
        "_premultipliedAlpha",
        "_toneMapped",
        "_version",
        "_reference",
        "_visible",
        "needsUpdate",
        "addReference",
        "dispose",
        "dispatchEvent",
        "Event",
        "needAlphaBlending",
        "_disableAlphaBlending",
        "needAlphaTesting",
        "opacity",
        "transparent",
        "blending",
        "side",
        "flatShading",
        "vertexTangents",
        "vertexColors",
        "drawMode",
        "blendSrc",
        "blendDst",
        "blendEquation",
        "blendSrcAlpha",
        "blendDstAlpha",
        "blendEquationAlpha",
        "blendColor",
        "depthFunc",
        "depthTest",
        "depthWrite",
        "logDepth",
        "disableFragLogDepth",
        "stencilWrite",
        "stencilWriteMask",
        "stencilFunc",
        "stencilRef",
        "stencilFuncMask",
        "stencilFail",
        "stencilZFail",
        "stencilZPass",
        "clipping",
        "clipShadows",
        "clipIntersection",
        "clippingPlanes",
        "clipEdgeWidth",
        "clipEdgeColor",
        "colorWrite",
        "dithering",
        "polygonOffset",
        "polygonOffsetFactor",
        "polygonOffsetUnits",
        "alphaTest",
        "premultipliedAlpha",
        "toneMapped",
        "visible",
        "EventDispatcher",
        "Material",
        "_Vector2",
        "buildArray",
        "_Vector3",
        "_Vector4",
        "Vector4",
        "_Matrix3",
        "Matrix3",
        "_Matrix4",
        "Matrix4",
        "_Euler",
        "Euler",
        "_Quaternion",
        "_Box2",
        "Box2",
        "_Box3",
        "Box3",
        "_Sphere",
        "Sphere",
        "_ColorRGB",
        "_ColorRGBA",
        "size",
        "itemBuilder",
        "a",
        "push",
        "fnNumberSort",
        "b",
        "insertSorted",
        "element",
        "comparefunc",
        "leftbound",
        "rightbound",
        "testindex",
        "splice",
        "polygons",
        "properties",
        "CSGProperties",
        "isCanonicalized",
        "isRetesselated",
        "fromGeometry",
        "geometry",
        "pos",
        "polygon",
        "position",
        "attributes",
        "count",
        "vertices",
        "CSGVector3D",
        "CSGVertex",
        "CSGPolygon",
        "checkIfConvex",
        "csg",
        "CSG",
        "fromPolygons",
        "undefined",
        "mat4",
        "CSGMatrix4x4",
        "transform",
        "fromMesh",
        "mesh",
        "_matrix",
        "_geometry",
        "updateMatrix",
        "Geometry",
        "console",
        "warn",
        "toGeometry",
        "outGeometry",
        "toPolygons",
        "allvertices",
        "positions",
        "normals",
        "forEach",
        "map",
        "vertex",
        "vertex_position",
        "temp",
        "getGeometryVertex",
        "pop",
        "plane",
        "_positions",
        "Float32Array",
        "bufferAttributePositions",
        "BufferAttribute",
        "setAttribute",
        "BufferAttributeKind",
        "PositionKind",
        "bufferAttributeNormals",
        "NormalKind",
        "fromSlices",
        "options",
        "createFromPoints",
        "solidFromSlices",
        "fromObject",
        "obj",
        "canonicalized",
        "fromCompactBinary",
        "bin",
        "class",
        "planes",
        "planeData",
        "numplanes",
        "arrayindex",
        "planeindex",
        "Create",
        "CSGPlane",
        "vertexData",
        "numvertices",
        "vertexindex",
        "numpolygonvertices",
        "polygonvertices",
        "shared",
        "shareds",
        "CSGPolygonShared",
        "numpolygons",
        "numPolygons",
        "numVerticesPerPolygon",
        "polygonVertices",
        "polygonPlaneIndexes",
        "polygonSharedIndexes",
        "polygonindex",
        "getTag",
        "staticTag",
        "parseOption",
        "optionname",
        "defaultvalue",
        "parseOptionAs3DVector",
        "parseOptionAs3DVectorList",
        "res",
        "parseOptionAs2DVector",
        "CSGVector2D",
        "parseOptionAsFloat",
        "Number",
        "isNaN",
        "parseOptionAsInt",
        "parseOptionAsBool",
        "cube",
        "corner1",
        "corner2",
        "plus",
        "times",
        "minus",
        "info",
        "falg0",
        "falg1",
        "falg2",
        "facecenters",
        "CSGConnector",
        "sphere",
        "xvector",
        "yvector",
        "zvector",
        "resolution",
        "defaultResolution3D",
        "axes",
        "unit",
        "prevcylinderpoint",
        "qresolution",
        "slice1",
        "cylinderpoint",
        "prevcospitch",
        "prevsinpitch",
        "slice2",
        "pitch",
        "cospitch",
        "sinpitch",
        "reverse",
        "facepoint",
        "cylinder",
        "rEnd",
        "rStart",
        "slices",
        "defaultResolution2D",
        "ray",
        "axisZ",
        "axisX",
        "randomNonParallelVector",
        "axisY",
        "start",
        "end",
        "point",
        "stack",
        "slice",
        "out",
        "t0",
        "t1",
        "negated",
        "cylCenter",
        "fptVec",
        "rotate",
        "fptVec90",
        "facepointH",
        "facepointH90",
        "roundedCylinder",
        "defaultnormal",
        "p1",
        "direction",
        "roundedCube",
        "cuberadius",
        "roundradius",
        "Vector3D",
        "innerradius",
        "scale",
        "stretchAtPlane",
        "translate",
        "reTesselated",
        "solve2Linear",
        "u",
        "invdet",
        "polyhedron",
        "pt",
        "faces",
        "face",
        "idx",
        "IsFloat",
        "Infinity",
        "interpolateBetween2DPointsForY",
        "point1",
        "point2",
        "f1",
        "f2",
        "reTesselateCoplanarPolygons",
        "sourcepolygons",
        "destpolygons",
        "EPS",
        "CSGOrthoNormalBasis",
        "polygonvertices2d",
        "polygontopvertexindexes",
        "topy2polygonindexes",
        "ycoordinatetopolygonindexes",
        "ycoordinatebins",
        "poly3d",
        "vertices2d",
        "minindex",
        "miny",
        "maxy",
        "pos2d",
        "to2D",
        "ycoordinatebin",
        "newy",
        "ycoordinates",
        "ycoordinate",
        "sort",
        "activepolygons",
        "prevoutpolygonrow",
        "yindex",
        "newoutpolygonrow",
        "ycoordinate_as_string",
        "polygonindexeswithcorner",
        "activepolygonindex",
        "activepolygon",
        "newleftvertexindex",
        "leftvertexindex",
        "newrightvertexindex",
        "rightvertexindex",
        "nextleftvertexindex",
        "nextrightvertexindex",
        "topleft",
        "topright",
        "bottomleft",
        "bottomright",
        "nextycoordinate",
        "startingpolygonindexes",
        "polygonindex_key",
        "topvertexindex",
        "topleftvertexindex",
        "toprightvertexindex",
        "newactivepolygon",
        "el1",
        "el2",
        "x1",
        "activepolygon_key",
        "outpolygon",
        "leftline",
        "CSGLine2D",
        "fromPoints",
        "rightline",
        "prevoutpolygon",
        "prevcontinuedindexes",
        "matchedindexes",
        "thispolygon",
        "ii",
        "prevpolygon",
        "leftlinecontinues",
        "rightlinecontinues",
        "rightpoints",
        "leftpoints",
        "points2d",
        "concat",
        "point2d",
        "point3d",
        "to3D",
        "vertex3d",
        "union",
        "csgs",
        "Array",
        "_i",
        "unionSub",
        "retesselate",
        "canonicalize",
        "mayOverlap",
        "CSGTree",
        "clipTo",
        "invert",
        "newpolygons",
        "allPolygons",
        "_merge",
        "unionForNonIntersecting",
        "subtract",
        "islast",
        "subtractSub",
        "addPolygons",
        "intersect",
        "intersectSub",
        "flippedpolygons",
        "flipped",
        "transform1",
        "matrix4x4",
        "_transform",
        "ismirror",
        "isMirroring",
        "transformedvertices",
        "transformedplanes",
        "newplane",
        "planetag",
        "newvertices",
        "newvertex",
        "vertextag",
        "expand",
        "expandedShell",
        "contract",
        "expandedshell",
        "Plane",
        "fromNormalAndPoint",
        "onb",
        "midpiece",
        "sectionCut",
        "extrudeInOrthonormalBasis",
        "piece1",
        "cutByPlane",
        "piece2",
        "unionWithThis",
        "extrudevector",
        "extrudedface",
        "extrude",
        "vertexpairs",
        "vertextagpair",
        "prevvertex",
        "prevvertextag",
        "v1",
        "v2",
        "planenormals",
        "vertexpair",
        "startpoint",
        "endpoint",
        "zbase",
        "xbase",
        "ybase",
        "angles",
        "iMax",
        "planenormal",
        "si",
        "co",
        "numangles",
        "prevp1",
        "prevp2",
        "startfacevertices",
        "endfacevertices",
        "skip",
        "vertexmap",
        "vertexobj",
        "xaxis",
        "bestzaxis",
        "bestzaxisorthogonality",
        "crosslength",
        "yaxis",
        "zaxis",
        "CSGFuzzyCSGFactory",
        "getCSG",
        "getPlane",
        "getPolygonShared",
        "tag",
        "retesselayedpolygons",
        "getBounds",
        "cachedBoundingBox",
        "minpoint",
        "maxpoint",
        "bounds",
        "boundingBox",
        "mybounds",
        "otherbounds",
        "planecenter",
        "maxdistance",
        "orthobasis",
        "connectTo",
        "myConnector",
        "otherConnector",
        "mirror",
        "normalrotation",
        "getTransformationTo",
        "setShared",
        "setColor",
        "args",
        "newshared",
        "fromColor",
        "apply",
        "arguments",
        "toCompactBinary",
        "planemap",
        "sharedmap",
        "numshared",
        "sharedtag",
        "Uint32Array",
        "Float64Array",
        "polygonVerticesIndex",
        "sharedindex",
        "verticesArrayIndex",
        "planesArrayIndex",
        "toPointCloud",
        "getTransformationAndInverseTransformationToFlatLying",
        "z0connectorx",
        "z0connectory",
        "isfirst",
        "minheight",
        "maxdotz",
        "besttransformation",
        "bestinversetransformation",
        "planeconnector",
        "pointonplane",
        "transformation",
        "inversetransformation",
        "transformedcsg",
        "dotz",
        "zheight",
        "isbetter",
        "translation",
        "Matrix4x4",
        "getTransformationToFlatLying",
        "lieFlat",
        "projectToOrthoNormalBasis",
        "cags",
        "filter",
        "lengthSquared",
        "cag",
        "sides",
        "CAG",
        "plane1",
        "plane2",
        "cut3d",
        "fixTJunctions",
        "addSide",
        "vertex0",
        "vertex1",
        "starttag",
        "endtag",
        "newsidetag",
        "sidemap",
        "deleteSide",
        "newsideobj",
        "vertextag2sidestart",
        "vertextag2sideend",
        "sidetag",
        "sideobjs",
        "sideobj",
        "indexOf",
        "nextvertexindex",
        "nextvertex",
        "nextvertextag",
        "reversesidetag",
        "ar",
        "sidestocheck",
        "sidemapisempty0",
        "donesomething",
        "sidetagtocheck",
        "_sidetag",
        "donewithside",
        "directionindex",
        "startvertex",
        "endvertex",
        "startvertextag",
        "endvertextag",
        "matchingsides",
        "matchingsideindex",
        "matchingsidetag",
        "matchingside",
        "matchingsidestartvertex",
        "matchingsideendvertex",
        "matchingsidestartvertextag",
        "startpos",
        "endpos",
        "insertionvertextag",
        "insertionvertextagindex",
        "newpolygon",
        "newsidetag1",
        "newsidetag2",
        "newcsg",
        "sidemapisempty1",
        "toTriangles",
        "poly",
        "firstVertex",
        "getFeatures",
        "features",
        "triPoly",
        "getTetraFeatures",
        "reduce",
        "pv",
        "feat",
        "mirrored",
        "mirroring",
        "mirroredX",
        "mirroredY",
        "mirroredZ",
        "f",
        "scaling",
        "rotateX",
        "deg",
        "rotationX",
        "rotateY",
        "rotationY",
        "rotateZ",
        "rotationZ",
        "rotationCenter",
        "rotationAxis",
        "rotation",
        "rotateEulerAngles",
        "beta",
        "gamma",
        "Rz1",
        "Rx",
        "Rz2",
        "T",
        "cAxes",
        "toLowerCase",
        "_elements",
        "unity",
        "rotationPlane",
        "getProjectionMatrix",
        "getInverseProjectionMatrix",
        "nx",
        "ny",
        "nz",
        "this0",
        "this1",
        "this2",
        "this3",
        "this4",
        "this5",
        "this6",
        "this7",
        "this8",
        "this9",
        "this10",
        "this11",
        "this12",
        "this13",
        "this14",
        "this15",
        "m0",
        "m1",
        "m2",
        "m3",
        "m4",
        "m5",
        "m6",
        "m7",
        "m8",
        "m9",
        "m10",
        "m11",
        "m12",
        "m13",
        "m14",
        "m15",
        "rightMultiply1x3Vector",
        "v0",
        "invw",
        "leftMultiply1x3Vector",
        "rightMultiply1x2Vector",
        "leftMultiply1x2Vector",
        "parseFloat",
        "fromVector3Ds",
        "anyPlaneFromVector3Ds",
        "point3",
        "multiply4x4",
        "splitPolygon",
        "type",
        "front",
        "back",
        "EPSILON",
        "thisw",
        "hasfront",
        "hasback",
        "vertexIsBack",
        "MINEPS",
        "isback",
        "frontvertices",
        "backvertices",
        "nextisback",
        "nextpoint",
        "intersectionpoint",
        "splitLineBetweenPoints",
        "intersectionvertex",
        "EPS_SQUARED",
        "labda",
        "intersectWithLine",
        "line3d",
        "intersectWithPlane",
        "CSGLine3D",
        "fromPlanes",
        "signedDistanceToPoint",
        "mirrorPoint",
        "xString",
        "yString",
        "zString",
        "ok",
        "dividedBy",
        "toFixed",
        "arcLengthDivisions",
        "isEmpty",
        "getPoint",
        "optionalTarget",
        "getPointAt",
        "getUtoTmapping",
        "getPoints",
        "divisions",
        "points",
        "getSpacedPoints",
        "getLength",
        "lengths",
        "getLengths",
        "cacheArcLengths",
        "current",
        "cache",
        "last",
        "updateArcLengths",
        "targetArcLength",
        "arcLengths",
        "il",
        "comparison",
        "lengthBefore",
        "getTangent",
        "t2",
        "tangent",
        "pt1",
        "pt2",
        "getTangentAt",
        "computeFrenetFrames",
        "segments",
        "closed",
        "tangents",
        "binormals",
        "mat",
        "MAX_VALUE",
        "tx",
        "ty",
        "tz",
        "makeRotationAxis",
        "Curve",
        "toJSON",
        "data",
        "fromJSON",
        "json",
        "writeString",
        "CullFaceNone",
        "CullFaceBack",
        "CullFaceFront",
        "CullFaceFrontBack",
        "FrontFaceDirectionCW",
        "FrontFaceDirectionCCW",
        "BasicShadowMap",
        "PCFShadowMap",
        "PCFSoftShadowMap",
        "VSMShadowMap",
        "BackSide",
        "DoubleSide",
        "FlatShading",
        "SmoothShading",
        "NoBlending",
        "AddBlending",
        "SubtractBlending",
        "MultiplyBlending",
        "MaximizedBlending",
        "OneOneBlending",
        "PremultipliedBlending",
        "PremultipliedPorterDuffBlending",
        "InterpolateBlending",
        "ScreenModeBlending",
        "OneOneOneOneBlending",
        "AlphaToColorBlending",
        "ReverseOneMinusBlending",
        "SrcDstOneMinusSrcAlphaBlending",
        "OneOneOneZeroBlending",
        "ExclusionBlending",
        "SubtractEquation",
        "ReverseSubtractEquation",
        "MinEquation",
        "MaxEquation",
        "ZeroFactor",
        "OneFactor",
        "SrcColorFactor",
        "OneMinusSrcColorFactor",
        "DstAlphaFactor",
        "OneMinusDstAlphaFactor",
        "DstColorFactor",
        "OneMinusDstColorFactor",
        "SrcAlphaSaturateFactor",
        "ConstantColorFactor",
        "ConstantAlphaFactor",
        "NeverDepth",
        "AlwaysDepth",
        "LessDepth",
        "EqualDepth",
        "GreaterEqualDepth",
        "GreaterDepth",
        "NotEqualDepth",
        "MultiplyOperation",
        "MixOperation",
        "AddOperation",
        "NoToneMapping",
        "LinearToneMapping",
        "ReinhardToneMapping",
        "CineonToneMapping",
        "ACESFilmicToneMapping",
        "CustomToneMapping",
        "UVMapping",
        "CubeReflectionMapping",
        "CubeRefractionMapping",
        "EquirectangularReflectionMapping",
        "EquirectangularRefractionMapping",
        "CubeUVReflectionMapping",
        "CubeUVRefractionMapping",
        "RepeatWrapping",
        "ClampToEdgeWrapping",
        "MirroredRepeatWrapping",
        "NearestNearestFilter",
        "LinearLinearFilter",
        "LinearLinearMipLinearFilter",
        "NearestNearestMipNearestFilter",
        "NearestLinearMipNearestFilter",
        "NearestLinearMipLinearFilter",
        "NearestLinearFilter",
        "NearestNearestMipLinearFilter",
        "LinearNearestMipNearestFilter",
        "LinearNearestMipLinearFilter",
        "LinearLinearMipNearestFilter",
        "LinearNearestFilter",
        "UnsignedByteType",
        "ByteType",
        "ShortType",
        "UnsignedShortType",
        "IntType",
        "UnsignedIntType",
        "FloatType",
        "HalfFloatType",
        "UnsignedShort4444Type",
        "UnsignedShort5551Type",
        "UnsignedShort565Type",
        "UnsignedInt248Type",
        "DepthFormat",
        "DepthStencilFormat",
        "StencilFormat",
        "AlphaFormat",
        "RGBFormat",
        "RGBAFormat",
        "LuminanceFormat",
        "LuminanceAlphaFormat",
        "RGBEFormat",
        "RedFormat",
        "RedIntegerFormat",
        "RGFormat",
        "RGIntegerFormat",
        "RGBIntegerFormat",
        "RGBAIntegerFormat",
        "DoubleType",
        "RGBA4Format",
        "RGB5A1Format",
        "RGB565Format",
        "RGB_S3TC_DXT1_Format",
        "RGBA_S3TC_DXT1_Format",
        "RGBA_S3TC_DXT3_Format",
        "RGBA_S3TC_DXT5_Format",
        "RGB_PVRTC_4BPPV1_Format",
        "RGB_PVRTC_2BPPV1_Format",
        "RGBA_PVRTC_4BPPV1_Format",
        "RGBA_PVRTC_2BPPV1_Format",
        "RGB_ETC1_Format",
        "RGB_ETC2_Format",
        "RGBA_ETC2_EAC_Format",
        "RGBA_ASTC_4x4_Format",
        "RGBA_ASTC_5x4_Format",
        "RGBA_ASTC_5x5_Format",
        "RGBA_ASTC_6x5_Format",
        "RGBA_ASTC_6x6_Format",
        "RGBA_ASTC_8x5_Format",
        "RGBA_ASTC_8x6_Format",
        "RGBA_ASTC_8x8_Format",
        "RGBA_ASTC_10x5_Format",
        "RGBA_ASTC_10x6_Format",
        "RGBA_ASTC_10x8_Format",
        "RGBA_ASTC_10x10_Format",
        "RGBA_ASTC_12x10_Format",
        "RGBA_ASTC_12x12_Format",
        "RGBA_BPTC_Format",
        "SRGB8_ALPHA8_ASTC_4x4_Format",
        "SRGB8_ALPHA8_ASTC_5x4_Format",
        "SRGB8_ALPHA8_ASTC_5x5_Format",
        "SRGB8_ALPHA8_ASTC_6x5_Format",
        "SRGB8_ALPHA8_ASTC_6x6_Format",
        "SRGB8_ALPHA8_ASTC_8x5_Format",
        "SRGB8_ALPHA8_ASTC_8x6_Format",
        "SRGB8_ALPHA8_ASTC_8x8_Format",
        "SRGB8_ALPHA8_ASTC_10x5_Format",
        "SRGB8_ALPHA8_ASTC_10x6_Format",
        "SRGB8_ALPHA8_ASTC_10x8_Format",
        "SRGB8_ALPHA8_ASTC_10x10_Format",
        "SRGB8_ALPHA8_ASTC_12x10_Format",
        "SRGB8_ALPHA8_ASTC_12x12_Format",
        "TriangleStripDrawMode",
        "TriangleFanDrawMode",
        "LinearEncoding",
        "sRGBEncoding",
        "GammaEncoding",
        "RGBEEncoding",
        "LogLuvEncoding",
        "RGBM7Encoding",
        "RGBM16Encoding",
        "RGBDEncoding",
        "BasicDepthPacking",
        "RGBADepthPacking",
        "TangentSpaceNormalMap",
        "ObjectSpaceNormalMap",
        "ZeroStencilOp",
        "ReplaceStencilOp",
        "IncrementStencilOp",
        "DecrementStencilOp",
        "IncrementWrapStencilOp",
        "DecrementWrapStencilOp",
        "InvertStencilOp",
        "NeverStencilFunc",
        "LessStencilFunc",
        "EqualStencilFunc",
        "LessEqualStencilFunc",
        "GreaterStencilFunc",
        "NotEqualStencilFunc",
        "GreaterEqualStencilFunc",
        "StaticDrawUsage",
        "DynamicDrawUsage",
        "StreamDrawUsage",
        "StaticReadUsage",
        "DynamicReadUsage",
        "StreamReadUsage",
        "StaticCopyUsage",
        "DynamicCopyUsage",
        "StreamCopyUsage",
        "ArrayBufferTarget",
        "ElementBufferTarget",
        "UniformBufferTarget",
        "TransformFeedbackTarget",
        "CopyReadTarget",
        "CopyWriteTarget",
        "ReadBuffer",
        "PixelPackBuffer",
        "PixelUnPackBuffer",
        "NoFog",
        "LinerFog",
        "Exp2Fog",
        "_currentFramebuffer",
        "_viewportCached",
        "width",
        "height",
        "getError",
        "_gl",
        "_InitGL",
        "_renderingCanvas",
        "getContext",
        "_creationOptions",
        "_webGLVersion",
        "deleteQuery",
        "pixelStorei",
        "UNPACK_COLORSPACE_CONVERSION_WEBGL",
        "NONE",
        "_initGLContext",
        "_caps",
        "maxTexturesImageUnits",
        "getParameter",
        "MAX_TEXTURE_IMAGE_UNITS",
        "maxCombinedTexturesImageUnits",
        "MAX_COMBINED_TEXTURE_IMAGE_UNITS",
        "maxVertexTextureImageUnits",
        "MAX_VERTEX_TEXTURE_IMAGE_UNITS",
        "maxTextureSize",
        "MAX_TEXTURE_SIZE",
        "maxSamples",
        "MAX_SAMPLES",
        "maxCubemapTextureSize",
        "MAX_CUBE_MAP_TEXTURE_SIZE",
        "maxRenderTextureSize",
        "MAX_RENDERBUFFER_SIZE",
        "maxVertexAttribs",
        "MAX_VERTEX_ATTRIBS",
        "maxVaryingVectors",
        "MAX_VARYING_VECTORS",
        "maxFragmentUniformVectors",
        "MAX_FRAGMENT_UNIFORM_VECTORS",
        "maxVertexUniformVectors",
        "MAX_VERTEX_UNIFORM_VECTORS",
        "parallelShaderCompile",
        "getExtension",
        "standardDerivatives",
        "maxAnisotropy",
        "astc",
        "s3tc",
        "pvrtc",
        "etc1",
        "etc2",
        "textureAnisotropicFilterExtension",
        "uintIndices",
        "fragmentDepthSupported",
        "highPrecisionShaderSupported",
        "timerQuery",
        "canUseTimestampForTimerQuery",
        "drawBuffersExtension",
        "maxMSAASamples",
        "colorBufferFloat",
        "textureFloat",
        "textureHalfFloat",
        "textureHalfFloatRender",
        "textureFloatLinearFiltering",
        "textureFloatRender",
        "textureHalfFloatLinearFiltering",
        "vertexArrayObject",
        "instancedArrays",
        "textureLOD",
        "blendMinMax",
        "multiview",
        "oculusMultiview",
        "depthTextureExtension",
        "_glVersion",
        "VERSION",
        "rendererInfo",
        "_glRenderer",
        "UNMASKED_RENDERER_WEBGL",
        "_glVendor",
        "UNMASKED_VENDOR_WEBGL",
        "_gpuVendor",
        "_identifyGPUVendor",
        "HALF_FLOAT_OES",
        "RGBA16F",
        "RGBA32F",
        "DEPTH24_STENCIL8",
        "getQuery",
        "getQueryEXT",
        "TIMESTAMP_EXT",
        "QUERY_COUNTER_BITS_EXT",
        "MAX_TEXTURE_MAX_ANISOTROPY_EXT",
        "_canRenderToFloatFramebuffer",
        "_canRenderToHalfFloatFramebuffer",
        "drawBuffers",
        "drawBuffersWEBGL",
        "DRAW_FRAMEBUFFER",
        "FRAMEBUFFER",
        "UNSIGNED_INT_24_8",
        "UNSIGNED_INT_24_8_WEBGL",
        "vertexArrayObjectExtension",
        "createVertexArray",
        "createVertexArrayOES",
        "bindVertexArray",
        "bindVertexArrayOES",
        "deleteVertexArray",
        "deleteVertexArrayOES",
        "instanceExtension",
        "drawArraysInstanced",
        "drawArraysInstancedANGLE",
        "drawElementsInstanced",
        "drawElementsInstancedANGLE",
        "vertexAttribDivisor",
        "vertexAttribDivisorANGLE",
        "getShaderPrecisionFormat",
        "vertex_highp",
        "VERTEX_SHADER",
        "HIGH_FLOAT",
        "fragment_highp",
        "FRAGMENT_SHADER",
        "precision",
        "blendMinMaxExtension",
        "MAX",
        "MAX_EXT",
        "MIN",
        "MIN_EXT",
        "_initColorState",
        "_initDepthState",
        "_initStencilState",
        "_initBlendingState",
        "_initCullState",
        "_initTextureState",
        "_initDataBufferState",
        "setScissorTest",
        "scissorTest",
        "enable",
        "SCISSOR_TEST",
        "disable",
        "setDithering",
        "DITHER",
        "setRasterizer",
        "rasterizer",
        "RASTERIZER_DISCARD",
        "_viewport",
        "viewport",
        "clear",
        "color",
        "depth",
        "stencil",
        "gl",
        "bits",
        "COLOR_BUFFER_BIT",
        "DEPTH_BUFFER_BIT",
        "STENCIL_BUFFER_BIT",
        "_canRenderToFramebuffer",
        "NO_ERROR",
        "successful",
        "texture",
        "createTexture",
        "bindTexture",
        "TEXTURE_2D",
        "texImage2D",
        "_getRGBABufferInternalSizedFormat",
        "RGBA",
        "_getWebGLTextureType",
        "texParameteri",
        "TEXTURE_MIN_FILTER",
        "NEAREST",
        "TEXTURE_MAG_FILTER",
        "fb",
        "createFramebuffer",
        "bindFramebuffer",
        "framebufferTexture2D",
        "COLOR_ATTACHMENT0",
        "status",
        "checkFramebufferStatus",
        "FRAMEBUFFER_COMPLETE",
        "readFormat",
        "readType",
        "UNSIGNED_BYTE",
        "buffer",
        "Uint8Array",
        "readPixels",
        "deleteTexture",
        "deleteFramebuffer",
        "FLOAT",
        "UNSIGNED_SHORT_4_4_4_4",
        "UNSIGNED_SHORT_5_5_5_1",
        "UNSIGNED_SHORT_5_6_5",
        "BYTE",
        "SHORT",
        "UNSIGNED_SHORT",
        "INT",
        "UNSIGNED_INT",
        "HALF_FLOAT",
        "_getInternalFormat",
        "format",
        "internalFormat",
        "ALPHA",
        "LUMINANCE",
        "LUMINANCE_ALPHA",
        "RED",
        "RG",
        "RGB",
        "RGBA4",
        "RGB5_A1",
        "RGB565",
        "RED_INTEGER",
        "RG_INTEGER",
        "RGB_INTEGER",
        "RGBA_INTEGER",
        "R8_SNORM",
        "RG8_SNORM",
        "RGB8_SNORM",
        "R8I",
        "RG8I",
        "RGB8I",
        "RGBA8I",
        "RGBA8_SNORM",
        "R8",
        "RG8",
        "RGB8",
        "RGBA8",
        "R8UI",
        "RG8UI",
        "RGB8UI",
        "RGBA8UI",
        "R16I",
        "RG16I",
        "RGB16I",
        "RGBA16I",
        "R16UI",
        "RG16UI",
        "RGB16UI",
        "RGBA16UI",
        "R32I",
        "RG32I",
        "RGB32I",
        "RGBA32I",
        "R32UI",
        "RG32UI",
        "RGB32UI",
        "RGBA32UI",
        "R32F",
        "RG32F",
        "RGB32F",
        "R16F",
        "RG16F",
        "RGB16F",
        "_getRGBAMultiSampleBufferFormat",
        "_getDepthBufferInternalFormat",
        "DEPTH_STENCIL",
        "DEPTH_COMPONENT",
        "STENCIL_INDEX8",
        "DEPTH32F_STENCIL8",
        "DEPTH_COMPONENT24",
        "DEPTH_COMPONENT16",
        "DEPTH_COMPONENT32F",
        "deletePipelineContext",
        "pipelineContext",
        "program",
        "deleteProgram",
        "_ConcatenateShader",
        "defines",
        "shaderVersion",
        "_compileShader",
        "_compileRawShader",
        "WebGLEngine",
        "shader",
        "createShader",
        "shaderSource",
        "compileShader",
        "_getShaderSource",
        "getShaderSource",
        "createShaderProgram",
        "vertexCode",
        "fragmentCode",
        "transformFeedbackVaryings",
        "vertexShader",
        "fragmentShader",
        "_createShaderProgram",
        "shaderProgram",
        "createProgram",
        "attachShader",
        "linkProgram",
        "isParallelCompiled",
        "_finalizePipelineContext",
        "_preparePipelineContext",
        "vertexSourceCode",
        "fragmentSourceCode",
        "_isRenderingStateCompiled",
        "getProgramParameter",
        "COMPLETION_STATUS_KHR",
        "_executeWhenRenderingStateIsCompiled",
        "action",
        "oldHandler",
        "onCompiled",
        "LINK_STATUS",
        "error",
        "getShaderParameter",
        "COMPILE_STATUS",
        "getShaderInfoLog",
        "vertexCompilationError",
        "fragmentCompilationError",
        "getProgramInfoLog",
        "programLinkError",
        "validateShaderPrograms",
        "validateProgram",
        "VALIDATE_STATUS",
        "programValidationError",
        "deleteShader",
        "getUniforms",
        "uniformsNames",
        "results",
        "getUniformLocation",
        "getAttributes",
        "attributesNames",
        "getAttribLocation",
        "setInt",
        "uniform",
        "uniform1i",
        "setIntArray",
        "uniform1iv",
        "setIntArray2",
        "uniform2iv",
        "setIntArray3",
        "uniform3iv",
        "setIntArray4",
        "uniform4iv",
        "setArray",
        "uniform1fv",
        "setArray2",
        "uniform2fv",
        "setArray3",
        "uniform3fv",
        "setArray4",
        "uniform4fv",
        "setMatrices",
        "matrices",
        "uniformMatrix4fv",
        "setMatrix3x3",
        "uniformMatrix3fv",
        "setMatrix2x2",
        "uniformMatrix2fv",
        "setFloat",
        "uniform1f",
        "setFloat2",
        "uniform2f",
        "setFloat3",
        "uniform3f",
        "setFloat4",
        "uniform4f",
        "BaseEngine",
        "fromAngle",
        "fromAngleRadians",
        "fromAngleDegrees",
        "toVector3D",
        "angleRadians",
        "angleDegrees",
        "_position",
        "scene",
        "parent",
        "_maskLayers",
        "VisibleLayers",
        "_color",
        "_castShadow",
        "_intensity",
        "enableAll",
        "addLight",
        "canAffectMesh",
        "test",
        "lightLayers",
        "TransformObject",
        "Light",
        "_w",
        "setW",
        "setAxisAngleFromQuaternion",
        "setAxisAngleFromRotationMatrix",
        "isMatrix4",
        "te",
        "m21",
        "m22",
        "m23",
        "m31",
        "m32",
        "m33",
        "xx",
        "yy",
        "zz",
        "xy",
        "xz",
        "yz",
        "getW",
        "getElementIndex",
        "column",
        "row",
        "_identityReadOnly",
        "n11",
        "n12",
        "n13",
        "n14",
        "n21",
        "n22",
        "n23",
        "n24",
        "n31",
        "n32",
        "n33",
        "n34",
        "n41",
        "n42",
        "n43",
        "n44",
        "isIdentity",
        "IDENTITY",
        "identity",
        "me",
        "copyPosition",
        "getElement",
        "setElement",
        "getColumn",
        "vec4",
        "startIndex",
        "setColumn",
        "getRow",
        "setRow",
        "getScale",
        "getTranslation",
        "getRotationMatrix3",
        "getRotationMatrix4",
        "scaleX",
        "scaleY",
        "scaleZ",
        "setFromEulerAngles",
        "ex",
        "ey",
        "ez",
        "s1",
        "c1",
        "s2",
        "c2",
        "s3",
        "c3",
        "getEulerAngles",
        "halfPi",
        "transformPoint",
        "transformVector3",
        "transformVector4",
        "extractBasis",
        "xAxis",
        "yAxis",
        "zAxis",
        "makeBasis",
        "makeRotationFromEuler",
        "order",
        "EulerOrder",
        "XYZ",
        "ae",
        "af",
        "be",
        "bf",
        "YXZ",
        "ce",
        "cf",
        "de",
        "df",
        "ZXY",
        "ZYX",
        "YZX",
        "ac",
        "ad",
        "bc",
        "bd",
        "XZY",
        "makeRotationFromQuaternion",
        "compose",
        "ZERO",
        "ONE",
        "lookAt",
        "eye",
        "target",
        "up",
        "inverse",
        "a00",
        "a01",
        "a02",
        "a03",
        "a10",
        "a11",
        "a12",
        "a13",
        "a20",
        "a21",
        "a22",
        "a23",
        "a30",
        "a31",
        "a32",
        "a33",
        "b00",
        "b01",
        "b02",
        "b03",
        "b04",
        "b05",
        "b06",
        "b07",
        "b08",
        "b09",
        "b10",
        "b11",
        "det",
        "invDet",
        "multiplyMatrices",
        "premultiply",
        "aMat",
        "bMat",
        "a14",
        "a24",
        "a34",
        "a41",
        "a42",
        "a43",
        "a44",
        "b12",
        "b13",
        "b14",
        "b21",
        "b22",
        "b23",
        "b24",
        "b31",
        "b32",
        "b33",
        "b34",
        "b41",
        "b42",
        "b43",
        "b44",
        "multiplyMatrix3",
        "left0",
        "left1",
        "left2",
        "left4",
        "left5",
        "left6",
        "left8",
        "left9",
        "left10",
        "right0",
        "right1",
        "right2",
        "right4",
        "right5",
        "right6",
        "right8",
        "right9",
        "right10",
        "column0Row0",
        "column0Row1",
        "column0Row2",
        "column1Row0",
        "column1Row1",
        "column1Row2",
        "column2Row0",
        "column2Row1",
        "column2Row2",
        "multiplyScalarVector",
        "determinant",
        "transpose",
        "tmp",
        "setPositionXYZ",
        "setPositionVector",
        "setScaleXYZ",
        "setScaleVector",
        "getInverse",
        "t11",
        "t12",
        "t13",
        "t14",
        "detInv",
        "translateXYZ",
        "px",
        "py",
        "pz",
        "translateVector",
        "scaleXYZ",
        "scaleVector",
        "getMaxScaleOnAxis",
        "scaleXSq",
        "scaleYSq",
        "scaleZSq",
        "makeTranslationXYZ",
        "makeTranslationVector",
        "makeRotationX",
        "makeRotationY",
        "makeRotationZ",
        "makeScaleXYZ",
        "makeScaleVector",
        "makeShearXYZ",
        "makeShearVector",
        "makeMatrix3",
        "wx",
        "wy",
        "wz",
        "decompose",
        "invSX",
        "invSY",
        "invSZ",
        "setFromRotationMatrix",
        "makePerspective",
        "top",
        "bottom",
        "near",
        "far",
        "makeInfinitePerspective",
        "makeOrthographic",
        "h",
        "makeViewportTransformation",
        "nearDepthRange",
        "farDepthRange",
        "halfWidth",
        "halfHeight",
        "halfDepth",
        "column3Row0",
        "column3Row1",
        "column3Row2",
        "makeView",
        "applyToBufferAttribute",
        "setXYZ",
        "setFromRotationX",
        "cosAngle",
        "sinAngle",
        "setFromRotationY",
        "setFromRotationZ",
        "setFromMatrix4",
        "vec3",
        "makeScale",
        "g",
        "getNormalMatrix",
        "setUvTransform",
        "cx",
        "cy",
        "IntervalsType",
        "staticQuery",
        "interval0",
        "interval1",
        "numIntersections",
        "overlap",
        "isPoint",
        "Intervals",
        "setFromPoints",
        "optionalCenter",
        "getCenter",
        "maxRadiusSq",
        "empty",
        "makeEmpty",
        "containsPoint",
        "containsSphere",
        "containsBox",
        "box",
        "getBoundingSphere",
        "distanceToPoint",
        "intersectsSphere",
        "radiusSum",
        "intersectSphere",
        "sphere1",
        "c1mC0",
        "sqrLen",
        "r0",
        "r1",
        "rSum",
        "rSumSqr",
        "SphereSphereIntersectType",
        "POINT",
        "rDif",
        "rDifSqr",
        "SPHERE",
        "SPHERE1_IN_SPHERE0",
        "SPHERE0_IN_SPHERE1_POINT",
        "SPHERE1_IN_SPHERE0_POINT",
        "circle",
        "intersecsTriangle",
        "triangle",
        "intersectTriangle",
        "closestPoint",
        "clampPoint",
        "deltaLengthSq",
        "getBoundingBox",
        "expandByScalar",
        "_vector3",
        "_vector2",
        "itemSize",
        "normalized",
        "DataTypeFormat",
        "dataTypeFromTypedArray",
        "usage",
        "updateRange",
        "_glBuffer",
        "setUsage",
        "typedArrayFromDataType",
        "copyAt",
        "index1",
        "index2",
        "copyArray",
        "copyColorRGBsArray",
        "colors",
        "copyColorRGBAsArray",
        "copyVector2sArray",
        "vectors",
        "vector",
        "copyVector3sArray",
        "copyVector4sArray",
        "setXY",
        "transformDirection",
        "W",
        "setXYZW",
        "serializeBinary",
        "writeUint8",
        "writeBoolean",
        "writeUint32",
        "writeInt8",
        "writeInt16",
        "writeUint16",
        "writeInt32",
        "writeFloat64",
        "deserializeBinary",
        "readUint8",
        "readBoolean",
        "readUint32",
        "readString",
        "Int8Array",
        "readInt8",
        "readInt16",
        "Int16Array",
        "readUint16",
        "Int32Array",
        "readInt32",
        "readFloat64",
        "encoding",
        "mapping",
        "unpackAlignment",
        "generateMipmaps",
        "premultiplyAlpha",
        "_wrapU",
        "_wrapV",
        "_wrapR",
        "_filter",
        "_anisotropy",
        "_flipY",
        "_offset",
        "_repeat",
        "_center",
        "_rotation",
        "_needsUpdateMatrix",
        "_glTexture",
        "releaseGLTexture",
        "Texture",
        "repeat",
        "flipY",
        "wrapU",
        "wrapV",
        "wrapR",
        "anisotropy",
        "isPure",
        "_quaternion",
        "_scale",
        "_matrixWorld",
        "_pivotMatrix",
        "_matrixWorldInverse",
        "_pivotMatrixInverse",
        "_normalMatrix",
        "_modelViewMatrix",
        "_modelViewProjectionMatrix",
        "_transModelViewMatrix",
        "_transModelViewMatrixInverse",
        "_modelViewRelativeMatrix",
        "_modelViewProjectionRelativeMatrix",
        "_lastPosition",
        "_lastRotation",
        "_lastQuaternion",
        "_lastScale",
        "_lastMatrix",
        "_lastMatrixWorld",
        "_lastPivotMatrix",
        "_tempPosition",
        "_tempRotation",
        "_tempQuaternion",
        "_tempScale",
        "_tempMatrix",
        "_tempMatrixWorld",
        "_tempPivotMatrix",
        "_usePivotMatrix",
        "_matrixNeedsUpdate",
        "_matrixWorldNeedsUpdate",
        "_onPositionChange",
        "_onRotationChange",
        "_onQuaternionChange",
        "_onScaleChange",
        "_onMatrixChange",
        "_onMatrixWorldChange",
        "_onPivotMatrixChange",
        "addTransform",
        "_visibleLayers",
        "notify",
        "onRotationChanged",
        "setFromQuaternion",
        "onQuaternionChanged",
        "onPositionChanged",
        "onScaleChanged",
        "onMatrixChanged",
        "onMatrixWorldChanged",
        "oldValue",
        "newValue",
        "applyMatrix",
        "setRotationFromAxisAngle",
        "setRotationFromEuler",
        "setRotationFromMatrix",
        "setRotationFromQuaternion",
        "rotateOnAxis",
        "rotateOnWorldAxis",
        "translateOnAxis",
        "translateX",
        "translateY",
        "translateZ",
        "setPosition",
        "setScale",
        "setWorldPosition",
        "_parent",
        "setWorldRotation",
        "localToWorld",
        "worldToLocal",
        "getPivotPosition",
        "getWorldPivotPosition",
        "getWorldPosition",
        "getWorldQuaternion",
        "getWorldRotaion",
        "getWorldScale",
        "getWorldDirection",
        "getLocalUp",
        "dir",
        "getLocalDown",
        "getLocalForward",
        "getLocalBackward",
        "getLocalLeft",
        "getLocalRight",
        "getWorldUp",
        "getWorldDown",
        "getWorldForward",
        "getWorldBackward",
        "getWorldLeft",
        "getWorldRight",
        "getHeading",
        "getPitch",
        "getRoll",
        "force",
        "pivotScaleM",
        "pivotRotationM",
        "pivotMatrixInverse",
        "updateMatrixWorld",
        "children",
        "updateWorldMatrix",
        "updateParents",
        "updateChildren",
        "_scene",
        "AbstractObject",
        "_tempArray1",
        "_tempArray2",
        "setFromArray",
        "minX",
        "minY",
        "minZ",
        "maxX",
        "maxY",
        "maxZ",
        "setFromBufferAttribute",
        "expandByPoint",
        "setFromCenterAndSize",
        "halfSize",
        "setFromObject",
        "expandByObject",
        "getSize",
        "getExtent",
        "expandByVector",
        "boxSphere",
        "translates",
        "offset1",
        "offset2",
        "scales",
        "scalar1",
        "scalar2",
        "multiplies",
        "distanceSqToPoint",
        "boxCenter",
        "boxExtent",
        "closest",
        "sqDistance",
        "delta",
        "distanceSqToBox",
        "closestPoint0",
        "closestPoint1",
        "sqrDistance",
        "intr0",
        "intr1",
        "iiResult",
        "distanceToBox",
        "distanceSqToOBB",
        "parameter",
        "box1",
        "K",
        "extent",
        "rotDelta",
        "twoExtent",
        "q",
        "U0",
        "U1",
        "U2",
        "M",
        "mLCP",
        "LCPSolver",
        "solve",
        "queryIsSuccessful",
        "numLCPIterations",
        "getNumIterations",
        "boxParameter",
        "box0Parameter",
        "box1Parameter",
        "diff",
        "NaN",
        "distanceToOBB",
        "intersectsBox",
        "intersectBox",
        "intersectsOBB",
        "C0",
        "E0",
        "C1",
        "A1",
        "E1",
        "existsParallelPair",
        "D",
        "dot01",
        "absDot01",
        "_hslA",
        "_hslB",
        "hue2rgb",
        "sRGBToLinear",
        "linearToSRGB",
        "setRGB",
        "setHex",
        "setStyle",
        "hex",
        "setHSL",
        "style",
        "exec",
        "components",
        "parseInt",
        "charAt",
        "setColorName",
        "_colorKeywords",
        "copyGammaToLinear",
        "gammaFactor",
        "copyLinearToGamma",
        "safeInverse",
        "convertGammaToLinear",
        "convertLinearToGamma",
        "copySRGBToLinear",
        "copyLinearToSRGB",
        "convertSRGBToLinear",
        "convertLinearToSRGB",
        "getHex",
        "getHexString",
        "getHSL",
        "saturation",
        "hue",
        "lightness",
        "getStyle",
        "offsetHSL",
        "addColors",
        "color1",
        "color2",
        "lerpHSL",
        "ALICEBLUE",
        "ANTIQUEWHITE",
        "AQUA",
        "AQUAMARINE",
        "AZURE",
        "BEIGE",
        "BISQUE",
        "BLACK",
        "BLANCHEDALMOND",
        "BLUE",
        "BLUEVIOLET",
        "BROWN",
        "BURLYWOOD",
        "CADETBLUE",
        "CHARTREUSE",
        "CHOCOLATE",
        "CORAL",
        "CORNFLOWERBLUE",
        "CORNSILK",
        "CRIMSON",
        "CYAN",
        "DARKBLUE",
        "DARKCYAN",
        "DARKGOLDENROD",
        "DARKGRAY",
        "DARKGREEN",
        "DARKGREY",
        "DARKKHAKI",
        "DARKMAGENTA",
        "DARKOLIVEGREEN",
        "DARKORANGE",
        "DARKORCHID",
        "DARKRED",
        "DARKSALMON",
        "DARKSEAGREEN",
        "DARKSLATEBLUE",
        "DARKSLATEGRAY",
        "DARKSLATEGREY",
        "DARKTURQUOISE",
        "DARKVIOLET",
        "DEEPPINK",
        "DEEPSKYBLUE",
        "DIMGRAY",
        "DIMGREY",
        "DODGERBLUE",
        "FIREBRICK",
        "FLORALWHITE",
        "FORESTGREEN",
        "FUCHSIA",
        "GAINSBORO",
        "GHOSTWHITE",
        "GOLD",
        "GOLDENROD",
        "GRAY",
        "GREEN",
        "GREENYELLOW",
        "GREY",
        "HONEYDEW",
        "HOTPINK",
        "INDIANRED",
        "INDIGO",
        "IVORY",
        "KHAKI",
        "LAVENDER",
        "LAVENDAR_BLUSH",
        "LAWNGREEN",
        "LEMONCHIFFON",
        "LIGHTBLUE",
        "LIGHTCORAL",
        "LIGHTCYAN",
        "LIGHTGOLDENRODYELLOW",
        "LIGHTGRAY",
        "LIGHTGREEN",
        "LIGHTGREY",
        "LIGHTPINK",
        "LIGHTSEAGREEN",
        "LIGHTSKYBLUE",
        "LIGHTSLATEGRAY",
        "LIGHTSLATEGREY",
        "LIGHTSTEELBLUE",
        "LIGHTYELLOW",
        "LIME",
        "LIMEGREEN",
        "LINEN",
        "MAGENTA",
        "MAROON",
        "MEDIUMAQUAMARINE",
        "MEDIUMBLUE",
        "MEDIUMORCHID",
        "MEDIUMPURPLE",
        "MEDIUMSEAGREEN",
        "MEDIUMSLATEBLUE",
        "MEDIUMSPRINGGREEN",
        "MEDIUMTURQUOISE",
        "MEDIUMVIOLETRED",
        "MIDNIGHTBLUE",
        "MINTCREAM",
        "MISTYROSE",
        "MOCCASIN",
        "NAVAJOWHITE",
        "NAVY",
        "OLDLACE",
        "OLIVE",
        "OLIVEDRAB",
        "ORANGE",
        "ORANGERED",
        "ORCHID",
        "PALEGOLDENROD",
        "PALEGREEN",
        "PALETURQUOISE",
        "PALEVIOLETRED",
        "PAPAYAWHIP",
        "PEACHPUFF",
        "PERU",
        "PINK",
        "PLUM",
        "POWDERBLUE",
        "PURPLE",
        "ROSYBROWN",
        "ROYALBLUE",
        "SADDLEBROWN",
        "SALMON",
        "SANDYBROWN",
        "SEAGREEN",
        "SEASHELL",
        "SIENNA",
        "SILVER",
        "SKYBLUE",
        "SLATEBLUE",
        "SLATEGRAY",
        "SLATEGREY",
        "SNOW",
        "SPRINGGREEN",
        "STEELBLUE",
        "TAN",
        "TEAL",
        "THISTLE",
        "TOMATO",
        "TURQUOISE",
        "VIOLET",
        "WHEAT",
        "WHITESMOKE",
        "YELLOW",
        "YELLOWGREEN",
        "aX",
        "aY",
        "xRadius",
        "yRadius",
        "aStartAngle",
        "aEndAngle",
        "aClockwise",
        "aRotation",
        "twoPi",
        "deltaAngle",
        "samePoints",
        "EllipseCurve",
        "writeVector2",
        "readVector2",
        "BezierCurveFunc",
        "QuadraticBezierP0",
        "k",
        "QuadraticBezierP1",
        "QuadraticBezierP2",
        "CubicBezierP0",
        "CubicBezierP1",
        "CubicBezierP2",
        "CubicBezierP3",
        "CatmullRom",
        "p0",
        "p3",
        "QuadraticBezier",
        "CubicBezier",
        "interpolate",
        "other",
        "fnSortByIndex",
        "defaultShared",
        "verticesConvex",
        "prevprevpos",
        "prevpos",
        "isConvexPoint",
        "prevpoint",
        "isStrictlyConvexPoint",
        "getSignedVolume",
        "signedVolume",
        "getArea",
        "polygonArea",
        "feature",
        "offsetvector",
        "polygon1",
        "polygon2",
        "sidefacepoints",
        "nexti",
        "sidefacepolygon",
        "boundingSphere",
        "cachedBoundingSphere",
        "middle",
        "fromPointsNoCheck",
        "area",
        "fnCallback",
        "prev",
        "numSlices",
        "bLoop",
        "Boolean",
        "loop",
        "numslices",
        "callback",
        "_addWalls",
        "every",
        "unshift",
        "walls",
        "bFlipped",
        "bottomPoints",
        "topPoints",
        "len",
        "iTopLen",
        "iBotLen",
        "iExtra",
        "bMoreTops",
        "bMoreBottoms",
        "aMin",
        "secondPoint",
        "getTriangle",
        "pointA",
        "pointB",
        "pointC",
        "bpoint",
        "tpoint",
        "iB",
        "iT",
        "shift",
        "fromSides",
        "numpoints",
        "CAGVertex",
        "CAGSide",
        "isSelfIntersecting",
        "fromFakeCSG",
        "_fromFakePolygon",
        "linesIntersect",
        "p0start",
        "p0end",
        "p1start",
        "p1end",
        "alphas",
        "rectangle",
        "rswap",
        "roundedRectangle",
        "maxroundradius",
        "rect",
        "numsides",
        "sideVertexIndices",
        "sideindex",
        "vertexindex0",
        "vertexindex1",
        "_toCSGWall",
        "z0",
        "z1",
        "toPolygon3D",
        "_toVector3DPairs",
        "pairs",
        "pair",
        "_toPlanePolygons",
        "origin",
        "defaultAxis",
        "defaultNormal",
        "thisConnector",
        "axisVector",
        "normalVector",
        "toConnector",
        "csgshell",
        "csgplane",
        "_toWallPolygons",
        "toConnector1",
        "toConnector2",
        "toCag",
        "vps1",
        "vps2",
        "vp1",
        "newsides",
        "debug",
        "side0",
        "side1",
        "pointmap",
        "dl",
        "shellpoints",
        "newcag",
        "step",
        "angle1",
        "angle2",
        "pcenter",
        "end1",
        "end2",
        "fullcircle",
        "numsteps",
        "orthonormalbasis",
        "extruded",
        "extrudeInPlane",
        "axis1",
        "axis2",
        "GetCartesian",
        "offsetVector",
        "twistangle",
        "twiststeps",
        "rotateExtrude",
        "axisV",
        "normalV",
        "connS",
        "connE",
        "connT2",
        "connT1",
        "check",
        "errors",
        "pointcount",
        "mappoint",
        "err",
        "CAGFuzzyFactory",
        "getCAG",
        "sidevertexindicesindex",
        "getOutlinePaths",
        "sideTagToSideMap",
        "startVertexTagToSideTagMap",
        "paths",
        "startsidetag",
        "aVertexTag",
        "sidesForThisVertex",
        "connectedVertexPoints",
        "thisside",
        "nextpossiblesidetags",
        "nextsideindex",
        "bestangle",
        "thisangle",
        "nextpossiblesidetag",
        "angledif",
        "nextsidetag",
        "path",
        "CSGPath2D",
        "overCutInsideCorners",
        "cutterradius",
        "from",
        "to",
        "cutouts",
        "pointtag",
        "pointobj",
        "fromcoord",
        "pointcoord",
        "tocoord",
        "midvector",
        "circlesegmentangle",
        "radiuscorrected",
        "circlecenter",
        "startangle",
        "deltaangle",
        "_tempVector1",
        "_tempVector2",
        "_tempBox1",
        "_tempBox2",
        "geometryPoolId",
        "id",
        "indexAttrbute",
        "morphAttributes",
        "morphTargetsRelative",
        "groups",
        "drawRange",
        "version",
        "reference",
        "getIndexAttrbute",
        "setIndexAttrbute",
        "isArray",
        "ArrayUtils",
        "arrayMax",
        "UInt32BufferAttribute",
        "UInt16BufferAttribute",
        "isEmptyAttribute",
        "keys",
        "haveAttribute",
        "IndicesKind",
        "getAttribute",
        "removeAttribute",
        "forceUpdateAttributes",
        "addGroup",
        "materialIndex",
        "clearGroups",
        "sortGroupByMaterial",
        "sortGroupByStart",
        "setDrawRange",
        "computeBoundingBox",
        "computeBoundingSphere",
        "moveToOrigin",
        "Float32BufferAttribute",
        "morphAttributesPosition",
        "morphAttribute",
        "jl",
        "computeVertexNormals",
        "indexAttribute",
        "positionAttribute",
        "normalAttribute",
        "pA",
        "pB",
        "pC",
        "nA",
        "nB",
        "nC",
        "cb",
        "ab",
        "vA",
        "vB",
        "vC",
        "normalizeNormals",
        "mergeAttributes",
        "attributeArray1",
        "attribute2",
        "attributeArray2",
        "attributeOffset",
        "toNonIndexed",
        "convertBufferAttribute",
        "indices",
        "array2",
        "createTypedArrayFromDataType",
        "geometry2",
        "indicesAttribute",
        "newAttribute",
        "morphArray",
        "group",
        "interleavedBufferClone",
        "cacheKey",
        "Map",
        "arrayBuffers",
        "interleavedBuffers",
        "_order",
        "setFromVector3",
        "reorder",
        "newOrder",
        "slerp",
        "qa",
        "qb",
        "qm",
        "slerpFlat",
        "dst",
        "dstOffset",
        "src0",
        "srcOffset0",
        "src1",
        "srcOffset1",
        "x0",
        "y0",
        "w0",
        "y1",
        "w1",
        "sqrSin",
        "tDir",
        "multiplyQuaternionsFlat",
        "addQuaternions",
        "aQuat",
        "bQuat",
        "halfAngle",
        "trace",
        "setFromUnitVectors",
        "vFrom",
        "vTo",
        "rotateTowards",
        "conjugate",
        "multiplyQuaternions",
        "qax",
        "qay",
        "qaz",
        "qaw",
        "qbx",
        "qby",
        "qbz",
        "qbw",
        "cosHalfTheta",
        "sqrSinHalfTheta",
        "sinHalfTheta",
        "halfTheta",
        "ratioA",
        "ratioB",
        "_tempVec1",
        "_tempVec2",
        "_tempVec3",
        "_tempVec4",
        "_tempVec5",
        "_tempVec6",
        "_tempVec7",
        "Line3",
        "closestPointToPoint",
        "directionDistance",
        "lineClosest",
        "lineParameter",
        "distanceSqToRay",
        "s0",
        "b0",
        "distanceToRay",
        "distanceSqToSegment",
        "segment",
        "segCenter",
        "segDirection",
        "segExtent",
        "getCenteredForm",
        "extDet",
        "distanceToSegment",
        "distanceSqToLine",
        "line",
        "line1",
        "distanceToLine",
        "distanceSqToTriangle",
        "edge0",
        "edge1",
        "NdD",
        "basis",
        "UdE0",
        "UdE1",
        "UdDiff",
        "VdE0",
        "VdE1",
        "VdDiff",
        "triangleParameter",
        "i0",
        "i1",
        "LineSegment3",
        "setCenteredForm",
        "lsResult",
        "segmentSqDistance",
        "distanceToTriangle",
        "DTBCaseNoZeros",
        "DTBCase0",
        "DTBCase00",
        "DTBCase000",
        "intersectsTriangle",
        "sign",
        "edge2",
        "DdN",
        "DdQxE2",
        "DdE1xQ",
        "inv",
        "triangleBary",
        "a0",
        "lineOrigin",
        "lineDirection",
        "discr",
        "intersectsPlane",
        "intersectPlane",
        "signedDistance",
        "WxD",
        "absWdU",
        "numPoints",
        "clip",
        "denom",
        "numer",
        "intersectOBB",
        "_tempPpE",
        "DTBFace",
        "i2",
        "pnt",
        "PmE",
        "lenSqr",
        "param",
        "PpE",
        "prodDxPy",
        "invLSqr",
        "PmE0",
        "PmE1",
        "prod0",
        "prod1",
        "PpE1",
        "PpE0",
        "LineCurve",
        "intPoint",
        "weight",
        "SplineCurve",
        "rightvector",
        "planeorigin",
        "xaxisid",
        "yaxisid",
        "axisid",
        "Z0Plane",
        "line3Dto2D",
        "a2d",
        "b2d",
        "line2Dto3D",
        "line2d",
        "a3d",
        "b3d",
        "rightpoint_transformed",
        "origin_transformed",
        "activeIfNoneActive",
        "Viewport",
        "_frustum",
        "Frustum",
        "_projectionMatrix",
        "_projectionMatrixInverse",
        "_viewProjectionMatrix",
        "_viewProjectionMatrixInverse",
        "_needsUpdateCameraMatrix",
        "addCamera",
        "activeCamera",
        "updateProjectionMatrix",
        "Camera",
        "PlanePolygonIntersectType",
        "LCPResultType",
        "mVarBasic",
        "mVarNonbasic",
        "mNumCols",
        "mAugmented",
        "mQMin",
        "mMinRatio",
        "mRatio",
        "mPoly",
        "mDimension",
        "INVALID_INPUT",
        "zero",
        "one",
        "mMaxIterations",
        "mNumIterations",
        "mZero",
        "mOne",
        "setMaxIterations",
        "maxIterations",
        "getAugmentedIndex",
        "makeZero",
        "setAugmentedValueByIndex",
        "copyAugmented",
        "basic",
        "lessThanAugmented",
        "lessThanZero",
        "HAS_TRIVIAL_SOLUTION",
        "setAugmentedValue",
        "complementary",
        "tuple",
        "driving",
        "getAugmentedValue",
        "nextDriving",
        "getAugmentedValueByIndex",
        "HAS_NONTRIVIAL_SOLUTION",
        "factor",
        "multiplyAugmented",
        "NO_SOLUTION",
        "invDenom",
        "multiplier",
        "FAILED_TO_CONVERGE",
        "col",
        "poly0",
        "poly1",
        "lessThanZeroAugmented",
        "product",
        "setRGBA",
        "constant",
        "setFromXYZW",
        "setFromVector4",
        "setFromNormalAndCoplanarPoint",
        "setFromCoplanarPoints",
        "inverseNormalLength",
        "projectPoint",
        "coplanarPoint",
        "normalMatrix",
        "referencePoint",
        "distanceToSphere",
        "cDiff",
        "isLine",
        "c0",
        "intersectsPolygon",
        "numVertices",
        "numPositive",
        "numNegative",
        "numZero",
        "intersectPolygon",
        "INVALID_POLYGON",
        "positivePolygon",
        "negativePolygon",
        "zeroHeightIndices",
        "maxPosHeight",
        "maxNegHeight",
        "maxPosIndex",
        "maxNegIndex",
        "SPLIT",
        "doSwap",
        "positiveList",
        "end0",
        "end0prev",
        "end1next",
        "negativeList",
        "omt",
        "V",
        "POSITIVE_SIDE_STRICT",
        "POSITIVE_SIDE_VERTEX",
        "POSITIVE_SIDE_EDGE",
        "NEGATIVE_SIDE_STRICT",
        "NEGATIVE_SIDE_VERTEX",
        "NEGATIVE_SIDE_EDGE",
        "CONTAINED",
        "arg",
        "isCircle",
        "isInterior",
        "mA",
        "mB",
        "mC",
        "mD",
        "mE",
        "mF00",
        "mF10",
        "mF01",
        "mF11",
        "mG00",
        "mG10",
        "mG01",
        "mG11",
        "distanceSq",
        "at",
        "closestPointToPointParameter",
        "clampToLine",
        "startEnd2",
        "segmentClosest",
        "segmentParameter",
        "sqrLength",
        "P0",
        "P1",
        "Q0",
        "Q1",
        "P1mP0",
        "Q1mQ0",
        "P0mQ0",
        "ssparameter",
        "sValue",
        "getClampedRoot",
        "classify",
        "edge",
        "computeIntersection",
        "h0",
        "h1",
        "omz",
        "computeMinimumParameters",
        "ltResult",
        "lbResult",
        "segOrigin",
        "QdN",
        "extDdN",
        "tmp0",
        "tmp1",
        "segInterval",
        "sdistance0",
        "sdistance1",
        "intersectsBox3",
        "transformedSegment",
        "tmpOrigin",
        "tmpDirection",
        "slope",
        "Line2",
        "intersectsLine",
        "intersectLine",
        "D0DotPerpD1",
        "line0Parameter",
        "line1Parameter",
        "invD0DotPerpD1",
        "diffDotPerpD0",
        "diffNDotPerpD1",
        "intersectsSegment",
        "llResult",
        "intersectSegment",
        "intersectsRay",
        "intersectRay",
        "rayParameter",
        "v3",
        "CubicBezierCurve",
        "LineCurve3",
        "QuadraticBezierCurve",
        "currentPoint",
        "moveTo",
        "lineTo",
        "curve",
        "curves",
        "quadraticCurveTo",
        "aCPx",
        "aCPy",
        "bezierCurveTo",
        "aCP1x",
        "aCP1y",
        "aCP2x",
        "aCP2y",
        "splineThru",
        "pts",
        "npts",
        "arc",
        "aRadius",
        "absarc",
        "absellipse",
        "ellipse",
        "firstPoint",
        "lastPoint",
        "Path",
        "CurvePath",
        "byteArray",
        "byteCount",
        "byteIndex",
        "stringFromCharCode",
        "String",
        "fromCharCode",
        "ucs2decode",
        "string",
        "extra",
        "output",
        "counter",
        "charCodeAt",
        "checkScalarValue",
        "codePoint",
        "createByte",
        "encodeCodePoint",
        "symbol",
        "readContinuationByte",
        "continuationByte",
        "decodeSymbol",
        "byte1",
        "encode",
        "codePoints",
        "byteString",
        "decode",
        "ucs2encode",
        "mask",
        "channel",
        "toggle",
        "disableAll",
        "layers",
        "vert1Indices",
        "pts2d",
        "newp1",
        "newp2",
        "_point",
        "mabsx",
        "mabsy",
        "mabsz",
        "newpoint",
        "closestPointOnLine",
        "closestpoint",
        "deleteBuffer",
        "TextureRaw",
        "Int8BufferAttribute",
        "UInt8BufferAttribute",
        "Uint8ClampedArray",
        "UInt8ClampedBufferAttribute",
        "Int16BufferAttribute",
        "Uint16Array",
        "Int32BufferAttribute",
        "Float64BufferAttribute",
        "TangentKind",
        "UVKind",
        "UV2Kind",
        "UV3Kind",
        "UV4Kind",
        "UV5Kind",
        "UV6Kind",
        "ColorKind",
        "curValue",
        "CatmullRomType",
        "ArcCurve",
        "init",
        "initCatmullRom",
        "x3",
        "tension",
        "initNonuniformCatmullRom",
        "dt0",
        "dt1",
        "dt2",
        "calc",
        "t3",
        "CubicPoly",
        "curveType",
        "Centripetal",
        "Chordal",
        "Catmullrom",
        "CatmullRomCurve",
        "CatmullRomCurve3",
        "CubicBezierCurve3",
        "autoClose",
        "closePath",
        "startPoint",
        "endPoint",
        "lens",
        "getCurveLengths",
        "cacheLengths",
        "sums",
        "createCurve",
        "QuadraticBezierCurve3",
        "holes",
        "getPointsHoles",
        "holesPts",
        "extractPoints",
        "shape",
        "Shape",
        "hole",
        "contour",
        "isContainsPoint",
        "isClockWise",
        "ShapeUtils",
        "triangulateArea",
        "holeIndices",
        "removeDupEndPts",
        "addContour",
        "holeIndex",
        "triangles",
        "Earcut",
        "earcut",
        "trianglesArea",
        "triangulateShape",
        "objectPoolId",
        "_children",
        "_sceneRootNodesIndex",
        "tempVisible",
        "onVisibleChanged",
        "onAddSelf",
        "remove",
        "onRemoveSelf",
        "removeFromParent",
        "onAddScene",
        "onRemoveScene",
        "getObjectById",
        "getObjectByProperty",
        "getObjectByUUID",
        "getObjectByName",
        "traverse",
        "traverseVisible",
        "traverseAncestors",
        "_addToSceneRootNodes",
        "rootNodes",
        "_removeFromSceneRootNodes",
        "lastIdx",
        "axisvector",
        "normalvector",
        "us",
        "axesplane",
        "axesbasis",
        "usAxesAligned",
        "normalsplane",
        "normalsbasis",
        "axisLine",
        "extend",
        "_p1",
        "xAtY",
        "absDistanceToPoint",
        "point_projected",
        "pointOnPlane",
        "neworigin",
        "newnormal",
        "newpointOnPlane",
        "neww",
        "numdimensions",
        "tolerance",
        "lookuptable",
        "lookupOrCreate",
        "els",
        "creatorCallback",
        "hash",
        "el",
        "valueQuantized",
        "hashparts",
        "q0",
        "numhashes",
        "hashmask",
        "hashmask_shifted",
        "hashpart",
        "CSGFuzzyFactory",
        "getHash",
        "join",
        "buffers",
        "updateBuffer",
        "updateMipmaps",
        "mipmaps",
        "TextureCube",
        "arrayOrType",
        "ArrayBuffer",
        "isView",
        "constructor",
        "dataType",
        "GLConstants",
        "DOUBLE",
        "createTypedArrayFromDataTypeValues",
        "values",
        "glDataTypeFromName",
        "glDataTypeInBytes",
        "BYTES_PER_ELEMENT",
        "validateGLDataType",
        "createTypedArrayFromGLDataType",
        "createArrayBufferFromGLDataType",
        "byteOffset",
        "byteLength",
        "stride",
        "cloneArray",
        "InterleavedBuffer",
        "interleavedBuffer",
        "glBuffer",
        "cloneBuffer",
        "InterleavedBufferAttribute",
        "_map",
        "_lightMap",
        "_lightMapIntensity",
        "_aoMap",
        "_aoMapIntensity",
        "_specularMap",
        "_alphaMap",
        "_envMap",
        "_combine",
        "_reflectivity",
        "_refractionRatio",
        "_wireframe",
        "_wireframeLineWidth",
        "_wireframeLineCap",
        "_wireframeLineJoin",
        "_skinning",
        "_morphTargets",
        "MeshBasicMaterial",
        "lightMap",
        "lightMapIntensity",
        "aoMap",
        "aoMapIntensity",
        "specularMap",
        "alphaMap",
        "envMap",
        "combine",
        "reflectivity",
        "refractionRatio",
        "wireframe",
        "wireframeLineWidth",
        "wireframeLineCap",
        "wireframeLineJoin",
        "skinning",
        "morphTargets",
        "_classifyID",
        "_receiveShadow",
        "_frustumCulled",
        "_renderOrder",
        "_pickable",
        "_lightLayers",
        "_lightSources",
        "_renderingGroup",
        "_distanceToCamera",
        "_renderingGroupId",
        "onClassifyIDChanged",
        "onCastShadowChanged",
        "onReceiveShadowChanged",
        "onFrustumCulledChanged",
        "onRenderOrderChanged",
        "onPickableChanged",
        "_resyncLightSources",
        "getScene",
        "lights",
        "light",
        "_resyncLightSource",
        "isIn",
        "_removeLightSource",
        "render",
        "enableAlphaMode",
        "Renderable",
        "material",
        "addMesh",
        "_material",
        "Mesh",
        "capacity",
        "_id",
        "SmartArray",
        "_GlobalId",
        "compareFn",
        "reset",
        "contains",
        "_duplicateId",
        "__smartArrayFlags",
        "pushNoDuplicate",
        "concatWithNoDuplicate",
        "item",
        "SmartArrayNoDuplicate",
        "NormalAnimationBlendMode",
        "AdditiveAnimationBlendMode",
        "AnimationBlendMode",
        "LoopOnce",
        "LoopRepeat",
        "LoopPingPong",
        "AnimationLoopMode",
        "setFromCartesianCoords",
        "Cylindrical",
        "Ellipsoid",
        "_tempVec",
        "_tempSphere",
        "p4",
        "p5",
        "_planeData",
        "_updateArrayPlaneData",
        "setFromProjectionMatrix",
        "me0",
        "me1",
        "me2",
        "me3",
        "me4",
        "me5",
        "me6",
        "me7",
        "me8",
        "me9",
        "me10",
        "me11",
        "me12",
        "me13",
        "me14",
        "me15",
        "frustum",
        "intersectsObject",
        "negRadius",
        "fullVisible",
        "heading",
        "HeadingPitchRang",
        "roll",
        "setFromDegrees",
        "denominatorRoll",
        "numeratorRoll",
        "denominatorHeading",
        "numeratorHeading",
        "HeadingPitchRoll",
        "LineSegment2",
        "cdeParameter",
        "segment1",
        "seg0Origin",
        "seg0Direction",
        "seg1Origin",
        "seg1Direction",
        "seg0Extent",
        "seg1Extent",
        "line0",
        "segment0Parameter",
        "segment1Parameter",
        "Matrix2D",
        "setValues",
        "append",
        "prepend",
        "tx1",
        "appendMatrix",
        "prependMatrix",
        "appendTransform",
        "skewX",
        "skewY",
        "regX",
        "regY",
        "prependTransform",
        "skew",
        "applyXY",
        "newPos",
        "applyInverseXY",
        "applyInverse",
        "_tempQuat1",
        "_tempQuat2",
        "_tempQuat3",
        "_tempMat3",
        "OBB",
        "halfAxes",
        "axisProjectionMinMax",
        "minmax",
        "maximumExtent",
        "obb",
        "rot0",
        "rot1",
        "q1",
        "rot",
        "pmin",
        "pmax",
        "_getPoints",
        "coeff",
        "R0Delta",
        "R1Delta",
        "R0TR1",
        "twoExtent0",
        "twoExtent1",
        "A0",
        "dotDA0",
        "eq",
        "setFromVector2",
        "addFromVector2",
        "isSimple",
        "Point",
        "getLineIntersection",
        "isConvex",
        "sum",
        "getAABB",
        "minx",
        "maxx",
        "pointX",
        "pointY",
        "lup",
        "lx",
        "triangulate",
        "tgs",
        "avl",
        "al",
        "earFound",
        "vi",
        "isPointInTriangle",
        "startX",
        "startY",
        "endX",
        "endY",
        "iscs",
        "ps",
        "isc",
        "fisc",
        "lisc",
        "pointDistance",
        "flag",
        "pointComp",
        "pgs",
        "index0",
        "solved",
        "firstWithFlag",
        "pgn",
        "pg",
        "npg",
        "np",
        "dax",
        "dbx",
        "day",
        "dby",
        "Den",
        "A",
        "B",
        "I",
        "inRectangle",
        "v0x",
        "v0y",
        "v1x",
        "v1y",
        "v2x",
        "v2y",
        "dot00",
        "dot02",
        "dot11",
        "dot12",
        "Polygon",
        "Ray2",
        "recast",
        "rayClosest",
        "ray1",
        "rayOrigin",
        "rayDirection",
        "rayInterval",
        "ray0Parameter",
        "ray1Parameter",
        "Ray3",
        "ptResult",
        "intersecTriangle",
        "intersecsSphere",
        "intersecSphere",
        "intersecsPlane",
        "intersecPlane",
        "intersecsBox",
        "intersecBox",
        "intersecsOBB",
        "intersecOBB",
        "Spherical",
        "makeSafe",
        "coefficients",
        "getAt",
        "getIrradianceAt",
        "sh",
        "addScaledSH",
        "SphericalHarmonics3",
        "_v0",
        "_v1",
        "_v2",
        "_v3",
        "_vab",
        "_vac",
        "_vbc",
        "_vap",
        "_vbp",
        "_vcp",
        "_p0",
        "getNormal",
        "targetLengthSq",
        "getBarycoord",
        "Triangle",
        "getUV",
        "uv1",
        "uv2",
        "uv3",
        "isFrontFacing",
        "getMidpoint",
        "d4",
        "vc",
        "d5",
        "d6",
        "vb",
        "va",
        "f00",
        "f10",
        "f01",
        "getMinEdge02",
        "getMinEdge12",
        "getMinInterior",
        "triangle1",
        "stResult",
        "stSqrDistance",
        "triangle0Parameter",
        "triangle1Parameter",
        "dotVE0",
        "dotVE1",
        "dotE0E0",
        "dotE0E1",
        "dotE1E1",
        "tempV",
        "tempE0",
        "tempE1",
        "min0",
        "max0",
        "min1",
        "DdC",
        "insidePolygon",
        "outsidePolygons",
        "ppResult",
        "subPaths",
        "currentPath",
        "toShapes",
        "isCCW",
        "noHoles",
        "toShapesNoHoles",
        "inSubpaths",
        "shapes",
        "isPointInsidePolygon",
        "inPt",
        "inPolygon",
        "polyLen",
        "inside",
        "edgeLowPt",
        "edgeHighPt",
        "edgeDx",
        "edgeDy",
        "perpEdge",
        "solid",
        "tmpPath",
        "tmpShape",
        "holesFirst",
        "tmpPoints",
        "tmpHoles",
        "betterShapeHoles",
        "newShapes",
        "newShapeHoles",
        "mainIdx",
        "ambiguous",
        "toChange",
        "sIdx",
        "sLen",
        "sho",
        "hIdx",
        "ho",
        "hole_unassigned",
        "s2Idx",
        "froms",
        "tos",
        "ShapePath",
        "dataIsGiven",
        "lastWrittenByte",
        "dvOffset",
        "IOBuffer",
        "littleEndian",
        "_data",
        "DataView",
        "_mark",
        "_marks",
        "available",
        "isLittleEndian",
        "setLittleEndian",
        "isBigEndian",
        "setBigEndian",
        "seek",
        "mark",
        "pushMark",
        "popMark",
        "rewind",
        "ensureAvailable",
        "newLength",
        "newArray",
        "getInt8",
        "getUint8",
        "readByte",
        "readBytes",
        "bytes",
        "getInt16",
        "getUint16",
        "getInt32",
        "getUint32",
        "getFloat32",
        "getFloat64",
        "readChar",
        "readChars",
        "readUtf8",
        "bString",
        "setInt8",
        "_updateLastWrittenByte",
        "setUint8",
        "writeByte",
        "writeBytes",
        "setInt16",
        "setUint16",
        "setInt32",
        "setUint32",
        "setFloat32",
        "setFloat64",
        "writeChar",
        "str",
        "writeChars",
        "writeUtf8",
        "dim",
        "invSize",
        "hasHoles",
        "outerLen",
        "outerNode",
        "linkedList",
        "next",
        "list",
        "queue",
        "steiner",
        "getLeftmost",
        "compareX",
        "eliminateHole",
        "filterPoints",
        "eliminateHoles",
        "earcutLinked",
        "deviation",
        "signedArea",
        "flatten",
        "dimensions",
        "prevZ",
        "nextZ",
        "clockwise",
        "insertNode",
        "removeNode",
        "again",
        "ear",
        "pass",
        "zOrder",
        "tail",
        "numMerges",
        "pSize",
        "qSize",
        "inSize",
        "sortLinked",
        "indexCurve",
        "stop",
        "isEarHashed",
        "isEar",
        "cureLocalIntersections",
        "splitEarcut",
        "pointInTriangle",
        "minTX",
        "minTY",
        "maxTX",
        "maxTY",
        "intersects",
        "locallyInside",
        "isValidDiagonal",
        "outerNode2",
        "hx",
        "hy",
        "tan",
        "mx",
        "my",
        "tanMin",
        "sectorContainsSector",
        "findHoleBridge",
        "leftmost",
        "middleInside",
        "q2",
        "o1",
        "o2",
        "o3",
        "o4",
        "onSegment",
        "num",
        "Node",
        "an",
        "bp",
        "removed",
        "propagationStopped",
        "_listeners",
        "hasEventListener",
        "has",
        "addEventListener",
        "listener",
        "listeners",
        "arr",
        "removeEventListener",
        "delete",
        "removeAllEventListeners",
        "event",
        "handleEvent",
        "toGlobal",
        "renderWidth",
        "renderHeight",
        "toGlobalToRef",
        "ref",
        "aspect",
        "_left",
        "_right",
        "_top",
        "_bottom",
        "_near",
        "_far",
        "_aspect",
        "OrthographicCamera",
        "fov",
        "_fov",
        "_filmGauge",
        "_filmOffset",
        "setFocalLength",
        "focalLength",
        "vExtentSlope",
        "getFilmHeight",
        "atan",
        "getFocalLength",
        "getEffectiveFOV",
        "getFilmWidth",
        "filmGauge",
        "zoom",
        "filmOffset",
        "PerspectiveCamera",
        "transformObj",
        "propertyname",
        "propertyvalue",
        "transformed",
        "cloneObj",
        "cloned",
        "addFrom",
        "otherproperties",
        "vertexfactory",
        "getVertex",
        "sourcevertex",
        "getSide",
        "sourceside",
        "sourcecag",
        "_this",
        "newpoints",
        "endangle",
        "maketangent",
        "absangledif",
        "edgestepsize",
        "numsteps_mod",
        "otherpath",
        "appendPoint",
        "appendPoints",
        "close",
        "rectangularExtrude",
        "expandToCAG",
        "pathradius",
        "startindex",
        "pointindex",
        "innerToCAG",
        "appendBezier",
        "controlpoints",
        "factorials",
        "controlpoints_parsed",
        "lastBezierControlPoint",
        "bezier_order",
        "fact",
        "binomials",
        "binomial",
        "getPointForT",
        "t_k",
        "one_minus_t_n_minus_k",
        "inv_1_minus_t",
        "bernstein_coefficient",
        "newpoints_t",
        "subdivide_base",
        "maxangle",
        "maxsinangle",
        "dir1",
        "dir2",
        "sinangle",
        "t0_new",
        "t1_new",
        "point0_new",
        "point1_new",
        "appendArc",
        "decimals",
        "xradius",
        "yradius",
        "xaxisrotation",
        "largearc",
        "sweep_flag",
        "cosphi",
        "sinphi",
        "minushalfdistance",
        "start_translated",
        "biglambda",
        "sqrtbiglambda",
        "multiplier1",
        "center_translated",
        "theta1",
        "theta2",
        "deltatheta",
        "costheta",
        "sintheta",
        "polygonTree",
        "CSGPolygonTreeNode",
        "rootnode",
        "CSGNode",
        "tree",
        "alsoRemovecoplanarFront",
        "getPolygons",
        "polygontreenodes",
        "addChild",
        "addPolygonTreeNodes",
        "isRootNode",
        "parentschildren",
        "recursivelyInvalidatePolygon",
        "isRemoved",
        "invertSub",
        "getPolygon",
        "node",
        "splitByPlane",
        "coplanarfrontnodes",
        "coplanarbacknodes",
        "frontnodes",
        "backnodes",
        "nodes",
        "_splitByPlane",
        "bound",
        "sphereradius",
        "spherecenter",
        "splitresult",
        "frontnode",
        "backnode",
        "newchild",
        "clipPolygons",
        "numpolygontreenodes",
        "node1",
        "numbacknodes",
        "bestplane",
        "getParentPlaneNormals",
        "maxdepth",
        "planefactory",
        "polygonsharedfactory",
        "sourceshared",
        "sourceplane",
        "sourcepolygon",
        "newvertices_dedup",
        "sourcecsg",
        "glErrorString",
        "INVALID_ENUM",
        "INVALID_VALUE",
        "INVALID_OPERATION",
        "OUT_OF_MEMORY",
        "POINTS",
        "LINES",
        "LINE_LOOP",
        "LINE_STRIP",
        "TRIANGLES",
        "TRIANGLE_STRIP",
        "TRIANGLE_FAN",
        "SRC_COLOR",
        "ONE_MINUS_SRC_COLOR",
        "SRC_ALPHA",
        "ONE_MINUS_SRC_ALPHA",
        "DST_ALPHA",
        "ONE_MINUS_DST_ALPHA",
        "DST_COLOR",
        "ONE_MINUS_DST_COLOR",
        "SRC_ALPHA_SATURATE",
        "FUNC_ADD",
        "BLEND_EQUATION",
        "BLEND_EQUATION_RGB",
        "BLEND_EQUATION_ALPHA",
        "FUNC_SUBTRACT",
        "FUNC_REVERSE_SUBTRACT",
        "BLEND_DST_RGB",
        "BLEND_SRC_RGB",
        "BLEND_DST_ALPHA",
        "BLEND_SRC_ALPHA",
        "CONSTANT_COLOR",
        "ONE_MINUS_CONSTANT_COLOR",
        "CONSTANT_ALPHA",
        "ONE_MINUS_CONSTANT_ALPHA",
        "BLEND_COLOR",
        "ARRAY_BUFFER",
        "ELEMENT_ARRAY_BUFFER",
        "ARRAY_BUFFER_BINDING",
        "ELEMENT_ARRAY_BUFFER_BINDING",
        "STREAM_DRAW",
        "STATIC_DRAW",
        "DYNAMIC_DRAW",
        "BUFFER_SIZE",
        "BUFFER_USAGE",
        "CURRENT_VERTEX_ATTRIB",
        "FRONT",
        "BACK",
        "FRONT_AND_BACK",
        "CULL_FACE",
        "BLEND",
        "STENCIL_TEST",
        "DEPTH_TEST",
        "POLYGON_OFFSET_FILL",
        "SAMPLE_ALPHA_TO_COVERAGE",
        "SAMPLE_COVERAGE",
        "CW",
        "CCW",
        "LINE_WIDTH",
        "ALIASED_POINT_SIZE_RANGE",
        "ALIASED_LINE_WIDTH_RANGE",
        "CULL_FACE_MODE",
        "FRONT_FACE",
        "DEPTH_RANGE",
        "DEPTH_WRITEMASK",
        "DEPTH_CLEAR_VALUE",
        "DEPTH_FUNC",
        "STENCIL_CLEAR_VALUE",
        "STENCIL_FUNC",
        "STENCIL_FAIL",
        "STENCIL_PASS_DEPTH_FAIL",
        "STENCIL_PASS_DEPTH_PASS",
        "STENCIL_REF",
        "STENCIL_VALUE_MASK",
        "STENCIL_WRITEMASK",
        "STENCIL_BACK_FUNC",
        "STENCIL_BACK_FAIL",
        "STENCIL_BACK_PASS_DEPTH_FAIL",
        "STENCIL_BACK_PASS_DEPTH_PASS",
        "STENCIL_BACK_REF",
        "STENCIL_BACK_VALUE_MASK",
        "STENCIL_BACK_WRITEMASK",
        "VIEWPORT",
        "SCISSOR_BOX",
        "COLOR_CLEAR_VALUE",
        "COLOR_WRITEMASK",
        "UNPACK_ALIGNMENT",
        "PACK_ALIGNMENT",
        "MAX_VIEWPORT_DIMS",
        "SUBPIXEL_BITS",
        "RED_BITS",
        "GREEN_BITS",
        "BLUE_BITS",
        "ALPHA_BITS",
        "DEPTH_BITS",
        "STENCIL_BITS",
        "POLYGON_OFFSET_UNITS",
        "POLYGON_OFFSET_FACTOR",
        "TEXTURE_BINDING_2D",
        "SAMPLE_BUFFERS",
        "SAMPLES",
        "SAMPLE_COVERAGE_VALUE",
        "SAMPLE_COVERAGE_INVERT",
        "COMPRESSED_TEXTURE_FORMATS",
        "DONT_CARE",
        "FASTEST",
        "NICEST",
        "GENERATE_MIPMAP_HINT",
        "SHADER_TYPE",
        "DELETE_STATUS",
        "ATTACHED_SHADERS",
        "ACTIVE_UNIFORMS",
        "ACTIVE_ATTRIBUTES",
        "SHADING_LANGUAGE_VERSION",
        "CURRENT_PROGRAM",
        "NEVER",
        "LESS",
        "EQUAL",
        "LEQUAL",
        "GREATER",
        "NOTEQUAL",
        "GEQUAL",
        "ALWAYS",
        "KEEP",
        "REPLACE",
        "INCR",
        "DECR",
        "INVERT",
        "INCR_WRAP",
        "DECR_WRAP",
        "VENDOR",
        "RENDERER",
        "LINEAR",
        "NEAREST_MIPMAP_NEAREST",
        "LINEAR_MIPMAP_NEAREST",
        "NEAREST_MIPMAP_LINEAR",
        "LINEAR_MIPMAP_LINEAR",
        "TEXTURE_WRAP_S",
        "TEXTURE_WRAP_T",
        "TEXTURE",
        "TEXTURE_CUBE_MAP",
        "TEXTURE_BINDING_CUBE_MAP",
        "TEXTURE_CUBE_MAP_POSITIVE_X",
        "TEXTURE_CUBE_MAP_NEGATIVE_X",
        "TEXTURE_CUBE_MAP_POSITIVE_Y",
        "TEXTURE_CUBE_MAP_NEGATIVE_Y",
        "TEXTURE_CUBE_MAP_POSITIVE_Z",
        "TEXTURE_CUBE_MAP_NEGATIVE_Z",
        "TEXTURE0",
        "TEXTURE1",
        "TEXTURE2",
        "TEXTURE3",
        "TEXTURE4",
        "TEXTURE5",
        "TEXTURE6",
        "TEXTURE7",
        "TEXTURE8",
        "TEXTURE9",
        "TEXTURE10",
        "TEXTURE11",
        "TEXTURE12",
        "TEXTURE13",
        "TEXTURE14",
        "TEXTURE15",
        "TEXTURE16",
        "TEXTURE17",
        "TEXTURE18",
        "TEXTURE19",
        "TEXTURE20",
        "TEXTURE21",
        "TEXTURE22",
        "TEXTURE23",
        "TEXTURE24",
        "TEXTURE25",
        "TEXTURE26",
        "TEXTURE27",
        "TEXTURE28",
        "TEXTURE29",
        "TEXTURE30",
        "TEXTURE31",
        "ACTIVE_TEXTURE",
        "REPEAT",
        "CLAMP_TO_EDGE",
        "MIRRORED_REPEAT",
        "FLOAT_VEC2",
        "FLOAT_VEC3",
        "FLOAT_VEC4",
        "INT_VEC2",
        "INT_VEC3",
        "INT_VEC4",
        "BOOL",
        "BOOL_VEC2",
        "BOOL_VEC3",
        "BOOL_VEC4",
        "FLOAT_MAT2",
        "FLOAT_MAT3",
        "FLOAT_MAT4",
        "SAMPLER_2D",
        "SAMPLER_CUBE",
        "VERTEX_ATTRIB_ARRAY_ENABLED",
        "VERTEX_ATTRIB_ARRAY_SIZE",
        "VERTEX_ATTRIB_ARRAY_STRIDE",
        "VERTEX_ATTRIB_ARRAY_TYPE",
        "VERTEX_ATTRIB_ARRAY_NORMALIZED",
        "VERTEX_ATTRIB_ARRAY_POINTER",
        "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING",
        "IMPLEMENTATION_COLOR_READ_TYPE",
        "IMPLEMENTATION_COLOR_READ_FORMAT",
        "LOW_FLOAT",
        "MEDIUM_FLOAT",
        "LOW_INT",
        "MEDIUM_INT",
        "HIGH_INT",
        "RENDERBUFFER",
        "STENCIL_INDEX",
        "RENDERBUFFER_WIDTH",
        "RENDERBUFFER_HEIGHT",
        "RENDERBUFFER_INTERNAL_FORMAT",
        "RENDERBUFFER_RED_SIZE",
        "RENDERBUFFER_GREEN_SIZE",
        "RENDERBUFFER_BLUE_SIZE",
        "RENDERBUFFER_ALPHA_SIZE",
        "RENDERBUFFER_DEPTH_SIZE",
        "RENDERBUFFER_STENCIL_SIZE",
        "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE",
        "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME",
        "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL",
        "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE",
        "DEPTH_ATTACHMENT",
        "STENCIL_ATTACHMENT",
        "DEPTH_STENCIL_ATTACHMENT",
        "FRAMEBUFFER_INCOMPLETE_ATTACHMENT",
        "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT",
        "FRAMEBUFFER_INCOMPLETE_DIMENSIONS",
        "FRAMEBUFFER_UNSUPPORTED",
        "FRAMEBUFFER_BINDING",
        "RENDERBUFFER_BINDING",
        "INVALID_FRAMEBUFFER_OPERATION",
        "UNPACK_FLIP_Y_WEBGL",
        "UNPACK_PREMULTIPLY_ALPHA_WEBGL",
        "CONTEXT_LOST_WEBGL",
        "BROWSER_DEFAULT_WEBGL",
        "COMPRESSED_RGB_S3TC_DXT1_EXT",
        "COMPRESSED_RGBA_S3TC_DXT1_EXT",
        "COMPRESSED_RGBA_S3TC_DXT3_EXT",
        "COMPRESSED_RGBA_S3TC_DXT5_EXT",
        "COMPRESSED_RGB_PVRTC_4BPPV1_IMG",
        "COMPRESSED_RGB_PVRTC_2BPPV1_IMG",
        "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG",
        "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG",
        "COMPRESSED_RGB_ETC1_WEBGL",
        "READ_BUFFER",
        "UNPACK_ROW_LENGTH",
        "UNPACK_SKIP_ROWS",
        "UNPACK_SKIP_PIXELS",
        "PACK_ROW_LENGTH",
        "PACK_SKIP_ROWS",
        "PACK_SKIP_PIXELS",
        "COLOR",
        "DEPTH",
        "STENCIL",
        "RGB10_A2",
        "TEXTURE_BINDING_3D",
        "UNPACK_SKIP_IMAGES",
        "UNPACK_IMAGE_HEIGHT",
        "TEXTURE_3D",
        "TEXTURE_WRAP_R",
        "MAX_3D_TEXTURE_SIZE",
        "UNSIGNED_INT_2_10_10_10_REV",
        "MAX_ELEMENTS_VERTICES",
        "MAX_ELEMENTS_INDICES",
        "TEXTURE_MIN_LOD",
        "TEXTURE_MAX_LOD",
        "TEXTURE_BASE_LEVEL",
        "TEXTURE_MAX_LEVEL",
        "MAX_TEXTURE_LOD_BIAS",
        "TEXTURE_COMPARE_MODE",
        "TEXTURE_COMPARE_FUNC",
        "CURRENT_QUERY",
        "QUERY_RESULT",
        "QUERY_RESULT_AVAILABLE",
        "STREAM_READ",
        "STREAM_COPY",
        "STATIC_READ",
        "STATIC_COPY",
        "DYNAMIC_READ",
        "DYNAMIC_COPY",
        "MAX_DRAW_BUFFERS",
        "DRAW_BUFFER0",
        "DRAW_BUFFER1",
        "DRAW_BUFFER2",
        "DRAW_BUFFER3",
        "DRAW_BUFFER4",
        "DRAW_BUFFER5",
        "DRAW_BUFFER6",
        "DRAW_BUFFER7",
        "DRAW_BUFFER8",
        "DRAW_BUFFER9",
        "DRAW_BUFFER10",
        "DRAW_BUFFER11",
        "DRAW_BUFFER12",
        "DRAW_BUFFER13",
        "DRAW_BUFFER14",
        "DRAW_BUFFER15",
        "MAX_FRAGMENT_UNIFORM_COMPONENTS",
        "MAX_VERTEX_UNIFORM_COMPONENTS",
        "SAMPLER_3D",
        "SAMPLER_2D_SHADOW",
        "FRAGMENT_SHADER_DERIVATIVE_HINT",
        "PIXEL_PACK_BUFFER",
        "PIXEL_UNPACK_BUFFER",
        "PIXEL_PACK_BUFFER_BINDING",
        "PIXEL_UNPACK_BUFFER_BINDING",
        "FLOAT_MAT2x3",
        "FLOAT_MAT2x4",
        "FLOAT_MAT3x2",
        "FLOAT_MAT3x4",
        "FLOAT_MAT4x2",
        "FLOAT_MAT4x3",
        "SRGB",
        "SRGB8",
        "SRGB8_ALPHA8",
        "COMPARE_REF_TO_TEXTURE",
        "VERTEX_ATTRIB_ARRAY_INTEGER",
        "MAX_ARRAY_TEXTURE_LAYERS",
        "MIN_PROGRAM_TEXEL_OFFSET",
        "MAX_PROGRAM_TEXEL_OFFSET",
        "MAX_VARYING_COMPONENTS",
        "TEXTURE_2D_ARRAY",
        "TEXTURE_BINDING_2D_ARRAY",
        "R11F_G11F_B10F",
        "UNSIGNED_INT_10F_11F_11F_REV",
        "RGB9_E5",
        "UNSIGNED_INT_5_9_9_9_REV",
        "TRANSFORM_FEEDBACK_BUFFER_MODE",
        "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS",
        "TRANSFORM_FEEDBACK_VARYINGS",
        "TRANSFORM_FEEDBACK_BUFFER_START",
        "TRANSFORM_FEEDBACK_BUFFER_SIZE",
        "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN",
        "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS",
        "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS",
        "INTERLEAVED_ATTRIBS",
        "SEPARATE_ATTRIBS",
        "TRANSFORM_FEEDBACK_BUFFER",
        "TRANSFORM_FEEDBACK_BUFFER_BINDING",
        "SAMPLER_2D_ARRAY",
        "SAMPLER_2D_ARRAY_SHADOW",
        "SAMPLER_CUBE_SHADOW",
        "UNSIGNED_INT_VEC2",
        "UNSIGNED_INT_VEC3",
        "UNSIGNED_INT_VEC4",
        "INT_SAMPLER_2D",
        "INT_SAMPLER_3D",
        "INT_SAMPLER_CUBE",
        "INT_SAMPLER_2D_ARRAY",
        "UNSIGNED_INT_SAMPLER_2D",
        "UNSIGNED_INT_SAMPLER_3D",
        "UNSIGNED_INT_SAMPLER_CUBE",
        "UNSIGNED_INT_SAMPLER_2D_ARRAY",
        "FLOAT_32_UNSIGNED_INT_24_8_REV",
        "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING",
        "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE",
        "FRAMEBUFFER_ATTACHMENT_RED_SIZE",
        "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE",
        "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE",
        "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE",
        "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE",
        "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE",
        "FRAMEBUFFER_DEFAULT",
        "UNSIGNED_NORMALIZED",
        "DRAW_FRAMEBUFFER_BINDING",
        "READ_FRAMEBUFFER",
        "READ_FRAMEBUFFER_BINDING",
        "RENDERBUFFER_SAMPLES",
        "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER",
        "MAX_COLOR_ATTACHMENTS",
        "COLOR_ATTACHMENT1",
        "COLOR_ATTACHMENT2",
        "COLOR_ATTACHMENT3",
        "COLOR_ATTACHMENT4",
        "COLOR_ATTACHMENT5",
        "COLOR_ATTACHMENT6",
        "COLOR_ATTACHMENT7",
        "COLOR_ATTACHMENT8",
        "COLOR_ATTACHMENT9",
        "COLOR_ATTACHMENT10",
        "COLOR_ATTACHMENT11",
        "COLOR_ATTACHMENT12",
        "COLOR_ATTACHMENT13",
        "COLOR_ATTACHMENT14",
        "COLOR_ATTACHMENT15",
        "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE",
        "VERTEX_ARRAY_BINDING",
        "SIGNED_NORMALIZED",
        "COPY_READ_BUFFER",
        "COPY_WRITE_BUFFER",
        "COPY_READ_BUFFER_BINDING",
        "COPY_WRITE_BUFFER_BINDING",
        "UNIFORM_BUFFER",
        "UNIFORM_BUFFER_BINDING",
        "UNIFORM_BUFFER_START",
        "UNIFORM_BUFFER_SIZE",
        "MAX_VERTEX_UNIFORM_BLOCKS",
        "MAX_FRAGMENT_UNIFORM_BLOCKS",
        "MAX_COMBINED_UNIFORM_BLOCKS",
        "MAX_UNIFORM_BUFFER_BINDINGS",
        "MAX_UNIFORM_BLOCK_SIZE",
        "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS",
        "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS",
        "UNIFORM_BUFFER_OFFSET_ALIGNMENT",
        "ACTIVE_UNIFORM_BLOCKS",
        "UNIFORM_TYPE",
        "UNIFORM_SIZE",
        "UNIFORM_BLOCK_INDEX",
        "UNIFORM_OFFSET",
        "UNIFORM_ARRAY_STRIDE",
        "UNIFORM_MATRIX_STRIDE",
        "UNIFORM_IS_ROW_MAJOR",
        "UNIFORM_BLOCK_BINDING",
        "UNIFORM_BLOCK_DATA_SIZE",
        "UNIFORM_BLOCK_ACTIVE_UNIFORMS",
        "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES",
        "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER",
        "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER",
        "INVALID_INDEX",
        "MAX_VERTEX_OUTPUT_COMPONENTS",
        "MAX_FRAGMENT_INPUT_COMPONENTS",
        "MAX_SERVER_WAIT_TIMEOUT",
        "OBJECT_TYPE",
        "SYNC_CONDITION",
        "SYNC_STATUS",
        "SYNC_FLAGS",
        "SYNC_FENCE",
        "SYNC_GPU_COMMANDS_COMPLETE",
        "UNSIGNALED",
        "SIGNALED",
        "ALREADY_SIGNALED",
        "TIMEOUT_EXPIRED",
        "CONDITION_SATISFIED",
        "WAIT_FAILED",
        "SYNC_FLUSH_COMMANDS_BIT",
        "VERTEX_ATTRIB_ARRAY_DIVISOR",
        "ANY_SAMPLES_PASSED",
        "ANY_SAMPLES_PASSED_CONSERVATIVE",
        "SAMPLER_BINDING",
        "RGB10_A2UI",
        "INT_2_10_10_10_REV",
        "TRANSFORM_FEEDBACK",
        "TRANSFORM_FEEDBACK_PAUSED",
        "TRANSFORM_FEEDBACK_ACTIVE",
        "TRANSFORM_FEEDBACK_BINDING",
        "COMPRESSED_R11_EAC",
        "COMPRESSED_SIGNED_R11_EAC",
        "COMPRESSED_RG11_EAC",
        "COMPRESSED_SIGNED_RG11_EAC",
        "COMPRESSED_RGB8_ETC2",
        "COMPRESSED_SRGB8_ETC2",
        "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2",
        "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2",
        "COMPRESSED_RGBA8_ETC2_EAC",
        "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC",
        "TEXTURE_IMMUTABLE_FORMAT",
        "MAX_ELEMENT_INDEX",
        "TEXTURE_IMMUTABLE_LEVELS",
        "canvasOrContext",
        "adaptToDeviceRatio",
        "_contextWasLost",
        "_devicePixelRatio",
        "_renderLoopLaunched",
        "_activeRenderLoops",
        "_frameId",
        "_windowIsBackground",
        "_cachedQueries",
        "_cachedTextures",
        "_currentRenderTarget",
        "_cachedScenes",
        "forcePOTTextures",
        "renderEvenInBackground",
        "canvas",
        "antialias",
        "xrCompatible",
        "powerPreference",
        "_onContextLost",
        "onContextLost",
        "_onContextRestored",
        "onContextRestored",
        "devicePixelRatio",
        "limitDeviceRatio",
        "resize",
        "fullScreen",
        "hostWindow",
        "getHostWindow",
        "_cachedViewport",
        "getRenderingCanvas",
        "getCurrentFrameId",
        "getDevicePixelRatio",
        "setDevicePixelRatio",
        "radio",
        "getRenderWidth",
        "useScreen",
        "drawingBufferWidth",
        "getRenderHeight",
        "drawingBufferHeight",
        "setViewport",
        "requiredWidth",
        "requiredHeight",
        "updateStyle",
        "innerWidth",
        "innerHeight",
        "parentElement",
        "clientWidth",
        "clientHeight",
        "setSize",
        "runRenderLoop",
        "renderFunction",
        "_boundRenderFunction",
        "_renderLoop",
        "_frameHandler",
        "_queueNewFrame",
        "stopRenderLoop",
        "bindedRenderFunction",
        "requester",
        "QueueNewFrame",
        "shouldRender",
        "beginFrame",
        "endFrame",
        "ownerDocument",
        "defaultView",
        "evt",
        "preventDefault",
        "vendor",
        "renderer",
        "match",
        "setColorStateMask",
        "rMask",
        "gMask",
        "bMask",
        "aMask",
        "setColorStateLocked",
        "lock",
        "setColorStateClear",
        "setColorStateReset",
        "setDepthTest",
        "setDepthMask",
        "setDepthFunc",
        "setDepthLock",
        "setDepthClear",
        "setDepthReset",
        "setStencilTest",
        "getStencilTest",
        "setStencilhMask",
        "setStencilFunc",
        "setStencilOp",
        "fail",
        "zFail",
        "zPass",
        "setStencilLock",
        "setStencilClear",
        "setStencilReset",
        "setBlending",
        "setBlendingColor",
        "setBlendingEquation",
        "setBlendingFunc",
        "setCullFace",
        "cullFace",
        "setFrontFace",
        "cw",
        "setPolygonOffset",
        "units",
        "createTransformFeedback",
        "deleteTransformFeedback",
        "glObj",
        "bindTransformFeedback",
        "beginTransformFeedback",
        "usePoints",
        "endTransformFeedback",
        "pauseTransformFeedback",
        "resumeTransformFeedback",
        "setTranformFeedbackVaryings",
        "glProgram",
        "varyings",
        "separate",
        "bindTransformFeedbackBuffer",
        "_updateQuery",
        "createQuery",
        "conservative",
        "query",
        "beginQuery",
        "endQuery",
        "_bindDataBuffer",
        "_unbindDataBuffer",
        "_setBufferAttribute",
        "_releaseBufferAttribute",
        "_setTexture",
        "solt",
        "_releaseTexture",
        "_allocateTextureUnit",
        "_resetTextureUnits",
        "_activeTexture",
        "slot",
        "_bindTexture",
        "_unbindTexture",
        "faceIndex",
        "forceFullscreenViewport",
        "lodLevel",
        "layer",
        "unBindFramebuffer",
        "restoreDefaultFramebuffer",
        "createPipelineContext",
        "GLPipelineContext",
        "engine",
        "requestAnimationFrame",
        "setTimeout",
        "requestPostAnimationFrame",
        "msRequestAnimationFrame",
        "webkitRequestAnimationFrame",
        "mozRequestAnimationFrame",
        "oRequestAnimationFrame",
        "currentBlending",
        "currentBlendEquation",
        "currentBlendSrc",
        "currentBlendDst",
        "currentBlendEquationAlpha",
        "currentBlendSrcAlpha",
        "currentBlendDstAlpha",
        "currentBlendColor",
        "equationToGL",
        "factorToGL",
        "blendEquationSeparate",
        "blendFuncSeparate",
        "blendFunc",
        "colorLocked",
        "colorState",
        "currentColorMask",
        "currentColorClear",
        "colorMask",
        "clearColor",
        "currentCullFace",
        "currentFrontFace",
        "currentPolygonOffset",
        "currentPolygonOffsetFactor",
        "currentPolygonOffsetUnits",
        "frontFace",
        "depthLocked",
        "currentDepthTest",
        "currentDepthMask",
        "currentDepthClear",
        "currentDepthFunc",
        "depthMask",
        "clearDepth",
        "stencilLocked",
        "currentStencilTest",
        "currentStencilMask",
        "currentStencilFunc",
        "currentStencilRef",
        "currentStencilFuncMask",
        "currentStencilFail",
        "currentStencilZFail",
        "currentStencilZPass",
        "currentStencilClear",
        "stencilMask",
        "stencilOp",
        "clearStencil",
        "pending",
        "getQueryParameter",
        "handler",
        "GLQuery",
        "queryPoolId",
        "maxTextures",
        "caps",
        "currentTextureSlot",
        "currentBoundTextures",
        "textureUnit",
        "currentTextureUnits",
        "webGLSlot",
        "activeTexture",
        "_getTextureTarget",
        "boundTexture",
        "TextureRawCube",
        "setTextureRawCube",
        "TextureRaw3D",
        "setTextureRaw3D",
        "TextureRaw2DArray",
        "setTextureRaw2DArray",
        "setTextureRaw",
        "setTextureCube",
        "TextureCanvas",
        "setTextureCanvas",
        "TextureVideo",
        "setTextureVideo",
        "Texture2D",
        "setTexture2D",
        "setTexture",
        "glTexture",
        "GLTexture",
        "GLTextureSource",
        "Raw",
        "baseWidth",
        "baseHeight",
        "isCompression",
        "compression",
        "_uploadTexture",
        "Url",
        "_uploadTexture2D",
        "Cube",
        "isCube",
        "_uploadTextureCube",
        "Dynamic",
        "_uploadTextureCanvas",
        "_uploadTextureVideo",
        "_uploadTextureRaw",
        "CubeRaw",
        "_uploadTextureRawCube",
        "Raw2DArray",
        "baseDepth",
        "is2DArray",
        "_uploadTextureRaw2DArray",
        "Raw3D",
        "is3D",
        "_uploadTextureRaw3D",
        "glTex",
        "_updateTextureFilterMode",
        "_updateTextureWrapMode",
        "internalSizedFomat",
        "textureType",
        "generateMipmap",
        "video",
        "compressedTexImage2D",
        "bufferRaws",
        "mipmapRaws",
        "compressedTexImage3D",
        "texImage3D",
        "_source",
        "Depth",
        "_getFilterParameters",
        "generateMipMaps",
        "magFilter",
        "minFilter",
        "mag",
        "_getTextureWrapMode",
        "filters",
        "_references",
        "_framebuffer",
        "_MSAAFramebuffer",
        "_MSAARenderBuffer",
        "_glRenderbuffer",
        "_colorBuffers",
        "_colorAttachments",
        "_engine",
        "bindBufferBase",
        "document",
        "createElement",
        "src",
        "autoplay",
        "flip",
        "currentSrc",
        "_getVideo",
        "muted",
        "HTMLVideoElement",
        "url",
        "appendChild",
        "autoPlay",
        "autoUpdateTexture",
        "pause",
        "_growCount",
        "readColorRGB",
        "readColorRGBA",
        "readVector3",
        "readVector4",
        "readMatrix3",
        "readMatrix4",
        "readQuaternion",
        "readEuler",
        "readBox2",
        "readBox3",
        "_growBuffer",
        "utf8",
        "writeColorRGB",
        "writeColorRGBA",
        "writeVector3",
        "writeVector4",
        "writeMatrix3",
        "writeMatrix4",
        "writeQuaternion",
        "writeEuler",
        "writeBox2",
        "writeBox3",
        "grow",
        "BinaryBuffer",
        "formatComponentsLength",
        "pixelFormat",
        "compressedTextureSizeInBytes",
        "textureSizeInBytes",
        "pixelDatatype",
        "componentsLength",
        "PixelFormat",
        "dataTypeIsPacked",
        "dataTypeSizeInBytes",
        "alignmentInBytes",
        "arrayMin",
        "meshPerAttribute",
        "InstancedBufferAttribute",
        "instanceCount",
        "InstancedBufferGeometry",
        "InstancedInterleavedBuffer",
        "InstancedInterleavedBufferAttribute",
        "build",
        "widthSegments",
        "heightSegments",
        "depthSegments",
        "normalizeUV",
        "uvs",
        "numberOfVertices",
        "groupStart",
        "buildPlane",
        "udir",
        "vdir",
        "gridX",
        "gridY",
        "segmentWidth",
        "segmentHeight",
        "widthHalf",
        "heightHalf",
        "depthHalf",
        "gridX1",
        "gridY1",
        "vertexCounter",
        "groupCount",
        "BoxGeometryBuilder",
        "AmbientLight",
        "_target",
        "DirectionalLight",
        "_groundColor",
        "HemisphereLight",
        "_distance",
        "_decay",
        "PointLight",
        "_width",
        "_height",
        "RectAreaLight",
        "_angle",
        "_penumbra",
        "SpotLight",
        "LineBasicMaterial",
        "LineDashedMaterial",
        "LineFlatMaterial",
        "MeshDepthMaterial",
        "MeshDistanceMaterial",
        "MeshLambertMaterial",
        "MeshMatcapMaterial",
        "MeshNormalMaterial",
        "MeshPhongMaterial",
        "MeshPhysicalMaterial",
        "MeshStandardMaterial",
        "MeshToonMaterial",
        "MultiMaterial",
        "PointsMaterial",
        "ShaderMaterial",
        "ShadowMaterial",
        "SpriteMaterial",
        "_rootNodes",
        "_cameras",
        "_lights",
        "_meshes",
        "_transforms",
        "_autoClear",
        "_autoClearDepth",
        "_autoClearStencil",
        "_clearColor",
        "_fogMode",
        "_fogColor",
        "_fogDensity",
        "_fogStart",
        "_fogEnd",
        "_activeCamera",
        "_renderingManager",
        "RenderingManager",
        "_projectingManager",
        "ProjectingManager",
        "recursive",
        "subMesh",
        "removeMesh",
        "removeTransform",
        "newLight",
        "removeLight",
        "toRemove",
        "newCamera",
        "removeCamera",
        "setActiveCameraByID",
        "getCameraByID",
        "getAbstractObjectListByProperty",
        "getCameraByUUID",
        "getCameraByName",
        "getLightByID",
        "getLightByUUID",
        "getLightByName",
        "getMeshByID",
        "getMeshByUUID",
        "getMeshByName",
        "getTransformByID",
        "getTransformByUUID",
        "getTransformByName",
        "getNodeByID",
        "getNodeByUUID",
        "getNodeByName",
        "getAutoClearDepthStencilSetup",
        "_processTransform",
        "_bindFrameBuffer",
        "_processSubCameras",
        "_renderForCamera",
        "Scene",
        "RenderingGroupInfo",
        "_useSceneAutoClearSetup",
        "_renderingGroups",
        "_autoClearDepthStencil",
        "_renderingGroupInfo",
        "_customOpaqueSortCompareFn",
        "_customAlphaTestSortCompareFn",
        "_customTransparentSortCompareFn",
        "MIN_RENDERINGGROUPS",
        "MAX_RENDERINGGROUPS",
        "autoClear",
        "clearDtencil",
        "freeRenderingGroups",
        "renderingGroup",
        "prepare",
        "setRenderingAutoClearDepthStencil",
        "renderingGroupId",
        "autoClearDepthStencil",
        "setRenderingOrder",
        "opaqueSortCompareFn",
        "alphaTestSortCompareFn",
        "transparentSortCompareFn",
        "_clearDepthStencilBuffer",
        "dispatch",
        "_prepareRenderingGroup",
        "RenderingGroup",
        "_depthStencilBufferAlreadyCleaned",
        "_opaqueMeshes",
        "_transparentMeshes",
        "_alphaTestMeshes",
        "_depthOnlyMeshes",
        "_opaqueSortCompareFn",
        "_renderOpaque",
        "renderOpaqueSorted",
        "renderUnsorted",
        "_alphaTestSortCompareFn",
        "_renderAlphaTest",
        "renderAlphaTestSorted",
        "_transparentSortCompareFn",
        "defaultTransparentSortCompare",
        "_renderTransparent",
        "renderTransparentSorted",
        "stencilState",
        "meshs",
        "renderSorted",
        "sortCompareFn",
        "subIndex",
        "cameraPosition",
        "sortedArray",
        "backToFrontSortCompare",
        "frontToBackSortCompare",
        "_activeMeshes",
        "_projectMeshs",
        "meshes",
        "_projectMesh",
        "renderingManager",
        "visibleLayers",
        "frustumCulled"
    ],
    "mappings": "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",
    "file": "vision.js",
    "sourcesContent": [
        "(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"VISION\"] = factory();\n\telse\n\t\troot[\"VISION\"] = factory();\n})(window, function() {\nreturn ",
        " \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 87);\n",
        "import { DeepImmutable, FloatArray, int, Nullable } from \"../types\";\r\nimport { Euler } from \"./Euler\";\r\nimport { Quaternion } from \"./Quaternion\";\r\nimport { Matrix3 } from \"./Matrix3\";\r\nimport { Matrix4 } from \"./Matrix4\";\r\nimport { MathUtils } from \"./MathUtils\";\r\nimport { Spherical } from \"./Spherical\";\r\nimport { Cylindrical } from \"./Cylindrical\";\r\nimport { BinaryBuffer } from \"../Misc/BinaryBuffer\";\r\nimport { BufferAttribute } from \"../Scene/Geometries/BufferAttribute\";\r\nimport { Camera } from \"../Cameras/Camera\";\r\nimport { MathTmp } from \"./MathTmp\";\r\nimport { InterleavedBufferAttribute } from \"../Scene/Geometries/InterleavedBufferAttribute\";\r\n\r\nexport type InVector3 = Vector3 | DeepImmutable<Vector3>;\r\n\r\n/**\r\n * 3D向量\r\n * @category Math\r\n */\r\nexport class Vector3 {\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    private static _zeroReadOnly = new Vector3(0, 0, 0) as DeepImmutable<Vector3>;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private static _oneReadOnly = new Vector3(1, 1, 1) as DeepImmutable<Vector3>;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private static _oneInvReadOnly = new Vector3(-1, -1, -1) as DeepImmutable<Vector3>;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private static _unitXReadOnly = new Vector3(1, 0, 0) as DeepImmutable<Vector3>;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private static _unitYReadOnly = new Vector3(0, 1, 0) as DeepImmutable<Vector3>;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private static _unitZReadOnly = new Vector3(0, 0, 1) as DeepImmutable<Vector3>;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private static _unitXInvReadOnly = new Vector3(-1, 0, 0) as DeepImmutable<Vector3>;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private static _unitYInvReadOnly = new Vector3(0, -1, 0) as DeepImmutable<Vector3>;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private static _unitZInvReadOnly = new Vector3(0, 0, -1) as DeepImmutable<Vector3>;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private readonly _p: number[];\r\n    /**\r\n     * @ignore\r\n     */\r\n    private get _x() {return this._p[0]; }\r\n    /**\r\n     * @ignore\r\n     */\r\n    private set _x(value) {this._p[0] = value; }\r\n    /**\r\n     * @ignore\r\n     */\r\n    private get _y() {return this._p[1]; }\r\n    /**\r\n     * @ignore\r\n     */\r\n    private set _y(value) {this._p[1] = value; }\r\n    /**\r\n     * @ignore\r\n     */\r\n    private get _z() {return this._p[2]; }\r\n    /**\r\n     * @ignore\r\n     */\r\n    private set _z(value) {this._p[2] = value; }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _notify: boolean;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _onNotify: any;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param x\r\n     * @param y\r\n     * @param z\r\n     */\r\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\r\n        this._p = [];\r\n        this._p[0] = x;\r\n        this._p[1] = y;\r\n        this._p[2] = z;\r\n        this._notify = true;\r\n        this._onNotify = null;\r\n    }\r\n\r\n    /**\r\n     * 创建对象\r\n     */\r\n    public static Build() {\r\n        return new Vector3();\r\n    }\r\n\r\n    /**\r\n     * ZERO\r\n     */\r\n    public static get ZERO(): DeepImmutable<Vector3> {\r\n        return Vector3._zeroReadOnly;\r\n    }\r\n\r\n    /**\r\n     * ONE\r\n     */\r\n    public static get ONE(): DeepImmutable<Vector3> {\r\n        return Vector3._oneReadOnly;\r\n    }\r\n\r\n    /**\r\n     * INV_ONE\r\n     */\r\n    public static get INV_ONE(): DeepImmutable<Vector3> {\r\n        return Vector3._oneInvReadOnly;\r\n    }\r\n\r\n    /**\r\n     * UNIT_X\r\n     */\r\n    public static get UNIT_X(): DeepImmutable<Vector3> {\r\n        return Vector3._unitXReadOnly;\r\n    }\r\n\r\n    /**\r\n     * UNIT_Y\r\n     */\r\n    public static get UNIT_Y(): DeepImmutable<Vector3> {\r\n        return Vector3._unitYReadOnly;\r\n    }\r\n\r\n    /**\r\n     * UNIT_Z\r\n     */\r\n    public static get UNIT_Z(): DeepImmutable<Vector3> {\r\n        return Vector3._unitZReadOnly;\r\n    }\r\n\r\n    /**\r\n     * UNIT_INV_X\r\n     */\r\n    public static get UNIT_INV_X(): DeepImmutable<Vector3> {\r\n        return Vector3._unitXInvReadOnly;\r\n    }\r\n\r\n    /**\r\n     * UNIT_INV_Y\r\n     */\r\n    public static get UNIT_INV_Y(): DeepImmutable<Vector3> {\r\n        return Vector3._unitYInvReadOnly;\r\n    }\r\n\r\n    /**\r\n     * UNIT_INV_Z\r\n     */\r\n    public static get UNIT_INV_Z(): DeepImmutable<Vector3> {\r\n        return Vector3._unitZInvReadOnly;\r\n    }\r\n\r\n    /**\r\n     * 计算输入向量的正交补的右手标准正交基。\r\n     * 该函数返回在此过程中计算的非标准化向量的最小长度。\r\n     * 如果该值接近于零，则输入可能是线性相关的(在数值舍入误差范围内)。\r\n     * 在输入时，numinput必须为1或2，并且必须初始化v[0]到v[numInputs-1]。\r\n     * 在输出上，向量v[0]到v[2]形成了一个标准正交集。\r\n     * @param numInputs\r\n     * @param v\r\n     */\r\n    public static computeOrthogonalComplement(numInputs: number, v: Vector3[]): number {\r\n\r\n        if (numInputs == 1) {\r\n            if (Math.abs(v[0].x) > Math.abs(v[0].y)) {\r\n                v[1] = new Vector3(-v[0].z, 0, +v[0].x);\r\n            }\r\n            else {\r\n                v[1] = new Vector3(0, +v[0].z, -v[0].y);\r\n            }\r\n            numInputs = 2;\r\n        }\r\n\r\n        if (numInputs == 2) {\r\n            v[2] = new Vector3().crossVectors(v[0], v[1]);\r\n            return Vector3.orthonormalize(3, v);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * 从线性无关的输入生成标准正交向量的Gram-Schmidt标准正规化。\r\n     * 该函数返回在此过程中计算的非标准化向量的最小长度。\r\n     * 如果该值接近于零，则输入可能是线性相关的(在数值舍入误差范围内)。\r\n     * 在输入时，必须初始化1 <= numElements <= N和v[0]到v[numElements-1]。\r\n     * 在输出上，向量v[0]到v[numElements-1]形成一个标准正交集。\r\n     * @param numInputs\r\n     * @param v\r\n     */\r\n    public static orthonormalize(numInputs: number, v: Vector3[]): number {\r\n        if (v && 1 <= numInputs && numInputs <= 3) {\r\n            let minLength = v[0].length();\r\n            v[0].normalize();\r\n\r\n            for (let i = 1; i < numInputs; ++i) {\r\n                for (let j = 0; j < i; ++j) {\r\n                    let dot = v[i].dot(v[j]);\r\n                    v[i].sub(v[j].multiplyScalar(dot));\r\n                }\r\n\r\n                const length = v[i].length();\r\n                v[i].normalize();\r\n\r\n                if (length < minLength) {\r\n                    minLength = length;\r\n                }\r\n            }\r\n            return minLength;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * 内部元素数组\r\n     */\r\n    public get p() {\r\n        return this._p;\r\n    }\r\n\r\n    /**\r\n     * X坐标\r\n     */\r\n    public get x() {\r\n        return this._x;\r\n    }\r\n    public set x(value: number) {\r\n        if (this._x != value) {\r\n            this._x = value;\r\n            this.triggerNotify();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Y坐标\r\n     */\r\n    public get y() {\r\n        return this._y;\r\n    }\r\n    public set y(value: number) {\r\n        if (this._y != value) {\r\n            this._y = value;\r\n            this.triggerNotify();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Z坐标\r\n     */\r\n    public get z() {\r\n        return this._z;\r\n    }\r\n    public set z(value: number) {\r\n        if (this._z != value) {\r\n            this._z = value;\r\n            this.triggerNotify();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 通知回调\r\n     */\r\n    public get notify() {\r\n        return this._notify;\r\n    }\r\n    public set notify(value: boolean) {\r\n        this._notify = value;\r\n    }\r\n\r\n    /**\r\n     * 设置通知回调\r\n     */\r\n    public setNotifyFunc(value: any): Vector3 {\r\n        this._onNotify = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 触发通知\r\n     */\r\n    private triggerNotify(): void {\r\n        if (this._notify) {\r\n            if (this._onNotify) {\r\n                this._onNotify();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置XYZ参数\r\n     * @param x\r\n     * @param y\r\n     * @param z\r\n     */\r\n    public set(x: number, y: number, z: number): Vector3 {\r\n        this._x = x;\r\n        this._y = y;\r\n        this._z = z;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置标量\r\n     * @param scalar\r\n     */\r\n    public setScalar(scalar: number): Vector3 {\r\n        this._x = scalar;\r\n        this._y = scalar;\r\n        this._z = scalar;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置X坐标\r\n     * @param x\r\n     */\r\n    public setX(x: number): Vector3 {\r\n        this._x = x;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置Y坐标\r\n     * @param y\r\n     */\r\n    public setY(y: number): Vector3 {\r\n        this._y = y;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置Z坐标\r\n     * @param z\r\n     */\r\n    public setZ(z: number): Vector3 {\r\n        this._z = z;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置组件\r\n     * @param index\r\n     * @param value\r\n     */\r\n    public setComponent(index: int, value: number): Vector3 {\r\n        switch (index) {\r\n            case 0: this.x = value; break;\r\n            case 1: this.y = value; break;\r\n            case 2: this.z = value; break;\r\n            default: throw new Error(`index is out of range: ${index}`);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取组件\r\n     * @param index\r\n     */\r\n    public getComponent(index: int): number {\r\n        switch (index) {\r\n            case 0: return this.x;\r\n            case 1: return this.y;\r\n            case 2: return this.z;\r\n            default: throw new Error(`index is out of range: ${index}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 组件的最大值\r\n     */\r\n    public maximumComponent(): number {\r\n        return Math.max(this._x, Math.max(this._y, this._z));\r\n    }\r\n\r\n    /**\r\n     * 组件的最小值\r\n     */\r\n    public minimumComponent(): number {\r\n        return Math.min(this._x, Math.min(this._y, this._z));\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): Vector3 {\r\n        return new Vector3(this._x, this._y, this._z);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: InVector3): Vector3 {\r\n        this._x = source.x;\r\n        this._y = source.y;\r\n        this._z = source.z;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 加上Vector3\r\n     * @param vec\r\n     */\r\n    public add(vec: InVector3): Vector3 {\r\n        this._x += vec.x;\r\n        this._y += vec.y;\r\n        this._z += vec.z;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 加上标量\r\n     * @param scalar\r\n     */\r\n    public addScalar(scalar: number) {\r\n        this._x += scalar;\r\n        this._y += scalar;\r\n        this._z += scalar;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 两个Vector3相加\r\n     * @param aVec\r\n     * @param bVec\r\n     */\r\n    public addVectors(aVec: InVector3, bVec: InVector3): Vector3 {\r\n        this._x = aVec.x + bVec.x;\r\n        this._y = aVec.y + bVec.y;\r\n        this._z = aVec.z + bVec.z;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 加上向量乘以标量\r\n     * @param vec\r\n     * @param scalar\r\n     */\r\n    public addScaledVector(vec: InVector3, scalar: number): Vector3 {\r\n        this._x += vec.x * scalar;\r\n        this._y += vec.y * scalar;\r\n        this._z += vec.z * scalar;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 减去Vector3\r\n     * @param vec\r\n     */\r\n    public sub(vec: InVector3): Vector3 {\r\n        this._x -= vec.x;\r\n        this._y -= vec.y;\r\n        this._z -= vec.z;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 减去标量\r\n     * @param scalar\r\n     */\r\n    public subScalar(scalar: number): Vector3 {\r\n        this._x -= scalar;\r\n        this._y -= scalar;\r\n        this._z -= scalar;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 两个Vector3相减\r\n     * @param aVec\r\n     * @param bVec\r\n     */\r\n    public subVectors(aVec: InVector3, bVec: InVector3): Vector3 {\r\n        this._x = aVec.x - bVec.x;\r\n        this._y = aVec.y - bVec.y;\r\n        this._z = aVec.z - bVec.z;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 乘以Vector3\r\n     * @param vec\r\n     */\r\n    public multiply(vec: InVector3): Vector3 {\r\n        this._x *= vec.x;\r\n        this._y *= vec.y;\r\n        this._z *= vec.z;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 乘以标量\r\n     * @param scalar\r\n     */\r\n    public multiplyScalar(scalar: number): Vector3 {\r\n        this._x *= scalar;\r\n        this._y *= scalar;\r\n        this._z *= scalar;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 两个Vector3相乘\r\n     * @param aVec\r\n     * @param bVec\r\n     */\r\n    public multiplyVectors(aVec: InVector3, bVec: InVector3): Vector3 {\r\n        this._x = aVec.x * bVec.x;\r\n        this._y = aVec.y * bVec.y;\r\n        this._z = aVec.z * bVec.z;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 除以Vector3\r\n     * @param vec\r\n     */\r\n    public divide(vec: InVector3): Vector3 {\r\n        this._x /= vec.x;\r\n        this._y /= vec.y;\r\n        this._z /= vec.z;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 除以标量\r\n     * @param scalar\r\n     */\r\n    public divideScalar(scalar: number): Vector3 {\r\n        return this.multiplyScalar(1 / scalar);\r\n    }\r\n\r\n    /**\r\n     * 乘以欧拉角\r\n     * @param euler\r\n     */\r\n    public applyEuler(euler: Euler): Vector3 {\r\n        return this.applyQuaternion(MathTmp.Quaternion[0].setFromEuler(euler));\r\n    }\r\n\r\n    /**\r\n     * 绕任意轴旋转\r\n     * @param axis\r\n     * @param angle\r\n     */\r\n    public applyAxisAngle(axis: InVector3, angle: number): Vector3 {\r\n        return this.applyQuaternion(MathTmp.Quaternion[0].setFromAxisAngle(axis, angle));\r\n    }\r\n\r\n    /**\r\n     * 乘以Matrix3矩阵\r\n     * @param matrix3\r\n     */\r\n    public applyMatrix3(matrix3: Matrix3): Vector3 {\r\n        const x = this._x;\r\n        const y = this._y;\r\n        const z = this._z;\r\n        const e = matrix3.elements;\r\n        this._x = e[0] * x + e[3] * y + e[6] * z;\r\n        this._y = e[1] * x + e[4] * y + e[7] * z;\r\n        this._z = e[2] * x + e[5] * y + e[8] * z;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 乘以法线矩阵\r\n     * @param matrix3\r\n     */\r\n    public applyNormalMatrix(matrix3: Matrix3): Vector3 {\r\n        return this.applyMatrix3(matrix3).normalize();\r\n    }\r\n\r\n    /**\r\n     * 乘以Matrix4矩阵\r\n     * @param matrix4\r\n     */\r\n    public applyMatrix4(matrix4: Matrix4): Vector3 {\r\n        const x = this._x;\r\n        const y = this._y;\r\n        const z = this._z;\r\n        const e = matrix4.elements;\r\n        const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\r\n        this._x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;\r\n        this._y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;\r\n        this._z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 乘以四元数\r\n     * @param quaternion\r\n     * @returns {Vector3}\r\n     * @memberOf Vector3.prototype\r\n     */\r\n    public applyQuaternion(quaternion: Quaternion): Vector3 {\r\n        const x = this._x;\r\n        const y = this._y;\r\n        const z = this._z;\r\n        const qx = quaternion.x;\r\n        const qy = quaternion.y;\r\n        const qz = quaternion.z;\r\n        const qw = quaternion.w;\r\n\r\n        // calculate quat * vector\r\n        const ix = qw * x + qy * z - qz * y;\r\n        const iy = qw * y + qz * x - qx * z;\r\n        const iz = qw * z + qx * y - qy * x;\r\n        const iw = -qx * x - qy * y - qz * z;\r\n\r\n        // calculate result * inverse quat\r\n        this._x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n        this._y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n        this._z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 投影坐标\r\n     * @param camera\r\n     */\r\n    public project(camera: Camera): Vector3 {\r\n        return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);\r\n    }\r\n\r\n    /**\r\n     * 反投影坐标\r\n     * @param camera\r\n     */\r\n    public unproject(camera: Camera): Vector3 {\r\n        return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);\r\n    }\r\n\r\n    /**\r\n     * 取最小Vector3分量\r\n     * @param vec\r\n     */\r\n    public min(vec: InVector3): Vector3 {\r\n        this._x = Math.min(this._x, vec.x);\r\n        this._y = Math.min(this._y, vec.y);\r\n        this._z = Math.min(this._z, vec.z);\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 取最大Vector3分量\r\n     * @param vec\r\n     */\r\n    public max(vec: InVector3): Vector3 {\r\n        this._x = Math.max(this._x, vec.x);\r\n        this._y = Math.max(this._y, vec.y);\r\n        this._z = Math.max(this._z, vec.z);\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 限制向量\r\n     * @param minVec\r\n     * @param maxVec\r\n     */\r\n    public clamp(minVec: InVector3, maxVec: InVector3): Vector3 {\r\n        this._x = Math.max(minVec.x, Math.min(maxVec.x, this._x));\r\n        this._y = Math.max(minVec.y, Math.min(maxVec.y, this._y));\r\n        this._z = Math.max(minVec.z, Math.min(maxVec.z, this._z));\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 限制向量\r\n     * @param minScalar\r\n     * @param maxScalar\r\n     */\r\n    public clampScalar(minScalar: number, maxScalar: number): Vector3 {\r\n        this._x = Math.max(minScalar, Math.min(maxScalar, this._x));\r\n        this._y = Math.max(minScalar, Math.min(maxScalar, this._y));\r\n        this._z = Math.max(minScalar, Math.min(maxScalar, this._z));\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * clamp长度\r\n     * @param minScalar\r\n     * @param maxScalar\r\n     */\r\n    public clampLength(minScalar: number, maxScalar: number): Vector3 {\r\n        const length = this.length();\r\n        return this.divideScalar(length || 1).multiplyScalar(Math.max(minScalar, Math.min(maxScalar, length)));\r\n    }\r\n\r\n    /**\r\n     * 向下取整分量\r\n     */\r\n    public floor(): Vector3 {\r\n        this._x = Math.floor(this._x);\r\n        this._y = Math.floor(this._y);\r\n        this._z = Math.floor(this._z);\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 向上取整分量\r\n     */\r\n    public ceil(): Vector3 {\r\n        this._x = Math.ceil(this._x);\r\n        this._y = Math.ceil(this._y);\r\n        this._z = Math.ceil(this._z);\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 四舍五入分量\r\n     */\r\n    public round(): Vector3 {\r\n        this._x = Math.round(this._x);\r\n        this._y = Math.round(this._y);\r\n        this._z = Math.round(this._z);\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 向量中的分量朝向0取整数（若分量为负数则向上取整，若为正数则向下取整）\r\n     */\r\n    public roundToZero(): Vector3 {\r\n        this._x = (this._x < 0) ? Math.ceil(this._x) : Math.floor(this._x);\r\n        this._y = (this._y < 0) ? Math.ceil(this._y) : Math.floor(this._y);\r\n        this._z = (this._z < 0) ? Math.ceil(this._z) : Math.floor(this._z);\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 向量取反\r\n     */\r\n    public negate(): Vector3 {\r\n        this._x = -this._x;\r\n        this._y = -this._y;\r\n        this._z = -this._z;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 点乘\r\n     * @param vec\r\n     */\r\n    public dot(vec: InVector3): number {\r\n        return this._x * vec.x + this._y * vec.y + this._z * vec.z;\r\n    }\r\n\r\n    /**\r\n     * 叉乘\r\n     * @param vec\r\n     */\r\n    public cross(vec: InVector3): Vector3 {\r\n        return this.crossVectors(this, vec);\r\n    }\r\n\r\n    /**\r\n     * 两个向量叉乘\r\n     * @param aVec\r\n     * @param bVec\r\n     */\r\n    public crossVectors(aVec: InVector3, bVec: InVector3): Vector3 {\r\n        const ax = aVec.x;\r\n        const ay = aVec.y;\r\n        const az = aVec.z;\r\n        const bx = bVec.x;\r\n        const by = bVec.y;\r\n        const bz = bVec.z;\r\n        this._x = ay * bz - az * by;\r\n        this._y = az * bx - ax * bz;\r\n        this._z = ax * by - ay * bx;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 与两个向量叉乘再点乘\r\n     * @param aVec\r\n     * @param bVec\r\n     */\r\n    public dotCross(aVec: InVector3, bVec: InVector3): number {\r\n        MathTmp.Vector3[0].crossVectors(aVec, bVec);\r\n        return this.dot(MathTmp.Vector3[0]);\r\n    }\r\n\r\n    /**\r\n     * SQ长度\r\n     */\r\n    public lengthSq(): number {\r\n        return this._x * this._x + this._y * this._y + this._z * this._z;\r\n    }\r\n\r\n    /**\r\n     * 长度\r\n     */\r\n    public length(): number {\r\n        return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z);\r\n    }\r\n\r\n    /**\r\n     * 曼哈顿长度\r\n     */\r\n    public manhattanLength(): number {\r\n        return Math.abs(this._x) + Math.abs(this._y) + Math.abs(this._z);\r\n    }\r\n\r\n    /**\r\n     * 与Vector3的曼哈顿距离\r\n     * @param vec\r\n     */\r\n    public manhattanDistanceTo(vec: InVector3): number {\r\n        return Math.abs(this._x - vec.x) + Math.abs(this._y - vec.y) + Math.abs(this._z - vec.z);\r\n    }\r\n\r\n    /**\r\n     * 归一化\r\n     */\r\n    public normalize(): Vector3 {\r\n        return this.divideScalar(this.length() || 1);\r\n    }\r\n\r\n    /**\r\n     * 与Vector3之间的角度\r\n     * @param vec\r\n     */\r\n    public angleTo(vec: InVector3): number {\r\n        const denominator = Math.sqrt(this.lengthSq() * vec.lengthSq());\r\n        if (denominator == 0) { return Math.PI / 2; }\r\n        const theta = this.dot(vec) / denominator;\r\n        return Math.acos(MathUtils.clamp(theta, -1, 1));\r\n    }\r\n\r\n    /**\r\n     * 与Vector3的距离\r\n     * @param vec\r\n     */\r\n    public distanceTo(vec: InVector3): number {\r\n        return Math.sqrt(this.distanceToSquared(vec));\r\n    }\r\n\r\n    /**\r\n     * 与Vector3的SQ距离\r\n     * @param vec\r\n     */\r\n    public distanceToSquared(vec: InVector3): number {\r\n        const dx = this._x - vec.x;\r\n        const dy = this._y - vec.y;\r\n        const dz = this._z - vec.z;\r\n        return dx * dx + dy * dy + dz * dz;\r\n    }\r\n\r\n    /**\r\n     * 设置长度\r\n     * @param length\r\n     */\r\n    public setLength(length: number): Vector3 {\r\n        return this.normalize().multiplyScalar(length);\r\n    }\r\n\r\n    /**\r\n     * 在当前值和V之间插值\r\n     * @param vec\r\n     * @param alpha\r\n     */\r\n    public lerp(vec: InVector3, alpha: number): Vector3 {\r\n        this._x += (vec.x - this._x) * alpha;\r\n        this._y += (vec.y - this._y) * alpha;\r\n        this._z += (vec.z - this._z) * alpha;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 在两个向量之间插值\r\n     * @param vec1\r\n     * @param vec2\r\n     * @param alpha\r\n     */\r\n    public lerpVectors(vec1: InVector3, vec2: InVector3, alpha: number): Vector3 {\r\n        this._x = vec1.x + (vec2.x - vec1.x) * alpha;\r\n        this._y = vec1.y + (vec2.y - vec1.y) * alpha;\r\n        this._z = vec1.z + (vec2.z - vec1.z) * alpha;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 与向量的夹角\r\n     * @param vec\r\n     */\r\n    public angleBetween(vec: InVector3): number {\r\n        const n1 = MathTmp.Vector3[0].copy(this).normalize();\r\n        const n2 = MathTmp.Vector3[1].copy(vec).normalize();\r\n        const cosine = n1.dot(n2);\r\n        const sine = MathTmp.Vector3[2].crossVectors(n1, n2).length();\r\n        return Math.atan2(sine, cosine);\r\n    }\r\n\r\n    /**\r\n     * 当前向量与Vec的中点\r\n     * @param vec\r\n     */\r\n    public midpoint(vec: InVector3): Vector3 {\r\n        this._x = (this._x + vec.x) * 0.5;\r\n        this._y = (this._y + vec.y) * 0.5;\r\n        this._z = (this._z + vec.z) * 0.5;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 两个向量间的中点\r\n     * @param aVec\r\n     * @param bVec\r\n     */\r\n    public midpointVectors(aVec: InVector3, bVec: InVector3) {\r\n        this._x = (aVec.x + bVec.x) * 0.5;\r\n        this._y = (aVec.y + bVec.y) * 0.5;\r\n        this._z = (aVec.z + bVec.z) * 0.5;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 投影向量到向量\r\n     * @param vec\r\n     */\r\n    public projectOnVector(vec: InVector3): Vector3 {\r\n        const denominator = vec.lengthSq();\r\n        if (denominator == 0) { return this.set(0, 0, 0); }\r\n        const scalar = vec.dot(this) / denominator;\r\n        return this.copy(vec).multiplyScalar(scalar);\r\n    }\r\n\r\n    /**\r\n     * 投影向量到平面\r\n     * @param planeNormal\r\n     */\r\n    public projectOnPlane(planeNormal: InVector3): Vector3 {\r\n        MathTmp.Vector3[0].copy(this).projectOnVector(planeNormal);\r\n        return this.sub(MathTmp.Vector3[0]);\r\n    }\r\n\r\n    /**\r\n     * 反射向量\r\n     * @param normal\r\n     */\r\n    public reflect(normal: InVector3): Vector3 {\r\n        return this.sub(MathTmp.Vector3[0].copy(normal).multiplyScalar(2 * this.dot(normal)));\r\n    }\r\n\r\n    /**\r\n     * 最大的正交轴\r\n     * @param axis\r\n     */\r\n    public mostOrthogonalAxis(axis: InVector3 = new Vector3()) {\r\n        if (this.x < 0) { this.x = -this.x; }\r\n        if (this.y < 0) { this.y = -this.y; }\r\n        if (this.z < 0) { this.z = -this.z; }\r\n\r\n        if (this.x <= this.y) {\r\n            if (this.x <= this.z) {\r\n                axis.copy(Vector3.UNIT_X);\r\n            } else {\r\n                axis.copy(Vector3.UNIT_Z);\r\n            }\r\n        } else if (this.y <= this.z) {\r\n            axis.copy(Vector3.UNIT_Y);\r\n        } else {\r\n            axis.copy(Vector3.UNIT_Z);\r\n        }\r\n\r\n        return axis;\r\n    }\r\n\r\n    /**\r\n     * 设置球面体\r\n     * @param spherical\r\n     */\r\n    public setFromSpherical(spherical: Spherical): Vector3 {\r\n        return this.setFromSphericalCoords(spherical.radius, spherical.phi, spherical.theta);\r\n    }\r\n\r\n    /**\r\n     * 设置球面体\r\n     * @param radius\r\n     * @param phi\r\n     * @param theta\r\n     */\r\n    public setFromSphericalCoords(radius: number, phi: number, theta: number): Vector3 {\r\n        const sinPhiRadius = Math.sin(phi) * radius;\r\n        this._x = sinPhiRadius * Math.sin(theta);\r\n        this._y = Math.cos(phi) * radius;\r\n        this._z = sinPhiRadius * Math.cos(theta);\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置椭球体\r\n     * @param cylindrical\r\n     */\r\n    public setFromCylindrical(cylindrical: Cylindrical): Vector3 {\r\n        return this.setFromCylindricalCoords(cylindrical.radius, cylindrical.theta, cylindrical.y);\r\n    }\r\n\r\n    /**\r\n     * 设置椭球体\r\n     * @param radius\r\n     * @param theta\r\n     * @param y\r\n     */\r\n    public setFromCylindricalCoords(radius: number, theta: number, y: number): Vector3 {\r\n        this._x = radius * Math.sin(theta);\r\n        this._y = y;\r\n        this._z = radius * Math.cos(theta);\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 从矩阵提取位置\r\n     * @param matrix4\r\n     */\r\n    public setFromMatrixPosition(matrix4: Matrix4): Vector3 {\r\n        const e = matrix4.elements;\r\n        this._x = e[12];\r\n        this._y = e[13];\r\n        this._z = e[14];\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 从矩阵提取缩放\r\n     * @param matrix\r\n     */\r\n    public setFromMatrixScale(matrix: Matrix3 | Matrix4): Vector3 {\r\n        const sx = this.setFromMatrixColumn(matrix, 0).length();\r\n        const sy = this.setFromMatrixColumn(matrix, 1).length();\r\n        const sz = this.setFromMatrixColumn(matrix, 2).length();\r\n        this._x = sx;\r\n        this._y = sy;\r\n        this._z = sz;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 从矩阵提取列\r\n     * @param matrix\r\n     * @param index\r\n     */\r\n    public setFromMatrixColumn(matrix: Matrix3 | Matrix4, index: int): Vector3 {\r\n        if (matrix as Matrix3) {\r\n            return this.fromArray(matrix.elements, index * 3);\r\n        }\r\n        else {\r\n            return this.fromArray(matrix.elements, index * 4);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 随机分量\r\n     */\r\n    public random(): Vector3 {\r\n        this._x = Math.random();\r\n        this._y = Math.random();\r\n        this._z = Math.random();\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 是否相等\r\n     * @param vec\r\n     * @returns {boolean}\r\n     */\r\n    public equals(vec: InVector3): boolean {\r\n        return ((vec.x == this._x) && (vec.y == this._y) && (vec.z == this._z));\r\n    }\r\n\r\n    /**\r\n     * 是否近似相等\r\n     * @param right\r\n     * @param relativeEpsilon\r\n     * @param absoluteEpsilon\r\n     */\r\n    public equalsEpsilon(right: InVector3, relativeEpsilon: number, absoluteEpsilon: Nullable<number> = null): boolean {\r\n        return MathUtils.equalsEpsilon(this._x, right.x, relativeEpsilon, absoluteEpsilon) &&\r\n            MathUtils.equalsEpsilon(this._y, right.y, relativeEpsilon, absoluteEpsilon) &&\r\n            MathUtils.equalsEpsilon(this._z, right.z, relativeEpsilon, absoluteEpsilon);\r\n    }\r\n\r\n    /**\r\n     * 从数组复制\r\n     * @param array\r\n     * @param offset\r\n     */\r\n    public fromArray(array: FloatArray, offset: number = 0): Vector3 {\r\n        this._x = array[offset];\r\n        this._y = array[offset + 1];\r\n        this._z = array[offset + 2];\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 复制到数组\r\n     * @param array\r\n     * @param offset\r\n     */\r\n    public toArray(array: FloatArray = [], offset: number = 0): FloatArray {\r\n        array[offset] = this._x;\r\n        array[offset + 1] = this._y;\r\n        array[offset + 2] = this._z;\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * 从二进制复制\r\n     * @param dataBuffer\r\n     */\r\n    public fromDataBuffer(dataBuffer: BinaryBuffer): Vector3 {\r\n        this._x = dataBuffer.readFloat32();\r\n        this._y = dataBuffer.readFloat32();\r\n        this._z = dataBuffer.readFloat32();\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 复制到二进制\r\n     * @param dataBuffer\r\n     */\r\n    public toDataBuffer(dataBuffer: BinaryBuffer): Vector3 {\r\n        dataBuffer.writeFloat32(this._x);\r\n        dataBuffer.writeFloat32(this._y);\r\n        dataBuffer.writeFloat32(this._z);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 从Buffer属性复制\r\n     * @param attribute\r\n     * @param index\r\n     */\r\n    public fromBufferAttribute(attribute: BufferAttribute | InterleavedBufferAttribute, index: int): Vector3 {\r\n        this._x = attribute.getX(index);\r\n        this._y = attribute.getY(index);\r\n        this._z = attribute.getZ(index);\r\n        return this;\r\n    }\r\n}\r\n",
        "import { int, Nullable } from \"../types\";\r\nimport { defaultValue } from \"../Misc/DefaultValue\";\r\nimport { Vector3 } from \"./Vector3\";\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst _lut: string[] = [];\r\n\r\n/**\r\n * @ignore\r\n */\r\nfor (let i = 0; i < 256; i++) {\r\n\r\n    _lut[ i ] = (i < 16 ? '0' : '') + (i).toString(16);\r\n\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nlet _seed = 1234567;\r\n\r\n/**\r\n * 数学扩展工具\r\n * @category Math\r\n */\r\nexport abstract class MathUtils {\r\n\r\n    /**\r\n     * EPSILON1\r\n     */\r\n    public static readonly EPSILON1 = 0.1;\r\n\r\n    /**\r\n     * EPSILON2\r\n     */\r\n    public static readonly EPSILON2 = 0.01;\r\n\r\n    /**\r\n     * EPSILON3\r\n     */\r\n    public static readonly EPSILON3 = 0.001;\r\n\r\n    /**\r\n     * EPSILON4\r\n     */\r\n    public static readonly EPSILON4 = 0.0001;\r\n\r\n    /**\r\n     * EPSILON5\r\n     */\r\n    public static readonly EPSILON5 = 0.00001;\r\n\r\n    /**\r\n     * EPSILON6\r\n     */\r\n    public static readonly EPSILON6 = 0.000001;\r\n\r\n    /**\r\n     * EPSILON7\r\n     */\r\n    public static readonly EPSILON7 = 0.0000001;\r\n\r\n    /**\r\n     * EPSILON8\r\n     */\r\n    public static readonly EPSILON8 = 0.00000001;\r\n\r\n    /**\r\n     * EPSILON9\r\n     */\r\n    public static readonly EPSILON9 = 0.000000001;\r\n\r\n    /**\r\n     * EPSILON10\r\n     */\r\n    public static readonly EPSILON10 = 0.0000000001;\r\n\r\n    /**\r\n     * EPSILON11\r\n     */\r\n    public static readonly EPSILON11 = 0.00000000001;\r\n\r\n    /**\r\n     * EPSILON12\r\n     */\r\n    public static readonly EPSILON12 = 0.000000000001;\r\n\r\n    /**\r\n     * EPSILON13\r\n     */\r\n    public static readonly EPSILON13 = 0.0000000000001;\r\n\r\n    /**\r\n     * EPSILON14\r\n     */\r\n    public static readonly EPSILON14 = 0.00000000000001;\r\n\r\n    /**\r\n     * EPSILON15\r\n     */\r\n    public static readonly EPSILON15 = 0.000000000000001;\r\n\r\n    /**\r\n     * EPSILON16\r\n     */\r\n    public static readonly EPSILON16 = 0.0000000000000001;\r\n\r\n    /**\r\n     * EPSILON17\r\n     */\r\n    public static readonly EPSILON17 = 0.00000000000000001;\r\n\r\n    /**\r\n     * EPSILON18\r\n     */\r\n    public static readonly EPSILON18 = 0.000000000000000001;\r\n\r\n    /**\r\n     * EPSILON19\r\n     */\r\n    public static readonly EPSILON19 = 0.0000000000000000001;\r\n\r\n    /**\r\n     * EPSILON20\r\n     */\r\n    public static readonly EPSILON20 = 0.00000000000000000001;\r\n\r\n    /**\r\n     * EPSILON21\r\n     */\r\n    public static readonly EPSILON21 = 0.000000000000000000001;\r\n\r\n    /**\r\n     * PI\r\n     */\r\n    public static readonly PI = Math.PI;\r\n\r\n    /**\r\n     * 1/PI\r\n     */\r\n    public static readonly ONE_OVER_PI = 1.0 / Math.PI;\r\n\r\n    /**\r\n     * PI/2\r\n     */\r\n    public static readonly PI_OVER_TWO = Math.PI / 2.0;\r\n\r\n    /**\r\n     * PI/3\r\n     */\r\n    public static readonly PI_OVER_THREE = Math.PI / 3.0;\r\n\r\n    /**\r\n     * PI/4\r\n     */\r\n    public static readonly PI_OVER_FOUR = Math.PI / 4.0;\r\n\r\n    /**\r\n     * PI/6\r\n     */\r\n    public static readonly PI_OVER_SIX = Math.PI / 6.0;\r\n\r\n    /**\r\n     * 3*PI/2\r\n     */\r\n    public static readonly THREE_PI_OVER_TWO = 3.0 * Math.PI / 2.0;\r\n\r\n    /**\r\n     * 2*PI\r\n     */\r\n    public static readonly TWO_PI = 2.0 * Math.PI;\r\n\r\n    /**\r\n     * 1/2*PI\r\n     */\r\n    public static readonly ONE_OVER_TWO_PI = 1.0 / (2.0 * Math.PI);\r\n\r\n    /**\r\n     * 64 * 1024\r\n     */\r\n    public static readonly SIXTY_FOUR_KILOBYTES = 64 * 1024;\r\n\r\n    /**\r\n     * degToRad\r\n     */\r\n    public static readonly DEG2RAD = Math.PI / 180;\r\n\r\n    /**\r\n     * radToDeg\r\n     */\r\n    public static readonly RAD2DEG = 180 / Math.PI;\r\n\r\n    /**\r\n     * radToArcSecond\r\n     */\r\n    public static readonly RAD2ARCSECOND = Math.PI / 180 / 3600.0;\r\n\r\n    /**\r\n     * 生成UUID\r\n     */\r\n    public static generateUUID(): string {\r\n\r\n        // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\r\n\r\n        const d0 = Math.random() * 0xffffffff | 0;\r\n        const d1 = Math.random() * 0xffffffff | 0;\r\n        const d2 = Math.random() * 0xffffffff | 0;\r\n        const d3 = Math.random() * 0xffffffff | 0;\r\n        const uuid = `${_lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ]  }-${\r\n            _lut[ d1 & 0xff ]  }${_lut[ d1 >> 8 & 0xff ]  }-${  _lut[ d1 >> 16 & 0x0f | 0x40 ]  }${_lut[ d1 >> 24 & 0xff ]  }-${\r\n            _lut[ d2 & 0x3f | 0x80 ]  }${_lut[ d2 >> 8 & 0xff ]  }-${  _lut[ d2 >> 16 & 0xff ]  }${_lut[ d2 >> 24 & 0xff ]\r\n        }${_lut[ d3 & 0xff ]  }${_lut[ d3 >> 8 & 0xff ]  }${_lut[ d3 >> 16 & 0xff ]  }${_lut[ d3 >> 24 & 0xff ]}`;\r\n\r\n        return uuid.toUpperCase();\r\n    }\r\n\r\n    /**\r\n     * 限制acos在(-1, 1)\r\n     * @param value\r\n     */\r\n    public static acosClamped(value: number): number {\r\n        return Math.acos(MathUtils.clamp(value, -1.0, 1.0));\r\n    }\r\n\r\n    /**\r\n     * 限制asin在(-1, 1)\r\n     * @param value\r\n     */\r\n    public static asinClamped(value: number): number {\r\n        return Math.asin(MathUtils.clamp(value, -1.0, 1.0));\r\n    }\r\n\r\n    /**\r\n     * 弦长\r\n     * @param angle\r\n     * @param radius\r\n     */\r\n    public static chordLength(angle: number, radius: number): number {\r\n        return 2.0 * radius * Math.sin(angle * 0.5);\r\n    }\r\n\r\n    /**\r\n     * 限制值范围\r\n     * @param value\r\n     * @param min\r\n     * @param max\r\n     */\r\n    public static clamp(value: number, min: number, max: number): number {\r\n        return Math.max(min, Math.min(max, value));\r\n    }\r\n\r\n    /**\r\n     * 在范围内映射值\r\n     * @param value\r\n     * @param min\r\n     * @param max\r\n     */\r\n    public static wrap(value: number, min: number, max: number): number {\r\n        if (value == max || value == min) {\r\n            return value;\r\n        }\r\n        const d = max - min;\r\n        const w = ((value - min) % d + d) % d + min;\r\n        return w;\r\n    }\r\n\r\n    /**\r\n     * 从当前范围线性映射到另外一个范围\r\n     * @param x\r\n     * @param a1\r\n     * @param a2\r\n     * @param b1\r\n     * @param b2\r\n     */\r\n    public static mapLinear(x: number, a1: number, a2: number, b1: number, b2: number): number {\r\n        return b1 + (x - a1) * (b2 - b1) / (a2 - a1);\r\n    }\r\n\r\n    /**\r\n     * 线性插值\r\n     * @param x\r\n     * @param y\r\n     * @param t\r\n     */\r\n    public static lerp(x: number, y: number, t: number): number {\r\n        return (1 - t) * x + t * y;\r\n    }\r\n\r\n    /**\r\n     * 线性插值，并在极限处进行平滑\r\n     * @param x\r\n     * @param min\r\n     * @param max\r\n     */\r\n    public static smoothstep(x: number, min: number, max: number): number {\r\n        if (x <= min) { return 0; }\r\n        if (x >= max) { return 1; }\r\n        x = (x - min) / (max - min);\r\n        return x * x * (3 - 2 * x);\r\n    }\r\n\r\n    /**\r\n     * 线性插值，并在极限处进行平滑\r\n     * @param x\r\n     * @param min\r\n     * @param max\r\n     */\r\n    public static smootherstep(x: number, min: number, max: number): number {\r\n        if (x <= min) { return 0; }\r\n        if (x >= max) { return 1; }\r\n        x = (x - min) / (max - min);\r\n        return x * x * x * (x * (x * 6 - 15) + 10);\r\n    }\r\n\r\n    /**\r\n     * 随机整数(low,high)\r\n     * @param low\r\n     * @param high\r\n     */\r\n    public static randInt(low: int, high: int): int {\r\n        return low + Math.floor(Math.random() * (high - low + 1));\r\n    }\r\n\r\n    /**\r\n     * 随机浮点数(low,high)\r\n     * @param low\r\n     * @param high\r\n     */\r\n    public static randFloat(low: number, high: number): number {\r\n        return low + Math.random() * (high - low);\r\n    }\r\n\r\n    /**\r\n     * 随机浮点数(-rang,rang)\r\n     * @param range\r\n     */\r\n    public static randFloatSpread(range: number): number {\r\n        return range * (0.5 - Math.random());\r\n    }\r\n\r\n    /**\r\n     * 伪随机\r\n     * @param s\r\n     * @returns {number}\r\n     */\r\n    public static seededRandom(s: Nullable<number> = null): number {\r\n        if (s != null) { _seed = s % 2147483647; }\r\n        _seed = _seed * 16807 % 2147483647;\r\n        return (_seed - 1) / 2147483646;\r\n    }\r\n\r\n    /**\r\n     * 角度转弧度\r\n     * @param degrees\r\n     */\r\n    public static degToRad(degrees: number): number {\r\n        return degrees * MathUtils.DEG2RAD;\r\n    }\r\n\r\n    /**\r\n     * 弧度转角度\r\n     * @param radians\r\n     */\r\n    public static radToDeg(radians: number): number {\r\n        return radians * MathUtils.RAD2DEG;\r\n    }\r\n\r\n    /**\r\n     * 是否2的幂\r\n     * @param value\r\n     */\r\n    public static isPowerOfTwo(value: number): boolean {\r\n        return (value & (value - 1)) == 0 && value != 0;\r\n    }\r\n\r\n    /**\r\n     * 向上取2的幂\r\n     * @param value\r\n     */\r\n    public static ceilPowerOfTwo(value: number): number {\r\n        return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\r\n    }\r\n\r\n    /**\r\n     * 向下取2的幂\r\n     * @param value\r\n     */\r\n    public static floorPowerOfTwo(value: number): number {\r\n        return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));\r\n    }\r\n\r\n    /**\r\n     * 取参数符号\r\n     * @param value\r\n     */\r\n    public static signNotZero(value: number): number {\r\n        return value < 0.0 ? -1.0 : 1.0;\r\n    }\r\n\r\n    /**\r\n     * (-1.0,1.0)到(0,255)\r\n     * @param value\r\n     * @param rangeMax\r\n     */\r\n    public static toSNorm(value: number, rangeMax: number = 255): number {\r\n        return Math.round((MathUtils.clamp(value, -1.0, 1.0) * 0.5 + 0.5) * rangeMax);\r\n    }\r\n\r\n    /**\r\n     * (0,255)到(-1.0,1.0)\r\n     * @param value\r\n     * @param rangeMax\r\n     */\r\n    public static fromSNorm(value: number, rangeMax: number = 255): number {\r\n        return MathUtils.clamp(value, 0.0, rangeMax) / rangeMax * 2.0 - 1.0;\r\n    }\r\n\r\n    /**\r\n     * 求模\r\n     * @param m\r\n     * @param n\r\n     */\r\n    public static mod(m: number, n: number): number {\r\n        return ((m % n) + n) % n;\r\n    }\r\n\r\n    /**\r\n     * 雾化\r\n     * @param distance\r\n     * @param density\r\n     */\r\n    public static fog(distance: number, density: number): number {\r\n        const scalar = distance * density;\r\n        return 1.0 - Math.exp(-(scalar * scalar));\r\n    }\r\n\r\n    /**\r\n     * 转换到(0, 2*PI)\r\n     * @param angle\r\n     */\r\n    public static zeroToTwoPi(angle: number): number {\r\n        const mod = MathUtils.mod(angle, MathUtils.TWO_PI);\r\n        if (Math.abs(mod) < MathUtils.EPSILON14 && Math.abs(angle) > MathUtils.EPSILON14) {\r\n            return MathUtils.TWO_PI;\r\n        }\r\n        return mod;\r\n    }\r\n\r\n    /**\r\n     * 转换到(-PI, PI)\r\n     * @param angle\r\n     */\r\n    public static negativePiToPi(angle: number): number {\r\n        return MathUtils.zeroToTwoPi(angle + MathUtils.PI) - MathUtils.PI;\r\n    }\r\n\r\n    /**\r\n     * 近似等于零\r\n     * @param fvalue\r\n     */\r\n    public static equalsZero(fvalue: number): boolean {\r\n        return (fvalue >= -1e-4) && (fvalue <= 1e-4);\r\n    }\r\n\r\n    /**\r\n     * left近似等于right\r\n     * @param left\r\n     * @param right\r\n     * @param relativeEpsilon\r\n     * @param absoluteEpsilon\r\n     */\r\n    public static equalsEpsilon(left: number, right: number, relativeEpsilon: number, absoluteEpsilon: Nullable<number> = null): boolean {\r\n        absoluteEpsilon = defaultValue(absoluteEpsilon, relativeEpsilon);\r\n        const absDiff = Math.abs(left - right);\r\n        return absDiff <= absoluteEpsilon || absDiff <= relativeEpsilon * Math.max(Math.abs(left), Math.abs(right));\r\n    }\r\n\r\n    /**\r\n     * left近似小于right\r\n     * @param left\r\n     * @param right\r\n     * @param absoluteEpsilon\r\n     */\r\n    public static lessThan(left: number, right: number, absoluteEpsilon: number): boolean {\r\n        return left - right < -absoluteEpsilon;\r\n    }\r\n\r\n    /**\r\n     * left近似小于等于right\r\n     * @param left\r\n     * @param right\r\n     * @param absoluteEpsilon\r\n     */\r\n    public static lessThanOrEquals(left: number, right: number, absoluteEpsilon: number): boolean {\r\n        return left - right < absoluteEpsilon;\r\n    }\r\n\r\n    /**\r\n     * left近似大于right\r\n     * @param left\r\n     * @param right\r\n     * @param absoluteEpsilon\r\n     */\r\n    public static greaterThan(left: number, right: number, absoluteEpsilon: number): boolean {\r\n        return left - right > absoluteEpsilon;\r\n    }\r\n\r\n    /**\r\n     * left近似大于等于right\r\n     * @param left\r\n     * @param right\r\n     * @param absoluteEpsilon\r\n     */\r\n    public static greaterThanOrEquals(left: number, right: number, absoluteEpsilon: number): boolean {\r\n        return left - right > -absoluteEpsilon;\r\n    }\r\n\r\n    /**\r\n     * 缩放到大地表面\r\n     * @param cartesian\r\n     * @param oneOverRadii\r\n     * @param oneOverRadiiSquared\r\n     * @param centerToleranceSquared\r\n     * @param result\r\n     */\r\n    public static scaleToGeodeticSurface(cartesian: Vector3, oneOverRadii: Vector3, oneOverRadiiSquared: Vector3, centerToleranceSquared: number, result: Vector3 = new Vector3()): boolean {\r\n\r\n        const positionX = cartesian.x;\r\n        const positionY = cartesian.y;\r\n        const positionZ = cartesian.z;\r\n\r\n        const oneOverRadiiX = oneOverRadii.x;\r\n        const oneOverRadiiY = oneOverRadii.y;\r\n        const oneOverRadiiZ = oneOverRadii.z;\r\n\r\n        const x2 = positionX * positionX * oneOverRadiiX * oneOverRadiiX;\r\n        const y2 = positionY * positionY * oneOverRadiiY * oneOverRadiiY;\r\n        const z2 = positionZ * positionZ * oneOverRadiiZ * oneOverRadiiZ;\r\n\r\n        // Compute the squared ellipsoid norm.\r\n        const squaredNorm = x2 + y2 + z2;\r\n        const ratio = Math.sqrt(1.0 / squaredNorm);\r\n\r\n        // As an initial approximation, assume that the radial intersection is the projection point.\r\n        const intersection = cartesian.clone().multiplyScalar(ratio);\r\n\r\n        // If the position is near the center, the iteration will not converge.\r\n        if (squaredNorm < centerToleranceSquared) {\r\n            if (!isFinite(ratio)) {\r\n                return false;\r\n            }\r\n            else {\r\n                result.copy(intersection);\r\n                return true;\r\n            }\r\n        }\r\n\r\n        const oneOverRadiiSquaredX = oneOverRadiiSquared.x;\r\n        const oneOverRadiiSquaredY = oneOverRadiiSquared.y;\r\n        const oneOverRadiiSquaredZ = oneOverRadiiSquared.z;\r\n\r\n        // Use the gradient at the intersection point in place of the true unit normal.\r\n        // The difference in magnitude will be absorbed in the multiplier.\r\n        const gradient = new Vector3();\r\n        gradient.x = intersection.x * oneOverRadiiSquaredX * 2.0;\r\n        gradient.y = intersection.y * oneOverRadiiSquaredY * 2.0;\r\n        gradient.z = intersection.z * oneOverRadiiSquaredZ * 2.0;\r\n\r\n        // Compute the initial guess at the normal vector multiplier, lambda.\r\n        let lambda = (1.0 - ratio) * cartesian.length() / (0.5 * gradient.length());\r\n        let correction = 0.0;\r\n\r\n        let func;\r\n        let denominator;\r\n        let xMultiplier;\r\n        let yMultiplier;\r\n        let zMultiplier;\r\n        let xMultiplier2;\r\n        let yMultiplier2;\r\n        let zMultiplier2;\r\n        let xMultiplier3;\r\n        let yMultiplier3;\r\n        let zMultiplier3;\r\n\r\n        do {\r\n            lambda -= correction;\r\n\r\n            xMultiplier = 1.0 / (1.0 + lambda * oneOverRadiiSquaredX);\r\n            yMultiplier = 1.0 / (1.0 + lambda * oneOverRadiiSquaredY);\r\n            zMultiplier = 1.0 / (1.0 + lambda * oneOverRadiiSquaredZ);\r\n\r\n            xMultiplier2 = xMultiplier * xMultiplier;\r\n            yMultiplier2 = yMultiplier * yMultiplier;\r\n            zMultiplier2 = zMultiplier * zMultiplier;\r\n\r\n            xMultiplier3 = xMultiplier2 * xMultiplier;\r\n            yMultiplier3 = yMultiplier2 * yMultiplier;\r\n            zMultiplier3 = zMultiplier2 * zMultiplier;\r\n\r\n            func = x2 * xMultiplier2 + y2 * yMultiplier2 + z2 * zMultiplier2 - 1.0;\r\n\r\n            // \"denominator\" here refers to the use of this expression in the velocity and acceleration\r\n            // computations in the sections to follow.\r\n            denominator = x2 * xMultiplier3 * oneOverRadiiSquaredX + y2 * yMultiplier3 * oneOverRadiiSquaredY + z2 * zMultiplier3 * oneOverRadiiSquaredZ;\r\n\r\n            const derivative = -2.0 * denominator;\r\n\r\n            correction = func / derivative;\r\n\r\n        } while (Math.abs(func) > MathUtils.EPSILON12);\r\n\r\n        result.x = positionX * xMultiplier;\r\n        result.y = positionY * yMultiplier;\r\n        result.z = positionZ * zMultiplier;\r\n        return true;\r\n    }\r\n}\r\n",
        "import { DeepImmutable, FloatArray, int, Nullable } from \"../types\";\r\nimport { Matrix3 } from \"./Matrix3\";\r\nimport { MathUtils } from \"./MathUtils\";\r\nimport { BinaryBuffer } from \"../Misc/BinaryBuffer\";\r\nimport { BufferAttribute } from \"../Scene/Geometries/BufferAttribute\";\r\nimport { MathTmp } from \"./MathTmp\";\r\nimport { InterleavedBufferAttribute } from \"../Scene/Geometries/InterleavedBufferAttribute\";\r\n\r\ntype InVector2 = Vector2 | DeepImmutable<Vector2>;\r\n\r\n/**\r\n * 2D向量\r\n * @category Math\r\n */\r\nexport class Vector2 {\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    private static _zeroReadOnly = new Vector2(0, 0) as DeepImmutable<Vector2>;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private static _oneReadOnly = new Vector2(1, 1) as DeepImmutable<Vector2>;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private static _oneInvReadOnly = new Vector2(-1, -1) as DeepImmutable<Vector2>;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private static _unitXReadOnly = new Vector2(1, 0) as DeepImmutable<Vector2>;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private static _unitYReadOnly = new Vector2(0, 1) as DeepImmutable<Vector2>;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private static _unitXInvReadOnly = new Vector2(-1, 0) as DeepImmutable<Vector2>;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private static _unitYInvReadOnly = new Vector2(0, -1) as DeepImmutable<Vector2>;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private readonly _p: number[];\r\n    /**\r\n     * @ignore\r\n     */\r\n    private get _x() {return this._p[0]; }\r\n    /**\r\n     * @ignore\r\n     */\r\n    private set _x(value) {this._p[0] = value; }\r\n    /**\r\n     * @ignore\r\n     */\r\n    private get _y() {return this._p[1]; }\r\n    /**\r\n     * @ignore\r\n     */\r\n    private set _y(value) {this._p[1] = value; }\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _notify: boolean;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _onNotify: any;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param x\r\n     * @param y\r\n     */\r\n    constructor(x: number = 0, y: number = 0) {\r\n        this._p = [];\r\n        this._p[0] = x;\r\n        this._p[1] = y;\r\n        this._notify = true;\r\n        this._onNotify = null;\r\n    }\r\n\r\n    /**\r\n     * 创建对象\r\n     */\r\n    public static Build() {\r\n        return new Vector2();\r\n    }\r\n\r\n    /**\r\n     * ZERO\r\n     */\r\n    public static get ZERO(): DeepImmutable<Vector2> {\r\n        return Vector2._zeroReadOnly;\r\n    }\r\n\r\n    /**\r\n     * ONE\r\n     */\r\n    public static get ONE(): DeepImmutable<Vector2> {\r\n        return Vector2._oneReadOnly;\r\n    }\r\n\r\n    /**\r\n     * INV_ONE\r\n     */\r\n    public static get INV_ONE(): DeepImmutable<Vector2> {\r\n        return Vector2._oneInvReadOnly;\r\n    }\r\n\r\n    /**\r\n     * UNIT_X\r\n     */\r\n    public static get UNIT_X(): DeepImmutable<Vector2> {\r\n        return Vector2._unitXReadOnly;\r\n    }\r\n\r\n    /**\r\n     * UNIT_Y\r\n     */\r\n    public static get UNIT_Y(): DeepImmutable<Vector2> {\r\n        return Vector2._unitYReadOnly;\r\n    }\r\n\r\n    /**\r\n     * UNIT_INV_X\r\n     */\r\n    public static get UNIT_INV_X(): DeepImmutable<Vector2> {\r\n        return Vector2._unitXInvReadOnly;\r\n    }\r\n\r\n    /**\r\n     * UNIT_INV_Y\r\n     */\r\n    public static get UNIT_INV_Y(): DeepImmutable<Vector2> {\r\n        return Vector2._unitYInvReadOnly;\r\n    }\r\n\r\n    /**\r\n     * 计算输入向量的正交补的右手标准正交基。\r\n     * 该函数返回在此过程中计算的非标准化向量的最小长度。\r\n     * 如果该值接近于零，则输入可能是线性相关的(在数值舍入误差范围内)。\r\n     * 在输入时，numinput必须为1，并且必须初始化v[0]。\r\n     * 在输出上，向量v[0]和v[1]形成一个标准正交集。\r\n     * @param numInputs\r\n     * @param v\r\n     */\r\n    public static computeOrthogonalComplement(numInputs: number, v: Vector2[]): number {\r\n\r\n        if (numInputs == 1) {\r\n            v[1] = new Vector2().copy(v[0]).perp().negate();\r\n            return Vector2.orthonormalize(2, v);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * 从线性无关的输入生成标准正交向量的Gram-Schmidt标准正规化。\r\n     * 该函数返回在此过程中计算的非标准化向量的最小长度。\r\n     * 如果该值接近于零，则输入可能是线性相关的(在数值舍入误差范围内)。\r\n     * 在输入时，必须初始化1 <= numElements <= N和v[0]到v[numElements-1]。\r\n     * 在输出上，向量v[0]到v[numElements-1]形成一个标准正交集。\r\n     * @param numInputs\r\n     * @param v\r\n     */\r\n    public static orthonormalize(numInputs: number, v: Vector2[]): number {\r\n        if (v && 1 <= numInputs && numInputs <= 3) {\r\n            let minLength = v[0].length();\r\n            v[0].normalize();\r\n\r\n            for (let i = 1; i < numInputs; ++i) {\r\n                for (let j = 0; j < i; ++j) {\r\n                    let dot = v[i].dot(v[j]);\r\n                    v[i].sub(v[j].multiplyScalar(dot));\r\n                }\r\n\r\n                const length = v[i].length();\r\n                v[i].normalize();\r\n\r\n                if (length < minLength) {\r\n                    minLength = length;\r\n                }\r\n            }\r\n            return minLength;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * 内部元素数组\r\n     */\r\n    public get p() {\r\n        return this._p;\r\n    }\r\n\r\n    /**\r\n     * X坐标\r\n     */\r\n    public get x() {\r\n        return this._x;\r\n    }\r\n    public set x(value: number) {\r\n        if (this._x != value) {\r\n            this._x = value;\r\n            this.triggerNotify();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Y坐标\r\n     */\r\n    public get y() {\r\n        return this._y;\r\n    }\r\n    public set y(value: number) {\r\n        if (this._y != value) {\r\n            this._y = value;\r\n            this.triggerNotify();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 宽度\r\n     */\r\n    public get width() {\r\n        return this._x;\r\n    }\r\n    public set width(value: number) {\r\n        if (this._x != value) {\r\n            this._x = value;\r\n            this.triggerNotify();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 高度\r\n     */\r\n    public get height() {\r\n        return this._y;\r\n    }\r\n    public set height(value: number) {\r\n        if (this._y != value) {\r\n            this._y = value;\r\n            this.triggerNotify();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 通知回调\r\n     */\r\n    public get notify() {\r\n        return this._notify;\r\n    }\r\n    public set notify(value: boolean) {\r\n        this._notify = value;\r\n    }\r\n\r\n    /**\r\n     * 设置通知回调\r\n     */\r\n    public setNotifyFunc(value: any): Vector2 {\r\n        this._onNotify = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 触发通知\r\n     */\r\n    private triggerNotify(): void {\r\n        if (this._notify) {\r\n            if (this._onNotify) {\r\n                this._onNotify();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置XY参数\r\n     * @param x\r\n     * @param y\r\n     */\r\n    public set(x: number, y: number): Vector2 {\r\n        this._x = x;\r\n        this._y = y;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置标量\r\n     * @param scalar\r\n     */\r\n    public setScalar(scalar: number): Vector2 {\r\n        this._x = scalar;\r\n        this._y = scalar;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置X坐标\r\n     * @param x\r\n     */\r\n    public setX(x: number): Vector2 {\r\n        this._x = x;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置Y坐标\r\n     * @param y\r\n     */\r\n    public setY(y: number): Vector2 {\r\n        this._y = y;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置组件\r\n     * @param index\r\n     * @param value\r\n     */\r\n    public setComponent(index: int, value: number): Vector2 {\r\n        switch (index) {\r\n            case 0: this.x = value; break;\r\n            case 1: this.y = value; break;\r\n            default: throw new Error(`索引超出范围: ${index}`);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取组件\r\n     * @param index\r\n     */\r\n    public getComponent(index: int): number {\r\n        switch (index) {\r\n            case 0: return this.x;\r\n            case 1: return this.y;\r\n            default: throw new Error(`索引超出范围: ${index}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): Vector2 {\r\n        return new Vector2(this._x, this._y);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: InVector2): Vector2 {\r\n        this._x = source.x;\r\n        this._y = source.y;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 加上Vector2\r\n     * @param vec\r\n     */\r\n    public add(vec: InVector2): Vector2 {\r\n        this._x += vec.x;\r\n        this._y += vec.y;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 加上标量\r\n     * @param scalar\r\n     */\r\n    public addScalar(scalar: number): Vector2 {\r\n        this._x += scalar;\r\n        this._y += scalar;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 两个Vector2相加\r\n     * @param aVec\r\n     * @param bVec\r\n     */\r\n    public addVectors(aVec: InVector2, bVec: InVector2): Vector2 {\r\n        this._x = aVec.x + bVec.x;\r\n        this._y = aVec.y + bVec.y;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Vector2乘以标量\r\n     * @param vec\r\n     * @param scalar\r\n     */\r\n    public addScaledVector(vec: InVector2, scalar: number): Vector2 {\r\n        this._x += vec.x * scalar;\r\n        this._y += vec.y * scalar;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 减去Vector2\r\n     * @param vec\r\n     */\r\n    public sub(vec: InVector2): Vector2 {\r\n        this._x -= vec.x;\r\n        this._y -= vec.y;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 减去标量\r\n     * @param value\r\n     */\r\n    public subScalar(value: number): Vector2 {\r\n        this._x -= value;\r\n        this._y -= value;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 两个Vector2相减\r\n     * @param aVec\r\n     * @param bVec\r\n     */\r\n    public subVectors(aVec: InVector2, bVec: InVector2): Vector2 {\r\n        this._x = aVec.x - bVec.x;\r\n        this._y = aVec.y - bVec.y;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 乘以Vector2\r\n     * @param vec\r\n     */\r\n    public multiply(vec: InVector2): Vector2 {\r\n        this._x *= vec.x;\r\n        this._y *= vec.y;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 乘以标量\r\n     * @param scalar\r\n     */\r\n    public multiplyScalar(scalar: number): Vector2 {\r\n        this._x *= scalar;\r\n        this._y *= scalar;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 两个Vector2相乘\r\n     * @param aVec\r\n     * @param bVec\r\n     */\r\n    public multiplyVectors(aVec: InVector2, bVec: InVector2): Vector2 {\r\n        this._x = aVec.x * bVec.x;\r\n        this._y = aVec.y * bVec.y;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 除以Vector2\r\n     * @param vec\r\n     */\r\n    public divide(vec: InVector2): Vector2 {\r\n        this._x /= vec.x;\r\n        this._y /= vec.y;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 除以标量\r\n     * @param scalar\r\n     */\r\n    public divideScalar(scalar: number): Vector2 {\r\n        return this.multiplyScalar(1 / scalar);\r\n    }\r\n\r\n    /**\r\n     * 乘以Matrix3矩阵\r\n     * @param matrix3\r\n     */\r\n    public applyMatrix3(matrix3: Matrix3): Vector2 {\r\n        const x = this.x;\r\n        const y = this.y;\r\n        const e = matrix3.elements;\r\n        this._x = e[0] * x + e[3] * y + e[6];\r\n        this._y = e[1] * x + e[4] * y + e[7];\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 取最小Vector2分量\r\n     * @param vec\r\n     */\r\n    public min(vec: InVector2): Vector2 {\r\n        this._x = Math.min(this.x, vec.x);\r\n        this._y = Math.min(this.y, vec.y);\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 取最大Vector2分量\r\n     * @param vec\r\n     */\r\n    public max(vec: InVector2): Vector2 {\r\n        this._x = Math.max(this.x, vec.x);\r\n        this._y = Math.max(this.y, vec.y);\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 限制Vector2分量\r\n     * @param minVec\r\n     * @param maxVec\r\n     */\r\n    public clamp(minVec: InVector2, maxVec: InVector2): Vector2 {\r\n        this._x = Math.max(minVec.x, Math.min(maxVec.x, this.x));\r\n        this._y = Math.max(minVec.y, Math.min(maxVec.y, this.y));\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 限制Vector2分量\r\n     * @param minScalar\r\n     * @param maxScalar\r\n     */\r\n    public clampScalar(minScalar: number, maxScalar: number): Vector2 {\r\n        this._x = Math.max(minScalar, Math.min(maxScalar, this.x));\r\n        this._y = Math.max(minScalar, Math.min(maxScalar, this.y));\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 限制向量长度\r\n     * @param minScalar\r\n     * @param maxScalar\r\n     */\r\n    public clampLength(minScalar: number, maxScalar: number): Vector2 {\r\n        const length = this.length();\r\n        return this.divideScalar(length || 1).multiplyScalar(Math.max(minScalar, Math.min(maxScalar, length)));\r\n    }\r\n\r\n    /**\r\n     * 把分量向下取整\r\n     */\r\n    public floor(): Vector2 {\r\n        this._x = Math.floor(this._x);\r\n        this._y = Math.floor(this._y);\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 把分量向上取整\r\n     */\r\n    public ceil(): Vector2 {\r\n        this._x = Math.ceil(this._x);\r\n        this._y = Math.ceil(this._y);\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 四舍五入分量\r\n     */\r\n    public round(): Vector2 {\r\n        this._x = Math.round(this._x);\r\n        this._y = Math.round(this._y);\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 向量中的分量朝向0取整数（若分量为负数则向上取整，若为正数则向下取整）\r\n     */\r\n    public roundToZero(): Vector2 {\r\n        this._x = (this._x < 0) ? Math.ceil(this._x) : Math.floor(this._x);\r\n        this._y = (this._y < 0) ? Math.ceil(this._y) : Math.floor(this._y);\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 向量取反\r\n     */\r\n    public negate(): Vector2 {\r\n        this._x = -this._x;\r\n        this._y = -this._y;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 点乘\r\n     * @param vec\r\n     */\r\n    public dot(vec: InVector2): number {\r\n        return this._x * vec.x + this._y * vec.y;\r\n    }\r\n\r\n    /**\r\n     * 叉乘\r\n     * @param vec\r\n     */\r\n    public cross(vec: InVector2): number {\r\n        return this._x * vec.y - this._y * vec.x;\r\n    }\r\n\r\n    /**\r\n     * SQ长度\r\n     */\r\n    public lengthSq(): number {\r\n        return this._x * this._x + this._y * this._y;\r\n    }\r\n\r\n    /**\r\n     * 长度\r\n     */\r\n    public length(): number {\r\n        return Math.sqrt(this._x * this._x + this._y * this._y);\r\n    }\r\n\r\n    /**\r\n     * 曼哈顿距离\r\n     */\r\n    public manhattanLength(): number {\r\n        return Math.abs(this._x) + Math.abs(this._y);\r\n    }\r\n\r\n    /**\r\n     * 与Vector2的曼哈顿距离\r\n     * @param vec\r\n     */\r\n    public manhattanDistanceTo(vec: InVector2): number {\r\n        return Math.abs(this._x - vec.x) + Math.abs(this._y - vec.y);\r\n    }\r\n\r\n    /**\r\n     * 归一化\r\n     */\r\n    public normalize(): Vector2 {\r\n        return this.divideScalar(this.length() || 1);\r\n    }\r\n\r\n    /**\r\n     * 正x轴的弧度角度\r\n     */\r\n    public angle(): number {\r\n        let angle = Math.atan2(this._y, this._x);\r\n        if (angle < 0) { angle += 2 * Math.PI; }\r\n        return angle;\r\n    }\r\n\r\n    /**\r\n     * 与Vector2的SQ距离\r\n     * @param vec\r\n     */\r\n    public distanceToSquared(vec: InVector2): number {\r\n        const dx = this._x - vec.x;\r\n        const dy = this._y - vec.y;\r\n        return dx * dx + dy * dy;\r\n    }\r\n\r\n    /**\r\n     * 与Vector2的距离\r\n     * @param vec\r\n     */\r\n    public distanceTo(vec: InVector2): number {\r\n        return Math.sqrt(this.distanceToSquared(vec));\r\n    }\r\n\r\n    /**\r\n     * 设置长度\r\n     * @param length\r\n     */\r\n    public setLength(length: number): Vector2 {\r\n        return this.normalize().multiplyScalar(length);\r\n    }\r\n\r\n    /**\r\n     * 在当前值和Vector2之间插值\r\n     * @param vec\r\n     * @param alpha\r\n     */\r\n    public lerp(vec: InVector2, alpha: number): Vector2 {\r\n        this._x += (vec.x - this._x) * alpha;\r\n        this._y += (vec.y - this._y) * alpha;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 在两个Vector2之间插值\r\n     * @param vec1\r\n     * @param vec2\r\n     * @param alpha\r\n     */\r\n    public lerpVectors(vec1: InVector2, vec2: InVector2, alpha: number): Vector2 {\r\n        this._x = vec1.x + (vec2.x - vec1.x) * alpha;\r\n        this._y = vec1.y + (vec2.y - vec1.y) * alpha;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 垂直向量\r\n     */\r\n    public perp(): Vector2 {\r\n        const x = this.x;\r\n        const y = this.y;\r\n        this._x = y;\r\n        this._y = -x;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 与垂直向量的点乘\r\n     * @param vec\r\n     */\r\n    public dotPerp(vec: InVector2): number {\r\n        const p2 = MathTmp.Vector2[0].set(this._x, this._y).perp();\r\n        return this.dot(p2);\r\n    }\r\n\r\n    /**\r\n     * 绕中心旋转\r\n     * @param center\r\n     * @param angle\r\n     */\r\n    public rotateAround(center: InVector2, angle: number): Vector2 {\r\n        const c = Math.cos(angle);\r\n        const s = Math.sin(angle);\r\n        const x = this._x - center.x;\r\n        const y = this._y - center.y;\r\n        this._x = x * c - y * s + center.x;\r\n        this._y = x * s + y * c + center.y;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 随机分量\r\n     */\r\n    public random() {\r\n        this._x = Math.random();\r\n        this._y = Math.random();\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 是否相等\r\n     * @param vec\r\n     */\r\n    public equals(vec: InVector2): boolean {\r\n        return (vec.x == this._x) && (vec.y == this._y);\r\n    }\r\n\r\n    /**\r\n     * 是否近似相等\r\n     * @param right\r\n     * @param relativeEpsilon\r\n     * @param absoluteEpsilon\r\n     */\r\n    public equalsEpsilon(right: InVector2, relativeEpsilon: number, absoluteEpsilon: Nullable<number> = null): boolean {\r\n        return MathUtils.equalsEpsilon(this._x, right.x, relativeEpsilon, absoluteEpsilon) && MathUtils.equalsEpsilon(this._y, right.y, relativeEpsilon, absoluteEpsilon);\r\n    }\r\n\r\n    /**\r\n     * 从数组复制\r\n     * @param array\r\n     * @param offset\r\n     */\r\n    public fromArray(array: FloatArray, offset: number = 0): Vector2 {\r\n        this._x = array[offset];\r\n        this._y = array[offset + 1];\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 复制到数组\r\n     * @param array\r\n     * @param offset\r\n     */\r\n    public toArray(array: FloatArray = [], offset: number = 0): FloatArray {\r\n        array[offset] = this._x;\r\n        array[offset + 1] = this._y;\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * 从二进制复制\r\n     * @param dataBuffer\r\n     */\r\n    public fromDataBuffer(dataBuffer: BinaryBuffer): Vector2 {\r\n        this._x = dataBuffer.readFloat32();\r\n        this._y = dataBuffer.readFloat32();\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 复制到二进制\r\n     * @param dataBuffer\r\n     */\r\n    public toDataBuffer(dataBuffer: BinaryBuffer): Vector2 {\r\n        dataBuffer.writeFloat32(this._x);\r\n        dataBuffer.writeFloat32(this._y);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 从Buffer属性复制\r\n     * @param attribute\r\n     * @param index\r\n     */\r\n    public fromBufferAttribute(attribute: BufferAttribute | InterleavedBufferAttribute, index: int): Vector2 {\r\n        this._x = attribute.getX(index);\r\n        this._y = attribute.getY(index);\r\n        return this;\r\n    }\r\n}\r\n",
        "import { Event, EventDispatcher } from \"../Events\";\r\nimport { ColorRGB, ColorRGBA, MathUtils, Plane } from \"../Math\";\r\nimport { Constants } from \"../Engines\";\r\nimport { Nullable } from \"../types\";\r\n\r\n/**\r\n * 基础材质\r\n */\r\nexport abstract class Material extends EventDispatcher {\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    [key: string]: any;\r\n\r\n    /**\r\n     * UUID\r\n     */\r\n    public uuid: string = MathUtils.generateUUID();\r\n    /**\r\n     * 名称\r\n     */\r\n    public name: string = '';\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _fog: boolean = false;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _blending: number = Constants.CombineBlending;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _side: number = Constants.FrontSide;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _flatShading: boolean = false;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _vertexTangents: boolean = false;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _vertexColors: boolean = false;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _drawMode: number = Constants.TrianglesDrawMode;\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _opacity: number = 1;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _transparent: boolean = false;\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _blendSrc: number = Constants.SrcAlphaFactor;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _blendDst: number = Constants.OneMinusSrcAlphaFactor;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _blendEquation: number = Constants.AddEquation;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _blendSrcAlpha: number = -1;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _blendDstAlpha: number = -1;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _blendEquationAlpha: number = -1;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _blendColor: ColorRGBA = new ColorRGBA();\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _depthFunc: number = Constants.LessEqualDepth;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _depthTest: boolean = true;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _depthWrite: boolean = true;\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _logDepth: boolean = true;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _disableFragLogDepth: boolean = false;\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _stencilWrite: boolean = false;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _stencilWriteMask: number = 0xff;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _stencilFunc: number = Constants.AlwaysStencilFunc;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _stencilRef: number = 0;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _stencilFuncMask: number = 0xff;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _stencilFail: number = Constants.KeepStencilOp;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _stencilZFail: number = Constants.KeepStencilOp;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _stencilZPass: number = Constants.KeepStencilOp;\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _clipping: boolean = true;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _clippingPlanes: Nullable<Plane[]> = null;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _clipIntersection: boolean = false;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _clipEdgeWidth: number = 0.0;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _clipEdgeColor: ColorRGB = ColorRGB.WHITE;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _clipShadows: boolean = false;\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _colorWrite: boolean = true;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _dithering: boolean = false;\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _polygonOffset: boolean = false;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _polygonOffsetFactor: number = 0;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _polygonOffsetUnits: number = 0;\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _alphaTest: number = 0;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _premultipliedAlpha: boolean = false;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _toneMapped: boolean = true;\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _version: number = 0;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _reference: number = 0;\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _visible: boolean = true;\r\n\r\n    /**\r\n     * 构造函数\r\n     */\r\n    protected constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * 雾化\r\n     */\r\n    public get fog() {\r\n        return this._fog;\r\n    }\r\n    public set fog(value) {\r\n        if (this._fog != value) {\r\n            this._fog = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 混合模式\r\n     */\r\n    public get blending() {\r\n        return this._blending;\r\n    }\r\n    public set blending(value) {\r\n        if (this._blending != value) {\r\n            this._blending = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 渲染面\r\n     */\r\n    public get side() {\r\n        return this._side;\r\n    }\r\n    public set side(value) {\r\n        if (this._side != value) {\r\n            this._side = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 平面着色\r\n     */\r\n    public get flatShading() {\r\n        return this._flatShading;\r\n    }\r\n    public set flatShading(value) {\r\n        if (this._flatShading != value) {\r\n            this._flatShading = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 使用顶点切线\r\n     */\r\n    public get vertexTangents() {\r\n        return this._vertexTangents;\r\n    }\r\n    public set vertexTangents(value) {\r\n        if (this._vertexTangents != value) {\r\n            this._vertexTangents = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 使用顶点颜色\r\n     */\r\n    public get vertexColors() {\r\n        return this._vertexColors;\r\n    }\r\n    public set vertexColors(value) {\r\n        if (this._vertexColors != value) {\r\n            this._vertexColors = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 渲染模式\r\n     */\r\n    public get drawMode() {\r\n        return this._drawMode;\r\n    }\r\n    public set drawMode(value) {\r\n        if (this._drawMode != value) {\r\n            this._drawMode = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 透明度\r\n     */\r\n    public get opacity() {\r\n        return this._opacity;\r\n    }\r\n    public set opacity(value) {\r\n        if (this._opacity != value) {\r\n            this._opacity = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 透明模式\r\n     */\r\n    public get transparent() {\r\n        return this._transparent;\r\n    }\r\n    public set transparent(value) {\r\n        if (this._transparent != value) {\r\n            this._transparent = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 混合源因子\r\n     */\r\n    public get blendSrc() {\r\n        return this._blendSrc;\r\n    }\r\n    public set blendSrc(value) {\r\n        if (this._blendSrc != value) {\r\n            this._blendSrc = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 混合目标因子\r\n     */\r\n    public get blendDst() {\r\n        return this._blendDst;\r\n    }\r\n    public set blendDst(value) {\r\n        if (this._blendDst != value) {\r\n            this._blendDst = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 混合方法\r\n     */\r\n    public get blendEquation() {\r\n        return this._blendEquation;\r\n    }\r\n    public set blendEquation(value) {\r\n        if (this._blendEquation != value) {\r\n            this._blendEquation = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 混合Alpha源因子\r\n     */\r\n    public get blendSrcAlpha() {\r\n        return this._blendSrcAlpha;\r\n    }\r\n    public set blendSrcAlpha(value) {\r\n        if (this._blendSrcAlpha != value) {\r\n            this._blendSrcAlpha = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 混合Alpha目标因子\r\n     */\r\n    public get blendDstAlpha() {\r\n        return this._blendDstAlpha;\r\n    }\r\n    public set blendDstAlpha(value) {\r\n        if (this._blendDstAlpha != value) {\r\n            this._blendDstAlpha = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 混合Alpha方法\r\n     */\r\n    public get blendEquationAlpha() {\r\n        return this._blendEquationAlpha;\r\n    }\r\n    public set blendEquationAlpha(value) {\r\n        if (this._blendEquationAlpha != value) {\r\n            this._blendEquationAlpha = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 混合颜色\r\n     */\r\n    public get blendColor() {\r\n        return this._blendColor;\r\n    }\r\n    public set blendColor(value) {\r\n        if (this._blendColor != value) {\r\n            this._blendColor = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 混合函数\r\n     */\r\n    public get depthFunc() {\r\n        return this._depthFunc;\r\n    }\r\n    public set depthFunc(value) {\r\n        if (this._depthFunc != value) {\r\n            this._depthFunc = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 深度测试\r\n     */\r\n    public get depthTest() {\r\n        return this._depthTest;\r\n    }\r\n    public set depthTest(value) {\r\n        if (this._depthTest != value) {\r\n            this._depthTest = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 深度写入\r\n     */\r\n    public get depthWrite() {\r\n        return this._depthWrite;\r\n    }\r\n    public set depthWrite(value) {\r\n        if (this._depthWrite != value) {\r\n            this._depthWrite = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 使用对数深度\r\n     */\r\n    public get logDepth() {\r\n        return this._logDepth;\r\n    }\r\n    public set logDepth(value) {\r\n        if (this._logDepth != value) {\r\n            this._logDepth = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 关闭Frag对数深度\r\n     */\r\n    public get disableFragLogDepth() {\r\n        return this._disableFragLogDepth;\r\n    }\r\n    public set disableFragLogDepth(value) {\r\n        if (this._disableFragLogDepth != value) {\r\n            this._disableFragLogDepth = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 模板写入\r\n     */\r\n    public get stencilWrite() {\r\n        return this._stencilWrite;\r\n    }\r\n    public set stencilWrite(value) {\r\n        if (this._stencilWrite != value) {\r\n            this._stencilWrite = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 模板写入掩码\r\n     */\r\n    public get stencilWriteMask() {\r\n        return this._stencilWriteMask;\r\n    }\r\n    public set stencilWriteMask(value) {\r\n        if (this._stencilWriteMask != value) {\r\n            this._stencilWriteMask = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 模板函数\r\n     */\r\n    public get stencilFunc() {\r\n        return this._stencilFunc;\r\n    }\r\n    public set stencilFunc(value) {\r\n        if (this._stencilFunc != value) {\r\n            this._stencilFunc = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 模板参考值\r\n     */\r\n    public get stencilRef() {\r\n        return this._stencilRef;\r\n    }\r\n    public set stencilRef(value) {\r\n        if (this._stencilRef != value) {\r\n            this._stencilRef = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 模板函数掩码\r\n     */\r\n    public get stencilFuncMask() {\r\n        return this._stencilFuncMask;\r\n    }\r\n    public set stencilFuncMask(value) {\r\n        if (this._stencilFuncMask != value) {\r\n            this._stencilFuncMask = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 模板测试失败\r\n     */\r\n    public get stencilFail() {\r\n        return this._stencilFail;\r\n    }\r\n    public set stencilFail(value) {\r\n        if (this._stencilFail != value) {\r\n            this._stencilFail = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 模板ZBuffer测试失败\r\n     */\r\n    public get stencilZFail() {\r\n        return this._stencilZFail;\r\n    }\r\n    public set stencilZFail(value) {\r\n        if (this._stencilZFail != value) {\r\n            this._stencilZFail = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 模板ZBuffer测试通过\r\n     */\r\n    public get stencilZPass() {\r\n        return this._stencilZPass;\r\n    }\r\n    public set stencilZPass(value) {\r\n        if (this._stencilZPass != value) {\r\n            this._stencilZPass = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 启用平面裁剪\r\n     */\r\n    public get clipping() {\r\n        return this._clipping;\r\n    }\r\n    public set clipping(value) {\r\n        if (this._clipping != value) {\r\n            this._clipping = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 裁剪平面数组\r\n     */\r\n    public get clippingPlanes() {\r\n        return this._clippingPlanes;\r\n    }\r\n    public set clippingPlanes(value) {\r\n        if (this._clippingPlanes != value) {\r\n            this._clippingPlanes = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 裁剪平面模式\r\n     */\r\n    public get clipIntersection() {\r\n        return this._clipIntersection;\r\n    }\r\n    public set clipIntersection(value) {\r\n        if (this._clipIntersection != value) {\r\n            this._clipIntersection = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 裁剪边缘宽度\r\n     */\r\n    public get clipEdgeWidth() {\r\n        return this._clipEdgeWidth;\r\n    }\r\n    public set clipEdgeWidth(value) {\r\n        if (this._clipEdgeWidth != value) {\r\n            this._clipEdgeWidth = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 裁剪边缘颜色\r\n     */\r\n    public get clipEdgeColor() {\r\n        return this._clipEdgeColor;\r\n    }\r\n    public set clipEdgeColor(value) {\r\n        if (!this._clipEdgeColor.equals(value)) {\r\n            this._clipEdgeColor.copy(value);\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 裁剪阴影\r\n     */\r\n    public get clipShadows() {\r\n        return this._clipShadows;\r\n    }\r\n    public set clipShadows(value) {\r\n        if (this._clipShadows != value) {\r\n            this._clipShadows = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 写入颜色\r\n     */\r\n    public get colorWrite() {\r\n        return this._colorWrite;\r\n    }\r\n    public set colorWrite(value) {\r\n        if (this._colorWrite != value) {\r\n            this._colorWrite = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 抖动\r\n     */\r\n    public get dithering() {\r\n        return this._dithering;\r\n    }\r\n    public set dithering(value) {\r\n        if (this._dithering != value) {\r\n            this._dithering = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 多边形偏移\r\n     */\r\n    public get polygonOffset() {\r\n        return this._polygonOffset;\r\n    }\r\n    public set polygonOffset(value) {\r\n        if (this._polygonOffset != value) {\r\n            this._polygonOffset = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n    /**\r\n     * 多边形偏移系数\r\n     */\r\n    public get polygonOffsetFactor() {\r\n        return this._polygonOffsetFactor;\r\n    }\r\n    public set polygonOffsetFactor(value) {\r\n        if (this._polygonOffsetFactor != value) {\r\n            this._polygonOffsetFactor = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n    /**\r\n     * 多边形单位\r\n     */\r\n    public get polygonOffsetUnits() {\r\n        return this._polygonOffsetUnits;\r\n    }\r\n    public set polygonOffsetUnits(value) {\r\n        if (this._polygonOffsetUnits != value) {\r\n            this._polygonOffsetUnits = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Alpha测试\r\n     */\r\n    public get alphaTest() {\r\n        return this._alphaTest;\r\n    }\r\n    public set alphaTest(value) {\r\n        if (this._alphaTest != value) {\r\n            this._alphaTest = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 预乘Alpha\r\n     */\r\n    public get premultipliedAlpha() {\r\n        return this._premultipliedAlpha;\r\n    }\r\n    public set premultipliedAlpha(value) {\r\n        if (this._premultipliedAlpha != value) {\r\n            this._premultipliedAlpha = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 色调映射\r\n     */\r\n    public get toneMapped() {\r\n        return this._toneMapped;\r\n    }\r\n    public set toneMapped(value) {\r\n        if (this._toneMapped != value) {\r\n            this._toneMapped = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否可见\r\n     */\r\n    public get visible() {\r\n        return this._visible;\r\n    }\r\n    public set visible(value) {\r\n        this._visible = value;\r\n    }\r\n\r\n    /**\r\n     * 需要更新\r\n     * @param value\r\n     */\r\n    public set needsUpdate(value: boolean) {\r\n        if (value) {\r\n            this._version++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新版本\r\n     */\r\n    public get version() {\r\n        return this._version;\r\n    }\r\n\r\n    /**\r\n     * 增加引用\r\n     */\r\n    public addReference(): void {\r\n        this._reference++;\r\n    }\r\n\r\n    /**\r\n     * 释放\r\n     */\r\n    public dispose(): void {\r\n        this._reference--;\r\n        if (this._reference == 0) {\r\n            super.dispose();\r\n\r\n            this.dispatchEvent(new Event('dispose'));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 关闭alpha混合\r\n     * @protected\r\n     */\r\n    protected get _disableAlphaBlending(): boolean {\r\n        return !this._transparent;\r\n    }\r\n\r\n    /**\r\n     * 需要alpha混合\r\n     */\r\n    public needAlphaBlending(): boolean {\r\n        if (this._disableAlphaBlending) {\r\n            return false;\r\n        }\r\n        return (this._opacity < 1.0);\r\n    }\r\n\r\n    /**\r\n     * 需要alpha测试\r\n     */\r\n    public needAlphaTesting(): boolean {\r\n        if (this._alphaTest != 0 && this._transparent) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: Material): Material {\r\n\r\n        this.name = source.name;\r\n\r\n        this._fog = source.fog;\r\n        this._opacity = source.opacity;\r\n        this._transparent = source.transparent;\r\n\r\n        this._blending = source.blending;\r\n        this._side = source.side;\r\n        this._flatShading = source.flatShading;\r\n        this._vertexTangents = source.vertexTangents;\r\n        this._vertexColors = source.vertexColors;\r\n        this._drawMode = source.drawMode;\r\n\r\n        this._blendSrc = source.blendSrc;\r\n        this._blendDst = source.blendDst;\r\n        this._blendEquation = source.blendEquation;\r\n        this._blendSrcAlpha = source.blendSrcAlpha;\r\n        this._blendDstAlpha = source.blendDstAlpha;\r\n        this._blendEquationAlpha = source.blendEquationAlpha;\r\n        this._blendColor.copy(source.blendColor);\r\n\r\n        this._depthFunc = source.depthFunc;\r\n        this._depthTest = source.depthTest;\r\n        this._depthWrite = source.depthWrite;\r\n\r\n        this._logDepth = source.logDepth;\r\n        this._disableFragLogDepth = source.disableFragLogDepth;\r\n\r\n        this._stencilWrite = source.stencilWrite;\r\n        this._stencilWriteMask = source.stencilWriteMask;\r\n        this._stencilFunc = source.stencilFunc;\r\n        this._stencilRef = source.stencilRef;\r\n        this._stencilFuncMask = source.stencilFuncMask;\r\n        this._stencilFail = source.stencilFail;\r\n        this._stencilZFail = source.stencilZFail;\r\n        this._stencilZPass = source.stencilZPass;\r\n\r\n        this._clipping = source.clipping;\r\n        this._clipShadows = source.clipShadows;\r\n        this._clipIntersection = source.clipIntersection;\r\n        this._clippingPlanes = source.clippingPlanes;\r\n        this._clipEdgeWidth = source.clipEdgeWidth;\r\n        this._clipEdgeColor.copy(source.clipEdgeColor);\r\n\r\n        this._colorWrite = source.colorWrite;\r\n        this._dithering = source.dithering;\r\n\r\n        this._polygonOffset = source.polygonOffset;\r\n        this._polygonOffsetFactor = source.polygonOffsetFactor;\r\n        this._polygonOffsetUnits = source.polygonOffsetUnits;\r\n\r\n        this._alphaTest = source.alphaTest;\r\n        this._premultipliedAlpha = source.premultipliedAlpha;\r\n        this._toneMapped = source.toneMapped;\r\n\r\n        this._visible = source.visible;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public abstract clone(): Material;\r\n}\r\n",
        "export * from \"./InterfaceType/DistanceResult\";\r\nexport * from \"./InterfaceType/IntersectResult\";\r\n\r\nexport * from \"./Box2\";\r\nexport * from \"./Box3\";\r\nexport * from \"./ColorRGB\";\r\nexport * from \"./ColorRGBA\";\r\nexport * from \"./Cylindrical\";\r\nexport * from \"./Ellipsoid\";\r\nexport * from \"./Euler\";\r\nexport * from \"./Frustum\";\r\nexport * from \"./HeadingPitchRang\";\r\nexport * from \"./HeadingPitchRoll\";\r\nexport * from \"./Line2\";\r\nexport * from \"./Line3\";\r\nexport * from \"./LineSegment2\";\r\nexport * from \"./LineSegment3\";\r\nexport * from \"./MathUtils\";\r\nexport * from \"./Matrix2D\";\r\nexport * from \"./Matrix3\";\r\nexport * from \"./Matrix4\";\r\nexport * from \"./OBB\";\r\nexport * from \"./Plane\";\r\nexport * from \"./Polygon\";\r\nexport * from \"./Quaternion\";\r\nexport * from \"./Ray2\";\r\nexport * from \"./Ray3\";\r\nexport * from \"./Sphere\";\r\nexport * from \"./Spherical\";\r\nexport * from \"./SphericalHarmonics3\";\r\nexport * from \"./Triangle\";\r\nexport * from \"./Vector2\";\r\nexport * from \"./Vector3\";\r\nexport * from \"./Vector4\";\r\n\r\nexport * from \"./Curves/ArcCurve\";\r\nexport * from \"./Curves/CatmullRomCurve\";\r\nexport * from \"./Curves/CatmullRomCurve3\";\r\nexport * from \"./Curves/CubicBezierCurve\";\r\nexport * from \"./Curves/CubicBezierCurve3\";\r\nexport * from \"./Curves/Curve\";\r\nexport * from \"./Curves/CurvePath\";\r\nexport * from \"./Curves/EllipseCurve\";\r\nexport * from \"./Curves/LineCurve\";\r\nexport * from \"./Curves/LineCurve3\";\r\nexport * from \"./Curves/QuadraticBezierCurve\";\r\nexport * from \"./Curves/QuadraticBezierCurve3\";\r\nexport * from \"./Curves/SplineCurve\";\r\n\r\nexport * from \"./Shape/Path\";\r\nexport * from \"./Shape/Shape\";\r\nexport * from \"./Shape/ShapePath\";\r\nexport * from \"./Shape/ShapeUtils\";\r\n",
        "import { Vector2 } from \"./Vector2\";\r\nimport { Vector3 } from \"./Vector3\";\r\nimport { Vector4 } from \"./Vector4\";\r\nimport { Matrix3 } from \"./Matrix3\";\r\nimport { Matrix4 } from \"./Matrix4\";\r\nimport { Euler } from \"./Euler\";\r\nimport { Quaternion } from \"./Quaternion\";\r\nimport { Box2 } from \"./Box2\";\r\nimport { Box3 } from \"./Box3\";\r\nimport { Sphere } from \"./Sphere\";\r\nimport { ColorRGB } from \"./ColorRGB\";\r\nimport { ColorRGBA } from \"./ColorRGBA\";\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport abstract class MathTmp {\r\n    [key: string]: (Vector2 | Vector3 | Vector4 | Matrix3 | Matrix4 | Euler | Quaternion | Box2 | Box3 | Sphere)[];\r\n\r\n    private static _Vector2: Vector2[];\r\n    private static _Vector3: Vector3[];\r\n    private static _Vector4: Vector4[];\r\n    private static _Matrix3: Matrix3[];\r\n    private static _Matrix4: Matrix4[];\r\n    private static _Euler: Euler[];\r\n    private static _Quaternion: Quaternion[];\r\n\r\n    private static _Box2: Box2[];\r\n    private static _Box3: Box3[];\r\n    private static _Sphere: Sphere[];\r\n\r\n    private static _ColorRGB: ColorRGB[];\r\n    private static _ColorRGBA: ColorRGBA[];\r\n\r\n    public static get Vector2() {\r\n        if (MathTmp._Vector2.length <= 0) {\r\n            MathTmp._Vector2 = buildArray(10, Vector2.Build);\r\n        }\r\n        return MathTmp._Vector2;\r\n    }\r\n    public static get Vector3() {\r\n        if (MathTmp._Vector3.length <= 0) {\r\n            MathTmp._Vector3 = buildArray(10, Vector3.Build);\r\n        }\r\n        return MathTmp._Vector3;\r\n    }\r\n    public static get Vector4() {\r\n        if (MathTmp._Vector4.length <= 0) {\r\n            MathTmp._Vector4 = buildArray(10, Vector4.Build);\r\n        }\r\n        return MathTmp._Vector4;\r\n    }\r\n    public static get Matrix3() {\r\n        if (MathTmp._Matrix3.length <= 0) {\r\n            MathTmp._Matrix3 = buildArray(6, Matrix3.Build);\r\n        }\r\n        return MathTmp._Matrix3;\r\n    }\r\n    public static get Matrix4() {\r\n        if (MathTmp._Matrix4.length <= 0) {\r\n            MathTmp._Matrix4 = buildArray(6, Matrix4.Build);\r\n        }\r\n        return MathTmp._Matrix4;\r\n    }\r\n    public static get Euler() {\r\n        if (MathTmp._Euler.length <= 0) {\r\n            MathTmp._Euler = buildArray(6, Euler.Build);\r\n        }\r\n        return MathTmp._Euler;\r\n    }\r\n    public static get Quaternion() {\r\n        if (MathTmp._Quaternion.length <= 0) {\r\n            MathTmp._Quaternion = buildArray(6, Quaternion.Build);\r\n        }\r\n        return MathTmp._Quaternion;\r\n    }\r\n\r\n    public static get Box2() {\r\n        if (MathTmp._Box2.length <= 0) {\r\n            MathTmp._Box2 = buildArray(6, Box2.Build);\r\n        }\r\n        return MathTmp._Box2;\r\n    }\r\n    public static get Box3() {\r\n        if (MathTmp._Box3.length <= 0) {\r\n            MathTmp._Box3 = buildArray(6, Box3.Build);\r\n        }\r\n        return MathTmp._Box3;\r\n    }\r\n    public static get Sphere() {\r\n        if (MathTmp._Sphere.length <= 0) {\r\n            MathTmp._Sphere = buildArray(6, Sphere.Build);\r\n        }\r\n        return MathTmp._Sphere;\r\n    }\r\n\r\n    public static get ColorRGB() {\r\n        if (MathTmp._ColorRGB.length <= 0) {\r\n            MathTmp._ColorRGB = buildArray(6, ColorRGB.Build);\r\n        }\r\n        return MathTmp._ColorRGB;\r\n    }\r\n    public static get ColorRGBA() {\r\n        if (MathTmp._ColorRGBA.length <= 0) {\r\n            MathTmp._ColorRGBA = buildArray(6, ColorRGBA.Build);\r\n        }\r\n        return MathTmp._ColorRGBA;\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @param size\r\n * @param itemBuilder\r\n * @constructor\r\n */\r\nfunction buildArray<T>(size: number, itemBuilder: () => T): Array<T> {\r\n    const a: T[] = [];\r\n    for (let i = 0; i < size; ++i) {\r\n        a.push(itemBuilder());\r\n    }\r\n    return a;\r\n}\r\n",
        "import {CSGProperties} from './CSGProperties';\r\nimport {CSGMatrix4x4} from './CSGMatrix4x4';\r\nimport {CSGVector3D} from './CSGVector3D';\r\nimport {CSGVertex} from './CSGVertex';\r\nimport {CSGPolygon} from './CSGPolygon';\r\nimport {CSGTree} from './CSGTree';\r\nimport {CSGFuzzyCSGFactory} from './CSGFuzzyCSGFactory';\r\nimport {CSGOrthoNormalBasis} from './CSGOrthoNormalBasis';\r\nimport {CSGVector2D} from './CSGVector2D';\r\nimport {CSGLine2D} from './CSGLine2D';\r\nimport {CSGPolygonShared} from './CSGPolygonShared';\r\nimport {CSGPlane} from './CSGPlane';\r\nimport {CSGConnector} from './CSGConnector';\r\nimport {CAG} from './CAG';\r\nimport {InterfaceCSGVector3D} from './InterfaceCSG';\r\n\r\nimport {Geometry} from '../Scene/Geometries/Geometry';\r\nimport {Vector3} from '../Math/Vector3';\r\nimport {Mesh} from '../Scene/Mesh';\r\nimport {Matrix4} from '../Math/Matrix4';\r\nimport {BufferAttributeKind} from \"../Scene/Geometries/BufferAttributeKind\";\r\nimport {BufferAttribute} from \"../Scene/Geometries/BufferAttribute\";\r\nimport {BufferArray, int} from \"../types\";\r\n\r\n\r\nfunction fnNumberSort(a: any, b: any): any {\r\n    return a - b;\r\n}\r\n\r\nfunction insertSorted(array: any[], element: any, comparefunc: any) {\r\n    var leftbound = 0;\r\n    var rightbound = array.length;\r\n    while (rightbound > leftbound) {\r\n        var testindex = Math.floor((leftbound + rightbound) / 2);\r\n        var testelement = array[testindex];\r\n        var compareresult = comparefunc(element, testelement);\r\n        if (compareresult > 0) {\r\n            // element > testelement\r\n            leftbound = testindex + 1;\r\n        } else {\r\n            rightbound = testindex;\r\n        }\r\n    }\r\n    array.splice(leftbound, 0, element);\r\n}\r\n\r\n/**\r\n * 实体几何运算类\r\n */\r\nexport class CSG {\r\n\r\n    static Vector3D = CSGVector3D;\r\n    static Plane = CSGPlane;\r\n\r\n    /**\r\n     * 多边形\r\n     */\r\n    public polygons: any[];\r\n\r\n    /**\r\n     * 属性\r\n     */\r\n    public properties: any;\r\n\r\n    /**\r\n     * 规范化状态\r\n     */\r\n    public isCanonicalized: boolean;\r\n\r\n    /**\r\n     * 精细化状态\r\n     */\r\n    public isRetesselated: boolean;\r\n\r\n    /**\r\n     * 矩阵\r\n     */\r\n    public matrix: any;\r\n\r\n    /**\r\n     * 四维矩阵\r\n     */\r\n    static Matrix4x4 = CSGMatrix4x4;\r\n\r\n    /**\r\n     * 静态分类号\r\n     */\r\n    static staticTag: number = 1;\r\n\r\n    /**\r\n     * 2D分辨率\r\n     */\r\n    static defaultResolution2D: number = 32;\r\n\r\n    /**\r\n     * 3D分辨率\r\n     */\r\n    static defaultResolution3D: number = 12;\r\n\r\n    public cachedBoundingBox: any[];\r\n\r\n    /**\r\n     * 构造函数\r\n     */\r\n    constructor() {\r\n        this.polygons = [];\r\n        this.properties = new CSGProperties();\r\n        this.isCanonicalized = true;\r\n        this.isRetesselated = true;\r\n    }\r\n\r\n    /**\r\n     * 从BufferGeometry创建\r\n     * @param geometry\r\n     * @param matrix\r\n     */\r\n    static fromGeometry(geometry: Geometry, matrix?: Matrix4): CSG {\r\n        // geometry = geometry.toNonIndexed();\r\n\r\n        let position = geometry.attributes.position;\r\n\r\n        let i;\r\n        let j;\r\n        let n;\r\n        let pos;\r\n        let\r\n            polygon;\r\n        let polygons = [];\r\n\r\n        for (i = 0; i < position.count / 3; ++i) {\r\n            let vertices = [];\r\n\r\n            for (j = 0; j < 3; ++j) {\r\n                n = i * 3 + j;\r\n                pos = new CSGVector3D(position.getX(n), position.getY(n), position.getZ(n));\r\n                vertices.push(new CSGVertex(pos));\r\n            }\r\n\r\n            polygon = new CSGPolygon(vertices);\r\n            polygon.checkIfConvex();\r\n            polygons.push(polygon);\r\n        }\r\n\r\n        let csg = CSG.fromPolygons(polygons);\r\n        if (matrix != undefined) {\r\n            let mat4 = new CSGMatrix4x4(matrix.clone().elements);\r\n            csg = csg.transform(mat4);\r\n        }\r\n        return csg;\r\n    }\r\n\r\n    /**\r\n     * 从Mesh创建\r\n     * @param mesh\r\n     */\r\n\r\n    static fromMesh(mesh: Mesh): CSG {\r\n        let _matrix: any;\r\n        mesh.updateMatrix();\r\n        _matrix = new CSGMatrix4x4(mesh.matrix.clone().elements);\r\n        let _geometry;\r\n        if (mesh.geometry instanceof Geometry) {\r\n            // _geometry = new Geometry().fromBufferGeometry(mesh.geometry);\r\n            _geometry = mesh.geometry;\r\n        } else {\r\n            // _geometry = mesh.geometry;\r\n            _geometry = mesh.geometry;\r\n            console.warn('mesh类型错误')\r\n        }\r\n        let csg = CSG.fromGeometry(_geometry);\r\n        return csg.transform(_matrix);\r\n    }\r\n\r\n    /**\r\n     * 转化为BufferGeometry\r\n     * @param csg\r\n     * @param matrix\r\n     * @param outGeometry\r\n     */\r\n    static toGeometry(csg: CSG, matrix?: any, outGeometry: Geometry = new Geometry()): Geometry {\r\n\r\n        function getGeometryVertex(vertices: any, vertex_position: any) {\r\n            let temp = new Vector3(vertex_position.x, vertex_position.y, vertex_position.z);\r\n            vertices.push(temp);\r\n            return vertices.length - 1;\r\n        }\r\n\r\n        if (matrix != undefined) {\r\n            let mat4 = new CSGMatrix4x4(matrix.clone().elements);\r\n            csg = csg.transform(mat4);\r\n        }\r\n\r\n        let polygons = csg.toPolygons();\r\n\r\n        let allvertices: Vector3[] = [];\r\n        let positions: number[] = [];\r\n        let normals: number[] = [];\r\n\r\n        polygons.forEach(function (polygon: CSGPolygon) {\r\n            let vertices = polygon.vertices.map((vertex: any) => getGeometryVertex(allvertices, vertex.pos));\r\n\r\n            if (vertices[0] == vertices[vertices.length - 1]) {\r\n                vertices.pop();\r\n            }\r\n\r\n            for (let i = 2; i < vertices.length; i++) {\r\n                positions.push(\r\n                    allvertices[vertices[0]].x, allvertices[vertices[0]].y, allvertices[vertices[0]].z,\r\n                    allvertices[vertices[i - 1]].x, allvertices[vertices[i - 1]].y, allvertices[vertices[i - 1]].z,\r\n                    allvertices[vertices[i]].x, allvertices[vertices[i]].y, allvertices[vertices[i]].z\r\n                );\r\n\r\n                normals.push(\r\n                    polygon.plane.normal.x, polygon.plane.normal.y, polygon.plane.normal.z,\r\n                    polygon.plane.normal.x, polygon.plane.normal.y, polygon.plane.normal.z,\r\n                    polygon.plane.normal.x, polygon.plane.normal.y, polygon.plane.normal.z\r\n                );\r\n            }\r\n        }, this);\r\n\r\n        // outGeometry.setFromVertices(positions, normals); // 原始方法\r\n\r\n        let _positions: BufferArray = new Float32Array(positions);\r\n        const bufferAttributePositions = new BufferAttribute(_positions, 3)\r\n        outGeometry.setAttribute(BufferAttributeKind.PositionKind, bufferAttributePositions)\r\n\r\n        let _normals: BufferArray = new Float32Array(normals);\r\n        const bufferAttributeNormals = new BufferAttribute(_positions, 3)\r\n        outGeometry.setAttribute(BufferAttributeKind.NormalKind, bufferAttributeNormals)\r\n\r\n        return outGeometry;\r\n    }\r\n\r\n    /**\r\n     * 转化为Mesh\r\n     * @param csg\r\n     * @param material\r\n     * @param outMesh\r\n     */\r\n\r\n    /*    static toMesh(csg: CSG, material: any, outMesh = new Mesh()): Mesh {\r\n            outMesh.geometry = CSG.toGeometry(csg, undefined, outMesh.geometry);\r\n            outMesh.material = material;\r\n            return outMesh;\r\n        }*/\r\n\r\n    /**\r\n     * 从多边形创建\r\n     * @param polygons\r\n     */\r\n    static fromPolygons(polygons: any[]): CSG {\r\n        let csg = new CSG();\r\n        csg.polygons = polygons;\r\n        csg.isCanonicalized = false;\r\n        csg.isRetesselated = false;\r\n        return csg;\r\n    }\r\n\r\n    /**\r\n     * 从切片创建\r\n     * @param options\r\n     */\r\n    static fromSlices(options: any): CSG {\r\n        const a = CSGPolygon.createFromPoints([\r\n            [0, 0, 0],\r\n            [1, 0, 0],\r\n            [1, 1, 0],\r\n            [0, 1, 0],\r\n        ]);\r\n        return (a.solidFromSlices(options));\r\n    }\r\n\r\n    // create from an untyped object with identical property names:\r\n    /**\r\n     * 从具有相同属性名称的无类型对象创建：\r\n     * @param obj\r\n     */\r\n    static fromObject(obj: any): CSG {\r\n        let polygons = obj.polygons.map((p: any) => CSGPolygon.fromObject(p));\r\n        let csg = CSG.fromPolygons(polygons);\r\n        csg = csg.canonicalized();\r\n        return csg;\r\n    }\r\n\r\n    // Reconstruct a CSG from the output of toCompactBinary()\r\n    /**\r\n     * 从压缩二进制创建\r\n     * @param bin\r\n     */\r\n    static fromCompactBinary(bin: any): CSG {\r\n        if (bin.class != 'CSG') {\r\n            throw new Error('Not a CSG');\r\n        }\r\n        let planes = [];\r\n        let planeData = bin.planeData;\r\n        let numplanes = planeData.length / 4;\r\n        let arrayindex = 0;\r\n        let x;\r\n        let y;\r\n        let z;\r\n        let w;\r\n        let normal;\r\n        let\r\n            plane;\r\n        for (let planeindex = 0; planeindex < numplanes; planeindex++) {\r\n            x = planeData[arrayindex++];\r\n            y = planeData[arrayindex++];\r\n            z = planeData[arrayindex++];\r\n            w = planeData[arrayindex++];\r\n            normal = CSGVector3D.Create(x, y, z);\r\n            plane = new CSGPlane(normal, w);\r\n            planes.push(plane);\r\n        }\r\n        let vertices = [];\r\n        let vertexData = bin.vertexData;\r\n        let numvertices = vertexData.length / 3;\r\n        let pos;\r\n        let\r\n            vertex;\r\n        arrayindex = 0;\r\n        for (let vertexindex = 0; vertexindex < numvertices; vertexindex++) {\r\n            x = vertexData[arrayindex++];\r\n            y = vertexData[arrayindex++];\r\n            z = vertexData[arrayindex++];\r\n            pos = CSGVector3D.Create(x, y, z);\r\n            vertex = new CSGVertex(pos);\r\n            vertices.push(vertex);\r\n        }\r\n        let shareds = bin.shared.map((shared: any) => CSGPolygonShared.fromObject(shared));\r\n        let polygons = [];\r\n        let numpolygons = bin.numPolygons;\r\n        let numVerticesPerPolygon = bin.numVerticesPerPolygon;\r\n        let polygonVertices = bin.polygonVertices;\r\n        let polygonPlaneIndexes = bin.polygonPlaneIndexes;\r\n        let polygonSharedIndexes = bin.polygonSharedIndexes;\r\n        let numpolygonvertices;\r\n        let polygonvertices;\r\n        let shared;\r\n        let\r\n            polygon; // already defined plane,\r\n        arrayindex = 0;\r\n        for (let polygonindex = 0; polygonindex < numpolygons; polygonindex++) {\r\n            numpolygonvertices = numVerticesPerPolygon[polygonindex];\r\n            polygonvertices = [];\r\n            for (let i = 0; i < numpolygonvertices; i++) {\r\n                polygonvertices.push(vertices[polygonVertices[arrayindex++]]);\r\n            }\r\n            plane = planes[polygonPlaneIndexes[polygonindex]];\r\n            shared = shareds[polygonSharedIndexes[polygonindex]];\r\n            polygon = new CSGPolygon(polygonvertices, shared, plane);\r\n            polygons.push(polygon);\r\n        }\r\n        let csg = CSG.fromPolygons(polygons);\r\n        csg.isCanonicalized = true;\r\n        csg.isRetesselated = true;\r\n        return csg;\r\n    }\r\n\r\n    /**\r\n     * 获取分类号\r\n     */\r\n    static getTag(): number {\r\n        return CSG.staticTag++;\r\n    }\r\n\r\n    // Parse an option from the options object\r\n    // If the option is not present, return the default value\r\n    /**\r\n     * 解析选项\r\n     * @param options\r\n     * @param optionname\r\n     * @param defaultvalue\r\n     */\r\n    static parseOption(options: any, optionname: any, defaultvalue: any): any {\r\n        let result = defaultvalue;\r\n        if (options) {\r\n            if (optionname in options) {\r\n                result = options[optionname];\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Parse an option and force into a CSG.Vector3D. If a scalar is passed it is converted\r\n    // into a vector with equal x,y,z\r\n    /**\r\n     * 转化选项为3D向量\r\n     * @param options\r\n     * @param optionname\r\n     * @param defaultvalue\r\n     */\r\n    static parseOptionAs3DVector(options: any, optionname: any, defaultvalue: any): CSGVector3D {\r\n        let result = CSG.parseOption(options, optionname, defaultvalue);\r\n        result = new CSGVector3D(result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 解析选项为三维向量列表\r\n     * @param options\r\n     * @param optionname\r\n     * @param defaultvalue\r\n     */\r\n    static parseOptionAs3DVectorList(options: any, optionname: any, defaultvalue: any): any {\r\n        let result = CSG.parseOption(options, optionname, defaultvalue);\r\n        return result.map((res: any) => new CSGVector3D(res));\r\n    }\r\n\r\n    // Parse an option and force into a CSG.Vector2D. If a scalar is passed it is converted\r\n    // into a vector with equal x,y\r\n    /**\r\n     * 解析选项为二维向量\r\n     * @param options\r\n     * @param optionname\r\n     * @param defaultvalue\r\n     */\r\n    static parseOptionAs2DVector(options: any, optionname: any, defaultvalue: any): CSGVector2D {\r\n        let result = CSG.parseOption(options, optionname, defaultvalue);\r\n        result = new CSGVector2D(result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 解析选项为浮点数\r\n     * @param options\r\n     * @param optionname\r\n     * @param defaultvalue\r\n     */\r\n    static parseOptionAsFloat(options: any, optionname: any, defaultvalue: any): any {\r\n        let result = CSG.parseOption(options, optionname, defaultvalue);\r\n        if (typeof (result) == 'string') {\r\n            result = Number(result);\r\n        }\r\n        if (isNaN(result) || typeof (result) != 'number') {\r\n            throw new Error(`Parameter ${optionname} should be a number`);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 解析选项为整数\r\n     * @param options\r\n     * @param optionname\r\n     * @param defaultvalue\r\n     */\r\n    static parseOptionAsInt(options: any, optionname: any, defaultvalue: any): any {\r\n        let result = CSG.parseOption(options, optionname, defaultvalue);\r\n        result = Number(Math.floor(result));\r\n        if (isNaN(result)) {\r\n            throw new Error(`Parameter ${optionname} should be a number`);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 解析选项为布尔值\r\n     * @param options\r\n     * @param optionname\r\n     * @param defaultvalue\r\n     */\r\n    static parseOptionAsBool(options: any, optionname: any, defaultvalue: any): any {\r\n        let result = CSG.parseOption(options, optionname, defaultvalue);\r\n        if (typeof (result) == 'string') {\r\n            if (result == 'true') {\r\n                result = true;\r\n            } else if (result == 'false') {\r\n                result = false;\r\n            }\r\n            // else if (result == 0) { result = false; }\r\n        }\r\n        result = !!result;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 正方形\r\n     * @param options\r\n     */\r\n    static cube(options: any): CSG {\r\n        let c: any;\r\n        let r: any;\r\n        options = options || {};\r\n        if (('corner1' in options) || ('corner2' in options)) {\r\n            if (('center' in options) || ('radius' in options)) {\r\n                throw new Error('cube: should either give a radius and center parameter, or a corner1 and corner2 parameter');\r\n            }\r\n            let corner1 = CSG.parseOptionAs3DVector(options, 'corner1', [0, 0, 0]);\r\n            let corner2 = CSG.parseOptionAs3DVector(options, 'corner2', [1, 1, 1]);\r\n            c = corner1.plus(corner2).times(0.5);\r\n            r = corner2.minus(corner1).times(0.5);\r\n        } else {\r\n            c = CSG.parseOptionAs3DVector(options, 'center', [0, 0, 0]);\r\n            r = CSG.parseOptionAs3DVector(options, 'radius', [1, 1, 1]);\r\n        }\r\n        r = r.abs(); // negative radii make no sense\r\n        let result = CSG.fromPolygons([\r\n            [\r\n                [0, 4, 6, 2],\r\n                [-1, 0, 0],\r\n            ],\r\n            [\r\n                [1, 3, 7, 5],\r\n                [+1, 0, 0],\r\n            ],\r\n            [\r\n                [0, 1, 5, 4],\r\n                [0, -1, 0],\r\n            ],\r\n            [\r\n                [2, 6, 7, 3],\r\n                [0, +1, 0],\r\n            ],\r\n            [\r\n                [0, 2, 3, 1],\r\n                [0, 0, -1],\r\n            ],\r\n            [\r\n                [4, 5, 7, 6],\r\n                [0, 0, +1],\r\n            ],\r\n        ].map((info) => {\r\n            // let normal = new CSGVector3D(info[1]);\r\n            // let plane = new CSGPlane(normal, 1);\r\n            let vertices = info[0].map((i: number) => {\r\n                const falg0: number = !!(i & 1) ? 1 : 0;\r\n                const falg1: number = !!(i & 2) ? 1 : 0;\r\n                const falg2: number = !!(i & 4) ? 1 : 0;\r\n                let pos = new CSGVector3D(c.x + r.x * (2 * falg0 - 1), c.y + r.y * (2 * falg1 - 1), c.z + r.z * (2 * falg2 - 1));\r\n                return new CSGVertex(pos);\r\n            });\r\n            return new CSGPolygon(vertices, null /* , plane */);\r\n        }));\r\n        result.properties.cube = new CSGProperties();\r\n        result.properties.cube.center = new CSGVector3D(c);\r\n        // add 6 connectors, at the centers of each face:\r\n        result.properties.cube.facecenters = [\r\n            new CSGConnector(new CSGVector3D([r.x, 0, 0]).plus(c), [1, 0, 0], [0, 0, 1]),\r\n            new CSGConnector(new CSGVector3D([-r.x, 0, 0]).plus(c), [-1, 0, 0], [0, 0, 1]),\r\n            new CSGConnector(new CSGVector3D([0, r.y, 0]).plus(c), [0, 1, 0], [0, 0, 1]),\r\n            new CSGConnector(new CSGVector3D([0, -r.y, 0]).plus(c), [0, -1, 0], [0, 0, 1]),\r\n            new CSGConnector(new CSGVector3D([0, 0, r.z]).plus(c), [0, 0, 1], [1, 0, 0]),\r\n            new CSGConnector(new CSGVector3D([0, 0, -r.z]).plus(c), [0, 0, -1], [1, 0, 0]),\r\n        ];\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 原形\r\n     * @param options\r\n     */\r\n    static sphere(options: any): CSG {\r\n        options = options || {};\r\n        let center = CSG.parseOptionAs3DVector(options, 'center', [0, 0, 0]);\r\n        let radius = CSG.parseOptionAsFloat(options, 'radius', 1);\r\n        let resolution = CSG.parseOptionAsInt(options, 'resolution', CSG.defaultResolution3D);\r\n        let xvector;\r\n        let yvector;\r\n        let zvector;\r\n        if ('axes' in options) {\r\n            xvector = options.axes[0].unit().times(radius);\r\n            yvector = options.axes[1].unit().times(radius);\r\n            zvector = options.axes[2].unit().times(radius);\r\n        } else {\r\n            xvector = new CSGVector3D([1, 0, 0]).times(radius);\r\n            yvector = new CSGVector3D([0, -1, 0]).times(radius);\r\n            zvector = new CSGVector3D([0, 0, 1]).times(radius);\r\n        }\r\n        if (resolution < 4) {\r\n            resolution = 4;\r\n        }\r\n        let qresolution = Math.round(resolution / 4);\r\n        let prevcylinderpoint;\r\n        let polygons = [];\r\n        for (let slice1 = 0; slice1 <= resolution; slice1++) {\r\n            let angle = Math.PI * 2.0 * slice1 / resolution;\r\n            let cylinderpoint = xvector.times(Math.cos(angle)).plus(yvector.times(Math.sin(angle)));\r\n            if (slice1 > 0) {\r\n                // cylinder vertices:\r\n                let vertices = [];\r\n                let prevcospitch;\r\n                let\r\n                    prevsinpitch;\r\n                for (let slice2 = 0; slice2 <= qresolution; slice2++) {\r\n                    let pitch = 0.5 * Math.PI * slice2 / qresolution;\r\n                    let cospitch = Math.cos(pitch);\r\n                    let sinpitch = Math.sin(pitch);\r\n                    if (slice2 > 0) {\r\n                        vertices = [];\r\n                        vertices.push(new CSGVertex(center.plus(prevcylinderpoint.times(prevcospitch).minus(zvector.times(prevsinpitch)))));\r\n                        vertices.push(new CSGVertex(center.plus(cylinderpoint.times(prevcospitch).minus(zvector.times(prevsinpitch)))));\r\n                        if (slice2 < qresolution) {\r\n                            vertices.push(new CSGVertex(center.plus(cylinderpoint.times(cospitch).minus(zvector.times(sinpitch)))));\r\n                        }\r\n                        vertices.push(new CSGVertex(center.plus(prevcylinderpoint.times(cospitch).minus(zvector.times(sinpitch)))));\r\n                        polygons.push(new CSGPolygon(vertices));\r\n                        vertices = [];\r\n                        vertices.push(new CSGVertex(center.plus(prevcylinderpoint.times(prevcospitch).plus(zvector.times(prevsinpitch)))));\r\n                        vertices.push(new CSGVertex(center.plus(cylinderpoint.times(prevcospitch).plus(zvector.times(prevsinpitch)))));\r\n                        if (slice2 < qresolution) {\r\n                            vertices.push(new CSGVertex(center.plus(cylinderpoint.times(cospitch).plus(zvector.times(sinpitch)))));\r\n                        }\r\n                        vertices.push(new CSGVertex(center.plus(prevcylinderpoint.times(cospitch).plus(zvector.times(sinpitch)))));\r\n                        vertices.reverse();\r\n                        polygons.push(new CSGPolygon(vertices));\r\n                    }\r\n                    prevcospitch = cospitch;\r\n                    prevsinpitch = sinpitch;\r\n                }\r\n            }\r\n            prevcylinderpoint = cylinderpoint;\r\n        }\r\n        let result = CSG.fromPolygons(polygons);\r\n        result.properties.sphere = new CSGProperties();\r\n        result.properties.sphere.center = new CSGVector3D(center);\r\n        result.properties.sphere.facepoint = center.plus(xvector);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 圆柱形\r\n     * @param options\r\n     */\r\n    static cylinder(options: any): CSG {\r\n        let s = CSG.parseOptionAs3DVector(options, 'start', [0, -1, 0]);\r\n        let e = CSG.parseOptionAs3DVector(options, 'end', [0, 1, 0]);\r\n        let r = CSG.parseOptionAsFloat(options, 'radius', 1);\r\n        let rEnd = CSG.parseOptionAsFloat(options, 'radiusEnd', r);\r\n        let rStart = CSG.parseOptionAsFloat(options, 'radiusStart', r);\r\n        let alpha = CSG.parseOptionAsFloat(options, 'sectorAngle', 360);\r\n        alpha = alpha > 360 ? alpha % 360 : alpha;\r\n        if ((rEnd < 0) || (rStart < 0)) {\r\n            throw new Error('Radius should be non-negative');\r\n        }\r\n        if ((rEnd == 0) && (rStart == 0)) {\r\n            throw new Error('Either radiusStart or radiusEnd should be positive');\r\n        }\r\n        let slices = CSG.parseOptionAsInt(options, 'resolution', CSG.defaultResolution2D);\r\n        let ray = e.minus(s);\r\n        let axisZ = ray.unit(); // , isY = (Math.abs(axisZ.y) > 0.5);\r\n        let axisX = axisZ.randomNonParallelVector().unit();\r\n        //  let axisX = new CSGVector3D(isY, !isY, 0).cross(axisZ).unit();\r\n        let axisY = axisX.cross(axisZ).unit();\r\n        let start = new CSGVertex(s);\r\n        let end = new CSGVertex(e);\r\n        let polygons = [];\r\n\r\n        function point(stack: any, slice: any, radius: any) {\r\n            let angle = slice * Math.PI * alpha / 180;\r\n            let out = axisX.times(Math.cos(angle)).plus(axisY.times(Math.sin(angle)));\r\n            let pos = s.plus(ray.times(stack)).plus(out.times(radius));\r\n            return new CSGVertex(pos);\r\n        }\r\n\r\n        if (alpha > 0) {\r\n            for (let i = 0; i < slices; i++) {\r\n                let t0 = i / slices;\r\n                let t1 = (i + 1) / slices;\r\n                if (rEnd == rStart) {\r\n                    polygons.push(new CSGPolygon([start, point(0, t0, rEnd), point(0, t1, rEnd)]));\r\n                    polygons.push(new CSGPolygon([point(0, t1, rEnd), point(0, t0, rEnd), point(1, t0, rEnd), point(1, t1, rEnd)]));\r\n                    polygons.push(new CSGPolygon([end, point(1, t1, rEnd), point(1, t0, rEnd)]));\r\n                } else {\r\n                    if (rStart > 0) {\r\n                        polygons.push(new CSGPolygon([start, point(0, t0, rStart), point(0, t1, rStart)]));\r\n                        polygons.push(new CSGPolygon([point(0, t0, rStart), point(1, t0, rEnd), point(0, t1, rStart)]));\r\n                    }\r\n                    if (rEnd > 0) {\r\n                        polygons.push(new CSGPolygon([end, point(1, t1, rEnd), point(1, t0, rEnd)]));\r\n                        polygons.push(new CSGPolygon([point(1, t0, rEnd), point(1, t1, rEnd), point(0, t1, rStart)]));\r\n                    }\r\n                }\r\n            }\r\n            if (alpha < 360) {\r\n                polygons.push(new CSGPolygon([start, end, point(0, 0, rStart)]));\r\n                polygons.push(new CSGPolygon([point(0, 0, rStart), end, point(1, 0, rEnd)]));\r\n                polygons.push(new CSGPolygon([start, point(0, 1, rStart), end]));\r\n                polygons.push(new CSGPolygon([point(0, 1, rStart), point(1, 1, rEnd), end]));\r\n            }\r\n        }\r\n        let result = CSG.fromPolygons(polygons);\r\n        result.properties.cylinder = new CSGProperties();\r\n        result.properties.cylinder.start = new CSGConnector(s, axisZ.negated(), axisX);\r\n        result.properties.cylinder.end = new CSGConnector(e, axisZ, axisX);\r\n        let cylCenter = s.plus(ray.times(0.5));\r\n        let fptVec = axisX.rotate(s, axisZ, -alpha / 2).times((rStart + rEnd) / 2);\r\n        let fptVec90 = fptVec.cross(axisZ);\r\n        // note this one is NOT a face normal for a cone. - It's horizontal from cyl perspective\r\n        result.properties.cylinder.facepointH = new CSGConnector(cylCenter.plus(fptVec), fptVec, axisZ);\r\n        result.properties.cylinder.facepointH90 = new CSGConnector(cylCenter.plus(fptVec90), fptVec90, axisZ);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 圆柱形圆角\r\n     * @param options\r\n     */\r\n    static roundedCylinder(options: any): CSG {\r\n        let p1 = CSG.parseOptionAs3DVector(options, 'start', [0, -1, 0]);\r\n        let p2 = CSG.parseOptionAs3DVector(options, 'end', [0, 1, 0]);\r\n        let radius = CSG.parseOptionAsFloat(options, 'radius', 1);\r\n        let direction = p2.minus(p1);\r\n        let defaultnormal;\r\n        if (Math.abs(direction.x) > Math.abs(direction.y)) {\r\n            defaultnormal = new CSGVector3D(0, 1, 0);\r\n        } else {\r\n            defaultnormal = new CSGVector3D(1, 0, 0);\r\n        }\r\n        let normal = CSG.parseOptionAs3DVector(options, 'normal', defaultnormal);\r\n        let resolution = CSG.parseOptionAsInt(options, 'resolution', CSG.defaultResolution3D);\r\n        if (resolution < 4) {\r\n            resolution = 4;\r\n        }\r\n        let polygons = [];\r\n        let qresolution = Math.floor(0.25 * resolution);\r\n        let length = direction.length();\r\n        if (length < 1e-10) {\r\n            return CSG.sphere({\r\n                center: p1,\r\n                radius,\r\n                resolution,\r\n            });\r\n        }\r\n        let zvector = direction.unit().times(radius);\r\n        let xvector = zvector.cross(normal).unit().times(radius);\r\n        let yvector = xvector.cross(zvector).unit().times(radius);\r\n        let prevcylinderpoint: any;\r\n        for (let slice1 = 0; slice1 <= resolution; slice1++) {\r\n            let angle = Math.PI * 2.0 * slice1 / resolution;\r\n            let cylinderpoint = xvector.times(Math.cos(angle)).plus(yvector.times(Math.sin(angle)));\r\n            if (slice1 > 0) {\r\n                // cylinder vertices:\r\n                let vertices = [];\r\n                vertices.push(new CSGVertex(p1.plus(cylinderpoint)));\r\n                vertices.push(new CSGVertex(p1.plus(prevcylinderpoint)));\r\n                vertices.push(new CSGVertex(p2.plus(prevcylinderpoint)));\r\n                vertices.push(new CSGVertex(p2.plus(cylinderpoint)));\r\n                polygons.push(new CSGPolygon(vertices));\r\n                let prevcospitch: any;\r\n                let prevsinpitch: any;\r\n                for (let slice2 = 0; slice2 <= qresolution; slice2++) {\r\n                    let pitch = 0.5 * Math.PI * slice2 / qresolution;\r\n                    // let pitch = Math.asin(slice2/qresolution);\r\n                    let cospitch = Math.cos(pitch);\r\n                    let sinpitch = Math.sin(pitch);\r\n                    if (slice2 > 0) {\r\n                        vertices = [];\r\n                        vertices.push(new CSGVertex(p1.plus(prevcylinderpoint.times(prevcospitch).minus(zvector.times(prevsinpitch)))));\r\n                        vertices.push(new CSGVertex(p1.plus(cylinderpoint.times(prevcospitch).minus(zvector.times(prevsinpitch)))));\r\n                        if (slice2 < qresolution) {\r\n                            vertices.push(new CSGVertex(p1.plus(cylinderpoint.times(cospitch).minus(zvector.times(sinpitch)))));\r\n                        }\r\n                        vertices.push(new CSGVertex(p1.plus(prevcylinderpoint.times(cospitch).minus(zvector.times(sinpitch)))));\r\n                        polygons.push(new CSGPolygon(vertices));\r\n                        vertices = [];\r\n                        vertices.push(new CSGVertex(p2.plus(prevcylinderpoint.times(prevcospitch).plus(zvector.times(prevsinpitch)))));\r\n                        vertices.push(new CSGVertex(p2.plus(cylinderpoint.times(prevcospitch).plus(zvector.times(prevsinpitch)))));\r\n                        if (slice2 < qresolution) {\r\n                            vertices.push(new CSGVertex(p2.plus(cylinderpoint.times(cospitch).plus(zvector.times(sinpitch)))));\r\n                        }\r\n                        vertices.push(new CSGVertex(p2.plus(prevcylinderpoint.times(cospitch).plus(zvector.times(sinpitch)))));\r\n                        vertices.reverse();\r\n                        polygons.push(new CSGPolygon(vertices));\r\n                    }\r\n                    prevcospitch = cospitch;\r\n                    prevsinpitch = sinpitch;\r\n                }\r\n            }\r\n            prevcylinderpoint = cylinderpoint;\r\n        }\r\n        let result = CSG.fromPolygons(polygons);\r\n        let ray = zvector.unit();\r\n        let axisX = xvector.unit();\r\n        result.properties.roundedCylinder = new CSGProperties();\r\n        result.properties.roundedCylinder.start = new CSGConnector(p1, ray.negated(), axisX);\r\n        result.properties.roundedCylinder.end = new CSGConnector(p2, ray, axisX);\r\n        result.properties.roundedCylinder.facepoint = p1.plus(xvector);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 正方形圆角\r\n     * @param options\r\n     */\r\n    static roundedCube(options: any): CSG {\r\n        let EPS = 1e-5;\r\n        let minRR = 1e-2; // minroundradius 1e-3 gives rounding errors already\r\n        let center;\r\n        let cuberadius;\r\n        options = options || {};\r\n        if (('corner1' in options) || ('corner2' in options)) {\r\n            if (('center' in options) || ('radius' in options)) {\r\n                throw new Error('roundedCube: should either give a radius and center parameter, or a corner1 and corner2 parameter');\r\n            }\r\n            let corner1 = CSG.parseOptionAs3DVector(options, 'corner1', [0, 0, 0]);\r\n            let corner2 = CSG.parseOptionAs3DVector(options, 'corner2', [1, 1, 1]);\r\n            center = corner1.plus(corner2).times(0.5);\r\n            cuberadius = corner2.minus(corner1).times(0.5);\r\n        } else {\r\n            center = CSG.parseOptionAs3DVector(options, 'center', [0, 0, 0]);\r\n            cuberadius = CSG.parseOptionAs3DVector(options, 'radius', [1, 1, 1]);\r\n        }\r\n        cuberadius = cuberadius.abs(); // negative radii make no sense\r\n        let resolution = CSG.parseOptionAsInt(options, 'resolution', CSG.defaultResolution3D);\r\n        if (resolution < 4) {\r\n            resolution = 4;\r\n        }\r\n        if (resolution % 2 == 1 && resolution < 8) {\r\n            resolution = 8;\r\n        } // avoid ugly\r\n        let roundradius = CSG.parseOptionAs3DVector(options, 'roundradius', [0.2, 0.2, 0.2]);\r\n        // slight hack for now - total radius stays ok\r\n        roundradius = CSG.Vector3D.Create(Math.max(roundradius.x, minRR), Math.max(roundradius.y, minRR), Math.max(roundradius.z, minRR));\r\n        let innerradius = cuberadius.minus(roundradius);\r\n        if (innerradius.x < 0 || innerradius.y < 0 || innerradius.z < 0) {\r\n            throw ('roundradius <= radius!');\r\n        }\r\n        let res = CSG.sphere({\r\n            radius: 1,\r\n            resolution,\r\n        });\r\n        res = res.scale(roundradius);\r\n        innerradius.x > EPS && (res = res.stretchAtPlane([1, 0, 0], [0, 0, 0], 2 * innerradius.x));\r\n        innerradius.y > EPS && (res = res.stretchAtPlane([0, 1, 0], [0, 0, 0], 2 * innerradius.y));\r\n        innerradius.z > EPS && (res = res.stretchAtPlane([0, 0, 1], [0, 0, 0], 2 * innerradius.z));\r\n        res = res.translate([-innerradius.x + center.x, -innerradius.y + center.y, -innerradius.z + center.z]);\r\n        res = res.reTesselated();\r\n        res.properties.roundedCube = new CSGProperties();\r\n        res.properties.roundedCube.center = new CSGVertex(center);\r\n        res.properties.roundedCube.facecenters = [\r\n            new CSGConnector(new CSGVector3D([cuberadius.x, 0, 0]).plus(center), [1, 0, 0], [0, 0, 1]),\r\n            new CSGConnector(new CSGVector3D([-cuberadius.x, 0, 0]).plus(center), [-1, 0, 0], [0, 0, 1]),\r\n            new CSGConnector(new CSGVector3D([0, cuberadius.y, 0]).plus(center), [0, 1, 0], [0, 0, 1]),\r\n            new CSGConnector(new CSGVector3D([0, -cuberadius.y, 0]).plus(center), [0, -1, 0], [0, 0, 1]),\r\n            new CSGConnector(new CSGVector3D([0, 0, cuberadius.z]).plus(center), [0, 0, 1], [1, 0, 0]),\r\n            new CSGConnector(new CSGVector3D([0, 0, -cuberadius.z]).plus(center), [0, 0, -1], [1, 0, 0]),\r\n        ];\r\n        return res;\r\n    }\r\n\r\n    // solve 2x2 linear equation:\r\n    // [ab][x] = [u]\r\n    // [cd][y]   [v]\r\n    /**\r\n     * 平行线\r\n     * @param a\r\n     * @param b\r\n     * @param c\r\n     * @param d\r\n     * @param u\r\n     * @param v\r\n     */\r\n    static solve2Linear(a: number, b: number, c: number, d: number, u: number, v: number) {\r\n        let det = a * d - b * c;\r\n        let invdet = 1.0 / det;\r\n        let x = u * d - b * v;\r\n        let y = -u * c + a * v;\r\n        x *= invdet;\r\n        y *= invdet;\r\n        return [x, y];\r\n    }\r\n\r\n    /**\r\n     * 多面体\r\n     * @param options\r\n     */\r\n    static polyhedron(options: any): CSG {\r\n        options = options || {};\r\n        if (('points' in options) != ('faces' in options)) {\r\n            throw new Error(\"polyhedron needs 'points' and 'faces' arrays\");\r\n        }\r\n\r\n        let vertices = CSG.parseOptionAs3DVectorList(options, 'points', [\r\n            [1, 1, 0],\r\n            [1, -1, 0],\r\n            [-1, -1, 0],\r\n            [-1, 1, 0],\r\n            [0, 0, 1],\r\n        ])\r\n            .map((pt: any) => new CSGVertex(pt));\r\n\r\n        let faces = CSG.parseOption(options, 'faces', [\r\n            [0, 1, 4],\r\n            [1, 2, 4],\r\n            [2, 3, 4],\r\n            [3, 0, 4],\r\n            [1, 0, 3],\r\n            [2, 1, 3],\r\n        ]);\r\n\r\n        // openscad convention defines inward normals - so we have to invert here\r\n        faces.forEach((face: any) => {\r\n            face.reverse();\r\n        });\r\n\r\n        let polygons = faces.map((face: any) => new CSGPolygon(face.map((idx: any) => vertices[idx])));\r\n\r\n        // TODO: facecenters as connectors? probably overkill. Maybe centroid\r\n        // the re-tesselation here happens because it's so easy for a user to\r\n        // create parametrized polyhedrons that end up with 1-2 dimensional polygons.\r\n        // These will create infinite loops at CSG.Tree()\r\n        return CSG.fromPolygons(polygons).reTesselated();\r\n    }\r\n\r\n    /**\r\n     * 判断浮点型\r\n     * @param n\r\n     * @constructor\r\n     */\r\n    static IsFloat(n: any): boolean {\r\n        return (!isNaN(n)) || (n == Infinity) || (n == -Infinity);\r\n    }\r\n\r\n    // Get the x coordinate of a point with a certain y coordinate, interpolated between two\r\n    // points (CSG.Vector2D).\r\n    // Interpolation is robust even if the points have the same y coordinate\r\n    /**\r\n     * 获取点之间具有一定y坐标的x坐标\r\n     * @param point1\r\n     * @param point2\r\n     * @param y\r\n     */\r\n    static interpolateBetween2DPointsForY(point1: any, point2: any, y: any): number {\r\n        let f1 = y - point1.y;\r\n        let f2 = point2.y - point1.y;\r\n        if (f2 < 0) {\r\n            f1 = -f1;\r\n            f2 = -f2;\r\n        }\r\n        let t;\r\n        if (f1 <= 0) {\r\n            t = 0.0;\r\n        } else if (f1 >= f2) {\r\n            t = 1.0;\r\n        } else if (f2 < 1e-10) {\r\n            t = 0.5;\r\n        } else {\r\n            t = f1 / f2;\r\n        }\r\n        let result = point1.x + t * (point2.x - point1.x);\r\n        return result;\r\n    }\r\n\r\n    // Retesselation function for a set of coplanar polygons. See the introduction at the top of\r\n    // this file.\r\n    /**\r\n     * 一组共面多边形的重新镶嵌功能 // TODO\r\n     * @param sourcepolygons\r\n     * @param destpolygons\r\n     */\r\n    static reTesselateCoplanarPolygons(sourcepolygons: any, destpolygons: any) {\r\n        let EPS = 1e-5;\r\n        let numpolygons = sourcepolygons.length;\r\n        if (numpolygons > 0) {\r\n            let plane = sourcepolygons[0].plane;\r\n            let shared = sourcepolygons[0].shared;\r\n            let orthobasis = new CSGOrthoNormalBasis(plane);\r\n            let polygonvertices2d = []; // array of array of CSG.Vector2D\r\n            let polygontopvertexindexes = []; // array of indexes of topmost vertex per polygon\r\n            let topy2polygonindexes: any = {};\r\n            let ycoordinatetopolygonindexes: any = {};\r\n            let xcoordinatebins = {};\r\n            let ycoordinatebins: any = {};\r\n            // convert all polygon vertices to 2D\r\n            // Make a list of all encountered y coordinates\r\n            // And build a map of all polygons that have a vertex at a certain y coordinate:\r\n            let ycoordinateBinningFactor = 1.0 / EPS * 10;\r\n            for (let polygonindex = 0; polygonindex < numpolygons; polygonindex++) {\r\n                let poly3d = sourcepolygons[polygonindex];\r\n                let vertices2d = [];\r\n                let numvertices = poly3d.vertices.length;\r\n                let minindex = -1;\r\n                if (numvertices > 0) {\r\n                    let miny: number = -1.7976931348623157E+103088;\r\n                    let maxy: number = Infinity;\r\n                    let maxindex: number;\r\n                    for (let i = 0; i < numvertices; i++) {\r\n                        let pos2d = orthobasis.to2D(poly3d.vertices[i].pos);\r\n                        // perform binning of y coordinates: If we have multiple vertices very\r\n                        // close to each other, give them the same y coordinate:\r\n                        let ycoordinatebin = Math.floor(pos2d.y * ycoordinateBinningFactor);\r\n                        let newy;\r\n                        if (ycoordinatebin in ycoordinatebins) {\r\n                            newy = ycoordinatebins[ycoordinatebin];\r\n                        } else if (ycoordinatebin + 1 in ycoordinatebins) {\r\n                            newy = ycoordinatebins[ycoordinatebin + 1];\r\n                        } else if (ycoordinatebin - 1 in ycoordinatebins) {\r\n                            newy = ycoordinatebins[ycoordinatebin - 1];\r\n                        } else {\r\n                            newy = pos2d.y;\r\n                            ycoordinatebins[ycoordinatebin] = pos2d.y;\r\n                        }\r\n                        pos2d = CSGVector2D.Create(pos2d.x, newy);\r\n                        vertices2d.push(pos2d);\r\n                        let y = pos2d.y;\r\n                        if ((i == 0) || (y < miny)) {\r\n                            miny = y;\r\n                            minindex = i;\r\n                        }\r\n                        if ((i == 0) || (y > maxy)) {\r\n                            maxy = y;\r\n                            maxindex = i;\r\n                        }\r\n                        if (!(y in ycoordinatetopolygonindexes)) {\r\n                            ycoordinatetopolygonindexes[y] = {};\r\n                        }\r\n                        ycoordinatetopolygonindexes[y][polygonindex] = true;\r\n                    }\r\n                    if (miny >= maxy) {\r\n                        // degenerate polygon, all vertices have same y coordinate. Just ignore it from now:\r\n                        vertices2d = [];\r\n                        numvertices = 0;\r\n                        minindex = -1;\r\n                    } else {\r\n                        if (!(miny in topy2polygonindexes)) {\r\n                            topy2polygonindexes[miny] = [];\r\n                        }\r\n                        topy2polygonindexes[miny].push(polygonindex);\r\n                    }\r\n                } // if(numvertices > 0)\r\n                // reverse the vertex order:\r\n                vertices2d.reverse();\r\n                minindex = numvertices - minindex - 1;\r\n                polygonvertices2d.push(vertices2d);\r\n                polygontopvertexindexes.push(minindex);\r\n            }\r\n            let ycoordinates = [];\r\n            for (let ycoordinate in ycoordinatetopolygonindexes) {\r\n                ycoordinates.push(ycoordinate);\r\n            }\r\n            ycoordinates.sort(fnNumberSort);\r\n            // Now we will iterate over all y coordinates, from lowest to highest y coordinate\r\n            // activepolygons: source polygons that are 'active', i.e. intersect with our y coordinate\r\n            //   Is sorted so the polygons are in left to right order\r\n            // Each element in activepolygons has these properties:\r\n            //        polygonindex: the index of the source polygon (i.e. an index into the sourcepolygons\r\n            //                      and polygonvertices2d arrays)\r\n            //        leftvertexindex: the index of the vertex at the left side of the polygon (lowest x)\r\n            //                         that is at or just above the current y coordinate\r\n            //        rightvertexindex: dito at right hand side of polygon\r\n            //        topleft, bottomleft: coordinates of the left side of the polygon crossing the current y coordinate\r\n            //        topright, bottomright: coordinates of the right hand side of the polygon crossing the current y coordinate\r\n            let activepolygons: any[] = [];\r\n            let prevoutpolygonrow: any[] = [];\r\n            for (let yindex = 0; yindex < ycoordinates.length; yindex++) {\r\n                let newoutpolygonrow: any = [];\r\n                let ycoordinate_as_string = ycoordinates[yindex];\r\n                let ycoordinate = Number(ycoordinate_as_string);\r\n                // update activepolygons for this y coordinate:\r\n                // - Remove any polygons that end at this y coordinate\r\n                // - update leftvertexindex and rightvertexindex (which point to the current vertex index\r\n                //   at the the left and right side of the polygon\r\n                // Iterate over all polygons that have a corner at this y coordinate:\r\n                let polygonindexeswithcorner = ycoordinatetopolygonindexes[ycoordinate_as_string];\r\n                for (let activepolygonindex = 0; activepolygonindex < activepolygons.length; ++activepolygonindex) {\r\n                    let activepolygon = activepolygons[activepolygonindex];\r\n                    let polygonindex = activepolygon.polygonindex;\r\n                    if (polygonindexeswithcorner[polygonindex]) {\r\n                        // this active polygon has a corner at this y coordinate:\r\n                        let vertices2d = polygonvertices2d[polygonindex];\r\n                        let numvertices = vertices2d.length;\r\n                        let newleftvertexindex = activepolygon.leftvertexindex;\r\n                        let newrightvertexindex = activepolygon.rightvertexindex;\r\n                        // See if we need to increase leftvertexindex or decrease rightvertexindex:\r\n                        while (true) {\r\n                            let nextleftvertexindex = newleftvertexindex + 1;\r\n                            if (nextleftvertexindex >= numvertices) {\r\n                                nextleftvertexindex = 0;\r\n                            }\r\n                            if (vertices2d[nextleftvertexindex].y != ycoordinate) {\r\n                                break;\r\n                            }\r\n                            newleftvertexindex = nextleftvertexindex;\r\n                        }\r\n                        let nextrightvertexindex = newrightvertexindex - 1;\r\n                        if (nextrightvertexindex < 0) {\r\n                            nextrightvertexindex = numvertices - 1;\r\n                        }\r\n                        if (vertices2d[nextrightvertexindex].y == ycoordinate) {\r\n                            newrightvertexindex = nextrightvertexindex;\r\n                        }\r\n                        if ((newleftvertexindex != activepolygon.leftvertexindex) && (newleftvertexindex == newrightvertexindex)) {\r\n                            // We have increased leftvertexindex or decreased rightvertexindex, and now they point to the same vertex\r\n                            // This means that this is the bottom point of the polygon. We'll remove it:\r\n                            activepolygons.splice(activepolygonindex, 1);\r\n                            --activepolygonindex;\r\n                        } else {\r\n                            activepolygon.leftvertexindex = newleftvertexindex;\r\n                            activepolygon.rightvertexindex = newrightvertexindex;\r\n                            activepolygon.topleft = vertices2d[newleftvertexindex];\r\n                            activepolygon.topright = vertices2d[newrightvertexindex];\r\n                            let nextleftvertexindex = newleftvertexindex + 1;\r\n                            if (nextleftvertexindex >= numvertices) {\r\n                                nextleftvertexindex = 0;\r\n                            }\r\n                            activepolygon.bottomleft = vertices2d[nextleftvertexindex];\r\n                            let nextrightvertexindex = newrightvertexindex - 1;\r\n                            if (nextrightvertexindex < 0) {\r\n                                nextrightvertexindex = numvertices - 1;\r\n                            }\r\n                            activepolygon.bottomright = vertices2d[nextrightvertexindex];\r\n                        }\r\n                    } // if polygon has corner here\r\n                } // for activepolygonindex\r\n                let nextycoordinate: any;\r\n                if (yindex >= ycoordinates.length - 1) {\r\n                    // last row, all polygons must be finished here:\r\n                    activepolygons = [];\r\n                    nextycoordinate = null;\r\n                } else {\r\n                    // yindex < ycoordinates.length-1\r\n                    nextycoordinate = Number(ycoordinates[yindex + 1]);\r\n                    let middleycoordinate = 0.5 * (ycoordinate + nextycoordinate);\r\n                    // update activepolygons by adding any polygons that start here:\r\n                    let startingpolygonindexes = topy2polygonindexes[ycoordinate_as_string];\r\n                    for (let polygonindex_key in startingpolygonindexes) {\r\n                        let polygonindex = startingpolygonindexes[polygonindex_key];\r\n                        let vertices2d = polygonvertices2d[polygonindex];\r\n                        let numvertices = vertices2d.length;\r\n                        let topvertexindex = polygontopvertexindexes[polygonindex];\r\n                        // the top of the polygon may be a horizontal line. In that case topvertexindex can point to any point on this line.\r\n                        // Find the left and right topmost vertices which have the current y coordinate:\r\n                        let topleftvertexindex = topvertexindex;\r\n                        while (true) {\r\n                            let i = topleftvertexindex + 1;\r\n                            if (i >= numvertices) {\r\n                                i = 0;\r\n                            }\r\n                            if (vertices2d[i].y != ycoordinate) {\r\n                                break;\r\n                            }\r\n                            if (i == topvertexindex) {\r\n                                break;\r\n                            } // should not happen, but just to prevent endless loops\r\n                            topleftvertexindex = i;\r\n                        }\r\n                        let toprightvertexindex = topvertexindex;\r\n                        while (true) {\r\n                            let i = toprightvertexindex - 1;\r\n                            if (i < 0) {\r\n                                i = numvertices - 1;\r\n                            }\r\n                            if (vertices2d[i].y != ycoordinate) {\r\n                                break;\r\n                            }\r\n                            if (i == topleftvertexindex) {\r\n                                break;\r\n                            } // should not happen, but just to prevent endless loops\r\n                            toprightvertexindex = i;\r\n                        }\r\n                        let nextleftvertexindex = topleftvertexindex + 1;\r\n                        if (nextleftvertexindex >= numvertices) {\r\n                            nextleftvertexindex = 0;\r\n                        }\r\n                        let nextrightvertexindex = toprightvertexindex - 1;\r\n                        if (nextrightvertexindex < 0) {\r\n                            nextrightvertexindex = numvertices - 1;\r\n                        }\r\n                        let newactivepolygon = {\r\n                            polygonindex,\r\n                            leftvertexindex: topleftvertexindex,\r\n                            rightvertexindex: toprightvertexindex,\r\n                            topleft: vertices2d[topleftvertexindex],\r\n                            topright: vertices2d[toprightvertexindex],\r\n                            bottomleft: vertices2d[nextleftvertexindex],\r\n                            bottomright: vertices2d[nextrightvertexindex],\r\n                        };\r\n                        insertSorted(activepolygons, newactivepolygon, (el1: any, el2: any) => {\r\n                            let x1 = CSG.interpolateBetween2DPointsForY(\r\n                                el1.topleft, el1.bottomleft, middleycoordinate);\r\n                            let x2 = CSG.interpolateBetween2DPointsForY(\r\n                                el2.topleft, el2.bottomleft, middleycoordinate);\r\n                            if (x1 > x2) {\r\n                                return 1;\r\n                            }\r\n                            if (x1 < x2) {\r\n                                return -1;\r\n                            }\r\n                            return 0;\r\n                        });\r\n                    } // for(let polygonindex in startingpolygonindexes)\r\n                } //  yindex < ycoordinates.length-1\r\n                // if( (yindex == ycoordinates.length-1) || (nextycoordinate - ycoordinate > EPS) )\r\n                if (true) {\r\n                    // Now activepolygons is up to date\r\n                    // Build the output polygons for the next row in newoutpolygonrow:\r\n                    for (let activepolygon_key in activepolygons) {\r\n                        let activepolygon = activepolygons[activepolygon_key];\r\n                        let polygonindex = activepolygon.polygonindex;\r\n                        let vertices2d = polygonvertices2d[polygonindex];\r\n                        let numvertices = vertices2d.length;\r\n                        let x = CSG.interpolateBetween2DPointsForY(activepolygon.topleft, activepolygon.bottomleft, ycoordinate);\r\n                        let topleft = CSGVector2D.Create(x, ycoordinate);\r\n                        x = CSG.interpolateBetween2DPointsForY(activepolygon.topright, activepolygon.bottomright, ycoordinate);\r\n                        let topright = CSGVector2D.Create(x, ycoordinate);\r\n                        x = CSG.interpolateBetween2DPointsForY(activepolygon.topleft, activepolygon.bottomleft, nextycoordinate);\r\n                        let bottomleft = CSGVector2D.Create(x, nextycoordinate);\r\n                        x = CSG.interpolateBetween2DPointsForY(activepolygon.topright, activepolygon.bottomright, nextycoordinate);\r\n                        let bottomright = CSGVector2D.Create(x, nextycoordinate);\r\n                        let outpolygon = {\r\n                            topleft,\r\n                            topright,\r\n                            bottomleft,\r\n                            bottomright,\r\n                            leftline: CSGLine2D.fromPoints(topleft, bottomleft),\r\n                            rightline: CSGLine2D.fromPoints(bottomright, topright),\r\n                        };\r\n                        if (newoutpolygonrow.length > 0) {\r\n                            let prevoutpolygon = newoutpolygonrow[newoutpolygonrow.length - 1];\r\n                            let d1 = outpolygon.topleft.distanceTo(prevoutpolygon.topright);\r\n                            let d2 = outpolygon.bottomleft.distanceTo(prevoutpolygon.bottomright);\r\n                            if ((d1 < EPS) && (d2 < EPS)) {\r\n                                // we can join this polygon with the one to the left:\r\n                                outpolygon.topleft = prevoutpolygon.topleft;\r\n                                outpolygon.leftline = prevoutpolygon.leftline;\r\n                                outpolygon.bottomleft = prevoutpolygon.bottomleft;\r\n                                newoutpolygonrow.splice(newoutpolygonrow.length - 1, 1);\r\n                            }\r\n                        }\r\n                        newoutpolygonrow.push(outpolygon);\r\n                    } // for(activepolygon in activepolygons)\r\n                    if (yindex > 0) {\r\n                        // try to match the new polygons against the previous row:\r\n                        let prevcontinuedindexes: any = {};\r\n                        let matchedindexes: any = {};\r\n                        for (let i = 0; i < newoutpolygonrow.length; i++) {\r\n                            let thispolygon = newoutpolygonrow[i];\r\n                            for (let ii = 0; ii < prevoutpolygonrow.length; ii++) {\r\n                                if (!matchedindexes[ii]) {\r\n                                    // not already processed?\r\n                                    // We have a match if the sidelines are equal or if the top coordinates\r\n                                    // are on the sidelines of the previous polygon\r\n                                    let prevpolygon = prevoutpolygonrow[ii];\r\n                                    if (prevpolygon.bottomleft.distanceTo(thispolygon.topleft) < EPS) {\r\n                                        if (prevpolygon.bottomright.distanceTo(thispolygon.topright) < EPS) {\r\n                                            // Yes, the top of this polygon matches the bottom of the previous:\r\n                                            matchedindexes[ii] = true;\r\n                                            // Now check if the joined polygon would remain convex:\r\n                                            let d1 = thispolygon.leftline.direction().x - prevpolygon.leftline.direction().x;\r\n                                            let d2 = thispolygon.rightline.direction().x - prevpolygon.rightline.direction().x;\r\n                                            let leftlinecontinues = Math.abs(d1) < EPS;\r\n                                            let rightlinecontinues = Math.abs(d2) < EPS;\r\n                                            let leftlineisconvex = leftlinecontinues || (d1 >= 0);\r\n                                            let rightlineisconvex = rightlinecontinues || (d2 >= 0);\r\n                                            if (leftlineisconvex && rightlineisconvex) {\r\n                                                // yes, both sides have convex corners:\r\n                                                // This polygon will continue the previous polygon\r\n                                                thispolygon.outpolygon = prevpolygon.outpolygon;\r\n                                                thispolygon.leftlinecontinues = leftlinecontinues;\r\n                                                thispolygon.rightlinecontinues = rightlinecontinues;\r\n                                                prevcontinuedindexes[ii] = true;\r\n                                            }\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                } // if(!prevcontinuedindexes[ii])\r\n                            } // for ii\r\n                        } // for i\r\n                        for (let ii = 0; ii < prevoutpolygonrow.length; ii++) {\r\n                            if (!prevcontinuedindexes[ii]) {\r\n                                // polygon ends here\r\n                                // Finish the polygon with the last point(s):\r\n                                let prevpolygon = prevoutpolygonrow[ii];\r\n                                prevpolygon.outpolygon.rightpoints.push(prevpolygon.bottomright);\r\n                                if (prevpolygon.bottomright.distanceTo(prevpolygon.bottomleft) > EPS) {\r\n                                    // polygon ends with a horizontal line:\r\n                                    prevpolygon.outpolygon.leftpoints.push(prevpolygon.bottomleft);\r\n                                }\r\n                                // reverse the left half so we get a counterclockwise circle:\r\n                                prevpolygon.outpolygon.leftpoints.reverse();\r\n                                let points2d = prevpolygon.outpolygon.rightpoints.concat(prevpolygon.outpolygon.leftpoints);\r\n                                let vertices3d: any = [];\r\n                                points2d.map((point2d: any) => {\r\n                                    let point3d = orthobasis.to3D(point2d);\r\n                                    let vertex3d = new CSGVertex(point3d);\r\n                                    vertices3d.push(vertex3d);\r\n                                });\r\n                                let polygon = new CSGPolygon(vertices3d, shared, plane);\r\n                                destpolygons.push(polygon);\r\n                            }\r\n                        }\r\n                    } // if(yindex > 0)\r\n                    for (let i = 0; i < newoutpolygonrow.length; i++) {\r\n                        let thispolygon = newoutpolygonrow[i];\r\n                        if (!thispolygon.outpolygon) {\r\n                            // polygon starts here:\r\n                            thispolygon.outpolygon = {\r\n                                leftpoints: [],\r\n                                rightpoints: [],\r\n                            };\r\n                            thispolygon.outpolygon.leftpoints.push(thispolygon.topleft);\r\n                            if (thispolygon.topleft.distanceTo(thispolygon.topright) > EPS) {\r\n                                // we have a horizontal line at the top:\r\n                                thispolygon.outpolygon.rightpoints.push(thispolygon.topright);\r\n                            }\r\n                        } else {\r\n                            // continuation of a previous row\r\n                            if (!thispolygon.leftlinecontinues) {\r\n                                thispolygon.outpolygon.leftpoints.push(thispolygon.topleft);\r\n                            }\r\n                            if (!thispolygon.rightlinecontinues) {\r\n                                thispolygon.outpolygon.rightpoints.push(thispolygon.topright);\r\n                            }\r\n                        }\r\n                    }\r\n                    prevoutpolygonrow = newoutpolygonrow;\r\n                }\r\n            } // for yindex\r\n        } // if(numpolygons > 0)\r\n    }\r\n\r\n    /**\r\n     * 获取多边形\r\n     */\r\n    public toPolygons(): any[] {\r\n        return this.polygons;\r\n    }\r\n\r\n    // Return a new CSG solid representing space in either this solid or in the\r\n    // solid `csg`. Neither this solid nor the solid `csg` are modified.\r\n    //\r\n    //     A.union(B)\r\n    //\r\n    //     +-------+            +-------+\r\n    //     |       |            |       |\r\n    //     |   A   |            |       |\r\n    //     |    +--+----+   =   |       +----+\r\n    //     +----+--+    |       +----+       |\r\n    //          |   B   |            |       |\r\n    //          |       |            |       |\r\n    //          +-------+            +-------+\r\n    //\r\n    /**\r\n     * 求并集\r\n     * @param csg\r\n     */\r\n    public union(csg: CSG | any[]): CSG {\r\n        let csgs;\r\n        if (csg instanceof Array) {\r\n            csgs = csg.slice(0);\r\n            csgs.push(this);\r\n        } else {\r\n            csgs = [this, csg];\r\n        }\r\n        // combine csg pairs in a way that forms a balanced binary tree pattern\r\n        let _i: number = 1;\r\n        for (let i = 1; i < csgs.length; i += 2) {\r\n            csgs.push(csgs[i - 1].unionSub(csgs[i]));\r\n            _i = i;\r\n        }\r\n        return csgs[_i - 1].reTesselated().canonicalized();\r\n    }\r\n\r\n    /**\r\n     * 联合子类型\r\n     * @param csg\r\n     * @param retesselate\r\n     * @param canonicalize\r\n     */\r\n    public unionSub(csg: CSG, retesselate: boolean, canonicalize: boolean): CSG {\r\n        if (!this.mayOverlap(csg)) {\r\n            return this.unionForNonIntersecting(csg);\r\n        } else {\r\n            let a = new CSGTree(this.polygons);\r\n            let b = new CSGTree(csg.polygons);\r\n            a.clipTo(b, false);\r\n            // b.clipTo(a, true); // ERROR: this doesn't work\r\n            b.clipTo(a);\r\n            b.invert();\r\n            b.clipTo(a);\r\n            b.invert();\r\n            let newpolygons = a.allPolygons().concat(b.allPolygons());\r\n            let result = CSG.fromPolygons(newpolygons);\r\n            result.properties = this.properties._merge(csg.properties);\r\n            if (retesselate) {\r\n                result = result.reTesselated();\r\n            }\r\n            if (canonicalize) {\r\n                result = result.canonicalized();\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n\r\n    // Like union, but when we know that the two solids are not intersecting\r\n    // Do not use if you are not completely sure that the solids do not intersect!\r\n    /**\r\n     * 联合,但是两实体未相交\r\n     * @param csg\r\n     */\r\n    public unionForNonIntersecting(csg: CSG): CSG {\r\n        let newpolygons = this.polygons.concat(csg.polygons);\r\n        let result = CSG.fromPolygons(newpolygons);\r\n        result.properties = this.properties._merge(csg.properties);\r\n        result.isCanonicalized = this.isCanonicalized && csg.isCanonicalized;\r\n        result.isRetesselated = this.isRetesselated && csg.isRetesselated;\r\n        return result;\r\n    }\r\n\r\n    // Return a new CSG solid representing space in this solid but not in the\r\n    // solid `csg`. Neither this solid nor the solid `csg` are modified.\r\n    //\r\n    //     A.subtract(B)\r\n    //\r\n    //     +-------+            +-------+\r\n    //     |       |            |       |\r\n    //     |   A   |            |       |\r\n    //     |    +--+----+   =   |    +--+\r\n    //     +----+--+    |       +----+\r\n    //          |   B   |\r\n    //          |       |\r\n    //          +-------+\r\n    //\r\n    /**\r\n     * 减去\r\n     * @param csg\r\n     */\r\n    public subtract(csg: CSG | CSG[]): CSG {\r\n        let csgs;\r\n        if (csg instanceof Array) {\r\n            csgs = csg;\r\n        } else {\r\n            csgs = [csg];\r\n        }\r\n        let result: any = this;\r\n        for (let i = 0; i < csgs.length; i++) {\r\n            let islast = (i == (csgs.length - 1));\r\n            result = result.subtractSub(csgs[i], islast, islast);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 减去\r\n     * @param csg\r\n     * @param retesselate\r\n     * @param canonicalize\r\n     */\r\n    public subtractSub(csg: CSG, retesselate: boolean, canonicalize: boolean): CSG {\r\n        let a = new CSGTree(this.polygons);\r\n        let b = new CSGTree(csg.polygons);\r\n        a.invert();\r\n        a.clipTo(b);\r\n        b.clipTo(a, true);\r\n        a.addPolygons(b.allPolygons());\r\n        a.invert();\r\n        let result = CSG.fromPolygons(a.allPolygons());\r\n        result.properties = this.properties._merge(csg.properties);\r\n        if (retesselate) {\r\n            result = result.reTesselated();\r\n        }\r\n        if (canonicalize) {\r\n            result = result.canonicalized();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Return a new CSG solid representing space both this solid and in the\r\n    // solid `csg`. Neither this solid nor the solid `csg` are modified.\r\n    //\r\n    //     A.intersect(B)\r\n    //\r\n    //     +-------+\r\n    //     |       |\r\n    //     |   A   |\r\n    //     |    +--+----+   =   +--+\r\n    //     +----+--+    |       +--+\r\n    //          |   B   |\r\n    //          |       |\r\n    //          +-------+\r\n    //\r\n    /**\r\n     * 求交\r\n     * @param csg\r\n     */\r\n    public intersect(csg: CSG): any {\r\n        let csgs;\r\n        if (csg instanceof Array) {\r\n            csgs = csg;\r\n        } else {\r\n            csgs = [csg];\r\n        }\r\n        let result: any = this;\r\n        for (let i = 0; i < csgs.length; i++) {\r\n            let islast = (i == (csgs.length - 1));\r\n            result = result.intersectSub(csgs[i], islast, islast);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 求交子对象\r\n     * @param csg\r\n     * @param retesselate\r\n     * @param canonicalize\r\n     */\r\n    public intersectSub(csg: CSG, retesselate?: any, canonicalize?: any): CSG {\r\n        let a = new CSGTree(this.polygons);\r\n        let b = new CSGTree(csg.polygons);\r\n        a.invert();\r\n        b.clipTo(a);\r\n        b.invert();\r\n        a.clipTo(b);\r\n        b.clipTo(a);\r\n        a.addPolygons(b.allPolygons());\r\n        a.invert();\r\n        let result = CSG.fromPolygons(a.allPolygons());\r\n        result.properties = this.properties._merge(csg.properties);\r\n        if (retesselate) {\r\n            result = result.reTesselated();\r\n        }\r\n        if (canonicalize) {\r\n            result = result.canonicalized();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Return a new CSG solid with solid and empty space switched. This solid is\r\n    // not modified.\r\n    /**\r\n     * 返回一个新的CSG实体，其中已切换了实体空间和空白空间。\r\n     */\r\n    public invert(): CSG {\r\n        let flippedpolygons = this.polygons.map((p) => p.flipped());\r\n        return CSG.fromPolygons(flippedpolygons);\r\n    }\r\n\r\n    // Affine transformation of CSG object. Returns a new CSG object\r\n    /**\r\n     * CSG对象的仿射变换。返回一个新的CSG对象\r\n     * @param matrix4x4\r\n     */\r\n    public transform1(matrix4x4: CSGMatrix4x4): CSG {\r\n        let newpolygons = this.polygons.map((p) => p.transform(matrix4x4));\r\n        let result = CSG.fromPolygons(newpolygons);\r\n        result.properties = this.properties._transform(matrix4x4);\r\n        result.isRetesselated = this.isRetesselated;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 转换\r\n     * @param matrix4x4\r\n     */\r\n    public transform(matrix4x4: CSGMatrix4x4): CSG {\r\n        let ismirror = matrix4x4.isMirroring();\r\n        let transformedvertices: any = {};\r\n        let transformedplanes: any = {};\r\n        let newpolygons = this.polygons.map((p) => {\r\n            let newplane;\r\n            let plane = p.plane;\r\n            let planetag = plane.getTag();\r\n            if (planetag in transformedplanes) {\r\n                newplane = transformedplanes[planetag];\r\n            } else {\r\n                newplane = plane.transform(matrix4x4);\r\n                transformedplanes[planetag] = newplane;\r\n            }\r\n            let newvertices = p.vertices.map((v: any) => {\r\n                let newvertex;\r\n                let vertextag = v.getTag();\r\n                if (vertextag in transformedvertices) {\r\n                    newvertex = transformedvertices[vertextag];\r\n                } else {\r\n                    newvertex = v.transform(matrix4x4);\r\n                    transformedvertices[vertextag] = newvertex;\r\n                }\r\n                return newvertex;\r\n            });\r\n            if (ismirror) {\r\n                newvertices.reverse();\r\n            }\r\n            return new CSGPolygon(newvertices, p.shared, newplane);\r\n        });\r\n        let result = CSG.fromPolygons(newpolygons);\r\n        result.properties = this.properties._transform(matrix4x4);\r\n        result.isRetesselated = this.isRetesselated;\r\n        result.isCanonicalized = this.isCanonicalized;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 转为字符串\r\n     */\r\n    public toString(): string {\r\n        let result = 'CSG solid:\\n';\r\n        this.polygons.map((p) => {\r\n            result += p.toString();\r\n        });\r\n        return result;\r\n    }\r\n\r\n    // Expand the solid\r\n    // resolution: number of points per 360 degree for the rounded corners\r\n    /**\r\n     * 挤出实体\r\n     * @param radius\r\n     * @param resolution\r\n     */\r\n    public expand(radius: number, resolution: number): CSG {\r\n        let result = this.expandedShell(radius, resolution, true);\r\n        result = result.reTesselated();\r\n        result.properties = this.properties; // keep original properties\r\n        return result;\r\n    }\r\n\r\n    // Contract the solid\r\n    // resolution: number of points per 360 degree for the rounded corners\r\n    /**\r\n     * 收缩实体\r\n     * @param radius\r\n     * @param resolution\r\n     */\r\n    public contract(radius: number, resolution: number): CSG {\r\n        let expandedshell = this.expandedShell(radius, resolution, false);\r\n        let result = this.subtract(expandedshell);\r\n        result = result.reTesselated();\r\n        result.properties = this.properties; // keep original properties\r\n        return result;\r\n    }\r\n\r\n    // cut the solid at a plane, and stretch the cross-section found along plane normal\r\n    /**\r\n     * 用平面切割实体\r\n     * @param normal\r\n     * @param point\r\n     * @param length\r\n     */\r\n    public stretchAtPlane(normal: CSGVector3D | any[], point: CSGVector3D | any[], length: any): CSG {\r\n        let plane = CSG.Plane.fromNormalAndPoint(normal, point);\r\n        let onb = new CSGOrthoNormalBasis(plane);\r\n        let crosssect = this.sectionCut(onb);\r\n        let midpiece = crosssect.extrudeInOrthonormalBasis(onb, length);\r\n        let piece1 = this.cutByPlane(plane);\r\n        let piece2 = this.cutByPlane(plane.flipped());\r\n        let result = piece1.union([midpiece, piece2.translate(plane.normal.times(length))]);\r\n        return result;\r\n    }\r\n\r\n    // Create the expanded shell of the solid:\r\n    // All faces are extruded to get a thickness of 2*radius\r\n    // Cylinders are constructed around every side\r\n    // Spheres are placed on every vertex\r\n    // unionWithThis: if true, the resulting solid will be united with 'this' solid;\r\n    //   the result is a true expansion of the solid\r\n    //   If false, returns only the shell\r\n    /**\r\n     * 创建实体的扩充壳\r\n     * @param radius\r\n     * @param resolution\r\n     * @param unionWithThis\r\n     */\r\n    public expandedShell(radius: number, resolution: number, unionWithThis: boolean): CSG {\r\n        let csg = this.reTesselated();\r\n        let result: any;\r\n        if (unionWithThis) {\r\n            result = csg;\r\n        } else {\r\n            result = new CSG();\r\n        }\r\n\r\n        // first extrude all polygons:\r\n        csg.polygons.map((polygon) => {\r\n            let extrudevector = polygon.plane.normal.unit().times(2 * radius);\r\n            let translatedpolygon = polygon.translate(extrudevector.times(-0.5));\r\n            let extrudedface = translatedpolygon.extrude(extrudevector);\r\n            result = result.unionSub(extrudedface, false, false);\r\n        });\r\n        // Make a list of all unique vertex pairs (i.e. all sides of the solid)\r\n        // For each vertex pair we collect the following:\r\n        //   v1: first coordinate\r\n        //   v2: second coordinate\r\n        //   planenormals: array of normal vectors of all planes touching this side\r\n        let vertexpairs: any = {}; // map of 'vertex pair tag' to {v1, v2, planenormals}\r\n        csg.polygons.map((polygon) => {\r\n            let numvertices = polygon.vertices.length;\r\n            let prevvertex = polygon.vertices[numvertices - 1];\r\n            let prevvertextag = prevvertex.getTag();\r\n            for (let i = 0; i < numvertices; i++) {\r\n                let vertex = polygon.vertices[i];\r\n                let vertextag = vertex.getTag();\r\n                let vertextagpair;\r\n                if (vertextag < prevvertextag) {\r\n                    vertextagpair = `${vertextag}-${prevvertextag}`;\r\n                } else {\r\n                    vertextagpair = `${prevvertextag}-${vertextag}`;\r\n                }\r\n                let obj;\r\n                if (vertextagpair in vertexpairs) {\r\n                    obj = vertexpairs[vertextagpair];\r\n                } else {\r\n                    obj = {\r\n                        v1: prevvertex,\r\n                        v2: vertex,\r\n                        planenormals: [],\r\n                    };\r\n                    vertexpairs[vertextagpair] = obj;\r\n                }\r\n                obj.planenormals.push(polygon.plane.normal);\r\n                prevvertextag = vertextag;\r\n                prevvertex = vertex;\r\n            }\r\n        });\r\n\r\n        // now construct a cylinder on every side\r\n        // The cylinder is always an approximation of a true cylinder: it will have <resolution> polygons\r\n        // around the sides. We will make sure though that the cylinder will have an edge at every\r\n        // face that touches this side. This ensures that we will get a smooth fill even\r\n        // if two edges are at, say, 10 degrees and the resolution is low.\r\n        // Note: the result is not retesselated yet but it really should be!\r\n        for (let vertextagpair in vertexpairs) {\r\n            let vertexpair = vertexpairs[vertextagpair];\r\n            let startpoint = vertexpair.v1.pos;\r\n            let endpoint = vertexpair.v2.pos;\r\n            // our x,y and z vectors:\r\n            let zbase = endpoint.minus(startpoint).unit();\r\n            let xbase = vertexpair.planenormals[0].unit();\r\n            let ybase = xbase.cross(zbase);\r\n            // make a list of angles that the cylinder should traverse:\r\n            let angles = [];\r\n            // first of all equally spaced around the cylinder:\r\n            for (let i = 0; i < resolution; i++) {\r\n                angles.push(i * Math.PI * 2 / resolution);\r\n            }\r\n            // and also at every normal of all touching planes:\r\n            for (let i = 0, iMax = vertexpair.planenormals.length; i < iMax; i++) {\r\n                let planenormal = vertexpair.planenormals[i];\r\n                let si = ybase.dot(planenormal);\r\n                let co = xbase.dot(planenormal);\r\n                let angle = Math.atan2(si, co);\r\n                if (angle < 0) {\r\n                    angle += Math.PI * 2;\r\n                }\r\n                angles.push(angle);\r\n                angle = Math.atan2(-si, -co);\r\n                if (angle < 0) {\r\n                    angle += Math.PI * 2;\r\n                }\r\n                angles.push(angle);\r\n            }\r\n            // this will result in some duplicate angles but we will get rid of those later.\r\n            // Sort:\r\n            angles = angles.sort(fnNumberSort);\r\n            // Now construct the cylinder by traversing all angles:\r\n            let numangles = angles.length;\r\n            let prevp1;\r\n            let prevp2;\r\n            let startfacevertices = [];\r\n            let endfacevertices = [];\r\n            let polygons = [];\r\n            for (let i = -1; i < numangles; i++) {\r\n                let angle = angles[(i < 0) ? (i + numangles) : i];\r\n                let si = Math.sin(angle);\r\n                let co = Math.cos(angle);\r\n                let p = xbase.times(co * radius).plus(ybase.times(si * radius));\r\n                let p1 = startpoint.plus(p);\r\n                let p2 = endpoint.plus(p);\r\n                let skip = false;\r\n                if (i >= 0) {\r\n                    if (p1.distanceTo(prevp1) < 1e-5) {\r\n                        skip = true;\r\n                    }\r\n                }\r\n                if (!skip) {\r\n                    if (i >= 0) {\r\n                        startfacevertices.push(new CSGVertex(p1));\r\n                        endfacevertices.push(new CSGVertex(p2));\r\n                        let polygonvertices = [\r\n                            new CSGVertex(prevp2),\r\n                            new CSGVertex(p2),\r\n                            new CSGVertex(p1),\r\n                            new CSGVertex(prevp1),\r\n                        ];\r\n                        let polygon = new CSGPolygon(polygonvertices);\r\n                        polygons.push(polygon);\r\n                    }\r\n                    prevp1 = p1;\r\n                    prevp2 = p2;\r\n                }\r\n            }\r\n            endfacevertices.reverse();\r\n            polygons.push(new CSGPolygon(startfacevertices));\r\n            polygons.push(new CSGPolygon(endfacevertices));\r\n            let cylinder = CSG.fromPolygons(polygons);\r\n            result = result.unionSub(cylinder, false, false);\r\n        }\r\n\r\n        // make a list of all unique vertices\r\n        // For each vertex we also collect the list of normals of the planes touching the vertices\r\n        let vertexmap: any = {};\r\n        csg.polygons.map((polygon) => {\r\n            polygon.vertices.map((vertex: any) => {\r\n                let vertextag = vertex.getTag();\r\n                let obj;\r\n                if (vertextag in vertexmap) {\r\n                    obj = vertexmap[vertextag];\r\n                } else {\r\n                    obj = {\r\n                        pos: vertex.pos,\r\n                        normals: [],\r\n                    };\r\n                    vertexmap[vertextag] = obj;\r\n                }\r\n                obj.normals.push(polygon.plane.normal);\r\n            });\r\n        });\r\n\r\n        // and build spheres at each vertex\r\n        // We will try to set the x and z axis to the normals of 2 planes\r\n        // This will ensure that our sphere tesselation somewhat matches 2 planes\r\n        for (let vertextag in vertexmap) {\r\n            let vertexobj = vertexmap[vertextag];\r\n            // use the first normal to be the x axis of our sphere:\r\n            let xaxis = vertexobj.normals[0].unit();\r\n            // and find a suitable z axis. We will use the normal which is most perpendicular to the x axis:\r\n            let bestzaxis = null;\r\n            let bestzaxisorthogonality = 0;\r\n            for (let i = 1; i < vertexobj.normals.length; i++) {\r\n                let normal = vertexobj.normals[i].unit();\r\n                let cross = xaxis.cross(normal);\r\n                let crosslength = cross.length();\r\n                if (crosslength > 0.05) {\r\n                    if (crosslength > bestzaxisorthogonality) {\r\n                        bestzaxisorthogonality = crosslength;\r\n                        bestzaxis = normal;\r\n                    }\r\n                }\r\n            }\r\n            if (!bestzaxis) {\r\n                bestzaxis = xaxis.randomNonParallelVector();\r\n            }\r\n            let yaxis = xaxis.cross(bestzaxis).unit();\r\n            let zaxis = yaxis.cross(xaxis);\r\n            let sphere = CSG.sphere({\r\n                center: vertexobj.pos,\r\n                radius,\r\n                resolution,\r\n                axes: [xaxis, yaxis, zaxis],\r\n            });\r\n            result = result.unionSub(sphere, false, false);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 规范化\r\n     */\r\n    public canonicalized(): CSG {\r\n        if (this.isCanonicalized) {\r\n            return this;\r\n        } else {\r\n            let factory = new CSGFuzzyCSGFactory();\r\n            let result = factory.getCSG(this);\r\n            result.isCanonicalized = true;\r\n            result.isRetesselated = this.isRetesselated;\r\n            result.properties = this.properties; // keep original properties\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 重新修饰\r\n     */\r\n    public reTesselated(): CSG {\r\n        if (this.isRetesselated) {\r\n            return this;\r\n        } else {\r\n            let csg = this;\r\n            let polygonsPerPlane: any = {};\r\n            let isCanonicalized = csg.isCanonicalized;\r\n            let fuzzyfactory = new CSGFuzzyCSGFactory();\r\n            csg.polygons.map((polygon) => {\r\n                let plane = polygon.plane;\r\n                let shared = polygon.shared;\r\n                if (!isCanonicalized) {\r\n                    // in order to identify to polygons having the same plane, we need to canonicalize the planes\r\n                    // We don't have to do a full canonizalization (including vertices), to save time only do the planes and the shared data:\r\n                    plane = fuzzyfactory.getPlane(plane);\r\n                    shared = fuzzyfactory.getPolygonShared(shared);\r\n                }\r\n                let tag = `${plane.getTag()}/${shared.getTag()}`;\r\n                if (!(tag in polygonsPerPlane)) {\r\n                    polygonsPerPlane[tag] = [polygon];\r\n                } else {\r\n                    polygonsPerPlane[tag].push(polygon);\r\n                }\r\n            });\r\n            let destpolygons: any = [];\r\n            for (let planetag in polygonsPerPlane) {\r\n                let sourcepolygons = polygonsPerPlane[planetag];\r\n                if (sourcepolygons.length < 2) {\r\n                    destpolygons = destpolygons.concat(sourcepolygons);\r\n                } else {\r\n                    let retesselayedpolygons: any = [];\r\n                    CSG.reTesselateCoplanarPolygons(sourcepolygons, retesselayedpolygons);\r\n                    destpolygons = destpolygons.concat(retesselayedpolygons);\r\n                }\r\n            }\r\n            let result = CSG.fromPolygons(destpolygons);\r\n            result.isRetesselated = true;\r\n            // result = result.canonicalized();\r\n            result.properties = this.properties; // keep original properties\r\n            return result;\r\n        }\r\n    }\r\n\r\n    // returns an array of two CSG.Vector3Ds (minimum coordinates and maximum coordinates)\r\n    /**\r\n     * 获取包围盒\r\n     */\r\n    public getBounds(): any {\r\n        if (!this.cachedBoundingBox) {\r\n            let minpoint = new CSGVector3D(0, 0, 0);\r\n            let maxpoint = new CSGVector3D(0, 0, 0);\r\n            let polygons = this.polygons;\r\n            let numpolygons = polygons.length;\r\n            for (let i = 0; i < numpolygons; i++) {\r\n                let polygon = polygons[i];\r\n                let bounds = polygon.boundingBox();\r\n                if (i == 0) {\r\n                    minpoint = bounds[0];\r\n                    maxpoint = bounds[1];\r\n                } else {\r\n                    minpoint = minpoint.min(bounds[0]);\r\n                    maxpoint = maxpoint.max(bounds[1]);\r\n                }\r\n            }\r\n            this.cachedBoundingBox = [minpoint, maxpoint];\r\n        }\r\n        return this.cachedBoundingBox;\r\n    }\r\n\r\n    // returns true if there is a possibility that the two solids overlap\r\n    // returns false if we can be sure that they do not overlap\r\n    /**\r\n     * 判断重叠状态\r\n     * @param csg\r\n     */\r\n    public mayOverlap(csg: CSG): boolean {\r\n        if ((this.polygons.length == 0) || (csg.polygons.length == 0)) {\r\n            return false;\r\n        } else {\r\n            let mybounds = this.getBounds();\r\n            let otherbounds = csg.getBounds();\r\n            if (mybounds[1].x < otherbounds[0].x) {\r\n                return false;\r\n            }\r\n            if (mybounds[0].x > otherbounds[1].x) {\r\n                return false;\r\n            }\r\n            if (mybounds[1].y < otherbounds[0].y) {\r\n                return false;\r\n            }\r\n            if (mybounds[0].y > otherbounds[1].y) {\r\n                return false;\r\n            }\r\n            if (mybounds[1].z < otherbounds[0].z) {\r\n                return false;\r\n            }\r\n            if (mybounds[0].z > otherbounds[1].z) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n\r\n    // Cut the solid by a plane. Returns the solid on the back side of the plane\r\n    /**\r\n     * 用平面切割固体。返回平面背面的实体\r\n     * @param plane\r\n     */\r\n    public cutByPlane(plane: CSGPlane): CSG {\r\n        if (this.polygons.length == 0) {\r\n            return new CSG();\r\n        }\r\n        // Ideally we would like to do an intersection with a polygon of inifinite size\r\n        // but this is not supported by our implementation. As a workaround, we will create\r\n        // a cube, with one face on the plane, and a size larger enough so that the entire\r\n        // solid fits in the cube.\r\n        // find the max distance of any vertex to the center of the plane:\r\n        let planecenter = plane.normal.times(plane.w);\r\n        let maxdistance = 0;\r\n        this.polygons.map((polygon) => {\r\n            polygon.vertices.map((vertex: any) => {\r\n                let distance = vertex.pos.distanceToSquared(planecenter);\r\n                if (distance > maxdistance) {\r\n                    maxdistance = distance;\r\n                }\r\n            });\r\n        });\r\n        maxdistance = Math.sqrt(maxdistance);\r\n        maxdistance *= 1.01; // make sure it's really larger\r\n        // Now build a polygon on the plane, at any point farther than maxdistance from the plane center:\r\n        let vertices = [];\r\n        let orthobasis = new CSGOrthoNormalBasis(plane);\r\n        vertices.push(new CSGVertex(orthobasis.to3D(new CSGVector2D(maxdistance, -maxdistance))));\r\n        vertices.push(new CSGVertex(orthobasis.to3D(new CSGVector2D(-maxdistance, -maxdistance))));\r\n        vertices.push(new CSGVertex(orthobasis.to3D(new CSGVector2D(-maxdistance, maxdistance))));\r\n        vertices.push(new CSGVertex(orthobasis.to3D(new CSGVector2D(maxdistance, maxdistance))));\r\n        let polygon = new CSGPolygon(vertices, null, plane.flipped());\r\n        // and extrude the polygon into a cube, backwards of the plane:\r\n        let cube = polygon.extrude(plane.normal.times(-maxdistance));\r\n        // Now we can do the intersection:\r\n        let result = this.intersect(cube);\r\n        result.properties = this.properties; // keep original properties\r\n        return result;\r\n    }\r\n\r\n    // Connect a solid to another solid, such that two CSG.Connectors become connected\r\n    //   myConnector: a CSG.Connector of this solid\r\n    //   otherConnector: a CSG.Connector to which myConnector should be connected\r\n    //   mirror: false: the 'axis' vectors of the connectors should point in the same direction\r\n    //           true: the 'axis' vectors of the connectors should point in opposite direction\r\n    //   normalrotation: degrees of rotation between the 'normal' vectors of the two\r\n    //                   connectors\r\n    /**\r\n     * 连接实体\r\n     * @param myConnector\r\n     * @param otherConnector\r\n     * @param mirror\r\n     * @param normalrotation\r\n     */\r\n    public connectTo(myConnector: CSGConnector, otherConnector: CSGConnector, mirror: boolean, normalrotation: number): CSG {\r\n        let matrix = myConnector.getTransformationTo(otherConnector, mirror, normalrotation);\r\n        return this.transform(matrix);\r\n    }\r\n\r\n    // set the .shared property of all polygons\r\n    // Returns a new CSG solid, the original is unmodified!\r\n    /**\r\n     * 设置共享实体\r\n     * @param shared\r\n     */\r\n    public setShared(shared: CSGPolygonShared): CSG {\r\n        let polygons = this.polygons.map((p) => new CSGPolygon(p.vertices, shared, p.plane));\r\n        let result = CSG.fromPolygons(polygons);\r\n        result.properties = this.properties; // keep original properties\r\n        result.isRetesselated = this.isRetesselated;\r\n        result.isCanonicalized = this.isCanonicalized;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 设置颜色\r\n     * @param args\r\n     */\r\n    public setColor(args: any): CSG {\r\n        let newshared = CSGPolygonShared.fromColor.apply(this, arguments);\r\n        return this.setShared(newshared);\r\n    }\r\n\r\n    /**\r\n     * 压缩文件\r\n     */\r\n    public toCompactBinary(): any {\r\n        let csg = this.canonicalized();\r\n        let numpolygons = csg.polygons.length;\r\n        let numpolygonvertices = 0;\r\n        let numvertices = 0;\r\n        let vertexmap: any = {};\r\n        let vertices: any = [];\r\n        let numplanes = 0;\r\n        let planemap: any = {};\r\n        let polygonindex = 0;\r\n        let planes: any = [];\r\n        let shareds: any = [];\r\n        let sharedmap: any = {};\r\n        let numshared = 0;\r\n        // for (let i = 0, iMax = csg.polygons.length; i < iMax; i++) {\r\n        //  let p = csg.polygons[i];\r\n        //  for (let j = 0, jMax = p.length; j < jMax; j++) {\r\n        //      ++numpolygonvertices;\r\n        //      let vertextag = p[j].getTag();\r\n        //      if(!(vertextag in vertexmap)) {\r\n        //          vertexmap[vertextag] = numvertices++;\r\n        //          vertices.push(p[j]);\r\n        //      }\r\n        //  }\r\n        csg.polygons.map((p) => {\r\n            p.vertices.map((v: any) => {\r\n                ++numpolygonvertices;\r\n                let vertextag = v.getTag();\r\n                if (!(vertextag in vertexmap)) {\r\n                    vertexmap[vertextag] = numvertices++;\r\n                    vertices.push(v);\r\n                }\r\n            });\r\n            let planetag = p.plane.getTag();\r\n            if (!(planetag in planemap)) {\r\n                planemap[planetag] = numplanes++;\r\n                planes.push(p.plane);\r\n            }\r\n            let sharedtag = p.shared.getTag();\r\n            if (!(sharedtag in sharedmap)) {\r\n                sharedmap[sharedtag] = numshared++;\r\n                shareds.push(p.shared);\r\n            }\r\n        });\r\n        let numVerticesPerPolygon = new Uint32Array(numpolygons);\r\n        let polygonSharedIndexes = new Uint32Array(numpolygons);\r\n        let polygonVertices = new Uint32Array(numpolygonvertices);\r\n        let polygonPlaneIndexes = new Uint32Array(numpolygons);\r\n        let vertexData = new Float64Array(numvertices * 3);\r\n        let planeData = new Float64Array(numplanes * 4);\r\n        let polygonVerticesIndex = 0;\r\n        for (let polygonindex = 0; polygonindex < numpolygons; ++polygonindex) {\r\n            let p = csg.polygons[polygonindex];\r\n            numVerticesPerPolygon[polygonindex] = p.vertices.length;\r\n            p.vertices.map((v: any) => {\r\n                let vertextag = v.getTag();\r\n                let vertexindex = vertexmap[vertextag];\r\n                polygonVertices[polygonVerticesIndex++] = vertexindex;\r\n            });\r\n            let planetag = p.plane.getTag();\r\n            let planeindex = planemap[planetag];\r\n            polygonPlaneIndexes[polygonindex] = planeindex;\r\n            let sharedtag = p.shared.getTag();\r\n            let sharedindex = sharedmap[sharedtag];\r\n            polygonSharedIndexes[polygonindex] = sharedindex;\r\n        }\r\n        let verticesArrayIndex = 0;\r\n        vertices.map((v: any) => {\r\n            let pos = v.pos;\r\n            vertexData[verticesArrayIndex++] = pos._x;\r\n            vertexData[verticesArrayIndex++] = pos._y;\r\n            vertexData[verticesArrayIndex++] = pos._z;\r\n        });\r\n        let planesArrayIndex = 0;\r\n        planes.map((p: any) => {\r\n            let normal = p.normal;\r\n            planeData[planesArrayIndex++] = normal._x;\r\n            planeData[planesArrayIndex++] = normal._y;\r\n            planeData[planesArrayIndex++] = normal._z;\r\n            planeData[planesArrayIndex++] = p.w;\r\n        });\r\n        let result = {\r\n            class: 'CSG',\r\n            numPolygons: numpolygons,\r\n            numVerticesPerPolygon,\r\n            polygonPlaneIndexes,\r\n            polygonSharedIndexes,\r\n            polygonVertices,\r\n            vertexData,\r\n            planeData,\r\n            shared: shareds,\r\n        };\r\n        return result;\r\n    }\r\n\r\n    // For debugging\r\n    // Creates a new solid with a tiny cube at every vertex of the source solid\r\n    /**\r\n     * 在源实体的每个顶点创建一个带有微小立方体的新实体\r\n     * @param cuberadius\r\n     */\r\n    public toPointCloud(cuberadius: number): CSG {\r\n        let csg = this.reTesselated();\r\n        let result = new CSG();\r\n        // make a list of all unique vertices\r\n        // For each vertex we also collect the list of normals of the planes touching the vertices\r\n        let vertexmap: any = {};\r\n        csg.polygons.map((polygon) => {\r\n            polygon.vertices.map((vertex: any) => {\r\n                vertexmap[vertex.getTag()] = vertex.pos;\r\n            });\r\n        });\r\n        for (let vertextag in vertexmap) {\r\n            let pos = vertexmap[vertextag];\r\n            let cube = CSG.cube({\r\n                center: pos,\r\n                radius: cuberadius,\r\n            });\r\n            result = result.unionSub(cube, false, false);\r\n        }\r\n        result = result.reTesselated();\r\n        return result;\r\n    }\r\n\r\n    // Get the transformation that transforms this CSG such that it is lying on the z=0 plane,\r\n    // as flat as possible (i.e. the least z-height).\r\n    // So that it is in an orientation suitable for CNC milling\r\n    /**\r\n     *获得转换此CSG的转换，使其位于z = 0平面上\r\n     */\r\n    public getTransformationAndInverseTransformationToFlatLying(): any {\r\n        if (this.polygons.length == 0) {\r\n            return new CSGMatrix4x4(); // unity\r\n        } else {\r\n            // get a list of unique planes in the CSG:\r\n            let csg = this.canonicalized();\r\n            let planemap: any = {};\r\n            csg.polygons.map((polygon) => {\r\n                planemap[polygon.plane.getTag()] = polygon.plane;\r\n            });\r\n            // try each plane in the CSG and find the plane that, when we align it flat onto z=0,\r\n            // gives the least height in z-direction.\r\n            // If two planes give the same height, pick the plane that originally had a normal closest\r\n            // to [0,0,-1].\r\n            let xvector = new CSGVector3D(1, 0, 0);\r\n            let yvector = new CSGVector3D(0, 1, 0);\r\n            let zvector = new CSGVector3D(0, 0, 1);\r\n            let z0connectorx = new CSGConnector([0, 0, 0], [0, 0, -1], xvector);\r\n            let z0connectory = new CSGConnector([0, 0, 0], [0, 0, -1], yvector);\r\n            let isfirst = true;\r\n            let minheight = 0;\r\n            let maxdotz = 0;\r\n            let besttransformation;\r\n            let\r\n                bestinversetransformation;\r\n            for (let planetag in planemap) {\r\n                let plane = planemap[planetag];\r\n                let pointonplane = plane.normal.times(plane.w);\r\n                let transformation;\r\n                let\r\n                    inversetransformation;\r\n                // We need a normal vecrtor for the transformation\r\n                // determine which is more perpendicular to the plane normal: x or y?\r\n                // we will align this as much as possible to the x or y axis vector\r\n                let xorthogonality = plane.normal.cross(xvector).length();\r\n                let yorthogonality = plane.normal.cross(yvector).length();\r\n                if (xorthogonality > yorthogonality) {\r\n                    // x is better:\r\n                    let planeconnector = new CSGConnector(pointonplane, plane.normal, xvector);\r\n                    transformation = planeconnector.getTransformationTo(z0connectorx, false, 0);\r\n                    inversetransformation = z0connectorx.getTransformationTo(planeconnector, false, 0);\r\n                } else {\r\n                    // y is better:\r\n                    let planeconnector = new CSGConnector(pointonplane, plane.normal, yvector);\r\n                    transformation = planeconnector.getTransformationTo(z0connectory, false, 0);\r\n                    inversetransformation = z0connectory.getTransformationTo(planeconnector, false, 0);\r\n                }\r\n                let transformedcsg = csg.transform(transformation);\r\n                let dotz = -plane.normal.dot(zvector);\r\n                let bounds = transformedcsg.getBounds();\r\n                let zheight = bounds[1].z - bounds[0].z;\r\n                let isbetter = isfirst;\r\n                if (!isbetter) {\r\n                    if (zheight < minheight) {\r\n                        isbetter = true;\r\n                    } else if (zheight == minheight) {\r\n                        if (dotz > maxdotz) {\r\n                            isbetter = true;\r\n                        }\r\n                    }\r\n                }\r\n                if (isbetter) {\r\n                    // translate the transformation around the z-axis and onto the z plane:\r\n                    let translation = new CSGVector3D([-0.5 * (bounds[1].x + bounds[0].x), -0.5 * (bounds[1].y + bounds[0].y), -bounds[0].z]);\r\n                    transformation = transformation.multiply(CSG.Matrix4x4.translation(translation));\r\n                    inversetransformation = CSGMatrix4x4.translation(translation.negated()).multiply(inversetransformation);\r\n                    minheight = zheight;\r\n                    maxdotz = dotz;\r\n                    besttransformation = transformation;\r\n                    bestinversetransformation = inversetransformation;\r\n                }\r\n                isfirst = false;\r\n            }\r\n            return [besttransformation, bestinversetransformation];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 暂无\r\n     */\r\n    public getTransformationToFlatLying(): any {\r\n        let result: any = this.getTransformationAndInverseTransformationToFlatLying();\r\n        return result[0];\r\n    }\r\n\r\n    /**\r\n     * 平躺\r\n     */\r\n    public lieFlat(): CSG {\r\n        let transformation = this.getTransformationToFlatLying();\r\n        return this.transform(transformation);\r\n    }\r\n\r\n    // project the 3D CSG onto a plane\r\n    // This returns a 2D CAG with the 'shadow' shape of the 3D solid when projected onto the\r\n    // plane represented by the orthonormal basis\r\n    /**\r\n     * 将csg投影到平面\r\n     * @param orthobasis\r\n     */\r\n    public projectToOrthoNormalBasis(orthobasis: any): CAG {\r\n        let EPS = 1e-5;\r\n        let cags: any = [];\r\n        this.polygons.filter((p) =>\r\n            // only return polys in plane, others may disturb result\r\n            p.plane.normal.minus(orthobasis.plane.normal).lengthSquared() < EPS * EPS,\r\n        )\r\n            .map((polygon) => {\r\n                let cag = polygon.projectToOrthoNormalBasis(orthobasis);\r\n                if (cag.sides.length > 0) {\r\n                    cags.push(cag);\r\n                }\r\n            });\r\n        let result = new CAG().union(cags);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 剖面\r\n     * @param orthobasis\r\n     */\r\n    public sectionCut(orthobasis: any): any {\r\n        let EPS = 1e-5;\r\n        let plane1 = orthobasis.plane;\r\n        let plane2 = orthobasis.plane.flipped();\r\n        plane1 = new CSGPlane(plane1.normal, plane1.w);\r\n        plane2 = new CSGPlane(plane2.normal, plane2.w + 5 * EPS);\r\n        let cut3d = this.cutByPlane(plane1);\r\n        cut3d = cut3d.cutByPlane(plane2);\r\n        return cut3d.projectToOrthoNormalBasis(orthobasis);\r\n    }\r\n\r\n    /*\r\n         fixTJunctions:\r\n\r\n         Suppose we have two polygons ACDB and EDGF:\r\n\r\n          A-----B\r\n          |     |\r\n          |     E--F\r\n          |     |  |\r\n          C-----D--G\r\n\r\n         Note that vertex E forms a T-junction on the side BD. In this case some STL slicers will complain\r\n         that the solid is not watertight. This is because the watertightness check is done by checking if\r\n         each side DE is matched by another side ED.\r\n\r\n         This function will return a new solid with ACDB replaced by ACDEB\r\n\r\n         Note that this can create polygons that are slightly non-convex (due to rounding errors). Therefore the result should\r\n         not be used for further CSG operations!\r\n         */\r\n    /**\r\n     * 未知\r\n     */\r\n    public fixTJunctions(): CSG {\r\n        // noinspection JSAnnotator\r\n        function addSide(vertex0: any, vertex1: any, polygonindex: any) {\r\n            let starttag = vertex0.getTag();\r\n            let endtag = vertex1.getTag();\r\n            if (starttag == endtag) {\r\n                throw new Error('Assertion failed');\r\n            }\r\n            let newsidetag = `${starttag}/${endtag}`;\r\n            let reversesidetag = `${endtag}/${starttag}`;\r\n            if (reversesidetag in sidemap) {\r\n                // we have a matching reverse oriented side.\r\n                // Instead of adding the new side, cancel out the reverse side:\r\n                // console.log(\"addSide(\"+newsidetag+\") has reverse side:\");\r\n                deleteSide(vertex1, vertex0, null);\r\n                return null;\r\n            }\r\n            //  console.log(\"addSide(\"+newsidetag+\")\");\r\n            let newsideobj = {\r\n                vertex0,\r\n                vertex1,\r\n                polygonindex,\r\n            };\r\n            if (!(newsidetag in sidemap)) {\r\n                sidemap[newsidetag] = [newsideobj];\r\n            } else {\r\n                sidemap[newsidetag].push(newsideobj);\r\n            }\r\n            if (starttag in vertextag2sidestart) {\r\n                vertextag2sidestart[starttag].push(newsidetag);\r\n            } else {\r\n                vertextag2sidestart[starttag] = [newsidetag];\r\n            }\r\n            if (endtag in vertextag2sideend) {\r\n                vertextag2sideend[endtag].push(newsidetag);\r\n            } else {\r\n                vertextag2sideend[endtag] = [newsidetag];\r\n            }\r\n            return newsidetag;\r\n        }\r\n\r\n        // noinspection JSAnnotator\r\n        function deleteSide(vertex0: any, vertex1: any, polygonindex: any) {\r\n            let starttag = vertex0.getTag();\r\n            let endtag = vertex1.getTag();\r\n            let sidetag = `${starttag}/${endtag}`;\r\n            // console.log(\"deleteSide(\"+sidetag+\")\");\r\n            if (!(sidetag in sidemap)) {\r\n                throw new Error('Assertion failed');\r\n            }\r\n            let idx = -1;\r\n            let sideobjs = sidemap[sidetag];\r\n            for (let i = 0; i < sideobjs.length; i++) {\r\n                let sideobj = sideobjs[i];\r\n                if (sideobj.vertex0 != vertex0) {\r\n                    continue;\r\n                }\r\n                if (sideobj.vertex1 != vertex1) {\r\n                    continue;\r\n                }\r\n                if (polygonindex != null) {\r\n                    if (sideobj.polygonindex != polygonindex) {\r\n                        continue;\r\n                    }\r\n                }\r\n                idx = i;\r\n                break;\r\n            }\r\n            if (idx < 0) {\r\n                throw new Error('Assertion failed');\r\n            }\r\n            sideobjs.splice(idx, 1);\r\n            if (sideobjs.length == 0) {\r\n                delete sidemap[sidetag];\r\n            }\r\n            idx = vertextag2sidestart[starttag].indexOf(sidetag);\r\n            if (idx < 0) {\r\n                throw new Error('Assertion failed');\r\n            }\r\n            vertextag2sidestart[starttag].splice(idx, 1);\r\n            if (vertextag2sidestart[starttag].length == 0) {\r\n                delete vertextag2sidestart[starttag];\r\n            }\r\n            idx = vertextag2sideend[endtag].indexOf(sidetag);\r\n            if (idx < 0) {\r\n                throw new Error('Assertion failed');\r\n            }\r\n            vertextag2sideend[endtag].splice(idx, 1);\r\n            if (vertextag2sideend[endtag].length == 0) {\r\n                delete vertextag2sideend[endtag];\r\n            }\r\n        }\r\n\r\n        let csg = this.canonicalized();\r\n        let sidemap: any = {};\r\n        for (let polygonindex = 0; polygonindex < csg.polygons.length; polygonindex++) {\r\n            let polygon = csg.polygons[polygonindex];\r\n            let numvertices = polygon.vertices.length;\r\n            if (numvertices >= 3) {\r\n                // should be true\r\n                let vertex = polygon.vertices[0];\r\n                let vertextag = vertex.getTag();\r\n                for (let vertexindex = 0; vertexindex < numvertices; vertexindex++) {\r\n                    let nextvertexindex = vertexindex + 1;\r\n                    if (nextvertexindex == numvertices) {\r\n                        nextvertexindex = 0;\r\n                    }\r\n                    let nextvertex = polygon.vertices[nextvertexindex];\r\n                    let nextvertextag = nextvertex.getTag();\r\n                    let sidetag = `${vertextag}/${nextvertextag}`;\r\n                    let reversesidetag = `${nextvertextag}/${vertextag}`;\r\n                    if (reversesidetag in sidemap) {\r\n                        // this side matches the same side in another polygon. Remove from sidemap:\r\n                        let ar = sidemap[reversesidetag];\r\n                        ar.splice(-1, 1);\r\n                        if (ar.length == 0) {\r\n                            delete sidemap[reversesidetag];\r\n                        }\r\n                    } else {\r\n                        let sideobj = {\r\n                            vertex0: vertex,\r\n                            vertex1: nextvertex,\r\n                            polygonindex,\r\n                        };\r\n                        if (!(sidetag in sidemap)) {\r\n                            sidemap[sidetag] = [sideobj];\r\n                        } else {\r\n                            sidemap[sidetag].push(sideobj);\r\n                        }\r\n                    }\r\n                    vertex = nextvertex;\r\n                    vertextag = nextvertextag;\r\n                }\r\n            }\r\n        }\r\n        // now sidemap contains 'unmatched' sides\r\n        // i.e. side AB in one polygon does not have a matching side BA in another polygon\r\n        let vertextag2sidestart: any = {};\r\n        let vertextag2sideend: any = {};\r\n        let sidestocheck: any = {};\r\n        let sidemapisempty0 = true;\r\n        for (let sidetag in sidemap) {\r\n            sidemapisempty0 = false;\r\n            sidestocheck[sidetag] = true;\r\n            sidemap[sidetag].map((sideobj: any) => {\r\n                let starttag = sideobj.vertex0.getTag();\r\n                let endtag = sideobj.vertex1.getTag();\r\n                if (starttag in vertextag2sidestart) {\r\n                    vertextag2sidestart[starttag].push(sidetag);\r\n                } else {\r\n                    vertextag2sidestart[starttag] = [sidetag];\r\n                }\r\n                if (endtag in vertextag2sideend) {\r\n                    vertextag2sideend[endtag].push(sidetag);\r\n                } else {\r\n                    vertextag2sideend[endtag] = [sidetag];\r\n                }\r\n            });\r\n        }\r\n        if (!sidemapisempty0) {\r\n            // make a copy of the polygons array, since we are going to modify it:\r\n            let polygons = csg.polygons.slice(0);\r\n\r\n            while (true) {\r\n                let sidemapisempty1 = true;\r\n                for (let sidetag in sidemap) {\r\n                    sidemapisempty1 = false;\r\n                    sidestocheck[sidetag] = true;\r\n                }\r\n                if (sidemapisempty1) {\r\n                    break;\r\n                }\r\n                let donesomething = false;\r\n                while (true) {\r\n                    let sidetagtocheck: any = null;\r\n                    let _sidetag: any = null;\r\n                    for (let sidetag in sidestocheck) {\r\n                        sidetagtocheck = sidetag;\r\n                        _sidetag = sidetag;\r\n                        break;\r\n                    }\r\n                    if (sidetagtocheck == null) {\r\n                        break;\r\n                    } // sidestocheck is empty, we're done!\r\n                    let donewithside = true;\r\n                    if (sidetagtocheck in sidemap) {\r\n                        let sideobjs = sidemap[sidetagtocheck];\r\n                        if (sideobjs.length == 0) {\r\n                            throw new Error('Assertion failed');\r\n                        }\r\n                        let sideobj = sideobjs[0];\r\n                        for (let directionindex = 0; directionindex < 2; directionindex++) {\r\n                            let startvertex = (directionindex == 0) ? sideobj.vertex0 : sideobj.vertex1;\r\n                            let endvertex = (directionindex == 0) ? sideobj.vertex1 : sideobj.vertex0;\r\n                            let startvertextag = startvertex.getTag();\r\n                            let endvertextag = endvertex.getTag();\r\n                            let matchingsides = [];\r\n                            if (directionindex == 0) {\r\n                                if (startvertextag in vertextag2sideend) {\r\n                                    matchingsides = vertextag2sideend[startvertextag];\r\n                                }\r\n                            } else {\r\n                                if (startvertextag in vertextag2sidestart) {\r\n                                    matchingsides = vertextag2sidestart[startvertextag];\r\n                                }\r\n                            }\r\n                            for (let matchingsideindex = 0; matchingsideindex < matchingsides.length; matchingsideindex++) {\r\n                                let matchingsidetag = matchingsides[matchingsideindex];\r\n                                let matchingside = sidemap[matchingsidetag][0];\r\n                                let matchingsidestartvertex = (directionindex == 0) ? matchingside.vertex0 : matchingside.vertex1;\r\n                                let matchingsideendvertex = (directionindex == 0) ? matchingside.vertex1 : matchingside.vertex0;\r\n                                let matchingsidestartvertextag = matchingsidestartvertex.getTag();\r\n                                let matchingsideendvertextag = matchingsideendvertex.getTag();\r\n                                if (matchingsideendvertextag != startvertextag) {\r\n                                    throw new Error('Assertion failed');\r\n                                }\r\n                                if (matchingsidestartvertextag == endvertextag) {\r\n                                    // matchingside cancels sidetagtocheck\r\n                                    deleteSide(startvertex, endvertex, null);\r\n                                    deleteSide(endvertex, startvertex, null);\r\n                                    donewithside = false;\r\n                                    directionindex = 2; // skip reverse direction check\r\n                                    donesomething = true;\r\n                                    break;\r\n                                } else {\r\n                                    let startpos = startvertex.pos;\r\n                                    let endpos = endvertex.pos;\r\n                                    let checkpos = matchingsidestartvertex.pos;\r\n                                    let direction = checkpos.minus(startpos);\r\n                                    // Now we need to check if endpos is on the line startpos-checkpos:\r\n                                    let t = endpos.minus(startpos).dot(direction) / direction.dot(direction);\r\n                                    if ((t > 0) && (t < 1)) {\r\n                                        let closestpoint = startpos.plus(direction.times(t));\r\n                                        let distancesquared = closestpoint.distanceToSquared(endpos);\r\n                                        if (distancesquared < 1e-10) {\r\n                                            // Yes it's a t-junction! We need to split matchingside in two:\r\n                                            let polygonindex = matchingside.polygonindex;\r\n                                            let polygon = polygons[polygonindex];\r\n                                            // find the index of startvertextag in polygon:\r\n                                            let insertionvertextag = matchingside.vertex1.getTag();\r\n                                            let insertionvertextagindex = -1;\r\n                                            for (let i = 0; i < polygon.vertices.length; i++) {\r\n                                                if (polygon.vertices[i].getTag() == insertionvertextag) {\r\n                                                    insertionvertextagindex = i;\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                            if (insertionvertextagindex < 0) {\r\n                                                throw new Error('Assertion failed');\r\n                                            }\r\n                                            // split the side by inserting the vertex:\r\n                                            let newvertices = polygon.vertices.slice(0);\r\n                                            newvertices.splice(insertionvertextagindex, 0, endvertex);\r\n                                            let newpolygon = new CSGPolygon(newvertices, polygon.shared /* polygon.plane */);\r\n                                            polygons[polygonindex] = newpolygon;\r\n                                            // remove the original sides from our maps:\r\n                                            // deleteSide(sideobj.vertex0, sideobj.vertex1, null);\r\n                                            deleteSide(matchingside.vertex0, matchingside.vertex1, polygonindex);\r\n                                            let newsidetag1 = addSide(matchingside.vertex0, endvertex, polygonindex);\r\n                                            let newsidetag2 = addSide(endvertex, matchingside.vertex1, polygonindex);\r\n                                            if (newsidetag1 != null) {\r\n                                                sidestocheck[newsidetag1] = true;\r\n                                            }\r\n                                            if (newsidetag2 != null) {\r\n                                                sidestocheck[newsidetag2] = true;\r\n                                            }\r\n                                            donewithside = false;\r\n                                            directionindex = 2; // skip reverse direction check\r\n                                            donesomething = true;\r\n                                            break;\r\n                                        } // if(distancesquared < 1e-10)\r\n                                    } // if( (t > 0) && (t < 1) )\r\n                                } // if(endingstidestartvertextag == endvertextag)\r\n                            } // for matchingsideindex\r\n                        } // for directionindex\r\n                    } // if(sidetagtocheck in sidemap)\r\n                    if (donewithside) {\r\n                        delete sidestocheck[_sidetag];\r\n                    }\r\n                }\r\n                if (!donesomething) {\r\n                    break;\r\n                }\r\n            }\r\n            let newcsg = CSG.fromPolygons(polygons);\r\n            newcsg.properties = csg.properties;\r\n            newcsg.isCanonicalized = true;\r\n            newcsg.isRetesselated = true;\r\n            csg = newcsg;\r\n        } // if(!sidemapisempty)\r\n        let sidemapisempty1 = true;\r\n        for (let sidetag in sidemap) {\r\n            sidemapisempty1 = false;\r\n            break;\r\n        }\r\n        if (!sidemapisempty1) {\r\n            console.log('!sidemapisempty1');\r\n        }\r\n        return csg;\r\n    }\r\n\r\n    /**\r\n     * 转化为三角面\r\n     */\r\n    public toTriangles(): any[] {\r\n        let polygons: any = [];\r\n        this.polygons.forEach((poly) => {\r\n            let firstVertex = poly.vertices[0];\r\n            for (let i = poly.vertices.length - 3; i >= 0; i--) {\r\n                polygons.push(new CSGPolygon([\r\n                        firstVertex, poly.vertices[i + 1], poly.vertices[i + 2],\r\n                    ],\r\n                    poly.shared, poly.plane));\r\n            }\r\n        });\r\n        return polygons;\r\n    }\r\n\r\n    // features: string, or array containing 1 or more strings of: 'volume', 'area'\r\n    // more could be added here (Fourier coeff, moments)\r\n    /**\r\n     * 获取特征\r\n     * @param features\r\n     */\r\n    public getFeatures(features: any): any {\r\n        if (!(features instanceof Array)) {\r\n            features = [features];\r\n        }\r\n        let result = this.toTriangles().map((triPoly: any) => triPoly.getTetraFeatures(features))\r\n            .reduce((pv: any, v: any) => v.map((feat: any, i: any) => feat + (pv == 0 ? 0 : pv[i])), 0);\r\n        return (result.length == 1) ? result[0] : result;\r\n    }\r\n\r\n    /**\r\n     * 镜像\r\n     * @param plane\r\n     */\r\n    public mirrored(plane: CSGPlane): CSG {\r\n        return this.transform(CSGMatrix4x4.mirroring(plane));\r\n    }\r\n\r\n    /**\r\n     * X轴镜像\r\n     */\r\n    public mirroredX(): CSG {\r\n        let plane = new CSGPlane(CSGVector3D.Create(1, 0, 0), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * Y轴镜像\r\n     */\r\n    public mirroredY(): CSG {\r\n        let plane = new CSGPlane(CSGVector3D.Create(0, 1, 0), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * Z轴镜像\r\n     */\r\n    public mirroredZ(): CSG {\r\n        let plane = new CSGPlane(CSGVector3D.Create(0, 0, 1), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * 转换\r\n     * @param v\r\n     */\r\n    public translate(v: any): CSG {\r\n        return this.transform(CSGMatrix4x4.translation(v));\r\n    }\r\n\r\n    /**\r\n     * 缩放\r\n     * @param f\r\n     */\r\n    public scale(f: InterfaceCSGVector3D): CSG {\r\n        return this.transform(CSGMatrix4x4.scaling(f));\r\n    }\r\n\r\n    /**\r\n     * X轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateX(deg: number): CSG {\r\n        return this.transform(CSGMatrix4x4.rotationX(deg));\r\n    }\r\n\r\n    /**\r\n     * Y轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateY(deg: number): CSG {\r\n        return this.transform(CSGMatrix4x4.rotationY(deg));\r\n    }\r\n\r\n    /**\r\n     * Z轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateZ(deg: number): CSG {\r\n        return this.transform(CSGMatrix4x4.rotationZ(deg));\r\n    }\r\n\r\n    /**\r\n     * 旋转\r\n     * @param rotationCenter\r\n     * @param rotationAxis\r\n     * @param degrees\r\n     */\r\n    public rotate(rotationCenter: CSGVector3D, rotationAxis: CSGVector3D, degrees: number): CSG {\r\n        return this.transform(CSGMatrix4x4.rotation(rotationCenter, rotationAxis, degrees));\r\n    }\r\n\r\n    /**\r\n     * 旋转欧拉角\r\n     * @param alpha\r\n     * @param beta\r\n     * @param gamma\r\n     * @param position\r\n     */\r\n    public rotateEulerAngles(alpha: number, beta: number, gamma: number, position: CSGVector3D): CSG {\r\n        position = position || [0, 0, 0];\r\n        let Rz1 = CSGMatrix4x4.rotationZ(alpha);\r\n        let Rx = CSGMatrix4x4.rotationX(beta);\r\n        let Rz2 = CSGMatrix4x4.rotationZ(gamma);\r\n        let T = CSGMatrix4x4.translation(new CSGVector3D(position));\r\n        return this.transform(Rz2.multiply(Rx).multiply(Rz1).multiply(T));\r\n    }\r\n\r\n    /**\r\n     * 中心点\r\n     * @param cAxes\r\n     */\r\n    public center(cAxes: any): any {\r\n        let axes = ['x', 'y', 'z'];\r\n\r\n        cAxes = Array.prototype.map.call(arguments, (a: any) => a.toLowerCase());\r\n        // no args: center on all axes\r\n        if (!cAxes.length) {\r\n            cAxes = axes.slice();\r\n        }\r\n        let b = this.getBounds();\r\n\r\n        return this.translate(axes.map((a) => (cAxes.indexOf(a) > -1 ?\r\n            -(b[0][a] + b[1][a]) / 2 : 0)));\r\n    }\r\n}\r\n",
        "import {CSGVector2D} from './CSGVector2D';\r\nimport {CSGVector3D} from './CSGVector3D';\r\nimport {CSGPlane} from './CSGPlane';\r\nimport {CSGOrthoNormalBasis} from './CSGOrthoNormalBasis';\r\nimport {InterfaceCSGVector3D} from \"./InterfaceCSG\";\r\n\r\n/**\r\n * CSG四维矩阵\r\n */\r\nexport class CSGMatrix4x4 {\r\n    /**\r\n     * 元素\r\n     */\r\n    public elements: number[];\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param elements\r\n     */\r\n    constructor(elements?: number[]) {\r\n        if (arguments.length >= 1) {\r\n            const _elements: any = elements;\r\n            this.elements = _elements;\r\n        } else {\r\n            // if no arguments passed: create unity matrix\r\n            this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 联合\r\n     */\r\n    static unity(): CSGMatrix4x4 {\r\n        return new CSGMatrix4x4();\r\n    }\r\n\r\n    // Create a rotation matrix for rotating around the x axis\r\n    /**\r\n     * 创建X轴旋转矩阵\r\n     * @param degrees\r\n     */\r\n    static rotationX(degrees: number): CSGMatrix4x4 {\r\n        let radians = degrees * Math.PI * (1.0 / 180.0);\r\n        let cos = Math.cos(radians);\r\n        let sin = Math.sin(radians);\r\n        let els = [\r\n            1, 0, 0, 0, 0, cos, sin, 0, 0, -sin, cos, 0, 0, 0, 0, 1,\r\n        ];\r\n        return new CSGMatrix4x4(els);\r\n    }\r\n\r\n    // Create a rotation matrix for rotating around the y axis\r\n    /**\r\n     * 创建Y轴旋转矩阵\r\n     * @param degrees\r\n     */\r\n    static rotationY(degrees: number): CSGMatrix4x4 {\r\n        let radians = degrees * Math.PI * (1.0 / 180.0);\r\n        let cos = Math.cos(radians);\r\n        let sin = Math.sin(radians);\r\n        let els = [\r\n            cos, 0, -sin, 0, 0, 1, 0, 0, sin, 0, cos, 0, 0, 0, 0, 1,\r\n        ];\r\n        return new CSGMatrix4x4(els);\r\n    }\r\n\r\n    // Create a rotation matrix for rotating around the z axis\r\n    /**\r\n     * 创建Z轴旋转矩阵\r\n     * @param degrees\r\n     */\r\n    static rotationZ(degrees: number): CSGMatrix4x4 {\r\n        let radians = degrees * Math.PI * (1.0 / 180.0);\r\n        let cos = Math.cos(radians);\r\n        let sin = Math.sin(radians);\r\n        let els = [\r\n            cos, sin, 0, 0, -sin, cos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,\r\n        ];\r\n        return new CSGMatrix4x4(els);\r\n    }\r\n\r\n    // Matrix for rotation about arbitrary point and axis\r\n    /**\r\n     * 创建旋转矩阵\r\n     * @param rotationCenter\r\n     * @param rotationAxis\r\n     * @param degrees\r\n     */\r\n    static rotation(rotationCenter: CSGVector3D, rotationAxis: CSGVector3D, degrees: number): CSGMatrix4x4 {\r\n        rotationCenter = new CSGVector3D(rotationCenter);\r\n        rotationAxis = new CSGVector3D(rotationAxis);\r\n        let rotationPlane = CSGPlane.fromNormalAndPoint(rotationAxis, rotationCenter);\r\n        let orthobasis = new CSGOrthoNormalBasis(rotationPlane);\r\n        let transformation = CSGMatrix4x4.translation(rotationCenter.negated());\r\n        transformation = transformation.multiply(orthobasis.getProjectionMatrix());\r\n        transformation = transformation.multiply(CSGMatrix4x4.rotationZ(degrees));\r\n        transformation = transformation.multiply(orthobasis.getInverseProjectionMatrix());\r\n        transformation = transformation.multiply(CSGMatrix4x4.translation(rotationCenter));\r\n        return transformation;\r\n    }\r\n\r\n    // Create an affine matrix for translation:\r\n    /**\r\n     * 创建转化仿射矩阵\r\n     * @param v\r\n     */\r\n    static translation(v: InterfaceCSGVector3D): CSGMatrix4x4 {\r\n        // parse as CSG.Vector3D, so we can pass an array or a CSG.Vector3D\r\n        let vec = new CSGVector3D(v);\r\n        let els = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, vec.x, vec.y, vec.z, 1];\r\n        return new CSGMatrix4x4(els);\r\n    }\r\n\r\n    // Create an affine matrix for mirroring into an arbitrary plane:\r\n    /**\r\n     * 根据平面镜像\r\n     * @param plane\r\n     */\r\n    static mirroring(plane: CSGPlane): CSGMatrix4x4 {\r\n        let nx = plane.normal.x;\r\n        let ny = plane.normal.y;\r\n        let nz = plane.normal.z;\r\n        let w = plane.w;\r\n        let els = [\r\n            (1.0 - 2.0 * nx * nx), (-2.0 * ny * nx), (-2.0 * nz * nx), 0, (-2.0 * nx * ny), (1.0 - 2.0 * ny * ny), (-2.0 * nz * ny), 0, (-2.0 * nx * nz), (-2.0 * ny * nz), (1.0 - 2.0 * nz * nz), 0, (2.0 * nx * w), (2.0 * ny * w), (2.0 * nz * w), 1,\r\n        ];\r\n        return new CSGMatrix4x4(els);\r\n    }\r\n\r\n    // Create an affine matrix for scaling:\r\n    /**\r\n     * 缩放\r\n     * @param v\r\n     */\r\n    static scaling(v: any): CSGMatrix4x4 {\r\n        // parse as CSG.Vector3D, so we can pass an array or a CSG.Vector3D\r\n        let vec = new CSGVector3D(v);\r\n        let els = [\r\n            vec.x, 0, 0, 0, 0, vec.y, 0, 0, 0, 0, vec.z, 0, 0, 0, 0, 1,\r\n        ];\r\n        return new CSGMatrix4x4(els);\r\n    }\r\n\r\n    /**\r\n     * 求和\r\n     * @param m\r\n     */\r\n    public plus(m: CSGMatrix4x4): CSGMatrix4x4 {\r\n        let r = [];\r\n        for (let i = 0; i < 16; i++) {\r\n            r[i] = this.elements[i] + m.elements[i];\r\n        }\r\n        return new CSGMatrix4x4(r);\r\n    }\r\n\r\n    /**\r\n     * 求差\r\n     * @param m\r\n     */\r\n    public minus(m: CSGMatrix4x4): CSGMatrix4x4 {\r\n        let r = [];\r\n        for (let i = 0; i < 16; i++) {\r\n            r[i] = this.elements[i] - m.elements[i];\r\n        }\r\n        return new CSGMatrix4x4(r);\r\n    }\r\n\r\n    // right multiply by another 4x4 matrix:\r\n    /**\r\n     * 乘以4X4矩阵\r\n     * @param m\r\n     */\r\n    public multiply(m: CSGMatrix4x4): CSGMatrix4x4 {\r\n        // cache elements in local variables, for speedup:\r\n        let this0 = this.elements[0];\r\n        let this1 = this.elements[1];\r\n        let this2 = this.elements[2];\r\n        let this3 = this.elements[3];\r\n        let this4 = this.elements[4];\r\n        let this5 = this.elements[5];\r\n        let this6 = this.elements[6];\r\n        let this7 = this.elements[7];\r\n        let this8 = this.elements[8];\r\n        let this9 = this.elements[9];\r\n        let this10 = this.elements[10];\r\n        let this11 = this.elements[11];\r\n        let this12 = this.elements[12];\r\n        let this13 = this.elements[13];\r\n        let this14 = this.elements[14];\r\n        let this15 = this.elements[15];\r\n        let m0 = m.elements[0];\r\n        let m1 = m.elements[1];\r\n        let m2 = m.elements[2];\r\n        let m3 = m.elements[3];\r\n        let m4 = m.elements[4];\r\n        let m5 = m.elements[5];\r\n        let m6 = m.elements[6];\r\n        let m7 = m.elements[7];\r\n        let m8 = m.elements[8];\r\n        let m9 = m.elements[9];\r\n        let m10 = m.elements[10];\r\n        let m11 = m.elements[11];\r\n        let m12 = m.elements[12];\r\n        let m13 = m.elements[13];\r\n        let m14 = m.elements[14];\r\n        let m15 = m.elements[15];\r\n        let result = [];\r\n        result[0] = this0 * m0 + this1 * m4 + this2 * m8 + this3 * m12;\r\n        result[1] = this0 * m1 + this1 * m5 + this2 * m9 + this3 * m13;\r\n        result[2] = this0 * m2 + this1 * m6 + this2 * m10 + this3 * m14;\r\n        result[3] = this0 * m3 + this1 * m7 + this2 * m11 + this3 * m15;\r\n        result[4] = this4 * m0 + this5 * m4 + this6 * m8 + this7 * m12;\r\n        result[5] = this4 * m1 + this5 * m5 + this6 * m9 + this7 * m13;\r\n        result[6] = this4 * m2 + this5 * m6 + this6 * m10 + this7 * m14;\r\n        result[7] = this4 * m3 + this5 * m7 + this6 * m11 + this7 * m15;\r\n        result[8] = this8 * m0 + this9 * m4 + this10 * m8 + this11 * m12;\r\n        result[9] = this8 * m1 + this9 * m5 + this10 * m9 + this11 * m13;\r\n        result[10] = this8 * m2 + this9 * m6 + this10 * m10 + this11 * m14;\r\n        result[11] = this8 * m3 + this9 * m7 + this10 * m11 + this11 * m15;\r\n        result[12] = this12 * m0 + this13 * m4 + this14 * m8 + this15 * m12;\r\n        result[13] = this12 * m1 + this13 * m5 + this14 * m9 + this15 * m13;\r\n        result[14] = this12 * m2 + this13 * m6 + this14 * m10 + this15 * m14;\r\n        result[15] = this12 * m3 + this13 * m7 + this14 * m11 + this15 * m15;\r\n        return new CSGMatrix4x4(result);\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): CSGMatrix4x4 {\r\n        let elements = this.elements.map((p: any) => p);\r\n        return new CSGMatrix4x4(elements);\r\n    }\r\n\r\n    // Right multiply the matrix by a CSG.Vector3D (interpreted as 3 row, 1 column)\r\n    // (result = M*v)\r\n    // Fourth element is taken as 1\r\n    /**\r\n     * 右乘三维向量\r\n     * @param v\r\n     */\r\n    public rightMultiply1x3Vector(v: CSGVector3D): CSGVector3D {\r\n        let v0 = v._x;\r\n        let v1 = v._y;\r\n        let v2 = v._z;\r\n        let v3 = 1;\r\n        let x = v0 * this.elements[0] + v1 * this.elements[1] + v2 * this.elements[2] + v3 * this.elements[3];\r\n        let y = v0 * this.elements[4] + v1 * this.elements[5] + v2 * this.elements[6] + v3 * this.elements[7];\r\n        let z = v0 * this.elements[8] + v1 * this.elements[9] + v2 * this.elements[10] + v3 * this.elements[11];\r\n        let w = v0 * this.elements[12] + v1 * this.elements[13] + v2 * this.elements[14] + v3 * this.elements[15];\r\n        // scale such that fourth element becomes 1:\r\n        if (w != 1) {\r\n            let invw = 1.0 / w;\r\n            x *= invw;\r\n            y *= invw;\r\n            z *= invw;\r\n        }\r\n        return new CSGVector3D(x, y, z);\r\n    }\r\n\r\n    // Multiply a CSG.Vector3D (interpreted as 3 column, 1 row) by this matrix\r\n    // (result = v*M)\r\n    // Fourth element is taken as 1\r\n    /**\r\n     * 左乘三维向量\r\n     * @param v\r\n     */\r\n    public leftMultiply1x3Vector(v: CSGVector3D): CSGVector3D {\r\n        let v0 = v._x;\r\n        let v1 = v._y;\r\n        let v2 = v._z;\r\n        let v3 = 1;\r\n        let x = v0 * this.elements[0] + v1 * this.elements[4] + v2 * this.elements[8] + v3 * this.elements[12];\r\n        let y = v0 * this.elements[1] + v1 * this.elements[5] + v2 * this.elements[9] + v3 * this.elements[13];\r\n        let z = v0 * this.elements[2] + v1 * this.elements[6] + v2 * this.elements[10] + v3 * this.elements[14];\r\n        let w = v0 * this.elements[3] + v1 * this.elements[7] + v2 * this.elements[11] + v3 * this.elements[15];\r\n        // scale such that fourth element becomes 1:\r\n        if (w != 1) {\r\n            let invw = 1.0 / w;\r\n            x *= invw;\r\n            y *= invw;\r\n            z *= invw;\r\n        }\r\n        return new CSGVector3D(x, y, z);\r\n    }\r\n\r\n    // Right multiply the matrix by a CSG.Vector2D (interpreted as 2 row, 1 column)\r\n    // (result = M*v)\r\n    // Fourth element is taken as 1\r\n    /**\r\n     * 右乘二维向量\r\n     * @param v\r\n     */\r\n    public rightMultiply1x2Vector(v: CSGVector2D): CSGVector2D {\r\n        let v0 = v.x;\r\n        let v1 = v.y;\r\n        let v2 = 0;\r\n        let v3 = 1;\r\n        let x = v0 * this.elements[0] + v1 * this.elements[1] + v2 * this.elements[2] + v3 * this.elements[3];\r\n        let y = v0 * this.elements[4] + v1 * this.elements[5] + v2 * this.elements[6] + v3 * this.elements[7];\r\n        let z = v0 * this.elements[8] + v1 * this.elements[9] + v2 * this.elements[10] + v3 * this.elements[11];\r\n        let w = v0 * this.elements[12] + v1 * this.elements[13] + v2 * this.elements[14] + v3 * this.elements[15];\r\n        // scale such that fourth element becomes 1:\r\n        if (w != 1) {\r\n            let invw = 1.0 / w;\r\n            x *= invw;\r\n            y *= invw;\r\n            z *= invw;\r\n        }\r\n        return new CSGVector2D(x, y);\r\n    }\r\n\r\n    // Multiply a CSG.Vector2D (interpreted as 2 column, 1 row) by this matrix\r\n    // (result = v*M)\r\n    // Fourth element is taken as 1\r\n    /**\r\n     * 左乘二维向量\r\n     * @param v\r\n     */\r\n    public leftMultiply1x2Vector(v: CSGVector2D): CSGVector2D {\r\n        let v0 = v.x;\r\n        let v1 = v.y;\r\n        let v2 = 0;\r\n        let v3 = 1;\r\n        let x = v0 * this.elements[0] + v1 * this.elements[4] + v2 * this.elements[8] + v3 * this.elements[12];\r\n        let y = v0 * this.elements[1] + v1 * this.elements[5] + v2 * this.elements[9] + v3 * this.elements[13];\r\n        let z = v0 * this.elements[2] + v1 * this.elements[6] + v2 * this.elements[10] + v3 * this.elements[14];\r\n        let w = v0 * this.elements[3] + v1 * this.elements[7] + v2 * this.elements[11] + v3 * this.elements[15];\r\n        // scale such that fourth element becomes 1:\r\n        if (w != 1) {\r\n            let invw = 1.0 / w;\r\n            x *= invw;\r\n            y *= invw;\r\n            z *= invw;\r\n        }\r\n        return new CSGVector2D(x, y);\r\n    }\r\n\r\n    // determine whether this matrix is a mirroring transformation\\\r\n    /**\r\n     * 确定此矩阵是否为二维变换\r\n     */\r\n    public isMirroring(): boolean {\r\n        let u = new CSGVector3D(this.elements[0], this.elements[4], this.elements[8]);\r\n        let v = new CSGVector3D(this.elements[1], this.elements[5], this.elements[9]);\r\n        let w = new CSGVector3D(this.elements[2], this.elements[6], this.elements[10]);\r\n        // for a true orthogonal, non-mirrored base, u.cross(v) == w\r\n        // If they have an opposite direction then we are mirroring\r\n        let mirrorvalue = u.cross(v).dot(w);\r\n        let ismirror = (mirrorvalue < 0);\r\n        return ismirror;\r\n    }\r\n\r\n}\r\n",
        "import { CSGVector3D } from './CSGVector3D';\r\nimport { CSGVertex } from './CSGVertex';\r\nimport { CSGPolygon } from './CSGPolygon';\r\nimport { CSGLine3D } from './CSGLine3D';\r\nimport { CSG } from './CSG';\r\nimport { CSGMatrix4x4 } from './CSGMatrix4x4';\r\nimport { InterfaceCSGVector3D } from './InterfaceCSG';\r\n\r\nexport class CSGPlane {\r\n    /**\r\n     * 向量\r\n     */\r\n    public normal : any;\r\n\r\n    public w : any;\r\n\r\n    static EPSILON : number = 1e-5;\r\n\r\n    /**\r\n     * 类型符\r\n     */\r\n    public tag : any;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param normal\r\n     * @param w\r\n     */\r\n    constructor(normal: any, w: any) {\r\n        this.normal = normal;\r\n        this.w = w;\r\n        // `CSG.Plane.EPSILON` is the tolerance used by `splitPolygon()` to decide if a\r\n        // point is on the plane.\r\n    }\r\n\r\n    /**\r\n     * 从对象生成平面\r\n     * @param obj\r\n     */\r\n    static fromObject(obj:any) {\r\n        let normal = new CSGVector3D(obj.normal);\r\n        let w = parseFloat(obj.w);\r\n        return new CSGPlane(normal, w);\r\n    }\r\n\r\n    /**\r\n     * 从三维向量生成平面\r\n     * @param a\r\n     * @param b\r\n     * @param c\r\n     */\r\n    static fromVector3Ds(a: any, b: any, c: any) {\r\n        let n = b.minus(a).cross(c.minus(a)).unit();\r\n        return new CSGPlane(n, n.dot(a));\r\n    }\r\n\r\n    // like fromVector3Ds, but allow the vectors to be on one point or one line\r\n    // in such a case a random plane through the given points is constructed\r\n    /**\r\n     * 通过给顶点创建随机平面\r\n     * @param a\r\n     * @param b\r\n     * @param c\r\n     */\r\n    static anyPlaneFromVector3Ds(a: any, b: any, c: any) {\r\n        let v1 = b.minus(a);\r\n        let v2 = c.minus(a);\r\n        if (v1.length() < 1e-5) {\r\n            v1 = v2.randomNonParallelVector();\r\n        }\r\n        if (v2.length() < 1e-5) {\r\n            v2 = v1.randomNonParallelVector();\r\n        }\r\n        let normal = v1.cross(v2);\r\n        if (normal.length() < 1e-5) {\r\n            // this would mean that v1 == v2.negated()\r\n            v2 = v1.randomNonParallelVector();\r\n            normal = v1.cross(v2);\r\n        }\r\n        normal = normal.unit();\r\n        return new CSGPlane(normal, normal.dot(a));\r\n    }\r\n\r\n    /**\r\n     * 通过点创建平面\r\n     * @param a\r\n     * @param b\r\n     * @param c\r\n     */\r\n    static fromPoints(a: any, b: any, c: any) {\r\n        a = new CSGVector3D(a);\r\n        b = new CSGVector3D(b);\r\n        c = new CSGVector3D(c);\r\n        return CSGPlane.fromVector3Ds(a, b, c);\r\n    }\r\n\r\n    /**\r\n     * 通过向量和点创建平面\r\n     * @param normal\r\n     * @param point\r\n     */\r\n    static fromNormalAndPoint(normal: CSGVector3D|any[], point: CSGVector3D|any[]) {\r\n        normal = new CSGVector3D(normal);\r\n        point = new CSGVector3D(point);\r\n        normal = normal.unit();\r\n        let w = point.dot(normal);\r\n        return new CSGPlane(normal, w);\r\n    }\r\n\r\n    /**\r\n     * 生成反向平面\r\n     */\r\n    public flipped() {\r\n        return new CSGPlane(this.normal.negated(), -this.w);\r\n    }\r\n\r\n    /**\r\n     * 获取类型符\r\n     */\r\n    public getTag() {\r\n        let result = this.tag;\r\n        if (!result) {\r\n            result = CSG.getTag();\r\n            this.tag = result;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 判断相等\r\n     * @param n\r\n     */\r\n    public equals(n: any) {\r\n        return this.normal.equals(n.normal) && this.w == n.w;\r\n    }\r\n\r\n    /**\r\n     * 移动\r\n     * @param matrix4x4\r\n     */\r\n    public transform(matrix4x4: any) {\r\n        let ismirror = matrix4x4.isMirroring();\r\n        // get two vectors in the plane:\r\n        let r = this.normal.randomNonParallelVector();\r\n        let u = this.normal.cross(r);\r\n        let v = this.normal.cross(u);\r\n        // get 3 points in the plane:\r\n        let point1 = this.normal.times(this.w);\r\n        let point2 = point1.plus(u);\r\n        let point3 = point1.plus(v);\r\n        // transform the points:\r\n        point1 = point1.multiply4x4(matrix4x4);\r\n        point2 = point2.multiply4x4(matrix4x4);\r\n        point3 = point3.multiply4x4(matrix4x4);\r\n        // and create a new plane from the transformed points:\r\n        let newplane = CSGPlane.fromVector3Ds(point1, point2, point3);\r\n        if (ismirror) {\r\n            // the transform is mirroring\r\n            // We should mirror the plane:\r\n            newplane = newplane.flipped();\r\n        }\r\n        return newplane;\r\n    }\r\n\r\n    // Returns object:\r\n    // .type:\r\n    //   0: coplanar-front\r\n    //   1: coplanar-back\r\n    //   2: front\r\n    //   3: back\r\n    //   4: spanning\r\n    // In case the polygon is spanning, returns:\r\n    // .front: a CSG.Polygon of the front part\r\n    // .back: a CSG.Polygon of the back part\r\n    /**\r\n     * 划分多边形\r\n     * @param polygon\r\n     */\r\n    public splitPolygon(polygon: any) {\r\n        let result: any = {\r\n            type: null,\r\n            front: null,\r\n            back: null,\r\n        };\r\n        // cache in local lets (speedup):\r\n        let planenormal = this.normal;\r\n        let vertices = polygon.vertices;\r\n        let numvertices = vertices.length;\r\n        if (polygon.plane.equals(this)) {\r\n            result.type = 0;\r\n        } else {\r\n            let EPS = CSGPlane.EPSILON;\r\n            let thisw = this.w;\r\n            let hasfront = false;\r\n            let hasback = false;\r\n            let vertexIsBack = [];\r\n            let MINEPS = -EPS;\r\n            for (let i = 0; i < numvertices; i++) {\r\n                let t = planenormal.dot(vertices[i].pos) - thisw;\r\n                let isback = (t < 0);\r\n                vertexIsBack.push(isback);\r\n                if (t > EPS) { hasfront = true; }\r\n                if (t < MINEPS) { hasback = true; }\r\n            }\r\n            if ((!hasfront) && (!hasback)) {\r\n                // all points coplanar\r\n                let t = planenormal.dot(polygon.plane.normal);\r\n                result.type = (t >= 0) ? 0 : 1;\r\n            } else if (!hasback) {\r\n                result.type = 2;\r\n            } else if (!hasfront) {\r\n                result.type = 3;\r\n            } else {\r\n                // spanning\r\n                result.type = 4;\r\n                let frontvertices = [];\r\n                let backvertices = [];\r\n                let isback = vertexIsBack[0];\r\n                for (let vertexindex = 0; vertexindex < numvertices; vertexindex++) {\r\n                    let vertex = vertices[vertexindex];\r\n                    let nextvertexindex = vertexindex + 1;\r\n                    if (nextvertexindex >= numvertices) { nextvertexindex = 0; }\r\n                    let nextisback = vertexIsBack[nextvertexindex];\r\n                    if (isback == nextisback) {\r\n                        // line segment is on one side of the plane:\r\n                        if (isback) {\r\n                            backvertices.push(vertex);\r\n                        } else {\r\n                            frontvertices.push(vertex);\r\n                        }\r\n                    } else {\r\n                        // line segment intersects plane:\r\n                        let point = vertex.pos;\r\n                        let nextpoint = vertices[nextvertexindex].pos;\r\n                        let intersectionpoint = this.splitLineBetweenPoints(point, nextpoint);\r\n                        let intersectionvertex = new CSGVertex(intersectionpoint);\r\n                        if (isback) {\r\n                            backvertices.push(vertex);\r\n                            backvertices.push(intersectionvertex);\r\n                            frontvertices.push(intersectionvertex);\r\n                        } else {\r\n                            frontvertices.push(vertex);\r\n                            frontvertices.push(intersectionvertex);\r\n                            backvertices.push(intersectionvertex);\r\n                        }\r\n                    }\r\n                    isback = nextisback;\r\n                } // for vertexindex\r\n                // remove duplicate vertices:\r\n                let EPS_SQUARED = CSGPlane.EPSILON * CSGPlane.EPSILON;\r\n                if (backvertices.length >= 3) {\r\n                    let prevvertex = backvertices[backvertices.length - 1];\r\n                    for (let vertexindex = 0; vertexindex < backvertices.length; vertexindex++) {\r\n                        let vertex = backvertices[vertexindex];\r\n                        if (vertex.pos.distanceToSquared(prevvertex.pos) < EPS_SQUARED) {\r\n                            backvertices.splice(vertexindex, 1);\r\n                            vertexindex--;\r\n                        }\r\n                        prevvertex = vertex;\r\n                    }\r\n                }\r\n                if (frontvertices.length >= 3) {\r\n                    let prevvertex = frontvertices[frontvertices.length - 1];\r\n                    for (let vertexindex = 0; vertexindex < frontvertices.length; vertexindex++) {\r\n                        let vertex = frontvertices[vertexindex];\r\n                        if (vertex.pos.distanceToSquared(prevvertex.pos) < EPS_SQUARED) {\r\n                            frontvertices.splice(vertexindex, 1);\r\n                            vertexindex--;\r\n                        }\r\n                        prevvertex = vertex;\r\n                    }\r\n                }\r\n                if (frontvertices.length >= 3) {\r\n                    result.front = new CSGPolygon(frontvertices, polygon.shared, polygon.plane);\r\n                }\r\n                if (backvertices.length >= 3) {\r\n                    result.back = new CSGPolygon(backvertices, polygon.shared, polygon.plane);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // robust splitting of a line by a plane\r\n    // will work even if the line is parallel to the plane\r\n    /**\r\n     * 通过两点分割线段\r\n     * @param p1\r\n     * @param p2\r\n     */\r\n    public splitLineBetweenPoints(p1: any, p2: any) {\r\n        let direction = p2.minus(p1);\r\n        let labda = (this.w - this.normal.dot(p1)) / this.normal.dot(direction);\r\n        if (isNaN(labda)) { labda = 0; }\r\n        if (labda > 1) { labda = 1; }\r\n        if (labda < 0) { labda = 0; }\r\n        let result = p1.plus(direction.times(labda));\r\n        return result;\r\n    }\r\n\r\n    // returns CSG.Vector3D\r\n    /**\r\n     * 用线分割\r\n     * @param line3d\r\n     */\r\n    public intersectWithLine(line3d: any) {\r\n        return line3d.intersectWithPlane(this);\r\n    }\r\n\r\n    // intersection of two planes\r\n    /**\r\n     * 两面交线\r\n     * @param plane\r\n     */\r\n    public intersectWithPlane(plane: any) {\r\n        return CSGLine3D.fromPlanes(this, plane);\r\n    }\r\n\r\n    /**\r\n     * 距离点的距离\r\n     * @param point\r\n     */\r\n    public signedDistanceToPoint(point: any) {\r\n        let t = this.normal.dot(point) - this.w;\r\n        return t;\r\n    }\r\n\r\n    /**\r\n     * 转成字符串\r\n     */\r\n    public toString() {\r\n        return `[normal: ${this.normal.toString()}, w: ${this.w}]`;\r\n    }\r\n\r\n    /**\r\n     * 镜像点\r\n     * @param point3d\r\n     */\r\n    public mirrorPoint(point3d: any) {\r\n        let distance = this.signedDistanceToPoint(point3d);\r\n        let mirrored = point3d.minus(this.normal.times(distance * 2.0));\r\n        return mirrored;\r\n    }\r\n\r\n    /**\r\n     * 镜像平面\r\n     * @param plane\r\n     */\r\n    public mirrored(plane: any) {\r\n        return this.transform(CSGMatrix4x4.mirroring(plane));\r\n    }\r\n\r\n    /**\r\n     * X轴镜像\r\n     */\r\n    public mirroredX() {\r\n        let plane = new CSGPlane(CSGVector3D.Create(1, 0, 0), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * Y轴镜像\r\n     */\r\n    public mirroredY() {\r\n        let plane = new CSGPlane(CSGVector3D.Create(0, 1, 0), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * Z轴镜像\r\n     */\r\n    public mirroredZ() {\r\n        let plane = new CSGPlane(CSGVector3D.Create(0, 0, 1), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * 移动\r\n     * @param v\r\n     */\r\n    public translate(v: any) {\r\n        return this.transform(CSGMatrix4x4.translation(v));\r\n    }\r\n\r\n    /**\r\n     * 缩放\r\n     * @param f\r\n     */\r\n    public scale(f: any) {\r\n        return this.transform(CSGMatrix4x4.scaling(f));\r\n    }\r\n\r\n    /**\r\n     * X轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateX(deg: any) {\r\n        return this.transform(CSGMatrix4x4.rotationX(deg));\r\n    }\r\n\r\n    /**\r\n     * Y轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateY(deg: any) {\r\n        return this.transform(CSGMatrix4x4.rotationY(deg));\r\n    }\r\n\r\n    /**\r\n     * Z轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateZ(deg: any) {\r\n        return this.transform(CSGMatrix4x4.rotationZ(deg));\r\n    }\r\n\r\n    /**\r\n     * 旋转\r\n     * @param rotationCenter\r\n     * @param rotationAxis\r\n     * @param degrees\r\n     */\r\n    public rotate(rotationCenter: any, rotationAxis: any, degrees: any) {\r\n        return this.transform(CSGMatrix4x4.rotation(rotationCenter, rotationAxis, degrees));\r\n    }\r\n\r\n    /**\r\n     * 旋转欧拉角\r\n     * @param alpha\r\n     * @param beta\r\n     * @param gamma\r\n     * @param position\r\n     */\r\n    public rotateEulerAngles(alpha: any, beta: any, gamma: any, position: any) {\r\n        position = position || [0, 0, 0];\r\n        let Rz1 = CSGMatrix4x4.rotationZ(alpha);\r\n        let Rx = CSGMatrix4x4.rotationX(beta);\r\n        let Rz2 = CSGMatrix4x4.rotationZ(gamma);\r\n        let T = CSGMatrix4x4.translation(new CSGVector3D(position));\r\n        return this.transform(Rz2.multiply(Rx).multiply(Rz1).multiply(T));\r\n    }\r\n}\r\n\r\n",
        "import {CSGVector2D} from './CSGVector2D';\r\nimport {CSG} from './CSG';\r\nimport {CSGMatrix4x4} from './CSGMatrix4x4';\r\nimport {CSGPlane} from './CSGPlane';\r\nimport {Nullable} from \"../types\";\r\n\r\n/**\r\n * CSG三维向量\r\n */\r\nexport class CSGVector3D {\r\n    /**\r\n     * X值\r\n     */\r\n    public readonly _x: number;\r\n\r\n    /**\r\n     * Y值\r\n     */\r\n    public readonly _y: number;\r\n\r\n    /**\r\n     * Z值\r\n     */\r\n    public readonly _z: number;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param x\r\n     * @param y\r\n     * @param z\r\n     */\r\n    constructor(x: Nullable<number | number[] | CSGVector3D | CSGVector2D | any> = null, y: Nullable<number | CSGVector2D | number[]> = null, z: Nullable<number | CSGVector2D | number[]> = null) {\r\n        let xString: string;\r\n        let yString: string;\r\n        let zString: string;\r\n\r\n        if (arguments.length == 3 && y != null && z != null) {\r\n            xString = x.toString();\r\n            yString = y.toString();\r\n            zString = z.toString();\r\n            this._x = parseFloat(xString);\r\n            this._y = parseFloat(yString);\r\n            this._z = parseFloat(zString);\r\n        } else if (arguments.length == 2 && y != null) {\r\n            xString = x.toString();\r\n            yString = y.toString();\r\n            this._x = parseFloat(xString);\r\n            this._y = parseFloat(yString);\r\n            this._z = 0;\r\n        } else {\r\n            let ok = true;\r\n            if (arguments.length == 1) {\r\n                if (typeof (x) == 'object') {\r\n                    if (x instanceof CSGVector3D) {\r\n                        this._x = x._x;\r\n                        this._y = x._y;\r\n                        this._z = x._z;\r\n                    } else if (x instanceof CSGVector2D) {\r\n                        this._x = x._x;\r\n                        this._y = x._y;\r\n                        this._z = 0;\r\n                    } else if (x instanceof Array) {\r\n                        if ((x.length < 2) || (x.length > 3)) {\r\n                            ok = false;\r\n                        } else {\r\n                            this._x = parseFloat(x[0]);\r\n                            this._y = parseFloat(x[1]);\r\n                            if (x.length == 3) {\r\n                                this._z = parseFloat(x[2]);\r\n                            } else {\r\n                                this._z = 0;\r\n                            }\r\n                        }\r\n                    } else if (('x' in x) && ('y' in x)) {\r\n                        this._x = parseFloat(x.x);\r\n                        this._y = parseFloat(x.y);\r\n                        if ('z' in x) {\r\n                            this._z = parseFloat(x.z);\r\n                        } else {\r\n                            this._z = 0;\r\n                        }\r\n                    } else {\r\n                        ok = false;\r\n                    }\r\n                } else {\r\n                    let v = parseFloat(x);\r\n                    this._x = v;\r\n                    this._y = v;\r\n                    this._z = v;\r\n                }\r\n            } else {\r\n                ok = false;\r\n            }\r\n            if (ok) {\r\n                if ((!CSG.IsFloat(this._x)) || (!CSG.IsFloat(this._y)) || (!CSG.IsFloat(this._z))) {\r\n                    ok = false;\r\n                }\r\n            }\r\n            if (!ok) {\r\n                throw new Error('wrong arguments');\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取X值\r\n     */\r\n    public get x(): number {\r\n        return this._x;\r\n    }\r\n\r\n    /**\r\n     * 获取Y值\r\n     */\r\n    public get y(): number {\r\n        return this._y;\r\n    }\r\n\r\n    /**\r\n     * 获取Z值\r\n     */\r\n    public get z(): number {\r\n        return this._z;\r\n    }\r\n\r\n    /**\r\n     * 创建三维向量\r\n     * @param x\r\n     * @param y\r\n     * @param z\r\n     * @constructor\r\n     */\r\n    static Create(x: number, y: number, z: number): CSGVector3D {\r\n        let result = Object.create(CSGVector3D.prototype);\r\n        result._x = x;\r\n        result._y = y;\r\n        result._z = z;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): CSGVector3D {\r\n        return CSGVector3D.Create(this._x, this._y, this._z);\r\n    }\r\n\r\n    /**\r\n     * 置反\r\n     */\r\n    public negated(): CSGVector3D {\r\n        return CSGVector3D.Create(-this._x, -this._y, -this._z);\r\n    }\r\n\r\n    /**\r\n     * 求绝对值\r\n     */\r\n    public abs(): CSGVector3D {\r\n        return CSGVector3D.Create(Math.abs(this._x), Math.abs(this._y), Math.abs(this._z));\r\n    }\r\n\r\n    /**\r\n     * 相加\r\n     * @param a\r\n     */\r\n    public plus(a: CSGVector3D): CSGVector3D {\r\n        return CSGVector3D.Create(this._x + a._x, this._y + a._y, this._z + a._z);\r\n    }\r\n\r\n    /**\r\n     * 求差\r\n     * @param a\r\n     */\r\n    public minus(a: CSGVector3D): CSGVector3D {\r\n        return CSGVector3D.Create(this._x - a._x, this._y - a._y, this._z - a._z);\r\n    }\r\n\r\n    /**\r\n     * 叉乘\r\n     * @param a\r\n     */\r\n    public times(a: number): CSGVector3D {\r\n        return CSGVector3D.Create(this._x * a, this._y * a, this._z * a);\r\n    }\r\n\r\n    /**\r\n     * 分割\r\n     * @param a\r\n     */\r\n    public dividedBy(a: number): CSGVector3D {\r\n        return CSGVector3D.Create(this._x / a, this._y / a, this._z / a);\r\n    }\r\n\r\n    /**\r\n     * 点成\r\n     * @param a\r\n     */\r\n    public dot(a: CSGVector3D): number {\r\n        return this._x * a._x + this._y * a._y + this._z * a._z;\r\n    }\r\n\r\n    /**\r\n     * 插值\r\n     * @param a\r\n     * @param t\r\n     */\r\n    public lerp(a: CSGVector3D, t: number): CSGVector3D {\r\n        return this.plus(a.minus(this).times(t));\r\n    }\r\n\r\n    /**\r\n     * 求平方\r\n     */\r\n    public lengthSquared(): number {\r\n        return this.dot(this);\r\n    }\r\n\r\n    /**\r\n     * 长度\r\n     */\r\n    public length(): number {\r\n        return Math.sqrt(this.lengthSquared());\r\n    }\r\n\r\n    /**\r\n     * 联合\r\n     */\r\n    public unit(): CSGVector3D {\r\n        return this.dividedBy(this.length());\r\n    }\r\n\r\n    /**\r\n     * 叉乘\r\n     * @param a\r\n     */\r\n    public cross(a: any): CSGVector3D {\r\n        return CSGVector3D.Create(\r\n            this._y * a._z - this._z * a._y, this._z * a._x - this._x * a._z, this._x * a._y - this._y * a._x);\r\n    }\r\n\r\n    /**\r\n     * 求距离\r\n     * @param a\r\n     */\r\n    public distanceTo(a: CSGVector3D): number {\r\n        return this.minus(a).length();\r\n    }\r\n\r\n    /**\r\n     * 距离平方\r\n     * @param a\r\n     */\r\n    public distanceToSquared(a: CSGVector3D): number {\r\n        return this.minus(a).lengthSquared();\r\n    }\r\n\r\n    /**\r\n     * 相等\r\n     * @param a\r\n     */\r\n    public equals(a: CSGVector3D): boolean {\r\n        return (this._x == a._x) && (this._y == a._y) && (this._z == a._z);\r\n    }\r\n\r\n    /**\r\n     * 乘以4X4矩阵\r\n     * @param matrix4x4\r\n     */\r\n    public multiply4x4(matrix4x4: CSGMatrix4x4): CSGVector3D {\r\n        return matrix4x4.leftMultiply1x3Vector(this);\r\n    }\r\n\r\n    /**\r\n     * 改变\r\n     * @param matrix4x4\r\n     */\r\n    public transform(matrix4x4: CSGMatrix4x4): CSGVector3D {\r\n        return matrix4x4.leftMultiply1x3Vector(this);\r\n    }\r\n\r\n    /**\r\n     * 转成字符串\r\n     */\r\n    public toString(): string {\r\n        return `(${this._x.toFixed(2)}, ${this._y.toFixed(2)}, ${this._z.toFixed(2)})`;\r\n    }\r\n\r\n    /**\r\n     * 找到一个与此向量垂直的向量\r\n     */\r\n    public randomNonParallelVector(): CSGVector3D {\r\n        let abs = this.abs();\r\n        if ((abs._x <= abs._y) && (abs._x <= abs._z)) {\r\n            return CSGVector3D.Create(1, 0, 0);\r\n        } else if ((abs._y <= abs._x) && (abs._y <= abs._z)) {\r\n            return CSGVector3D.Create(0, 1, 0);\r\n        } else {\r\n            return CSGVector3D.Create(0, 0, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 求最小值\r\n     * @param p\r\n     */\r\n    public min(p: any): CSGVector3D {\r\n        return CSGVector3D.Create(\r\n            Math.min(this._x, p._x), Math.min(this._y, p._y), Math.min(this._z, p._z));\r\n    }\r\n\r\n    /**\r\n     * 求最大值\r\n     * @param p\r\n     */\r\n    public max(p: CSGVector3D): CSGVector3D {\r\n        return CSGVector3D.Create(\r\n            Math.max(this._x, p._x), Math.max(this._y, p._y), Math.max(this._z, p._z));\r\n    }\r\n\r\n    /**\r\n     * 反射\r\n     * @param plane\r\n     */\r\n    public mirrored(plane: CSGPlane): CSGVector3D {\r\n        return this.transform(CSGMatrix4x4.mirroring(plane));\r\n    }\r\n\r\n    /**\r\n     * X轴反射\r\n     */\r\n    public mirroredX(): CSGVector3D {\r\n        let plane = new CSGPlane(CSGVector3D.Create(1, 0, 0), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * Y轴反射\r\n     */\r\n    public mirroredY(): CSGVector3D {\r\n        let plane = new CSGPlane(CSGVector3D.Create(0, 1, 0), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * Z轴反射\r\n     */\r\n    public mirroredZ(): CSGVector3D {\r\n        let plane = new CSGPlane(CSGVector3D.Create(0, 0, 1), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * 转化\r\n     * @param v\r\n     */\r\n    public translate(v: any): CSGVector3D {\r\n        return this.transform(CSGMatrix4x4.translation(v));\r\n    }\r\n\r\n    /**\r\n     * 缩放\r\n     * @param f\r\n     */\r\n    public scale(f: any): CSGVector3D {\r\n        return this.transform(CSGMatrix4x4.scaling(f));\r\n    }\r\n\r\n    /**\r\n     * X轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateX(deg: number): CSGVector3D {\r\n        return this.transform(CSGMatrix4x4.rotationX(deg));\r\n    }\r\n\r\n    /**\r\n     * Y轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateY(deg: number): CSGVector3D {\r\n        return this.transform(CSGMatrix4x4.rotationY(deg));\r\n    }\r\n\r\n    /**\r\n     * Z轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateZ(deg: number): CSGVector3D {\r\n        return this.transform(CSGMatrix4x4.rotationZ(deg));\r\n    }\r\n\r\n    /**\r\n     * 旋转\r\n     * @param rotationCenter\r\n     * @param rotationAxis\r\n     * @param degrees\r\n     */\r\n    public rotate(rotationCenter: any, rotationAxis: any, degrees: any): CSGVector3D {\r\n        return this.transform(CSGMatrix4x4.rotation(rotationCenter, rotationAxis, degrees));\r\n    }\r\n\r\n    /**\r\n     * 旋转角度\r\n     * @param alpha\r\n     * @param beta\r\n     * @param gamma\r\n     * @param position\r\n     */\r\n    public rotateEulerAngles(alpha: any, beta: any, gamma: any, position: any): CSGVector3D {\r\n        position = position || [0, 0, 0];\r\n        let Rz1 = CSGMatrix4x4.rotationZ(alpha);\r\n        let Rx = CSGMatrix4x4.rotationX(beta);\r\n        let Rz2 = CSGMatrix4x4.rotationZ(gamma);\r\n        let T = CSGMatrix4x4.translation(new CSGVector3D(position));\r\n        return this.transform(Rz2.multiply(Rx).multiply(Rz1).multiply(T));\r\n    }\r\n}\r\n",
        "import { Nullable } from \"../../types\";\r\nimport { Vector2 } from \"../Vector2\";\r\nimport { Vector3 } from \"../Vector3\";\r\nimport { Matrix4 } from \"../Matrix4\";\r\nimport { MathUtils } from \"../MathUtils\";\r\nimport { BinaryBuffer } from \"../../Misc\";\r\n\r\n/**\r\n * 曲线路径\r\n * @ignore\r\n */\r\nexport class Curve<T = Vector2 | Vector3> {\r\n\r\n    public type: string;\r\n    public arcLengthDivisions: number;\r\n    protected needsUpdate: boolean = false;\r\n    protected cacheArcLengths: number[];\r\n\r\n    /**\r\n     * 构造函数\r\n     */\r\n    constructor() {\r\n        this.type = 'Curve';\r\n        this.arcLengthDivisions = 200;\r\n    }\r\n\r\n    /**\r\n     * 是否为空曲线\r\n     */\r\n    public isEmpty(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 获取点\r\n     */\r\n    public getPoint(t: number, optionalTarget: Nullable<T> = null): T {\r\n        // @ts-ignore\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 获取点\r\n     * @param u\r\n     * @param optionalTarget\r\n     */\r\n    public getPointAt(u: number, optionalTarget: Nullable<T> = null): T {\r\n        const t = this.getUtoTmapping(u);\r\n        return this.getPoint(t, optionalTarget);\r\n    }\r\n\r\n    /**\r\n     * 获取曲线上的点\r\n     * @param divisions\r\n     */\r\n    public getPoints(divisions: number = 5): T[] {\r\n\r\n        const points = [];\r\n        for (let d = 0; d <= divisions; d++) {\r\n            points.push(this.getPoint(d / divisions));\r\n        }\r\n        return points;\r\n    }\r\n\r\n    /**\r\n     * 获取曲线上的点\r\n     * @param divisions\r\n     */\r\n    public getSpacedPoints(divisions: number = 5): T[] {\r\n\r\n        const points = [];\r\n        for (let d = 0; d <= divisions; d++) {\r\n            points.push(this.getPointAt(d / divisions));\r\n        }\r\n        return points;\r\n    }\r\n\r\n    /**\r\n     * 曲线长度\r\n     */\r\n    public getLength(): number {\r\n        const lengths = this.getLengths();\r\n        return lengths[lengths.length - 1];\r\n    }\r\n\r\n    /**\r\n     * 曲线长度数组\r\n     * @param divisions\r\n     */\r\n    public getLengths(divisions = this.arcLengthDivisions): number[] {\r\n\r\n        if (this.cacheArcLengths &&\r\n            (this.cacheArcLengths.length == divisions + 1) &&\r\n            !this.needsUpdate) {\r\n            return this.cacheArcLengths;\r\n        }\r\n\r\n        this.needsUpdate = false;\r\n\r\n        let cache = [];\r\n        let last = this.getPoint(0);\r\n        let sum = 0;\r\n        let current: T;\r\n\r\n        cache.push(0);\r\n\r\n        for (let p = 1; p <= divisions; p++) {\r\n            current = this.getPoint(p / divisions);\r\n            (current as any).distanceTo(last);\r\n            cache.push(sum);\r\n            last = current;\r\n        }\r\n\r\n        this.cacheArcLengths = cache;\r\n\r\n        return cache;\r\n    }\r\n\r\n    /**\r\n     * 更新长度\r\n     */\r\n    public updateArcLengths(): number[] {\r\n        this.needsUpdate = true;\r\n        return this.getLengths();\r\n    }\r\n\r\n    /**\r\n     * 把U映射到T\r\n     * @param u\r\n     * @param distance\r\n     */\r\n    public getUtoTmapping(u: number, distance: number = 0): number {\r\n        let arcLengths = this.getLengths();\r\n\r\n        let i = 0;\r\n        let il = arcLengths.length;\r\n\r\n        let targetArcLength; // The targeted u distance value to get\r\n\r\n        if (distance) {\r\n            targetArcLength = distance;\r\n        } else {\r\n            targetArcLength = u * arcLengths[il - 1];\r\n        }\r\n\r\n        // binary search for the index with largest value smaller than target u distance\r\n\r\n        let low = 0;\r\n        let high = il - 1;\r\n        let comparison;\r\n\r\n        while (low <= high) {\r\n            i = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\r\n\r\n            comparison = arcLengths[i] - targetArcLength;\r\n\r\n            if (comparison < 0) {\r\n                low = i + 1;\r\n            } else if (comparison > 0) {\r\n                high = i - 1;\r\n            } else {\r\n                high = i;\r\n                break;\r\n\r\n                // DONE\r\n            }\r\n        }\r\n\r\n        i = high;\r\n\r\n        if (arcLengths[i] == targetArcLength) {\r\n            return i / (il - 1);\r\n        }\r\n\r\n        // we could get finer grain at lengths, or use simple interpolation between two points\r\n\r\n        let lengthBefore = arcLengths[i];\r\n        let lengthAfter = arcLengths[i + 1];\r\n\r\n        let segmentLength = lengthAfter - lengthBefore;\r\n\r\n        // determine where we are between the 'before' and 'after' points\r\n\r\n        let segmentFraction = (targetArcLength - lengthBefore) / segmentLength;\r\n\r\n        // add that fractional amount to t\r\n\r\n        let t = (i + segmentFraction) / (il - 1);\r\n\r\n        return t;\r\n    }\r\n\r\n    /**\r\n     * 获取曲线上的切点\r\n     * @param t\r\n     * @param optionalTarget\r\n     */\r\n    public getTangent(t: number, optionalTarget: Nullable<T> = null): T {\r\n\r\n        let delta = 0.0001;\r\n        let t1 = t - delta;\r\n        let t2 = t + delta;\r\n\r\n        // Capping in case of danger\r\n\r\n        if (t1 < 0) {\r\n            t1 = 0;\r\n        }\r\n        if (t2 > 1) {\r\n            t2 = 1;\r\n        }\r\n\r\n        let pt1 = this.getPoint(t1);\r\n        let pt2 = this.getPoint(t2);\r\n\r\n        let tangent: T;\r\n        if (!optionalTarget) {\r\n            if (pt1 instanceof Vector2) {\r\n                tangent = new Vector2() as any;\r\n            } else {\r\n                tangent = new Vector3() as any;\r\n            }\r\n        } else {\r\n            tangent = optionalTarget;\r\n        }\r\n\r\n        if (tangent) {\r\n            (tangent as any).copy(pt2).sub(pt1).normalize();\r\n        }\r\n\r\n        return tangent;\r\n    }\r\n\r\n    /**\r\n     * 获取曲线上的切点\r\n     * @param u\r\n     * @param optionalTarget\r\n     */\r\n    public getTangentAt(u: number, optionalTarget: Nullable<T> = null): T {\r\n\r\n        const t = this.getUtoTmapping(u);\r\n        return this.getTangent(t, optionalTarget);\r\n    }\r\n\r\n    /**\r\n     * 计算Frenet帧\r\n     * @param segments\r\n     * @param closed\r\n     */\r\n    public computeFrenetFrames(segments: number, closed: boolean) {\r\n\r\n        let normal = new Vector3();\r\n\r\n        let tangents = [];\r\n        let normals = [];\r\n        let binormals = [];\r\n\r\n        let vec = new Vector3();\r\n        let mat = new Matrix4();\r\n\r\n        let i;\r\n        let u;\r\n        let theta;\r\n\r\n        // compute the tangent vectors for each segment on the curve\r\n\r\n        for (i = 0; i <= segments; i++) {\r\n            u = i / segments;\r\n\r\n            tangents[ i ] = this.getTangentAt(u);\r\n            (tangents[ i ] as any).normalize();\r\n        }\r\n\r\n        // select an initial normal vector perpendicular to the first tangent vector,\r\n        // and in the direction of the minimum tangent xyz component\r\n\r\n        normals[0] = new Vector3();\r\n        binormals[0] = new Vector3();\r\n\r\n        let min = Number.MAX_VALUE;\r\n        let tx = Math.abs((tangents[0] as any).x);\r\n        let ty = Math.abs((tangents[0] as any).y);\r\n        let tz = Math.abs((tangents[0] as any).z);\r\n\r\n        if (tx <= min) {\r\n            min = tx;\r\n            normal.set(1, 0, 0);\r\n        }\r\n\r\n        if (ty <= min) {\r\n            min = ty;\r\n            normal.set(0, 1, 0);\r\n        }\r\n\r\n        if (tz <= min) {\r\n            normal.set(0, 0, 1);\r\n        }\r\n\r\n        vec.crossVectors(tangents[0] as any, normal).normalize();\r\n\r\n        normals[0].crossVectors(tangents[0] as any, vec);\r\n        binormals[0].crossVectors(tangents[0] as any, normals[0]);\r\n\r\n        // compute the slowly-varying normal and binormal vectors for each segment on the curve\r\n\r\n        for (i = 1; i <= segments; i++) {\r\n            normals[i] = normals[i - 1].clone();\r\n\r\n            binormals[i] = binormals[i - 1].clone();\r\n\r\n            vec.crossVectors(tangents[i - 1] as any, tangents[i] as any);\r\n\r\n            if (vec.length() > Number.EPSILON) {\r\n                vec.normalize();\r\n\r\n                theta = Math.acos(MathUtils.clamp((tangents[i - 1] as any).dot(tangents[i] as any), -1, 1)); // clamp for floating pt errors\r\n\r\n                normals[i].applyMatrix4(mat.makeRotationAxis(vec, theta));\r\n            }\r\n\r\n            binormals[i].crossVectors(tangents[i] as any, normals[i]);\r\n        }\r\n\r\n        // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\r\n\r\n        if (closed) {\r\n            theta = Math.acos(MathUtils.clamp(normals[0].dot(normals[segments]), -1, 1));\r\n            theta /= segments;\r\n\r\n            if ((tangents[0] as any).dot(vec.crossVectors(normals[0], normals[segments])) > 0) {\r\n                theta = -theta;\r\n            }\r\n\r\n            for (i = 1; i <= segments; i++) {\r\n                // twist a little...\r\n                normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i] as any, theta * i));\r\n                binormals[i].crossVectors(tangents[i] as any, normals[i]);\r\n            }\r\n        }\r\n\r\n        return {\r\n            tangents,\r\n            normals,\r\n            binormals,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone() {\r\n        return new Curve<T>().copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: Curve<T>): Curve<T> {\r\n        this.arcLengthDivisions = source.arcLengthDivisions;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 序列化JSON\r\n     */\r\n    public toJSON() {\r\n        const data: any = {};\r\n        data.type = this.type;\r\n        data.arcLengthDivisions = this.arcLengthDivisions;\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * 反序列化JSON\r\n     * @param json\r\n     */\r\n    public fromJSON(json: any): Curve<T> {\r\n        this.arcLengthDivisions = json.arcLengthDivisions;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public toDataBuffer(dataBuffer: BinaryBuffer): Curve<T> {\r\n        dataBuffer.writeString(this.type);\r\n        dataBuffer.writeFloat32(this.arcLengthDivisions);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 反序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public fromDataBuffer(dataBuffer: BinaryBuffer): Curve<T> {\r\n        this.arcLengthDivisions = dataBuffer.readFloat32();\r\n        return this;\r\n    }\r\n}\r\n",
        "export * from \"./Constants\";\r\nexport * from \"./GLConstants\";\r\nexport * from \"./EngineCapabilities\";\r\nexport * from \"./EngineOptions\";\r\nexport * from \"./WebGLEngine\";\r\nexport * from \"./WebGL/index\";\r\n\r\nexport * from \"./Textures/Texture\";\r\nexport * from \"./Textures/Texture2D\";\r\nexport * from \"./Textures/TextureCanvas\";\r\nexport * from \"./Textures/TextureCube\";\r\nexport * from \"./Textures/TextureRaw\";\r\nexport * from \"./Textures/TextureRaw2DArray\";\r\nexport * from \"./Textures/TextureRaw3D\";\r\nexport * from \"./Textures/TextureRawCube\";\r\nexport * from \"./Textures/TextureVideo\";\r\n",
        "/**\r\n * @category Engine\r\n */\r\nexport abstract class Constants {\r\n    public static readonly CullFaceNone = 0;\r\n    public static readonly CullFaceBack = 1;\r\n    public static readonly CullFaceFront = 2;\r\n    public static readonly CullFaceFrontBack = 3;\r\n\r\n    public static readonly FrontFaceDirectionCW = 0;\r\n    public static readonly FrontFaceDirectionCCW = 1;\r\n\r\n    public static readonly BasicShadowMap = 0;\r\n    public static readonly PCFShadowMap = 1;\r\n    public static readonly PCFSoftShadowMap = 2;\r\n    public static readonly VSMShadowMap = 3;\r\n\r\n    public static readonly FrontSide = 0;\r\n    public static readonly BackSide = 1;\r\n    public static readonly DoubleSide = 2;\r\n\r\n    public static readonly FlatShading = 1;\r\n    public static readonly SmoothShading = 2;\r\n\r\n    public static readonly NoBlending = 0;\r\n    public static readonly AddBlending = 1;\r\n    public static readonly CombineBlending = 2;\r\n    public static readonly SubtractBlending = 3;\r\n    public static readonly MultiplyBlending = 4;\r\n    public static readonly MaximizedBlending = 5;\r\n    public static readonly OneOneBlending = 6;\r\n    public static readonly PremultipliedBlending = 7;\r\n    public static readonly PremultipliedPorterDuffBlending = 8;\r\n    public static readonly InterpolateBlending = 9;\r\n    public static readonly ScreenModeBlending = 10;\r\n    public static readonly OneOneOneOneBlending = 11;\r\n    public static readonly AlphaToColorBlending = 12;\r\n    public static readonly ReverseOneMinusBlending = 13;\r\n    public static readonly SrcDstOneMinusSrcAlphaBlending = 14;\r\n    public static readonly OneOneOneZeroBlending = 15;\r\n    public static readonly ExclusionBlending = 16;\r\n\r\n    public static readonly AddEquation = 100;\r\n    public static readonly SubtractEquation = 101;\r\n    public static readonly ReverseSubtractEquation = 102;\r\n    public static readonly MinEquation = 103;\r\n    public static readonly MaxEquation = 104;\r\n\r\n    public static readonly ZeroFactor = 200;\r\n    public static readonly OneFactor = 201;\r\n    public static readonly SrcColorFactor = 202;\r\n    public static readonly OneMinusSrcColorFactor = 203;\r\n    public static readonly SrcAlphaFactor = 204;\r\n    public static readonly OneMinusSrcAlphaFactor = 205;\r\n    public static readonly DstAlphaFactor = 206;\r\n    public static readonly OneMinusDstAlphaFactor = 207;\r\n    public static readonly DstColorFactor = 208;\r\n    public static readonly OneMinusDstColorFactor = 209;\r\n    public static readonly SrcAlphaSaturateFactor = 210;\r\n    public static readonly ConstantColorFactor = 211;\r\n    public static readonly ConstantAlphaFactor = 212;\r\n\r\n    public static readonly NeverDepth = 0;\r\n    public static readonly AlwaysDepth = 1;\r\n    public static readonly LessDepth = 2;\r\n    public static readonly LessEqualDepth = 3;\r\n    public static readonly EqualDepth = 4;\r\n    public static readonly GreaterEqualDepth = 5;\r\n    public static readonly GreaterDepth = 6;\r\n    public static readonly NotEqualDepth = 7;\r\n\r\n    public static readonly MultiplyOperation = 0;\r\n    public static readonly MixOperation = 1;\r\n    public static readonly AddOperation = 2;\r\n\r\n    public static readonly NoToneMapping = 0;\r\n    public static readonly LinearToneMapping = 1;\r\n    public static readonly ReinhardToneMapping = 2;\r\n    public static readonly CineonToneMapping = 3;\r\n    public static readonly ACESFilmicToneMapping = 4;\r\n    public static readonly CustomToneMapping = 5;\r\n\r\n    public static readonly UVMapping = 300;\r\n    public static readonly CubeReflectionMapping = 301;\r\n    public static readonly CubeRefractionMapping = 302;\r\n    public static readonly EquirectangularReflectionMapping = 303;\r\n    public static readonly EquirectangularRefractionMapping = 304;\r\n    public static readonly CubeUVReflectionMapping = 306;\r\n    public static readonly CubeUVRefractionMapping = 307;\r\n\r\n    public static readonly RepeatWrapping = 1000;\r\n    public static readonly ClampToEdgeWrapping = 1001;\r\n    public static readonly MirroredRepeatWrapping = 1002;\r\n\r\n    public static readonly NearestNearestFilter = 1;\r\n    public static readonly LinearLinearFilter = 2;\r\n    public static readonly LinearLinearMipLinearFilter = 3;\r\n    public static readonly NearestNearestMipNearestFilter = 4;\r\n    public static readonly NearestLinearMipNearestFilter = 5;\r\n    public static readonly NearestLinearMipLinearFilter = 6;\r\n    public static readonly NearestLinearFilter = 7;\r\n    public static readonly NearestNearestMipLinearFilter = 8;\r\n    public static readonly LinearNearestMipNearestFilter = 9;\r\n    public static readonly LinearNearestMipLinearFilter = 10;\r\n    public static readonly LinearLinearMipNearestFilter = 11;\r\n    public static readonly LinearNearestFilter = 12;\r\n\r\n    public static readonly UnsignedByteType = 1009;\r\n    public static readonly ByteType = 1010;\r\n    public static readonly ShortType = 1011;\r\n    public static readonly UnsignedShortType = 1012;\r\n    public static readonly IntType = 1013;\r\n    public static readonly UnsignedIntType = 1014;\r\n    public static readonly FloatType = 1015;\r\n    public static readonly HalfFloatType = 1016;\r\n    public static readonly UnsignedShort4444Type = 1017;\r\n    public static readonly UnsignedShort5551Type = 1018;\r\n    public static readonly UnsignedShort565Type = 1019;\r\n    public static readonly UnsignedInt248Type = 1020;\r\n\r\n    public static readonly DepthFormat = 1021;\r\n    public static readonly DepthStencilFormat = 1022;\r\n    public static readonly StencilFormat = 1023;\r\n\r\n    public static readonly AlphaFormat = 1024;\r\n    public static readonly RGBFormat = 1025;\r\n    public static readonly RGBAFormat = 1026;\r\n    public static readonly LuminanceFormat = 1027;\r\n    public static readonly LuminanceAlphaFormat = 1028;\r\n    public static readonly RGBEFormat = 1029;\r\n\r\n    public static readonly RedFormat = 1030;\r\n    public static readonly RedIntegerFormat = 1031;\r\n    public static readonly RGFormat = 1032;\r\n    public static readonly RGIntegerFormat = 1033;\r\n    public static readonly RGBIntegerFormat = 1034;\r\n    public static readonly RGBAIntegerFormat = 1035;\r\n    public static readonly DoubleType = 1036;\r\n    public static readonly RGBA4Format = 1037;\r\n    public static readonly RGB5A1Format = 1038;\r\n    public static readonly RGB565Format = 1039;\r\n\r\n    public static readonly RGB_S3TC_DXT1_Format = 33776;\r\n    public static readonly RGBA_S3TC_DXT1_Format = 33777;\r\n    public static readonly RGBA_S3TC_DXT3_Format = 33778;\r\n    public static readonly RGBA_S3TC_DXT5_Format = 33779;\r\n    public static readonly RGB_PVRTC_4BPPV1_Format = 35840;\r\n    public static readonly RGB_PVRTC_2BPPV1_Format = 35841;\r\n    public static readonly RGBA_PVRTC_4BPPV1_Format = 35842;\r\n    public static readonly RGBA_PVRTC_2BPPV1_Format = 35843;\r\n    public static readonly RGB_ETC1_Format = 36196;\r\n    public static readonly RGB_ETC2_Format = 37492;\r\n    public static readonly RGBA_ETC2_EAC_Format = 37496;\r\n    public static readonly RGBA_ASTC_4x4_Format = 37808;\r\n    public static readonly RGBA_ASTC_5x4_Format = 37809;\r\n    public static readonly RGBA_ASTC_5x5_Format = 37810;\r\n    public static readonly RGBA_ASTC_6x5_Format = 37811;\r\n    public static readonly RGBA_ASTC_6x6_Format = 37812;\r\n    public static readonly RGBA_ASTC_8x5_Format = 37813;\r\n    public static readonly RGBA_ASTC_8x6_Format = 37814;\r\n    public static readonly RGBA_ASTC_8x8_Format = 37815;\r\n    public static readonly RGBA_ASTC_10x5_Format = 37816;\r\n    public static readonly RGBA_ASTC_10x6_Format = 37817;\r\n    public static readonly RGBA_ASTC_10x8_Format = 37818;\r\n    public static readonly RGBA_ASTC_10x10_Format = 37819;\r\n    public static readonly RGBA_ASTC_12x10_Format = 37820;\r\n    public static readonly RGBA_ASTC_12x12_Format = 37821;\r\n    public static readonly RGBA_BPTC_Format = 36492;\r\n\r\n    public static readonly SRGB8_ALPHA8_ASTC_4x4_Format = 37840;\r\n    public static readonly SRGB8_ALPHA8_ASTC_5x4_Format = 37841;\r\n    public static readonly SRGB8_ALPHA8_ASTC_5x5_Format = 37842;\r\n    public static readonly SRGB8_ALPHA8_ASTC_6x5_Format = 37843;\r\n    public static readonly SRGB8_ALPHA8_ASTC_6x6_Format = 37844;\r\n    public static readonly SRGB8_ALPHA8_ASTC_8x5_Format = 37845;\r\n    public static readonly SRGB8_ALPHA8_ASTC_8x6_Format = 37846;\r\n    public static readonly SRGB8_ALPHA8_ASTC_8x8_Format = 37847;\r\n    public static readonly SRGB8_ALPHA8_ASTC_10x5_Format = 37848;\r\n    public static readonly SRGB8_ALPHA8_ASTC_10x6_Format = 37849;\r\n    public static readonly SRGB8_ALPHA8_ASTC_10x8_Format = 37850;\r\n    public static readonly SRGB8_ALPHA8_ASTC_10x10_Format = 37851;\r\n    public static readonly SRGB8_ALPHA8_ASTC_12x10_Format = 37852;\r\n    public static readonly SRGB8_ALPHA8_ASTC_12x12_Format = 37853;\r\n\r\n    public static readonly TrianglesDrawMode = 0;\r\n    public static readonly TriangleStripDrawMode = 1;\r\n    public static readonly TriangleFanDrawMode = 2;\r\n\r\n    public static readonly LinearEncoding = 3000;\r\n    public static readonly sRGBEncoding = 3001;\r\n    public static readonly GammaEncoding = 3007;\r\n    public static readonly RGBEEncoding = 3002;\r\n    public static readonly LogLuvEncoding = 3003;\r\n    public static readonly RGBM7Encoding = 3004;\r\n    public static readonly RGBM16Encoding = 3005;\r\n    public static readonly RGBDEncoding = 3006;\r\n    public static readonly BasicDepthPacking = 3200;\r\n    public static readonly RGBADepthPacking = 3201;\r\n    public static readonly TangentSpaceNormalMap = 0;\r\n    public static readonly ObjectSpaceNormalMap = 1;\r\n\r\n    public static readonly ZeroStencilOp = 0;\r\n    public static readonly KeepStencilOp = 7680;\r\n    public static readonly ReplaceStencilOp = 7681;\r\n    public static readonly IncrementStencilOp = 7682;\r\n    public static readonly DecrementStencilOp = 7683;\r\n    public static readonly IncrementWrapStencilOp = 34055;\r\n    public static readonly DecrementWrapStencilOp = 34056;\r\n    public static readonly InvertStencilOp = 5386;\r\n\r\n    public static readonly NeverStencilFunc = 512;\r\n    public static readonly LessStencilFunc = 513;\r\n    public static readonly EqualStencilFunc = 514;\r\n    public static readonly LessEqualStencilFunc = 515;\r\n    public static readonly GreaterStencilFunc = 516;\r\n    public static readonly NotEqualStencilFunc = 517;\r\n    public static readonly GreaterEqualStencilFunc = 518;\r\n    public static readonly AlwaysStencilFunc = 519;\r\n\r\n    public static readonly StaticDrawUsage = 35044;\r\n    public static readonly DynamicDrawUsage = 35048;\r\n    public static readonly StreamDrawUsage = 35040;\r\n    public static readonly StaticReadUsage = 35045;\r\n    public static readonly DynamicReadUsage = 35049;\r\n    public static readonly StreamReadUsage = 35041;\r\n    public static readonly StaticCopyUsage = 35046;\r\n    public static readonly DynamicCopyUsage = 35050;\r\n    public static readonly StreamCopyUsage = 35042;\r\n\r\n    public static readonly ArrayBufferTarget = 0;\r\n    public static readonly ElementBufferTarget = 1;\r\n    public static readonly UniformBufferTarget = 2;\r\n    public static readonly TransformFeedbackTarget = 3;\r\n    public static readonly CopyReadTarget = 4;\r\n    public static readonly CopyWriteTarget = 5;\r\n    public static readonly ReadBuffer = 6;\r\n    public static readonly PixelPackBuffer = 7;\r\n    public static readonly PixelUnPackBuffer = 8;\r\n\r\n    public static readonly NoFog = 0;\r\n    public static readonly LinerFog = 1;\r\n    public static readonly Exp2Fog = 2;\r\n}\r\n",
        "import { BaseEngine } from \"./BaseEngine\";\r\nimport { Constants } from \"./Constants\";\r\nimport { Nullable } from \"../types\";\r\nimport { GLPipelineContext } from \"./GLPipelineContext\";\r\n\r\n/**\r\n * WebGLEngine\r\n * @category Engine\r\n */\r\nexport class WebGLEngine extends BaseEngine {\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public _currentFramebuffer: Nullable<WebGLFramebuffer> = null;\r\n\r\n    /**\r\n     * 获取GL错误\r\n     */\r\n    public getError(): number {\r\n        return this._gl.getError();\r\n    }\r\n\r\n    /**\r\n     * 初始化GL\r\n     * @protected\r\n     */\r\n    protected _InitGL(): void {\r\n        try {\r\n            this._gl = <any>(this._renderingCanvas.getContext(\"webgl2\", this._creationOptions) ||\r\n                this._renderingCanvas.getContext(\"experimental-webgl2\", this._creationOptions));\r\n            if (this._gl) {\r\n                this._webGLVersion = 2.0;\r\n\r\n                if (!this._gl.deleteQuery) {\r\n                    this._webGLVersion = 1.0;\r\n                }\r\n            }\r\n        } catch (e) {\r\n        }\r\n\r\n        if (!this._gl) {\r\n            try {\r\n                this._gl = <WebGLRenderingContext>(this._renderingCanvas.getContext(\"webgl\", this._creationOptions) ||\r\n                    this._renderingCanvas.getContext(\"experimental-webgl\", this._creationOptions));\r\n                this._webGLVersion = 1.0;\r\n            } catch (e) {\r\n                throw new Error(\"不支持WebGL\");\r\n            }\r\n        }\r\n\r\n        if (!this._gl) {\r\n            throw new Error(\"不支持WebGL\");\r\n        }\r\n\r\n        this._gl.pixelStorei(this._gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, this._gl.NONE);\r\n    }\r\n\r\n    /**\r\n     * 初始化GL上下文\r\n     * @protected\r\n     */\r\n    protected _initGLContext(): void {\r\n\r\n        this._caps = {\r\n            maxTexturesImageUnits: this._gl.getParameter(this._gl.MAX_TEXTURE_IMAGE_UNITS),\r\n            maxCombinedTexturesImageUnits: this._gl.getParameter(this._gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS),\r\n            maxVertexTextureImageUnits: this._gl.getParameter(this._gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS),\r\n            maxTextureSize: this._gl.getParameter(this._gl.MAX_TEXTURE_SIZE),\r\n            maxSamples: this._webGLVersion > 1 ? this._gl.getParameter(this._gl.MAX_SAMPLES) : 1,\r\n            maxCubemapTextureSize: this._gl.getParameter(this._gl.MAX_CUBE_MAP_TEXTURE_SIZE),\r\n            maxRenderTextureSize: this._gl.getParameter(this._gl.MAX_RENDERBUFFER_SIZE),\r\n            maxVertexAttribs: this._gl.getParameter(this._gl.MAX_VERTEX_ATTRIBS),\r\n            maxVaryingVectors: this._gl.getParameter(this._gl.MAX_VARYING_VECTORS),\r\n            maxFragmentUniformVectors: this._gl.getParameter(this._gl.MAX_FRAGMENT_UNIFORM_VECTORS),\r\n            maxVertexUniformVectors: this._gl.getParameter(this._gl.MAX_VERTEX_UNIFORM_VECTORS),\r\n            parallelShaderCompile: this._gl.getExtension('KHR_parallel_shader_compile'),\r\n            standardDerivatives: this._webGLVersion > 1 || (this._gl.getExtension('OES_standard_derivatives') != null),\r\n            maxAnisotropy: 1,\r\n            astc: this._gl.getExtension('WEBGL_compressed_texture_astc') || this._gl.getExtension('WEBKIT_WEBGL_compressed_texture_astc'),\r\n            s3tc: this._gl.getExtension('WEBGL_compressed_texture_s3tc') || this._gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc'),\r\n            pvrtc: this._gl.getExtension('WEBGL_compressed_texture_pvrtc') || this._gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc'),\r\n            etc1: this._gl.getExtension('WEBGL_compressed_texture_etc1') || this._gl.getExtension('WEBKIT_WEBGL_compressed_texture_etc1'),\r\n            etc2: this._gl.getExtension('WEBGL_compressed_texture_etc') || this._gl.getExtension('WEBKIT_WEBGL_compressed_texture_etc') || this._gl.getExtension('WEBGL_compressed_texture_es3_0'),\r\n            textureAnisotropicFilterExtension: this._gl.getExtension('EXT_texture_filter_anisotropic') || this._gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic') || this._gl.getExtension('MOZ_EXT_texture_filter_anisotropic'),\r\n            uintIndices: this._webGLVersion > 1 || this._gl.getExtension('OES_element_index_uint') != null,\r\n            fragmentDepthSupported: this._webGLVersion > 1 || this._gl.getExtension('EXT_frag_depth') != null,\r\n            highPrecisionShaderSupported: false,\r\n            timerQuery: this._gl.getExtension('EXT_disjoint_timer_query_webgl2') || this._gl.getExtension(\"EXT_disjoint_timer_query\"),\r\n            canUseTimestampForTimerQuery: false,\r\n            drawBuffersExtension: false,\r\n            maxMSAASamples: 1,\r\n            colorBufferFloat: this._webGLVersion > 1 && this._gl.getExtension('EXT_color_buffer_float'),\r\n            textureFloat: !!(this._webGLVersion > 1 || this._gl.getExtension('OES_texture_float')),\r\n            textureHalfFloat: !!(this._webGLVersion > 1 || this._gl.getExtension('OES_texture_half_float')),\r\n            textureHalfFloatRender: false,\r\n            textureFloatLinearFiltering: false,\r\n            textureFloatRender: false,\r\n            textureHalfFloatLinearFiltering: false,\r\n            vertexArrayObject: false,\r\n            instancedArrays: false,\r\n            textureLOD: !!(this._webGLVersion > 1 || this._gl.getExtension('EXT_shader_texture_lod')),\r\n            blendMinMax: false,\r\n            multiview: this._gl.getExtension('OVR_multiview2'),\r\n            oculusMultiview: this._gl.getExtension('OCULUS_multiview'),\r\n            depthTextureExtension: false\r\n        };\r\n\r\n        this._glVersion = this._gl.getParameter(this._gl.VERSION);\r\n\r\n        const rendererInfo: any = this._gl.getExtension(\"WEBGL_debug_renderer_info\");\r\n        if (rendererInfo != null) {\r\n            this._glRenderer = this._gl.getParameter(rendererInfo.UNMASKED_RENDERER_WEBGL);\r\n            this._glVendor = this._gl.getParameter(rendererInfo.UNMASKED_VENDOR_WEBGL);\r\n        }\r\n\r\n        if (!this._glVendor) {\r\n            this._glVendor = \"Unknown vendor\";\r\n        }\r\n\r\n        if (!this._glRenderer) {\r\n            this._glRenderer = \"Unknown renderer\";\r\n        }\r\n\r\n        this._gpuVendor = this._identifyGPUVendor(this._glVendor, this._glRenderer);\r\n\r\n        // Constants\r\n        if (this._gl.HALF_FLOAT_OES != 0x8D61) {\r\n            this._gl.HALF_FLOAT_OES = 0x8D61;\r\n        }\r\n        if (this._gl.RGBA16F != 0x881A) {\r\n            this._gl.RGBA16F = 0x881A;\r\n        }\r\n        if (this._gl.RGBA32F != 0x8814) {\r\n            this._gl.RGBA32F = 0x8814;\r\n        }\r\n        if (this._gl.DEPTH24_STENCIL8 != 35056) {\r\n            this._gl.DEPTH24_STENCIL8 = 35056;\r\n        }\r\n\r\n        if (this._caps.timerQuery) {\r\n            if (this._webGLVersion == 1) {\r\n                this._gl.getQuery = (<any>this._caps.timerQuery).getQueryEXT.bind(this._caps.timerQuery);\r\n            }\r\n            this._caps.canUseTimestampForTimerQuery = this._gl.getQuery(this._caps.timerQuery.TIMESTAMP_EXT, this._caps.timerQuery.QUERY_COUNTER_BITS_EXT) > 0;\r\n        }\r\n\r\n        this._caps.maxAnisotropy = this._caps.textureAnisotropicFilterExtension ? this._gl.getParameter(this._caps.textureAnisotropicFilterExtension.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0;\r\n        this._caps.textureFloatLinearFiltering = !!(this._caps.textureFloat && this._gl.getExtension('OES_texture_float_linear'));\r\n        this._caps.textureFloatRender = !!(this._caps.textureFloat && this._canRenderToFloatFramebuffer());\r\n        this._caps.textureHalfFloatLinearFiltering = !!(this._webGLVersion > 1 || (this._caps.textureHalfFloat && this._gl.getExtension('OES_texture_half_float_linear')));\r\n\r\n        if (this._webGLVersion > 1) {\r\n            if (this._gl.HALF_FLOAT_OES != 0x140B) {\r\n                this._gl.HALF_FLOAT_OES = 0x140B;\r\n            }\r\n        }\r\n\r\n        this._caps.textureHalfFloatRender = this._caps.textureHalfFloat && this._canRenderToHalfFloatFramebuffer();\r\n\r\n        // Draw buffers\r\n        if (this._webGLVersion > 1) {\r\n            this._caps.drawBuffersExtension = true;\r\n            this._caps.maxMSAASamples = this._gl.getParameter(this._gl.MAX_SAMPLES);\r\n        } else {\r\n            const drawBuffersExtension = this._gl.getExtension('WEBGL_draw_buffers');\r\n            if (drawBuffersExtension != null) {\r\n                this._caps.drawBuffersExtension = true;\r\n                this._gl.drawBuffers = drawBuffersExtension.drawBuffersWEBGL.bind(drawBuffersExtension);\r\n                this._gl.DRAW_FRAMEBUFFER = this._gl.FRAMEBUFFER;\r\n\r\n                for (let i = 0; i < 16; i++) {\r\n                    (<any>this._gl)[\"COLOR_ATTACHMENT\" + i + \"_WEBGL\"] = (<any>drawBuffersExtension)[\"COLOR_ATTACHMENT\" + i + \"_WEBGL\"];\r\n                }\r\n            }\r\n        }\r\n\r\n        // Depth Texture\r\n        if (this._webGLVersion > 1) {\r\n            this._caps.depthTextureExtension = true;\r\n        } else {\r\n            const depthTextureExtension = this._gl.getExtension('WEBGL_depth_texture');\r\n            if (depthTextureExtension != null) {\r\n                this._caps.depthTextureExtension = true;\r\n                this._gl.UNSIGNED_INT_24_8 = depthTextureExtension.UNSIGNED_INT_24_8_WEBGL;\r\n            }\r\n        }\r\n\r\n        // Vertex array object\r\n        if (this._webGLVersion > 1) {\r\n            this._caps.vertexArrayObject = true;\r\n        } else {\r\n            const vertexArrayObjectExtension = this._gl.getExtension('OES_vertex_array_object');\r\n            if (vertexArrayObjectExtension != null) {\r\n                this._caps.vertexArrayObject = true;\r\n                this._gl.createVertexArray = vertexArrayObjectExtension.createVertexArrayOES.bind(vertexArrayObjectExtension);\r\n                this._gl.bindVertexArray = vertexArrayObjectExtension.bindVertexArrayOES.bind(vertexArrayObjectExtension);\r\n                this._gl.deleteVertexArray = vertexArrayObjectExtension.deleteVertexArrayOES.bind(vertexArrayObjectExtension);\r\n            }\r\n        }\r\n\r\n        // Instances count\r\n        if (this._webGLVersion > 1) {\r\n            this._caps.instancedArrays = true;\r\n        } else {\r\n            const instanceExtension = <ANGLE_instanced_arrays>this._gl.getExtension('ANGLE_instanced_arrays');\r\n            if (instanceExtension != null) {\r\n                this._caps.instancedArrays = true;\r\n                this._gl.drawArraysInstanced = instanceExtension.drawArraysInstancedANGLE.bind(instanceExtension);\r\n                this._gl.drawElementsInstanced = instanceExtension.drawElementsInstancedANGLE.bind(instanceExtension);\r\n                this._gl.vertexAttribDivisor = instanceExtension.vertexAttribDivisorANGLE.bind(instanceExtension);\r\n            } else {\r\n                this._caps.instancedArrays = false;\r\n            }\r\n        }\r\n\r\n        if (this._gl.getShaderPrecisionFormat) {\r\n            const vertex_highp = this._gl.getShaderPrecisionFormat(this._gl.VERTEX_SHADER, this._gl.HIGH_FLOAT);\r\n            const fragment_highp = this._gl.getShaderPrecisionFormat(this._gl.FRAGMENT_SHADER, this._gl.HIGH_FLOAT);\r\n            if (vertex_highp && fragment_highp) {\r\n                this._caps.highPrecisionShaderSupported = vertex_highp.precision != 0 && fragment_highp.precision != 0;\r\n            }\r\n        }\r\n\r\n        if (this._webGLVersion > 1) {\r\n            this._caps.blendMinMax = true;\r\n        }\r\n        else {\r\n            const blendMinMaxExtension = this._gl.getExtension('EXT_blend_minmax');\r\n            if (blendMinMaxExtension != null) {\r\n                this._caps.blendMinMax = true;\r\n                this._gl.MAX = blendMinMaxExtension.MAX_EXT;\r\n                this._gl.MIN = blendMinMaxExtension.MIN_EXT;\r\n            }\r\n        }\r\n\r\n        this._initColorState();\r\n        this._initDepthState();\r\n        this._initStencilState();\r\n        this._initBlendingState();\r\n        this._initCullState();\r\n        this._initTextureState();\r\n        this._initDataBufferState();\r\n    }\r\n\r\n    /**\r\n     * 剪裁测试，即丢弃在剪裁矩形范围外的片段\r\n     * @param scissorTest\r\n     */\r\n    public setScissorTest(scissorTest: boolean): WebGLEngine {\r\n\r\n        if (scissorTest) {\r\n            this._gl.enable(this._gl.SCISSOR_TEST);\r\n        } else {\r\n            this._gl.disable(this._gl.SCISSOR_TEST);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 在写入颜色缓冲区之前，抖动颜色成分\r\n     * @param dithering\r\n     */\r\n    public setDithering(dithering: boolean): WebGLEngine {\r\n\r\n        if (dithering) {\r\n            this._gl.enable(this._gl.DITHER);\r\n        } else {\r\n            this._gl.disable(this._gl.DITHER);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 图元光栅化阶段之前，但在任意的transform反馈之后，就立刻被丢弃\r\n     * @param rasterizer\r\n     */\r\n    public setRasterizer(rasterizer: boolean): WebGLEngine {\r\n\r\n        if (rasterizer) {\r\n            this._gl.disable(this._gl.RASTERIZER_DISCARD);\r\n        } else {\r\n            this._gl.enable(this._gl.RASTERIZER_DISCARD);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _viewportCached = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n    /**\r\n     * @ignore\r\n     * @private\r\n     */\r\n    public _viewport(x: number, y: number, width: number, height: number): void {\r\n        if (x != this._viewportCached.x ||\r\n            y != this._viewportCached.y ||\r\n            width != this._viewportCached.width ||\r\n            height != this._viewportCached.height) {\r\n            this._viewportCached.x = x;\r\n            this._viewportCached.y = y;\r\n            this._viewportCached.width = width;\r\n            this._viewportCached.height = height;\r\n\r\n            this._gl.viewport(x, y, width, height);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清空缓冲\r\n     * @param color\r\n     * @param depth\r\n     * @param stencil\r\n     */\r\n    public clear(color: boolean = true, depth: boolean = true, stencil: boolean = true): WebGLEngine {\r\n\r\n        const gl = this.gl;\r\n\r\n        let bits: number = 0;\r\n\r\n        if (color) { bits |= gl.COLOR_BUFFER_BIT; }\r\n        if (depth) { bits |= gl.DEPTH_BUFFER_BIT; }\r\n        if (stencil) { bits |= gl.STENCIL_BUFFER_BIT; }\r\n\r\n        gl.clear(bits);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 是否支持渲染Float帧缓冲\r\n     * @protected\r\n     */\r\n    protected _canRenderToFloatFramebuffer(): boolean {\r\n        if (this._webGLVersion > 1) {\r\n            return this._caps.colorBufferFloat;\r\n        }\r\n        return this._canRenderToFramebuffer(Constants.FloatType);\r\n    }\r\n\r\n    /**\r\n     * 是否支持渲染半Float帧缓冲\r\n     * @protected\r\n     */\r\n    protected _canRenderToHalfFloatFramebuffer(): boolean {\r\n        if (this._webGLVersion > 1) {\r\n            return this._caps.colorBufferFloat;\r\n        }\r\n        return this._canRenderToFramebuffer(Constants.HalfFloatType);\r\n    }\r\n\r\n    /**\r\n     * 是否支持渲染指定类型的帧缓冲\r\n     * @param type\r\n     * @protected\r\n     */\r\n    protected _canRenderToFramebuffer(type: number): boolean {\r\n\r\n        let gl = this._gl;\r\n\r\n        //clear existing errors\r\n        while (gl.getError() != gl.NO_ERROR) { }\r\n\r\n        let successful = true;\r\n\r\n        let texture = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, this._getRGBABufferInternalSizedFormat(type), 1, 1, 0, gl.RGBA, this._getWebGLTextureType(type), null);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n\r\n        let fb = gl.createFramebuffer();\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n        let status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\r\n\r\n        successful = successful && (status == gl.FRAMEBUFFER_COMPLETE);\r\n        successful = successful && (gl.getError() == gl.NO_ERROR);\r\n\r\n        //try render by clearing frame buffer's color buffer\r\n        if (successful) {\r\n            gl.clear(gl.COLOR_BUFFER_BIT);\r\n            successful = successful && (gl.getError() == gl.NO_ERROR);\r\n        }\r\n\r\n        //try reading from frame to ensure render occurs (just creating the FBO is not sufficient to determine if rendering is supported)\r\n        if (successful) {\r\n            //in practice it's sufficient to just read from the backbuffer rather than handle potentially issues reading from the texture\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n            let readFormat = gl.RGBA;\r\n            let readType = gl.UNSIGNED_BYTE;\r\n            let buffer = new Uint8Array(4);\r\n            gl.readPixels(0, 0, 1, 1, readFormat, readType, buffer);\r\n            successful = successful && (gl.getError() == gl.NO_ERROR);\r\n        }\r\n\r\n        //clean up\r\n        gl.deleteTexture(texture);\r\n        gl.deleteFramebuffer(fb);\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\r\n        //clear accumulated errors\r\n        while (!successful && (gl.getError() != gl.NO_ERROR)) { }\r\n\r\n        return successful;\r\n    }\r\n\r\n    /**\r\n     * 纹理GL类型\r\n     * @param type\r\n     * @private\r\n     */\r\n    public _getWebGLTextureType(type: number): number {\r\n        if (this._webGLVersion == 1) {\r\n            switch (type) {\r\n                case Constants.FloatType:\r\n                    return this._gl.FLOAT;\r\n                case Constants.HalfFloatType:\r\n                    return this._gl.HALF_FLOAT_OES;\r\n                case Constants.UnsignedByteType:\r\n                    return this._gl.UNSIGNED_BYTE;\r\n                case Constants.UnsignedShort4444Type:\r\n                    return this._gl.UNSIGNED_SHORT_4_4_4_4;\r\n                case Constants.UnsignedShort5551Type:\r\n                    return this._gl.UNSIGNED_SHORT_5_5_5_1;\r\n                case Constants.UnsignedShort565Type:\r\n                    return this._gl.UNSIGNED_SHORT_5_6_5;\r\n                case Constants.UnsignedInt248Type:\r\n                    return this._gl.UNSIGNED_INT_24_8;\r\n            }\r\n            return this._gl.UNSIGNED_BYTE;\r\n        }\r\n\r\n        switch (type) {\r\n            case Constants.ByteType:\r\n                return this._gl.BYTE;\r\n            case Constants.UnsignedByteType:\r\n                return this._gl.UNSIGNED_BYTE;\r\n            case Constants.ShortType:\r\n                return this._gl.SHORT;\r\n            case Constants.UnsignedShortType:\r\n                return this._gl.UNSIGNED_SHORT;\r\n            case Constants.IntType:\r\n                return this._gl.INT;\r\n            case Constants.UnsignedIntType:\r\n                return this._gl.UNSIGNED_INT;\r\n            case Constants.FloatType:\r\n                return this._gl.FLOAT;\r\n            case Constants.HalfFloatType:\r\n                return this._gl.HALF_FLOAT;\r\n            case Constants.UnsignedShort4444Type:\r\n                return this._gl.UNSIGNED_SHORT_4_4_4_4;\r\n            case Constants.UnsignedShort5551Type:\r\n                return this._gl.UNSIGNED_SHORT_5_5_5_1;\r\n            case Constants.UnsignedShort565Type:\r\n                return this._gl.UNSIGNED_SHORT_5_6_5;\r\n            case Constants.UnsignedInt248Type:\r\n                return this._gl.UNSIGNED_INT_24_8;\r\n        }\r\n\r\n        return this._gl.UNSIGNED_BYTE;\r\n    }\r\n\r\n    /**\r\n     * 纹理GL格式\r\n     * @param format\r\n     * @private\r\n     */\r\n    public _getInternalFormat(format: number): number {\r\n        var internalFormat = this._gl.RGBA;\r\n\r\n        switch (format) {\r\n            case Constants.AlphaFormat:\r\n                internalFormat = this._gl.ALPHA;\r\n                break;\r\n            case Constants.LuminanceFormat:\r\n                internalFormat = this._gl.LUMINANCE;\r\n                break;\r\n            case Constants.LuminanceAlphaFormat:\r\n                internalFormat = this._gl.LUMINANCE_ALPHA;\r\n                break;\r\n            case Constants.RedFormat:\r\n                internalFormat = this._gl.RED;\r\n                break;\r\n            case Constants.RGFormat:\r\n                internalFormat = this._gl.RG;\r\n                break;\r\n            case Constants.RGBFormat:\r\n                internalFormat = this._gl.RGB;\r\n                break;\r\n            case Constants.RGBAFormat:\r\n                internalFormat = this._gl.RGBA;\r\n                break;\r\n            case Constants.RGBA4Format:\r\n                internalFormat = this._gl.RGBA4;\r\n                break;\r\n            case Constants.RGB5A1Format:\r\n                internalFormat = this._gl.RGB5_A1;\r\n                break;\r\n            case Constants.RGB565Format:\r\n                internalFormat = this._gl.RGB565;\r\n                break;\r\n        }\r\n\r\n        if (this._webGLVersion > 1) {\r\n            switch (format) {\r\n                case Constants.RedIntegerFormat:\r\n                    internalFormat = this._gl.RED_INTEGER;\r\n                    break;\r\n                case Constants.RGIntegerFormat:\r\n                    internalFormat = this._gl.RG_INTEGER;\r\n                    break;\r\n                case Constants.RGBIntegerFormat:\r\n                    internalFormat = this._gl.RGB_INTEGER;\r\n                    break;\r\n                case Constants.RGBAIntegerFormat:\r\n                    internalFormat = this._gl.RGBA_INTEGER;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return internalFormat;\r\n    }\r\n\r\n    /**\r\n     * Buffer数据格式\r\n     * @protected\r\n     */\r\n    public _getRGBABufferInternalSizedFormat(type: number, format?: number): number {\r\n        if (this._webGLVersion == 1) {\r\n            if (format != undefined) {\r\n                switch (format) {\r\n                    case Constants.AlphaFormat:\r\n                        return this._gl.ALPHA;\r\n                    case Constants.LuminanceFormat:\r\n                        return this._gl.LUMINANCE;\r\n                    case Constants.LuminanceAlphaFormat:\r\n                        return this._gl.LUMINANCE_ALPHA;\r\n                    case Constants.RGBFormat:\r\n                        return this._gl.RGB;\r\n                }\r\n            }\r\n            return this._gl.RGBA;\r\n        }\r\n\r\n        switch (type) {\r\n            case Constants.ByteType:\r\n                switch (format) {\r\n                    case Constants.RedFormat:\r\n                        return this._gl.R8_SNORM;\r\n                    case Constants.RGFormat:\r\n                        return this._gl.RG8_SNORM;\r\n                    case Constants.RGBFormat:\r\n                        return this._gl.RGB8_SNORM;\r\n                    case Constants.RedIntegerFormat:\r\n                        return this._gl.R8I;\r\n                    case Constants.RGIntegerFormat:\r\n                        return this._gl.RG8I;\r\n                    case Constants.RGBIntegerFormat:\r\n                        return this._gl.RGB8I;\r\n                    case Constants.RGBAIntegerFormat:\r\n                        return this._gl.RGBA8I;\r\n                    default:\r\n                        return this._gl.RGBA8_SNORM;\r\n                }\r\n            case Constants.UnsignedByteType:\r\n                switch (format) {\r\n                    case Constants.RedFormat:\r\n                        return this._gl.R8;\r\n                    case Constants.RGFormat:\r\n                        return this._gl.RG8;\r\n                    case Constants.RGBFormat:\r\n                        return this._gl.RGB8;\r\n                    case Constants.RGBAFormat:\r\n                        return this._gl.RGBA8;\r\n                    case Constants.RedIntegerFormat:\r\n                        return this._gl.R8UI;\r\n                    case Constants.RGIntegerFormat:\r\n                        return this._gl.RG8UI;\r\n                    case Constants.RGBIntegerFormat:\r\n                        return this._gl.RGB8UI;\r\n                    case Constants.RGBAIntegerFormat:\r\n                        return this._gl.RGBA8UI;\r\n                    case Constants.AlphaFormat:\r\n                        return this._gl.ALPHA;\r\n                    case Constants.LuminanceFormat:\r\n                        return this._gl.LUMINANCE;\r\n                    case Constants.LuminanceAlphaFormat:\r\n                        return this._gl.LUMINANCE_ALPHA;\r\n                    default:\r\n                        return this._gl.RGBA8;\r\n                }\r\n            case Constants.ShortType:\r\n                switch (format) {\r\n                    case Constants.RedIntegerFormat:\r\n                        return this._gl.R16I;\r\n                    case Constants.RGIntegerFormat:\r\n                        return this._gl.RG16I;\r\n                    case Constants.RGBIntegerFormat:\r\n                        return this._gl.RGB16I;\r\n                    case Constants.RGBAIntegerFormat:\r\n                        return this._gl.RGBA16I;\r\n                    default:\r\n                        return this._gl.RGBA16I;\r\n                }\r\n            case Constants.UnsignedShortType:\r\n                switch (format) {\r\n                    case Constants.RedIntegerFormat:\r\n                        return this._gl.R16UI;\r\n                    case Constants.RGIntegerFormat:\r\n                        return this._gl.RG16UI;\r\n                    case Constants.RGBIntegerFormat:\r\n                        return this._gl.RGB16UI;\r\n                    case Constants.RGBAIntegerFormat:\r\n                        return this._gl.RGBA16UI;\r\n                    default:\r\n                        return this._gl.RGBA16UI;\r\n                }\r\n            case Constants.IntType:\r\n                switch (format) {\r\n                    case Constants.RedIntegerFormat:\r\n                        return this._gl.R32I;\r\n                    case Constants.RGIntegerFormat:\r\n                        return this._gl.RG32I;\r\n                    case Constants.RGBIntegerFormat:\r\n                        return this._gl.RGB32I;\r\n                    case Constants.RGBAIntegerFormat:\r\n                        return this._gl.RGBA32I;\r\n                    default:\r\n                        return this._gl.RGBA32I;\r\n                }\r\n            case Constants.UnsignedIntType: // Refers to UNSIGNED_INT\r\n                switch (format) {\r\n                    case Constants.RedIntegerFormat:\r\n                        return this._gl.R32UI;\r\n                    case Constants.RGIntegerFormat:\r\n                        return this._gl.RG32UI;\r\n                    case Constants.RGBIntegerFormat:\r\n                        return this._gl.RGB32UI;\r\n                    case Constants.RGBAIntegerFormat:\r\n                        return this._gl.RGBA32UI;\r\n                    default:\r\n                        return this._gl.RGBA32UI;\r\n                }\r\n            case Constants.FloatType:\r\n                switch (format) {\r\n                    case Constants.RedFormat:\r\n                        return this._gl.R32F; // By default. Other possibility is R16F.\r\n                    case Constants.RGFormat:\r\n                        return this._gl.RG32F; // By default. Other possibility is RG16F.\r\n                    case Constants.RGBFormat:\r\n                        return this._gl.RGB32F; // By default. Other possibilities are RGB16F, R11F_G11F_B10F, RGB9_E5.\r\n                    case Constants.RGBAFormat:\r\n                        return this._gl.RGBA32F; // By default. Other possibility is RGBA16F.\r\n                    default:\r\n                        return this._gl.RGBA32F;\r\n                }\r\n            case Constants.HalfFloatType:\r\n                switch (format) {\r\n                    case Constants.RedFormat:\r\n                        return this._gl.R16F;\r\n                    case Constants.RGFormat:\r\n                        return this._gl.RG16F;\r\n                    case Constants.RGBFormat:\r\n                        return this._gl.RGB16F;\r\n                    case Constants.RGBAFormat:\r\n                        return this._gl.RGBA16F;\r\n                    default:\r\n                        return this._gl.RGBA16F;\r\n                }\r\n            case Constants.UnsignedShort565Type:\r\n                return this._gl.RGB565;\r\n            case Constants.UnsignedShort4444Type:\r\n                return this._gl.RGBA4;\r\n            case Constants.UnsignedShort5551Type:\r\n                return this._gl.RGB5_A1;\r\n        }\r\n\r\n        return this._gl.RGBA8;\r\n    }\r\n\r\n    /**\r\n     * 多重采样Buffer格式\r\n     * @protected\r\n     */\r\n    public _getRGBAMultiSampleBufferFormat(type: number): number {\r\n        if (type == Constants.FloatType) {\r\n            return this._gl.RGBA32F;\r\n        }\r\n        else if (type == Constants.HalfFloatType) {\r\n            return this._gl.RGBA16F;\r\n        }\r\n\r\n        return this._gl.RGBA8;\r\n    }\r\n\r\n    /**\r\n     * 深度Buffer格式\r\n     * @param type\r\n     * @param format\r\n     * @private\r\n     */\r\n    public _getDepthBufferInternalFormat(format: number, type?: number): number {\r\n\r\n        let internalFormat;\r\n\r\n        switch (format) {\r\n            case Constants.DepthStencilFormat:\r\n                internalFormat = this._gl.DEPTH_STENCIL;\r\n                break;\r\n            case Constants.DepthFormat:\r\n                internalFormat = this._gl.DEPTH_COMPONENT;\r\n                break;\r\n            case Constants.StencilFormat:\r\n                internalFormat = this._gl.STENCIL_INDEX8;\r\n                break;\r\n        }\r\n\r\n        if (this._webGLVersion > 1) {\r\n            switch (format) {\r\n                case Constants.DepthStencilFormat:\r\n                    if (type && type != Constants.FloatType) {\r\n                        if (type == Constants.UnsignedInt248Type) {\r\n                            internalFormat = this._gl.DEPTH24_STENCIL8;\r\n                        }\r\n                        else {\r\n                            internalFormat = this._gl.DEPTH_STENCIL;\r\n                        }\r\n                    } else {\r\n                        internalFormat = this._gl.DEPTH32F_STENCIL8;\r\n                    }\r\n                    break;\r\n                case Constants.DepthFormat:\r\n                    if (type && type != Constants.FloatType) {\r\n                        if (type == Constants.UnsignedIntType) {\r\n                            internalFormat = this._gl.DEPTH_COMPONENT24;\r\n                        }\r\n                        else if (type == Constants.UnsignedShortType) {\r\n                            internalFormat = this._gl.DEPTH_COMPONENT16;\r\n                        }\r\n                    } else {\r\n                        internalFormat = this._gl.DEPTH_COMPONENT32F;\r\n                    }\r\n                    break;\r\n                case Constants.StencilFormat:\r\n                    internalFormat = this._gl.STENCIL_INDEX8;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return internalFormat;\r\n    }\r\n\r\n    /**\r\n     * 删除管道上下文\r\n     * @param pipelineContext\r\n     */\r\n    public deletePipelineContext(pipelineContext: GLPipelineContext): WebGLEngine {\r\n        if (pipelineContext.program) {\r\n            this._gl.deleteProgram(pipelineContext.program);\r\n            pipelineContext.program = null;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param source\r\n     * @param defines\r\n     * @param shaderVersion\r\n     * @private\r\n     */\r\n    protected static _ConcatenateShader(source: string, defines: Nullable<string>, shaderVersion: string = \"\"): string {\r\n        return shaderVersion + (defines ? defines + \"\\n\" : \"\") + source;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param source\r\n     * @param type\r\n     * @param defines\r\n     * @param shaderVersion\r\n     * @private\r\n     */\r\n    protected _compileShader(source: string, type: string, defines: Nullable<string>, shaderVersion: string): WebGLShader {\r\n        return this._compileRawShader(WebGLEngine._ConcatenateShader(source, defines, shaderVersion), type);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param source\r\n     * @param type\r\n     * @private\r\n     */\r\n    protected _compileRawShader(source: string, type: string): WebGLShader {\r\n        const gl = this._gl;\r\n        const shader = gl.createShader(type == \"vertex\" ? gl.VERTEX_SHADER : gl.FRAGMENT_SHADER);\r\n\r\n        if (!shader) {\r\n            throw new Error(\"Something went wrong while compile the shader.\");\r\n        }\r\n\r\n        gl.shaderSource(shader, source);\r\n        gl.compileShader(shader);\r\n\r\n        return shader;\r\n    }\r\n\r\n    /**\r\n     * 获取shader源码\r\n     * @param shader\r\n     * @private\r\n     * @ignore\r\n     */\r\n    public _getShaderSource(shader: WebGLShader): Nullable<string> {\r\n        return this._gl.getShaderSource(shader);\r\n    }\r\n\r\n    /**\r\n     * 创建shader\r\n     * @param pipelineContext\r\n     * @param vertexCode\r\n     * @param fragmentCode\r\n     * @param defines\r\n     * @param transformFeedbackVaryings\r\n     */\r\n    public createShaderProgram(pipelineContext: GLPipelineContext, vertexCode: string, fragmentCode: string, defines: Nullable<string>, transformFeedbackVaryings: Nullable<string[]> = null): WebGLProgram {\r\n\r\n        const shaderVersion = (this._webGLVersion > 1) ? \"#version 300 es\\n#define WEBGL2 \\n\" : \"\";\r\n        const vertexShader = this._compileShader(vertexCode, \"vertex\", defines, shaderVersion);\r\n        const fragmentShader = this._compileShader(fragmentCode, \"fragment\", defines, shaderVersion);\r\n\r\n        return this._createShaderProgram(pipelineContext, vertexShader, fragmentShader, transformFeedbackVaryings);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param pipelineContext\r\n     * @param vertexShader\r\n     * @param fragmentShader\r\n     * @param transformFeedbackVaryings\r\n     * @private\r\n     */\r\n    public _createShaderProgram(pipelineContext: GLPipelineContext, vertexShader: WebGLShader, fragmentShader: WebGLShader, transformFeedbackVaryings: Nullable<string[]> = null): WebGLProgram {\r\n\r\n        const shaderProgram = this._gl.createProgram();\r\n        pipelineContext.program = shaderProgram;\r\n\r\n        if (!shaderProgram) {\r\n            throw new Error(\"Unable to create program\");\r\n        }\r\n\r\n        this._gl.attachShader(shaderProgram, vertexShader);\r\n        this._gl.attachShader(shaderProgram, fragmentShader);\r\n\r\n        this._gl.linkProgram(shaderProgram);\r\n\r\n        pipelineContext.vertexShader = vertexShader;\r\n        pipelineContext.fragmentShader = fragmentShader;\r\n\r\n        if (!pipelineContext.isParallelCompiled) {\r\n            this._finalizePipelineContext(pipelineContext);\r\n        }\r\n\r\n        return shaderProgram;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param pipelineContext\r\n     * @param vertexSourceCode\r\n     * @param fragmentSourceCode\r\n     * @param defines\r\n     * @param transformFeedbackVaryings\r\n     * @private\r\n     */\r\n    public _preparePipelineContext(pipelineContext: GLPipelineContext, vertexSourceCode: string, fragmentSourceCode: string, defines: Nullable<string>, transformFeedbackVaryings: Nullable<string[]>): WebGLEngine {\r\n\r\n        pipelineContext.program = this.createShaderProgram(pipelineContext, vertexSourceCode, fragmentSourceCode, defines, transformFeedbackVaryings);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param pipelineContext\r\n     * @private\r\n     */\r\n    public _isRenderingStateCompiled(pipelineContext: GLPipelineContext): boolean {\r\n\r\n        if (this._gl.getProgramParameter(pipelineContext.program!, this._caps.parallelShaderCompile!.COMPLETION_STATUS_KHR)) {\r\n            this._finalizePipelineContext(pipelineContext);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param pipelineContext\r\n     * @param action\r\n     * @private\r\n     */\r\n    public _executeWhenRenderingStateIsCompiled(pipelineContext: GLPipelineContext, action: () => void) {\r\n\r\n        if (!pipelineContext.isParallelCompiled) {\r\n            action();\r\n            return;\r\n        }\r\n\r\n        let oldHandler = pipelineContext.onCompiled;\r\n\r\n        if (oldHandler) {\r\n            pipelineContext.onCompiled = () => {\r\n                oldHandler!();\r\n                action();\r\n            };\r\n        } else {\r\n            pipelineContext.onCompiled = action;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param pipelineContext\r\n     * @private\r\n     */\r\n    public _finalizePipelineContext(pipelineContext: GLPipelineContext): void {\r\n\r\n        const vertexShader = pipelineContext.vertexShader!;\r\n        const fragmentShader = pipelineContext.fragmentShader!;\r\n        const program = pipelineContext.program!;\r\n\r\n        var linked = this._gl.getProgramParameter(program, this._gl.LINK_STATUS);\r\n        if (!linked) { // Get more info\r\n            // Vertex\r\n            if (!this._gl.getShaderParameter(vertexShader, this._gl.COMPILE_STATUS)) {\r\n                const log = this._gl.getShaderInfoLog(vertexShader);\r\n                if (log) {\r\n                    pipelineContext.vertexCompilationError = log;\r\n                    throw new Error(\"VERTEX SHADER \" + log);\r\n                }\r\n            }\r\n\r\n            // Fragment\r\n            if (!this._gl.getShaderParameter(fragmentShader, this._gl.COMPILE_STATUS)) {\r\n                const log = this._gl.getShaderInfoLog(fragmentShader);\r\n                if (log) {\r\n                    pipelineContext.fragmentCompilationError = log;\r\n                    throw new Error(\"FRAGMENT SHADER \" + log);\r\n                }\r\n            }\r\n\r\n            const error = this._gl.getProgramInfoLog(program);\r\n            if (error) {\r\n                pipelineContext.programLinkError = error;\r\n                throw new Error(error);\r\n            }\r\n        }\r\n\r\n        if (this.validateShaderPrograms) {\r\n            this._gl.validateProgram(program);\r\n\r\n            const validated = this._gl.getProgramParameter(program, this._gl.VALIDATE_STATUS);\r\n            if (!validated) {\r\n                const error = this._gl.getProgramInfoLog(program);\r\n                if (error) {\r\n                    pipelineContext.programValidationError = error;\r\n                    throw new Error(error);\r\n                }\r\n            }\r\n        }\r\n\r\n        this._gl.deleteShader(vertexShader);\r\n        this._gl.deleteShader(fragmentShader);\r\n\r\n        pipelineContext.vertexShader = undefined;\r\n        pipelineContext.fragmentShader = undefined;\r\n\r\n        if (pipelineContext.onCompiled) {\r\n            pipelineContext.onCompiled();\r\n            pipelineContext.onCompiled = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 从program获取输入变量Location\r\n     * @param pipelineContext\r\n     * @param uniformsNames\r\n     */\r\n    public getUniforms(pipelineContext: GLPipelineContext, uniformsNames: string[]): Nullable<WebGLUniformLocation>[] {\r\n        const results = new Array<Nullable<WebGLUniformLocation>>();\r\n\r\n        for (let index = 0; index < uniformsNames.length; index++) {\r\n            results.push(this._gl.getUniformLocation(pipelineContext.program!, uniformsNames[index]));\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * 从program获取输入属性Location\r\n     * @param pipelineContext\r\n     * @param attributesNames\r\n     */\r\n    public getAttributes(pipelineContext: GLPipelineContext, attributesNames: string[]): number[] {\r\n        const results = [];\r\n\r\n        for (let index = 0; index < attributesNames.length; index++) {\r\n            try {\r\n                results.push(this._gl.getAttribLocation(pipelineContext.program!, attributesNames[index]));\r\n            } catch (e) {\r\n                results.push(-1);\r\n            }\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * 给统一变量设置Int\r\n     * @param uniform\r\n     * @param value\r\n     */\r\n    public setInt(uniform: Nullable<WebGLUniformLocation>, value: number): WebGLEngine {\r\n        if (!uniform) {\r\n            return this;\r\n        }\r\n        this._gl.uniform1i(uniform, value);\r\n        return this;\r\n    }\r\n    /**\r\n     * 给统一变量设置Int数组\r\n     * @param uniform\r\n     * @param array\r\n     */\r\n    public setIntArray(uniform: Nullable<WebGLUniformLocation>, array: Int32Array): WebGLEngine {\r\n        if (!uniform) {\r\n            return this;\r\n        }\r\n        this._gl.uniform1iv(uniform, array);\r\n        return this;\r\n    }\r\n    /**\r\n     * 给统一变量设置Int数组(vec2)\r\n     * @param uniform\r\n     * @param array\r\n     */\r\n    public setIntArray2(uniform: Nullable<WebGLUniformLocation>, array: Int32Array): WebGLEngine {\r\n        if (!uniform || array.length % 2 != 0) {\r\n            return this;\r\n        }\r\n        this._gl.uniform2iv(uniform, array);\r\n        return this;\r\n    }\r\n    /**\r\n     * 给统一变量设置Int数组(vec3)\r\n     * @param uniform\r\n     * @param array\r\n     */\r\n    public setIntArray3(uniform: Nullable<WebGLUniformLocation>, array: Int32Array): WebGLEngine {\r\n        if (!uniform || array.length % 3 != 0) {\r\n            return this;\r\n        }\r\n        this._gl.uniform3iv(uniform, array);\r\n        return this;\r\n    }\r\n    /**\r\n     * 给统一变量设置Int数组(vec4)\r\n     * @param uniform\r\n     * @param array\r\n     */\r\n    public setIntArray4(uniform: Nullable<WebGLUniformLocation>, array: Int32Array): WebGLEngine {\r\n        if (!uniform || array.length % 4 != 0) {\r\n            return this;\r\n        }\r\n        this._gl.uniform4iv(uniform, array);\r\n        return this;\r\n    }\r\n    /**\r\n     * 给统一变量设置Float数组\r\n     * @param uniform\r\n     * @param array\r\n     */\r\n    public setArray(uniform: Nullable<WebGLUniformLocation>, array: number[] | Float32Array): WebGLEngine {\r\n        if (!uniform) {\r\n            return this;\r\n        }\r\n        this._gl.uniform1fv(uniform, array);\r\n        return this;\r\n    }\r\n    /**\r\n     * 给统一变量设置Float数组(vec2)\r\n     * @param uniform\r\n     * @param array\r\n     */\r\n    public setArray2(uniform: Nullable<WebGLUniformLocation>, array: number[] | Float32Array): WebGLEngine {\r\n        if (!uniform || array.length % 2 != 0) {\r\n            return this;\r\n        }\r\n        this._gl.uniform2fv(uniform, <any>array);\r\n        return this;\r\n    }\r\n    /**\r\n     * 给统一变量设置Float数组(vec3)\r\n     * @param uniform\r\n     * @param array\r\n     */\r\n    public setArray3(uniform: Nullable<WebGLUniformLocation>, array: number[] | Float32Array): WebGLEngine {\r\n        if (!uniform || array.length % 3 != 0) {\r\n            return this;\r\n        }\r\n        this._gl.uniform3fv(uniform, <any>array);\r\n        return this;\r\n    }\r\n    /**\r\n     * 给统一变量设置Float数组(vec4)\r\n     * @param uniform\r\n     * @param array\r\n     */\r\n    public setArray4(uniform: Nullable<WebGLUniformLocation>, array: number[] | Float32Array): WebGLEngine {\r\n        if (!uniform || array.length % 4 != 0) {\r\n            return this;\r\n        }\r\n        this._gl.uniform4fv(uniform, <any>array);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 给统一变量设置4x4矩阵\r\n     * @param uniform\r\n     * @param matrices\r\n     */\r\n    public setMatrices(uniform: Nullable<WebGLUniformLocation>, matrices: Float32Array): WebGLEngine {\r\n        if (!uniform) {\r\n            return this;\r\n        }\r\n        this._gl.uniformMatrix4fv(uniform, false, matrices);\r\n        return this;\r\n    }\r\n    /**\r\n     * 给统一变量设置3x3矩阵\r\n     * @param uniform\r\n     * @param matrix\r\n     */\r\n    public setMatrix3x3(uniform: Nullable<WebGLUniformLocation>, matrix: Float32Array): WebGLEngine {\r\n        if (!uniform) {\r\n            return this;\r\n        }\r\n        this._gl.uniformMatrix3fv(uniform, false, matrix);\r\n        return this;\r\n    }\r\n    /**\r\n     * 给统一变量设置2x2矩阵\r\n     * @param uniform\r\n     * @param matrix\r\n     */\r\n    public setMatrix2x2(uniform: Nullable<WebGLUniformLocation>, matrix: Float32Array): WebGLEngine {\r\n        if (!uniform) {\r\n            return this;\r\n        }\r\n        this._gl.uniformMatrix2fv(uniform, false, matrix);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 给统一变量设置浮点\r\n     * @param uniform\r\n     * @param value\r\n     */\r\n    public setFloat(uniform: Nullable<WebGLUniformLocation>, value: number): WebGLEngine {\r\n        if (!uniform) {\r\n            return this;\r\n        }\r\n        this._gl.uniform1f(uniform, value);\r\n        return this;\r\n    }\r\n    /**\r\n     * 给统一变量设置vec2\r\n     * @param uniform\r\n     * @param x\r\n     * @param y\r\n     */\r\n    public setFloat2(uniform: Nullable<WebGLUniformLocation>, x: number, y: number): WebGLEngine {\r\n        if (!uniform) {\r\n            return this;\r\n        }\r\n        this._gl.uniform2f(uniform, x, y);\r\n        return this;\r\n    }\r\n    /**\r\n     * 给统一变量设置vec3\r\n     * @param uniform\r\n     * @param x\r\n     * @param y\r\n     * @param z\r\n     */\r\n    public setFloat3(uniform: Nullable<WebGLUniformLocation>, x: number, y: number, z: number): WebGLEngine {\r\n        if (!uniform) {\r\n            return this;\r\n        }\r\n        this._gl.uniform3f(uniform, x, y, z);\r\n        return this;\r\n    }\r\n    /**\r\n     * 给统一变量设置vec4\r\n     * @param uniform\r\n     * @param x\r\n     * @param y\r\n     * @param z\r\n     * @param w\r\n     */\r\n    public setFloat4(uniform: Nullable<WebGLUniformLocation>, x: number, y: number, z: number, w: number): WebGLEngine {\r\n        if (!uniform) {\r\n            return this;\r\n        }\r\n        this._gl.uniform4f(uniform, x, y, z, w);\r\n        return this;\r\n    }\r\n}\r\n",
        "import { CSG } from './CSG';\r\nimport { CSGMatrix4x4 } from './CSGMatrix4x4';\r\nimport { CSGPlane } from './CSGPlane';\r\nimport { CSGVector3D } from './CSGVector3D';\r\nimport { Nullable } from \"../types\";\r\n\r\n/**\r\n * CSG二维向量\r\n */\r\nexport class CSGVector2D {\r\n    /**\r\n     * X坐标\r\n     */\r\n    public _x: number;\r\n\r\n    /**\r\n     * Y坐标\r\n     */\r\n    public _y: number;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param x\r\n     * @param y\r\n     */\r\n    constructor(x: Nullable<number | CSGVector2D | number[] | any> = null, y: Nullable<number | CSGVector2D | number[]> = null) {\r\n        if (x != null && y != null) {\r\n            const xString = x.toString();\r\n            const yString = y.toString();\r\n            this._x = parseFloat(xString);\r\n            this._y = parseFloat(yString);\r\n        } else {\r\n            let ok = true;\r\n            if (x != null) {\r\n                if (typeof (x) == 'object') {\r\n                    if (x instanceof CSGVector2D) {\r\n                        this._x = x._x;\r\n                        this._y = x._y;\r\n                    } else if (x instanceof Array) {\r\n                        const xString = x[0].toString();\r\n                        const yString = x[1].toString();\r\n                        this._x = parseFloat(xString);\r\n                        this._y = parseFloat(yString);\r\n                    } else if (('x' in x) && ('y' in x)) {\r\n                        const xString = x.x.toString();\r\n                        const yString = x.y.toString();\r\n                        this._x = parseFloat(xString);\r\n                        this._y = parseFloat(yString);\r\n                    } else { ok = false; }\r\n                } else {\r\n                    const v = parseFloat(x);\r\n                    this._x = v;\r\n                    this._y = v;\r\n                }\r\n            } else { ok = false; }\r\n            if (ok) {\r\n                if ((!CSG.IsFloat(this._x)) || (!CSG.IsFloat(this._y))) { ok = false; }\r\n            }\r\n            if (!ok) {\r\n                throw new Error('wrong arguments');\r\n            }\r\n        }\r\n\r\n        // this._x = null;\r\n        // this._y = null;\r\n    }\r\n\r\n    /**\r\n     * 获取X坐标\r\n     */\r\n    get x(): number {\r\n        return this._x;\r\n    }\r\n\r\n    /**\r\n     * 获取Y坐标\r\n     */\r\n    get y(): number {\r\n        return this._y;\r\n    }\r\n\r\n    /**\r\n     * 从角度创建\r\n     * @param radians\r\n     */\r\n    static fromAngle(radians: number): CSGVector2D {\r\n        return CSGVector2D.fromAngleRadians(radians);\r\n    }\r\n\r\n    /**\r\n     * 从角度创建\r\n     * @param degrees\r\n     */\r\n    static fromAngleDegrees(degrees: number): CSGVector2D {\r\n        const radians = Math.PI * degrees / 180;\r\n        return CSGVector2D.fromAngleRadians(radians);\r\n    }\r\n\r\n    /**\r\n     * 从弧度创建\r\n     * @param radians\r\n     */\r\n    static fromAngleRadians(radians: number): CSGVector2D {\r\n        return CSGVector2D.Create(Math.cos(radians), Math.sin(radians));\r\n    }\r\n\r\n    /**\r\n     * 创建二维向量\r\n     * @param x\r\n     * @param y\r\n     * @constructor\r\n     */\r\n    static Create(x: number, y: number): CSGVector2D {\r\n        const result = Object.create(CSGVector2D.prototype);\r\n        result._x = x;\r\n        result._y = y;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 拓展为三维向量\r\n     * @param z\r\n     */\r\n    public toVector3D(z: number): CSGVector3D {\r\n        return new CSGVector3D(this._x, this._y, z);\r\n    }\r\n\r\n    /**\r\n     * 判断相等\r\n     * @param a\r\n     */\r\n    public equals(a: CSGVector2D): boolean {\r\n        return (this._x == a._x) && (this._y == a._y);\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): CSGVector2D {\r\n        return CSGVector2D.Create(this._x, this._y);\r\n    }\r\n\r\n    /**\r\n     * 置反向量\r\n     */\r\n    public negated(): CSGVector2D {\r\n        return CSGVector2D.Create(-this._x, -this._y);\r\n    }\r\n\r\n    /**\r\n     * 相加\r\n     * @param a\r\n     */\r\n    public plus(a: any): CSGVector2D {\r\n        return CSGVector2D.Create(this._x + a._x, this._y + a._y);\r\n    }\r\n\r\n    /**\r\n     * 相减\r\n     * @param a\r\n     */\r\n    public minus(a: any): CSGVector2D {\r\n        return CSGVector2D.Create(this._x - a._x, this._y - a._y);\r\n    }\r\n\r\n    /**\r\n     * 相乘\r\n     * @param a\r\n     */\r\n    public times(a: number): CSGVector2D  {\r\n        return CSGVector2D.Create(this._x * a, this._y * a);\r\n    }\r\n\r\n    /**\r\n     * 分隔\r\n     * @param a\r\n     */\r\n    public dividedBy(a: number): CSGVector2D {\r\n        return CSGVector2D.Create(this._x / a, this._y / a);\r\n    }\r\n\r\n    /**\r\n     * 点成\r\n     * @param a\r\n     */\r\n    public dot(a: any): number {\r\n        return this._x * a._x + this._y * a._y;\r\n    }\r\n\r\n    /**\r\n     * 插值\r\n     * @param a\r\n     * @param t\r\n     */\r\n    public lerp(a: any, t: number): CSGVector2D {\r\n        return this.plus(a.minus(this).times(t));\r\n    }\r\n\r\n    /**\r\n     * 长度\r\n     */\r\n    public length(): number {\r\n        return Math.sqrt(this.dot(this));\r\n    }\r\n\r\n    /**\r\n     * 距离\r\n     * @param a\r\n     */\r\n    public distanceTo(a: number): number {\r\n        return this.minus(a).length();\r\n    }\r\n\r\n    /**\r\n     * 距离平方\r\n     * @param a\r\n     */\r\n    public distanceToSquared(a: number): number {\r\n        return this.minus(a).lengthSquared();\r\n    }\r\n\r\n    /**\r\n     * 长度平方\r\n     */\r\n    public lengthSquared(): number {\r\n        return this.dot(this);\r\n    }\r\n\r\n    /**\r\n     * 联合\r\n     */\r\n    public unit(): CSGVector2D {\r\n        return this.dividedBy(this.length());\r\n    }\r\n\r\n    /**\r\n     * 叉乘\r\n     * @param a\r\n     */\r\n    public cross(a: any): number {\r\n        return this._x * a._y - this._y * a._x;\r\n    }\r\n\r\n    /**\r\n     * 返回顺时针旋转90度的向量\r\n     */\r\n    public normal(): CSGVector2D {\r\n        return CSGVector2D.Create(this._y, -this._x);\r\n    }\r\n\r\n    /**\r\n     * 乘以4X4向量\r\n     * @param matrix4x4\r\n     */\r\n    public multiply4x4(matrix4x4: CSGMatrix4x4) {\r\n        return matrix4x4.leftMultiply1x2Vector(this);\r\n    }\r\n\r\n    /**\r\n     * 转换\r\n     * @param matrix4x4\r\n     */\r\n    public transform(matrix4x4: CSGMatrix4x4): CSGVector2D {\r\n        return matrix4x4.leftMultiply1x2Vector(this);\r\n    }\r\n\r\n    /**\r\n     * 返回角度\r\n     */\r\n    public angle(): number {\r\n        return this.angleRadians();\r\n    }\r\n\r\n    /**\r\n     * 返回角度\r\n     */\r\n    public angleDegrees(): number {\r\n        const radians = this.angleRadians();\r\n        return 180 * radians / Math.PI;\r\n    }\r\n\r\n    /**\r\n     * 返回角度\r\n     */\r\n    public angleRadians(): number {\r\n        // y=sin, x=cos\r\n        return Math.atan2(this._y, this._x);\r\n    }\r\n\r\n    /**\r\n     * 求最小值\r\n     * @param p\r\n     */\r\n    public min(p: any): CSGVector2D {\r\n        return CSGVector2D.Create(\r\n            Math.min(this._x, p._x), Math.min(this._y, p._y));\r\n    }\r\n\r\n    /**\r\n     * 求最大值\r\n     * @param p\r\n     */\r\n    public max(p: any) {\r\n        return CSGVector2D.Create(\r\n            Math.max(this._x, p._x), Math.max(this._y, p._y));\r\n    }\r\n\r\n    /**\r\n     * 转成字符串\r\n     */\r\n    public toString(): string {\r\n        return `(${this._x.toFixed(2)}, ${this._y.toFixed(2)})`;\r\n    }\r\n\r\n    /**\r\n     * 求绝对值\r\n     */\r\n    public abs(): CSGVector2D {\r\n        return CSGVector2D.Create(Math.abs(this._x), Math.abs(this._y));\r\n    }\r\n\r\n    /**\r\n     * 反射\r\n     * @param plane\r\n     */\r\n    public mirrored(plane: CSGPlane): CSGVector2D {\r\n        return this.transform(CSGMatrix4x4.mirroring(plane));\r\n    }\r\n\r\n    /**\r\n     * X轴镜像\r\n     */\r\n    public mirroredX(): CSGVector2D {\r\n        const plane = new CSGPlane(CSGVector3D.Create(1, 0, 0), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * Y轴镜像\r\n     */\r\n    public mirroredY(): CSGVector2D {\r\n        const plane = new CSGPlane(CSGVector3D.Create(0, 1, 0), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * Z轴镜像\r\n     */\r\n    public mirroredZ(): CSGVector2D {\r\n        const plane = new CSGPlane(CSGVector3D.Create(0, 0, 1), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * 转化\r\n     * @param v\r\n     */\r\n    public translate(v: any):CSGVector2D {\r\n        return this.transform(CSGMatrix4x4.translation(v));\r\n    }\r\n\r\n    /**\r\n     * 缩放\r\n     * @param f\r\n     */\r\n    public scale(f: any): CSGVector2D {\r\n        return this.transform(CSGMatrix4x4.scaling(f));\r\n    }\r\n\r\n    /**\r\n     * X轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateX(deg: number): CSGVector2D {\r\n        return this.transform(CSGMatrix4x4.rotationX(deg));\r\n    }\r\n\r\n    /**\r\n     * Y轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateY(deg: number): CSGVector2D {\r\n        return this.transform(CSGMatrix4x4.rotationY(deg));\r\n    }\r\n\r\n    /**\r\n     * Z轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateZ(deg: number): CSGVector2D {\r\n        return this.transform(CSGMatrix4x4.rotationZ(deg));\r\n    }\r\n\r\n    /**\r\n     * 旋转\r\n     * @param rotationCenter\r\n     * @param rotationAxis\r\n     * @param degrees\r\n     */\r\n    public rotate(rotationCenter: CSGVector3D, rotationAxis: CSGVector3D, degrees: number): CSGVector2D {\r\n        return this.transform(CSGMatrix4x4.rotation(rotationCenter, rotationAxis, degrees));\r\n    }\r\n\r\n    /**\r\n     * 旋转欧拉角\r\n     * @param alpha\r\n     * @param beta\r\n     * @param gamma\r\n     * @param position\r\n     */\r\n    public rotateEulerAngles(alpha: number,beta: number, gamma: number, position: any): CSGVector2D {\r\n        const _position = position || [0, 0, 0];\r\n        const Rz1 = CSGMatrix4x4.rotationZ(alpha);\r\n        const Rx = CSGMatrix4x4.rotationX(beta);\r\n        const Rz2 = CSGMatrix4x4.rotationZ(gamma);\r\n        const T = CSGMatrix4x4.translation(new CSGVector3D(_position));\r\n        return this.transform(Rz2.multiply(Rx).multiply(Rz1).multiply(T));\r\n    }\r\n}\r\n",
        "import { TransformObject } from \"../Scene/TransformObject\";\r\nimport { VisibleLayers } from \"../Misc/VisibleLayers\";\r\nimport { ColorRGB } from \"../Math\";\r\nimport { AbstractObject, Scene } from \"../Scene\";\r\nimport { Nullable } from \"../types\";\r\nimport { Renderable } from \"../Scene/Renderable\";\r\n\r\nexport abstract class Light extends TransformObject {\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _maskLayers: VisibleLayers = new VisibleLayers();\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _color: ColorRGB = new ColorRGB(1.0, 1.0, 1.0);\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _castShadow: boolean = false;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _intensity: number = 1.0;\r\n\r\n    protected constructor(scene: Scene, parent: Nullable<AbstractObject> = null, name: string = '') {\r\n        super(scene, parent, name);\r\n\r\n        this._maskLayers.enableAll();\r\n\r\n        this.scene.addLight(this);\r\n    }\r\n\r\n    /**\r\n     * 灯光影响层\r\n     */\r\n    public get maskLayers() {\r\n        return this._maskLayers;\r\n    }\r\n\r\n    /**\r\n     * 颜色\r\n     */\r\n    public get color() {\r\n        return this._color;\r\n    }\r\n    public set color(value) {\r\n        this._color.copy(value);\r\n    }\r\n\r\n    /**\r\n     * 强度\r\n     */\r\n    public get intensity() {\r\n        return this._intensity;\r\n    }\r\n    public set intensity(value) {\r\n        this._intensity = value;\r\n    }\r\n\r\n    /**\r\n     * 计算阴影\r\n     */\r\n    public get castShadow() {\r\n        return this._castShadow;\r\n    }\r\n    public set castShadow(value: boolean) {\r\n        this._castShadow = value;\r\n    }\r\n\r\n    /**\r\n     * 是否影响Mesh\r\n     * @param mesh\r\n     */\r\n    public canAffectMesh(mesh: Renderable): boolean {\r\n        return this._maskLayers.test(mesh.lightLayers);\r\n    }\r\n}\r\n",
        "import { DeepImmutable, FloatArray, int, Nullable } from \"../types\";\r\nimport { Matrix4 } from \"./Matrix4\";\r\nimport { Quaternion } from \"./Quaternion\";\r\nimport { Matrix3 } from \"./Matrix3\";\r\nimport { MathUtils } from \"./MathUtils\";\r\nimport { BinaryBuffer, BufferAttribute } from \"../Misc\";\r\n\r\ntype InVector4 = Vector4 | DeepImmutable<Vector4>;\r\n\r\n/**\r\n * 4D向量\r\n * @category Math\r\n */\r\nexport class Vector4 {\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    private static _zeroReadOnly = new Vector4(0, 0, 0, 0) as DeepImmutable<Vector4>;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private static _oneReadOnly = new Vector4(1, 1, 1, 1) as DeepImmutable<Vector4>;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private static _oneInvReadOnly = new Vector4(-1, -1, -1, -1) as DeepImmutable<Vector4>;\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    private readonly _p: number[];\r\n    /**\r\n     * @ignore\r\n     */\r\n    private get _x() {return this._p[0]; }\r\n    /**\r\n     * @ignore\r\n     */\r\n    private set _x(value) {this._p[0] = value; }\r\n    /**\r\n     * @ignore\r\n     */\r\n    private get _y() {return this._p[1]; }\r\n    /**\r\n     * @ignore\r\n     */\r\n    private set _y(value) {this._p[1] = value; }\r\n    /**\r\n     * @ignore\r\n     */\r\n    private get _z() {return this._p[2]; }\r\n    /**\r\n     * @ignore\r\n     */\r\n    private set _z(value) {this._p[2] = value; }\r\n    /**\r\n     * @ignore\r\n     */\r\n    private get _w() {return this._p[3]; }\r\n    /**\r\n     * @ignore\r\n     */\r\n    private set _w(value) {this._p[3] = value; }\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _notify: boolean;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _onNotify: any;\r\n\r\n    constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 0) {\r\n        this._p = [];\r\n        this._p[0] = x;\r\n        this._p[1] = y;\r\n        this._p[2] = z;\r\n        this._p[3] = w;\r\n        this._notify = true;\r\n        this._onNotify = null;\r\n    }\r\n\r\n    /**\r\n     * 创建对象\r\n     */\r\n    public static Build() {\r\n        return new Vector4();\r\n    }\r\n\r\n    /**\r\n     * ZERO\r\n     */\r\n    public static get ZERO(): DeepImmutable<Vector4> {\r\n        return Vector4._zeroReadOnly;\r\n    }\r\n\r\n    /**\r\n     * ONE\r\n     */\r\n    public static get ONE(): DeepImmutable<Vector4> {\r\n        return Vector4._oneReadOnly;\r\n    }\r\n\r\n    /**\r\n     * INV_ONE\r\n     */\r\n    public static get INV_ONE(): DeepImmutable<Vector4> {\r\n        return Vector4._oneInvReadOnly;\r\n    }\r\n\r\n    /**\r\n     * 内部元素数组\r\n     */\r\n    public get p() {\r\n        return this._p;\r\n    }\r\n\r\n    /**\r\n     * X坐标\r\n     */\r\n    public get x() {\r\n        return this._x;\r\n    }\r\n    public set x(value: number) {\r\n        if (this._x != value) {\r\n            this._x = value;\r\n            this.triggerNotify();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Y坐标\r\n     */\r\n    public get y() {\r\n        return this._y;\r\n    }\r\n    public set y(value: number) {\r\n        if (this._y != value) {\r\n            this._y = value;\r\n            this.triggerNotify();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Z坐标\r\n     */\r\n    public get z() {\r\n        return this._z;\r\n    }\r\n    public set z(value: number) {\r\n        if (this._z != value) {\r\n            this._z = value;\r\n            this.triggerNotify();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * W坐标\r\n     */\r\n    public get w() {\r\n        return this._w;\r\n    }\r\n    public set w(value: number) {\r\n        if (this._w != value) {\r\n            this._w = value;\r\n            this.triggerNotify();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 通知回调\r\n     */\r\n    public get notify() {\r\n        return this._notify;\r\n    }\r\n    public set notify(value: boolean) {\r\n        this._notify = value;\r\n    }\r\n\r\n    /**\r\n     * 设置通知回调\r\n     */\r\n    public setNotifyFunc(value: any): Vector4 {\r\n        this._onNotify = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 触发通知\r\n     */\r\n    private triggerNotify(): void {\r\n        if (this._notify) {\r\n            if (this._onNotify) {\r\n                this._onNotify();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置XYZW参数\r\n     * @param x\r\n     * @param y\r\n     * @param z\r\n     * @param w\r\n     */\r\n    public set(x: number, y: number, z: number, w: number): Vector4 {\r\n        this._x = x;\r\n        this._y = y;\r\n        this._z = z;\r\n        this._w = w;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置标量\r\n     * @param scalar\r\n     */\r\n    public setScalar(scalar: number): Vector4 {\r\n        this._x = scalar;\r\n        this._y = scalar;\r\n        this._z = scalar;\r\n        this._w = scalar;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置X坐标\r\n     * @param x\r\n     */\r\n    public setX(x: number): Vector4 {\r\n        this._x = x;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置Y坐标\r\n     * @param y\r\n     */\r\n    public setY(y: number): Vector4 {\r\n        this._y = y;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置Z坐标\r\n     * @param z\r\n     */\r\n    public setZ(z: number): Vector4 {\r\n        this._z = z;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置W坐标\r\n     * @param w\r\n     */\r\n    public setW(w: number): Vector4 {\r\n        this._w = w;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置组件\r\n     * @param index\r\n     * @param value\r\n     */\r\n    public setComponent(index: int, value: number): Vector4 {\r\n        switch (index) {\r\n            case 0: this.x = value; break;\r\n            case 1: this.y = value; break;\r\n            case 2: this.z = value; break;\r\n            case 3: this.w = value; break;\r\n            default: throw new Error(`index is out of range: ${index}`);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取组件\r\n     * @param index\r\n     */\r\n    public getComponent(index: int): number {\r\n        switch (index) {\r\n            case 0: return this._x;\r\n            case 1: return this._y;\r\n            case 2: return this._z;\r\n            case 3: return this._w;\r\n            default: throw new Error(`index is out of range: ${index}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): Vector4 {\r\n        return new Vector4(this._x, this._y, this._z, this._w);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: InVector4): Vector4 {\r\n        this._x = source.x;\r\n        this._y = source.y;\r\n        this._z = source.z;\r\n        this._w = source.w;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 加上Vector4\r\n     * @param v\r\n     */\r\n    public add(v: InVector4): Vector4 {\r\n        this._x += v.x;\r\n        this._y += v.y;\r\n        this._z += v.z;\r\n        this._w += v.w;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 加上标量\r\n     * @param scalar\r\n     */\r\n    public addScalar(scalar: number): Vector4 {\r\n        this._x += scalar;\r\n        this._y += scalar;\r\n        this._z += scalar;\r\n        this._w += scalar;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 两个Vector4相加\r\n     * @param aVec\r\n     * @param bVec\r\n     */\r\n    public addVectors(aVec: InVector4, bVec: InVector4): Vector4 {\r\n        this._x = aVec.x + bVec.x;\r\n        this._y = aVec.y + bVec.y;\r\n        this._z = aVec.z + bVec.z;\r\n        this._w = aVec.w + bVec.w;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 加上向量乘以标量\r\n     * @param vec\r\n     * @param scalar\r\n     */\r\n    public addScaledVector(vec: InVector4, scalar: number): Vector4 {\r\n        this._x += vec.x * scalar;\r\n        this._y += vec.y * scalar;\r\n        this._z += vec.z * scalar;\r\n        this._w += vec.w * scalar;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 减去向量\r\n     * @param vec\r\n     */\r\n    public sub(vec: InVector4): Vector4 {\r\n        this._x -= vec.x;\r\n        this._y -= vec.y;\r\n        this._z -= vec.z;\r\n        this._w -= vec.w;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 减去标量\r\n     * @param scalar\r\n     */\r\n    public subScalar(scalar: number): Vector4 {\r\n        this._x -= scalar;\r\n        this._y -= scalar;\r\n        this._z -= scalar;\r\n        this._w -= scalar;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 两个向量相减\r\n     * @param aVec\r\n     * @param bVec\r\n     */\r\n    public subVectors(aVec: Vector4, bVec: Vector4): Vector4 {\r\n        this._x = aVec.x - bVec.x;\r\n        this._y = aVec.y - bVec.y;\r\n        this._z = aVec.z - bVec.z;\r\n        this._w = aVec.w - bVec.w;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 乘以标量\r\n     * @param scalar\r\n     */\r\n    public multiplyScalar(scalar: number): Vector4 {\r\n        this._x *= scalar;\r\n        this._y *= scalar;\r\n        this._z *= scalar;\r\n        this._w *= scalar;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 乘以Matrix4矩阵\r\n     * @param matrix4\r\n     */\r\n    public applyMatrix4(matrix4: Matrix4): Vector4 {\r\n        const x = this._x;\r\n        const y = this._y;\r\n        const z = this._z;\r\n        const w = this._w;\r\n        const e = matrix4.elements;\r\n        this._x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;\r\n        this._y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;\r\n        this._z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;\r\n        this._w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 除以标量\r\n     * @param scalar\r\n     */\r\n    public divideScalar(scalar: number): Vector4 {\r\n        return this.multiplyScalar(1 / scalar);\r\n    }\r\n\r\n    /**\r\n     * 设置四元数\r\n     * @param quaternion\r\n     */\r\n    public setAxisAngleFromQuaternion(quaternion: Quaternion): Vector4 {\r\n\r\n        this._w = 2 * Math.acos(quaternion.w);\r\n\r\n        const s = Math.sqrt(1 - quaternion.w * quaternion.w);\r\n        if (s < 0.0001) {\r\n            this._x = 1;\r\n            this._y = 0;\r\n            this._z = 0;\r\n        } else {\r\n            this._x = quaternion.x / s;\r\n            this._y = quaternion.y / s;\r\n            this._z = quaternion.z / s;\r\n        }\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置旋转矩阵\r\n     * @param matrix\r\n     */\r\n    public setAxisAngleFromRotationMatrix(matrix: Matrix3 | Matrix4): Vector4 {\r\n\r\n        let angle: number;\r\n        let x: number;\r\n        let y: number;\r\n        let z: number;\r\n\r\n        const epsilon: number = 0.01;\t\t// margin to allow for rounding errors\r\n        const epsilon2: number = 0.1;\t\t// margin to distinguish between 0 and 180 degrees\r\n\r\n        const isMatrix4: boolean = matrix instanceof Matrix4;\r\n        const te = matrix.elements;\r\n\r\n        const m11: number = isMatrix4 ? te[0] : te[0]; const m12: number = isMatrix4 ? te[4] : te[3]; const m13: number = isMatrix4 ? te[8] : te[6];\r\n        const m21: number = isMatrix4 ? te[1] : te[1]; const m22: number = isMatrix4 ? te[5] : te[4]; const m23: number = isMatrix4 ? te[9] : te[7];\r\n        const m31: number = isMatrix4 ? te[2] : te[2]; const m32: number = isMatrix4 ? te[6] : te[5]; const m33: number = isMatrix4 ? te[10] : te[8];\r\n\r\n        if ((Math.abs(m12 - m21) < epsilon) &&\r\n            (Math.abs(m13 - m31) < epsilon) &&\r\n            (Math.abs(m23 - m32) < epsilon)) {\r\n            // singularity found\r\n            // first check for identity matrix which must have +1 for all terms\r\n            // in leading diagonal and zero in other terms\r\n\r\n            if ((Math.abs(m12 + m21) < epsilon2) &&\r\n                (Math.abs(m13 + m31) < epsilon2) &&\r\n                (Math.abs(m23 + m32) < epsilon2) &&\r\n                (Math.abs(m11 + m22 + m33 - 3) < epsilon2)) {\r\n                // this singularity is identity matrix so angle = 0\r\n\r\n                this.set(1, 0, 0, 0);\r\n\r\n                return this; // zero angle, arbitrary axis\r\n            }\r\n\r\n            // otherwise this singularity is angle = 180\r\n\r\n            angle = Math.PI;\r\n\r\n            const xx = (m11 + 1) / 2;\r\n            const yy = (m22 + 1) / 2;\r\n            const zz = (m33 + 1) / 2;\r\n            const xy = (m12 + m21) / 4;\r\n            const xz = (m13 + m31) / 4;\r\n            const yz = (m23 + m32) / 4;\r\n\r\n            if ((xx > yy) && (xx > zz)) {\r\n                // m11 is the largest diagonal term\r\n\r\n                if (xx < epsilon) {\r\n                    x = 0;\r\n                    y = 0.707106781;\r\n                    z = 0.707106781;\r\n                } else {\r\n                    x = Math.sqrt(xx);\r\n                    y = xy / x;\r\n                    z = xz / x;\r\n                }\r\n            } else if (yy > zz) {\r\n                // m22 is the largest diagonal term\r\n\r\n                if (yy < epsilon) {\r\n                    x = 0.707106781;\r\n                    y = 0;\r\n                    z = 0.707106781;\r\n                } else {\r\n                    y = Math.sqrt(yy);\r\n                    x = xy / y;\r\n                    z = yz / y;\r\n                }\r\n            } else {\r\n                // m33 is the largest diagonal term so base result on this\r\n\r\n                if (zz < epsilon) {\r\n                    x = 0.707106781;\r\n                    y = 0.707106781;\r\n                    z = 0;\r\n                } else {\r\n                    z = Math.sqrt(zz);\r\n                    x = xz / z;\r\n                    y = yz / z;\r\n                }\r\n            }\r\n\r\n            this.set(x, y, z, angle);\r\n\r\n            return this; // return 180 deg rotation\r\n        }\r\n\r\n        // as we have reached here there are no singularities so we can handle normally\r\n\r\n        let s: number = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize\r\n\r\n        if (Math.abs(s) < 0.001) { s = 1; }\r\n\r\n        // prevent divide by zero, should not happen if matrix is orthogonal and should be\r\n        // caught by singularity test above, but I've left it in just in case\r\n\r\n        this._x = (m32 - m23) / s;\r\n        this._y = (m13 - m31) / s;\r\n        this._z = (m21 - m12) / s;\r\n        this._w = Math.acos((m11 + m22 + m33 - 1) / 2);\r\n        this.triggerNotify();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 取最小Vector4分量\r\n     * @param vec\r\n     */\r\n    public min(vec: InVector4): Vector4 {\r\n        this._x = Math.min(this._x, vec.x);\r\n        this._y = Math.min(this._y, vec.y);\r\n        this._z = Math.min(this._z, vec.z);\r\n        this._w = Math.min(this._w, vec.w);\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 取最大Vector4分量\r\n     * @param vec\r\n     */\r\n    public max(vec: InVector4): Vector4 {\r\n        this._x = Math.max(this._x, vec.x);\r\n        this._y = Math.max(this._y, vec.y);\r\n        this._z = Math.max(this._z, vec.z);\r\n        this._w = Math.max(this._w, vec.w);\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 限制向量分量\r\n     * @param minVec\r\n     * @param maxVec\r\n     */\r\n    public clamp(minVec: InVector4, maxVec: InVector4): Vector4 {\r\n        this._x = Math.max(minVec.x, Math.min(maxVec.x, this._x));\r\n        this._y = Math.max(minVec.y, Math.min(maxVec.y, this._y));\r\n        this._z = Math.max(minVec.z, Math.min(maxVec.z, this._z));\r\n        this._w = Math.max(minVec.w, Math.min(maxVec.w, this._w));\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 限制向量分量\r\n     * @param minScalar\r\n     * @param maxScalar\r\n     */\r\n    public clampScalar(minScalar: number, maxScalar: number): Vector4 {\r\n        this._x = Math.max(minScalar, Math.min(maxScalar, this._x));\r\n        this._y = Math.max(minScalar, Math.min(maxScalar, this._y));\r\n        this._z = Math.max(minScalar, Math.min(maxScalar, this._z));\r\n        this._w = Math.max(minScalar, Math.min(maxScalar, this._w));\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 限制向量长度\r\n     * @param minScalar\r\n     * @param maxScalar\r\n     */\r\n    public clampLength(minScalar: number, maxScalar: number): Vector4 {\r\n        const length: number = this.length();\r\n        return this.divideScalar(length || 1).multiplyScalar(Math.max(minScalar, Math.min(maxScalar, length)));\r\n    }\r\n\r\n    /**\r\n     * 向下分量取整\r\n     */\r\n    public floor() {\r\n        this._x = Math.floor(this._x);\r\n        this._y = Math.floor(this._y);\r\n        this._z = Math.floor(this._z);\r\n        this._w = Math.floor(this._w);\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 向上取整分量\r\n     */\r\n    public ceil(): Vector4 {\r\n        this._x = Math.ceil(this._x);\r\n        this._y = Math.ceil(this._y);\r\n        this._z = Math.ceil(this._z);\r\n        this._w = Math.ceil(this._w);\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 四舍五入分量\r\n     */\r\n    public round(): Vector4 {\r\n        this._x = Math.round(this._x);\r\n        this._y = Math.round(this._y);\r\n        this._z = Math.round(this._z);\r\n        this._w = Math.round(this._w);\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 向量中的分量朝向0取整数（若分量为负数则向上取整，若为正数则向下取整）\r\n     */\r\n    public roundToZero(): Vector4 {\r\n        this._x = (this._x < 0) ? Math.ceil(this._x) : Math.floor(this._x);\r\n        this._y = (this._y < 0) ? Math.ceil(this._y) : Math.floor(this._y);\r\n        this._z = (this._z < 0) ? Math.ceil(this._z) : Math.floor(this._z);\r\n        this._w = (this._w < 0) ? Math.ceil(this._w) : Math.floor(this._w);\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 向量取反\r\n     */\r\n    public negate(): Vector4 {\r\n        this._x = -this._x;\r\n        this._y = -this._y;\r\n        this._z = -this._z;\r\n        this._w = -this._w;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 点乘\r\n     * @param vec\r\n     */\r\n    public dot(vec: InVector4): number {\r\n        return this._x * vec.x + this._y * vec.y + this._z * vec.z + this._w * vec.w;\r\n    }\r\n\r\n    /**\r\n     * SQ长度\r\n     */\r\n    public lengthSq(): number {\r\n        return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\r\n    }\r\n\r\n    /**\r\n     * 长度\r\n     */\r\n    public length(): number {\r\n        return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);\r\n    }\r\n\r\n    /**\r\n     * 曼哈顿长度\r\n     */\r\n    public manhattanLength(): number {\r\n        return Math.abs(this._x) + Math.abs(this._y) + Math.abs(this._z) + Math.abs(this._w);\r\n    }\r\n\r\n    /**\r\n     * 与Vector4的曼哈顿距离\r\n     * @param vec\r\n     */\r\n    public manhattanDistanceTo(vec: InVector4): number {\r\n        return Math.abs(this._x - vec.x) + Math.abs(this._y - vec.y) + Math.abs(this._z - vec.z) + Math.abs(this._w - vec.w);\r\n    }\r\n\r\n    /**\r\n     * 归一化\r\n     */\r\n    public normalize(): Vector4 {\r\n        return this.divideScalar(this.length() || 1);\r\n    }\r\n\r\n    /**\r\n     * 设置长度\r\n     * @param length\r\n     */\r\n    public setLength(length: number): Vector4 {\r\n        return this.normalize().multiplyScalar(length);\r\n    }\r\n\r\n    /**\r\n     * 在当前值和V之间插值\r\n     * @param vec\r\n     * @param alpha\r\n     */\r\n    public lerp(vec: InVector4, alpha: number): Vector4 {\r\n        this._x += (vec.x - this._x) * alpha;\r\n        this._y += (vec.y - this._y) * alpha;\r\n        this._z += (vec.z - this._z) * alpha;\r\n        this._w += (vec.w - this._w) * alpha;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 在两个向量之间插值\r\n     * @param vec1\r\n     * @param vec2\r\n     * @param alpha\r\n     */\r\n    public lerpVectors(vec1: InVector4, vec2: InVector4, alpha: number): Vector4 {\r\n        this._x = vec1.x + (vec2.x - vec1.x) * alpha;\r\n        this._y = vec1.y + (vec2.y - vec1.y) * alpha;\r\n        this._z = vec1.z + (vec2.z - vec1.z) * alpha;\r\n        this._w = vec1.w + (vec2.w - vec1.w) * alpha;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 随机分量\r\n     */\r\n    public random(): Vector4 {\r\n        this._x = Math.random();\r\n        this._y = Math.random();\r\n        this._z = Math.random();\r\n        this._w = Math.random();\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 是否相等\r\n     * @param vec\r\n     * @returns {boolean}\r\n     */\r\n    public equals(vec: InVector4): boolean {\r\n        return ((vec.x == this._x) && (vec.y == this._y) && (vec.z == this._z) && (vec.w == this._w));\r\n    }\r\n\r\n    /**\r\n     * 是否近似相等\r\n     * @param right\r\n     * @param relativeEpsilon\r\n     * @param absoluteEpsilon\r\n     */\r\n    public equalsEpsilon(right: InVector4, relativeEpsilon: number, absoluteEpsilon: Nullable<number> = null): boolean {\r\n        return MathUtils.equalsEpsilon(this._x, right.x, relativeEpsilon, absoluteEpsilon) &&\r\n            MathUtils.equalsEpsilon(this._y, right.y, relativeEpsilon, absoluteEpsilon) &&\r\n            MathUtils.equalsEpsilon(this._z, right.z, relativeEpsilon, absoluteEpsilon) &&\r\n            MathUtils.equalsEpsilon(this._w, right.w, relativeEpsilon, absoluteEpsilon);\r\n    }\r\n\r\n    /**\r\n     * 从数组复制\r\n     * @param array\r\n     * @param offset\r\n     */\r\n    public fromArray(array: FloatArray, offset: number = 0): Vector4 {\r\n        this._x = array[offset];\r\n        this._y = array[offset + 1];\r\n        this._z = array[offset + 2];\r\n        this._w = array[offset + 3];\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 复制到数组\r\n     * @param array\r\n     * @param offset\r\n     */\r\n    public toArray(array: FloatArray = [], offset: number = 0): FloatArray {\r\n        array[offset] = this._x;\r\n        array[offset + 1] = this._y;\r\n        array[offset + 2] = this._z;\r\n        array[offset + 3] = this._w;\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * 从二进制复制\r\n     * @param dataBuffer\r\n     */\r\n    public fromDataBuffer(dataBuffer: BinaryBuffer): Vector4 {\r\n        this._x = dataBuffer.readFloat32();\r\n        this._y = dataBuffer.readFloat32();\r\n        this._z = dataBuffer.readFloat32();\r\n        this._w = dataBuffer.readFloat32();\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 复制到二进制\r\n     * @param dataBuffer\r\n     */\r\n    public toDataBuffer(dataBuffer: BinaryBuffer): Vector4 {\r\n        dataBuffer.writeFloat32(this._x);\r\n        dataBuffer.writeFloat32(this._y);\r\n        dataBuffer.writeFloat32(this._z);\r\n        dataBuffer.writeFloat32(this._w);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 从Buffer属性复制\r\n     * @param attribute\r\n     * @param index\r\n     */\r\n    public fromBufferAttribute(attribute: BufferAttribute, index: int): Vector4 {\r\n        this._x = attribute.getX(index);\r\n        this._y = attribute.getY(index);\r\n        this._z = attribute.getZ(index);\r\n        this._w = attribute.getW(index);\r\n        return this;\r\n    }\r\n}\r\n",
        "import { DeepImmutable, FloatArray, int, Nullable } from \"../types\";\r\nimport { InVector3, Vector3 } from \"./Vector3\";\r\nimport { Vector4 } from \"./Vector4\";\r\nimport { Matrix3 } from \"./Matrix3\";\r\nimport { Euler } from \"./Euler\";\r\nimport { EulerOrder } from \"../Enums\";\r\nimport { Quaternion } from \"./Quaternion\";\r\nimport { BinaryBuffer, BufferAttribute } from \"../Misc\";\r\nimport { MathUtils } from \"./MathUtils\";\r\nimport { MathTmp } from \"./MathTmp\";\r\n\r\ntype InMatrix4 = Matrix4 | DeepImmutable<Matrix4>;\r\n\r\n/**\r\n * 4x4矩阵\r\n * @category Math\r\n */\r\nexport class Matrix4 {\r\n    /**\r\n     * @ignore\r\n     */\r\n    private static _identityReadOnly = new Matrix4() as DeepImmutable<Matrix4>;\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _notify: boolean;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _onNotify: any;\r\n\r\n    /**\r\n     * 内部元素\r\n     */\r\n    public elements: number[];\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param elements\r\n     */\r\n    constructor(elements: number[] = []) {\r\n        this._notify = true;\r\n        this._onNotify = null;\r\n\r\n        this.elements = [\r\n            1, 0, 0, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            0, 0, 0, 1,\r\n        ];\r\n\r\n        if (elements.length > 0) {\r\n            this.fromArray(elements);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建对象\r\n     */\r\n    public static Build() {\r\n        return new Matrix4();\r\n    }\r\n\r\n    /**\r\n     * 计算元素索引\r\n     * @param column\r\n     * @param row\r\n     */\r\n    public static getElementIndex(column: int, row: int): int {\r\n        return column * 4 + row;\r\n    }\r\n\r\n    /**\r\n     * 单位矩阵\r\n     */\r\n    public static get IDENTITY(): DeepImmutable<Matrix4> {\r\n        return Matrix4._identityReadOnly;\r\n    }\r\n\r\n    /**\r\n     * 通知回调\r\n     */\r\n    public get notify() {\r\n        return this._notify;\r\n    }\r\n    public set notify(value: boolean) {\r\n        this._notify = value;\r\n    }\r\n\r\n    /**\r\n     * 设置通知回调\r\n     */\r\n    public setNotifyFunc(value: any): Matrix4 {\r\n        this._onNotify = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 触发通知\r\n     */\r\n    private triggerNotify(): void {\r\n        if (this._notify) {\r\n            if (this._onNotify) {\r\n                this._onNotify();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置矩阵参数\r\n     * @param n11\r\n     * @param n12\r\n     * @param n13\r\n     * @param n14\r\n     * @param n21\r\n     * @param n22\r\n     * @param n23\r\n     * @param n24\r\n     * @param n31\r\n     * @param n32\r\n     * @param n33\r\n     * @param n34\r\n     * @param n41\r\n     * @param n42\r\n     * @param n43\r\n     * @param n44\r\n     */\r\n    public set(n11: number, n12: number, n13: number, n14: number,\r\n               n21: number, n22: number, n23: number, n24: number,\r\n               n31: number, n32: number, n33: number, n34: number,\r\n               n41: number, n42: number, n43: number, n44: number) {\r\n\r\n        const te = this.elements;\r\n        te[0] = n11; te[4] = n12; te[8] = n13; te[12] = n14;\r\n        te[1] = n21; te[5] = n22; te[9] = n23; te[13] = n24;\r\n        te[2] = n31; te[6] = n32; te[10] = n33; te[14] = n34;\r\n        te[3] = n41; te[7] = n42; te[11] = n43; te[15] = n44;\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 是否单位矩阵\r\n     */\r\n    public isIdentity(): boolean {\r\n        return this.equals(Matrix4.IDENTITY);\r\n    }\r\n\r\n    /**\r\n     * 单位化矩阵\r\n     */\r\n    public identity(): Matrix4 {\r\n        this.set(\r\n            1, 0, 0, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            0, 0, 0, 1,\r\n        );\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): Matrix4 {\r\n        return new Matrix4().copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param matrix4\r\n     */\r\n    public copy(matrix4: InMatrix4): Matrix4 {\r\n\r\n        const te = this.elements;\r\n        const me = matrix4.elements;\r\n        te[0] = me[0]; te[1] = me[1]; te[2] = me[2]; te[3] = me[3];\r\n        te[4] = me[4]; te[5] = me[5]; te[6] = me[6]; te[7] = me[7];\r\n        te[8] = me[8]; te[9] = me[9]; te[10] = me[10]; te[11] = me[11];\r\n        te[12] = me[12]; te[13] = me[13]; te[14] = me[14]; te[15] = me[15];\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 复制位置数据\r\n     * @param matrix4\r\n     */\r\n    public copyPosition(matrix4: InMatrix4): Matrix4 {\r\n\r\n        const te = this.elements;\r\n        const me = matrix4.elements;\r\n        te[12] = me[12];\r\n        te[13] = me[13];\r\n        te[14] = me[14];\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取X轴\r\n     * @param x\r\n     */\r\n    public getX(x = new Vector3()): Vector3 {\r\n        return x.set(this.elements[0], this.elements[1], this.elements[2]);\r\n    }\r\n\r\n    /**\r\n     * 获取Y轴\r\n     * @param y\r\n     */\r\n    public getY(y = new Vector3()): Vector3 {\r\n        return y.set(this.elements[4], this.elements[5], this.elements[6]);\r\n    }\r\n\r\n    /**\r\n     * 获取Z轴\r\n     * @param z\r\n     */\r\n    public getZ(z = new Vector3()): Vector3 {\r\n        return z.set(this.elements[8], this.elements[9], this.elements[10]);\r\n    }\r\n\r\n    /**\r\n     * 获取元素\r\n     * @param column\r\n     * @param row\r\n     */\r\n    public getElement(column: int, row: int): number {\r\n        const index = Matrix4.getElementIndex(column, row);\r\n        return this.elements[index];\r\n    }\r\n\r\n    /**\r\n     * 设置元素\r\n     * @param column\r\n     * @param row\r\n     * @param value\r\n     */\r\n    public setElement(column: int, row: int, value: number): Matrix4 {\r\n        const index = Matrix4.getElementIndex(column, row);\r\n        this.elements[index] = value;\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取列\r\n     * @param index\r\n     * @param vec4\r\n     */\r\n    public getColumn(index: int, vec4: Vector4 = new Vector4()): Vector4 {\r\n\r\n        const startIndex = index * 4;\r\n        const x = this.elements[startIndex];\r\n        const y = this.elements[startIndex + 1];\r\n        const z = this.elements[startIndex + 2];\r\n        const w = this.elements[startIndex + 3];\r\n\r\n        vec4.x = x;\r\n        vec4.y = y;\r\n        vec4.z = z;\r\n        vec4.w = w;\r\n        return vec4;\r\n    }\r\n\r\n    /**\r\n     * 设置列\r\n     * @param index\r\n     * @param vec4\r\n     */\r\n    public setColumn(index: int, vec4: Vector4): Matrix4 {\r\n\r\n        const startIndex = index * 4;\r\n\r\n        this.elements[startIndex] = vec4.x;\r\n        this.elements[startIndex + 1] = vec4.y;\r\n        this.elements[startIndex + 2] = vec4.z;\r\n        this.elements[startIndex + 3] = vec4.w;\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取行\r\n     * @param index\r\n     * @param vec4\r\n     */\r\n    public getRow(index: int, vec4 = new Vector4()): Vector4 {\r\n\r\n        const x = this.elements[index];\r\n        const y = this.elements[index + 4];\r\n        const z = this.elements[index + 8];\r\n        const w = this.elements[index + 12];\r\n\r\n        vec4.x = x;\r\n        vec4.y = y;\r\n        vec4.z = z;\r\n        vec4.w = w;\r\n        return vec4;\r\n    }\r\n\r\n    /**\r\n     * 设置行\r\n     * @param index\r\n     * @param vec4\r\n     */\r\n    public setRow(index: int, vec4: Vector4): Matrix4 {\r\n\r\n        this.elements[index] = vec4.x;\r\n        this.elements[index + 4] = vec4.y;\r\n        this.elements[index + 8] = vec4.z;\r\n        this.elements[index + 12] = vec4.w;\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取缩放\r\n     * @param scale\r\n     */\r\n    public getScale(scale = new Vector3()): Vector3 {\r\n        this.getX(MathTmp.Vector3[0]);\r\n        this.getY(MathTmp.Vector3[1]);\r\n        this.getZ(MathTmp.Vector3[2]);\r\n        scale.set(MathTmp.Vector3[0].length(), MathTmp.Vector3[1].length(), MathTmp.Vector3[2].length());\r\n        return scale;\r\n    }\r\n\r\n    /**\r\n     * 获取平移\r\n     * @param vec\r\n     */\r\n    public getTranslation(vec = new Vector3()): Vector3 {\r\n        vec.x = this.elements[12];\r\n        vec.y = this.elements[13];\r\n        vec.z = this.elements[14];\r\n        return vec;\r\n    }\r\n\r\n    /**\r\n     * 获取旋转矩阵到Matrix3\r\n     * @param matrix3\r\n     */\r\n    public getRotationMatrix3(matrix3 = new Matrix3()): Matrix3 {\r\n        matrix3.elements[0] = this.elements[0];\r\n        matrix3.elements[1] = this.elements[1];\r\n        matrix3.elements[2] = this.elements[2];\r\n        matrix3.elements[3] = this.elements[4];\r\n        matrix3.elements[4] = this.elements[5];\r\n        matrix3.elements[5] = this.elements[6];\r\n        matrix3.elements[6] = this.elements[8];\r\n        matrix3.elements[7] = this.elements[9];\r\n        matrix3.elements[8] = this.elements[10];\r\n        return matrix3;\r\n    }\r\n\r\n    /**\r\n     * 获取旋转矩阵到Matrix4\r\n     * @param matrix4\r\n     */\r\n    public getRotationMatrix4(matrix4 = new Matrix4()): Matrix4 {\r\n\r\n        const scaleX = 1 / MathTmp.Vector3[0].setFromMatrixColumn(this, 0).length();\r\n        const scaleY = 1 / MathTmp.Vector3[1].setFromMatrixColumn(this, 1).length();\r\n        const scaleZ = 1 / MathTmp.Vector3[2].setFromMatrixColumn(this, 2).length();\r\n\r\n        matrix4.elements[0] = this.elements[0] * scaleX;\r\n        matrix4.elements[1] = this.elements[1] * scaleX;\r\n        matrix4.elements[2] = this.elements[2] * scaleX;\r\n        matrix4.elements[3] = 0;\r\n        matrix4.elements[4] = this.elements[4] * scaleY;\r\n        matrix4.elements[5] = this.elements[5] * scaleY;\r\n        matrix4.elements[6] = this.elements[6] * scaleY;\r\n        matrix4.elements[7] = 0;\r\n        matrix4.elements[8] = this.elements[8] * scaleZ;\r\n        matrix4.elements[9] = this.elements[9] * scaleZ;\r\n        matrix4.elements[10] = this.elements[10] * scaleZ;\r\n        matrix4.elements[11] = 0;\r\n        matrix4.elements[12] = 0;\r\n        matrix4.elements[13] = 0;\r\n        matrix4.elements[14] = 0;\r\n        matrix4.elements[15] = 1;\r\n        return matrix4;\r\n    }\r\n\r\n    /**\r\n     * 设置欧拉角\r\n     * @param ex\r\n     * @param ey\r\n     * @param ez\r\n     */\r\n    public setFromEulerAngles(ex: number, ey: number, ez: number): Matrix4 {\r\n        let s1;\r\n        let c1;\r\n        let s2;\r\n        let c2;\r\n        let s3;\r\n        let c3;\r\n        let m;\r\n\r\n        // Solution taken from http://en.wikipedia.org/wiki/Euler_angles#Matrix_orientation\r\n        s1 = Math.sin(-ex);\r\n        c1 = Math.cos(-ex);\r\n        s2 = Math.sin(-ey);\r\n        c2 = Math.cos(-ey);\r\n        s3 = Math.sin(-ez);\r\n        c3 = Math.cos(-ez);\r\n\r\n        m = this.elements;\r\n\r\n        // Set rotation elements\r\n        m[0] = c2 * c3;\r\n        m[1] = -c2 * s3;\r\n        m[2] = s2;\r\n        m[3] = 0;\r\n\r\n        m[4] = c1 * s3 + c3 * s1 * s2;\r\n        m[5] = c1 * c3 - s1 * s2 * s3;\r\n        m[6] = -c2 * s1;\r\n        m[7] = 0;\r\n\r\n        m[8] = s1 * s3 - c1 * c3 * s2;\r\n        m[9] = c3 * s1 + c1 * s2 * s3;\r\n        m[10] = c1 * c2;\r\n        m[11] = 0;\r\n\r\n        m[12] = 0;\r\n        m[13] = 0;\r\n        m[14] = 0;\r\n        m[15] = 1;\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取欧拉角\r\n     * @param euler\r\n     */\r\n    public getEulerAngles(euler =  new Euler()): Euler {\r\n        let x;\r\n        let y;\r\n        let z;\r\n\r\n        let sx;\r\n        let sy;\r\n        let sz;\r\n\r\n        let m;\r\n        let halfPi;\r\n\r\n        this.getScale(MathTmp.Vector3[0]);\r\n        sx = MathTmp.Vector3[0].x;\r\n        sy = MathTmp.Vector3[0].y;\r\n        sz = MathTmp.Vector3[0].z;\r\n\r\n        m = this.elements;\r\n\r\n        y = Math.asin(-m[2] / sx);\r\n        halfPi = Math.PI * 0.5;\r\n\r\n        if (y < halfPi) {\r\n            if (y > -halfPi) {\r\n                x = Math.atan2(m[6] / sy, m[10] / sz);\r\n                z = Math.atan2(m[1] / sx, m[0] / sx);\r\n            } else {\r\n                // Not a unique solution\r\n                z = 0;\r\n                x = -Math.atan2(m[4] / sy, m[5] / sy);\r\n            }\r\n        } else {\r\n            // Not a unique solution\r\n            z = 0;\r\n            x = Math.atan2(m[4] / sy, m[5] / sy);\r\n        }\r\n\r\n        return euler.set(x, y, z);\r\n    }\r\n\r\n    /**\r\n     * 变换坐标\r\n     * @param vec\r\n     * @param res\r\n     */\r\n    public transformPoint(vec: Vector3, res = new Vector3()): Vector3 {\r\n        let x; let y; let z;\r\n        let m = this.elements;\r\n        let v = vec;\r\n\r\n        x =\r\n            v.x * m[0] +\r\n            v.y * m[4] +\r\n            v.z * m[8] +\r\n            m[12];\r\n        y =\r\n            v.x * m[1] +\r\n            v.y * m[5] +\r\n            v.z * m[9] +\r\n            m[13];\r\n        z =\r\n            v.x * m[2] +\r\n            v.y * m[6] +\r\n            v.z * m[10] +\r\n            m[14];\r\n\r\n        return res.set(x, y, z);\r\n    }\r\n\r\n    /**\r\n     * 变换向量Vector3\r\n     * @param vec\r\n     * @param res\r\n     */\r\n    public transformVector3(vec: Vector3, res = new Vector3()): Vector3 {\r\n        let x; let y; let z;\r\n        let m = this.elements;\r\n        let v = vec;\r\n\r\n        x =\r\n            v.x * m[0] +\r\n            v.y * m[4] +\r\n            v.z * m[8];\r\n        y =\r\n            v.x * m[1] +\r\n            v.y * m[5] +\r\n            v.z * m[9];\r\n        z =\r\n            v.x * m[2] +\r\n            v.y * m[6] +\r\n            v.z * m[10];\r\n\r\n        return res.set(x, y, z);\r\n    }\r\n\r\n    /**\r\n     * 变换向量Vector4\r\n     * @param vec\r\n     * @param res\r\n     */\r\n    public transformVector4(vec: Vector4, res = new Vector4()): Vector4 {\r\n        let x; let y; let z; let w;\r\n        let m = this.elements;\r\n        let v = vec;\r\n\r\n        x =\r\n            v.x * m[0] +\r\n            v.y * m[4] +\r\n            v.z * m[8] +\r\n            v.w * m[12];\r\n        y =\r\n            v.x * m[1] +\r\n            v.y * m[5] +\r\n            v.z * m[9] +\r\n            v.w * m[13];\r\n        z =\r\n            v.x * m[2] +\r\n            v.y * m[6] +\r\n            v.z * m[10] +\r\n            v.w * m[14];\r\n\r\n        w =\r\n            v.x * m[3] +\r\n            v.y * m[7] +\r\n            v.z * m[11] +\r\n            v.w * m[15];\r\n\r\n        return res.set(x, y, z, w);\r\n    }\r\n\r\n    /**\r\n     * 将矩阵的基向量提取到3个轴向量中\r\n     * @param xAxis\r\n     * @param yAxis\r\n     * @param zAxis\r\n     */\r\n    public extractBasis(xAxis = new Vector3(), yAxis = new Vector3(), zAxis = new Vector3()): Matrix4 {\r\n        xAxis.setFromMatrixColumn(this, 0);\r\n        yAxis.setFromMatrixColumn(this, 1);\r\n        zAxis.setFromMatrixColumn(this, 2);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 通过给定的三个向量设置该矩阵为基矩阵\r\n     * @param xAxis\r\n     * @param yAxis\r\n     * @param zAxis\r\n     */\r\n    public makeBasis(xAxis: InVector3, yAxis: InVector3, zAxis: InVector3): Matrix4 {\r\n        this.set(\r\n            xAxis.x, yAxis.x, zAxis.x, 0,\r\n            xAxis.y, yAxis.y, zAxis.y, 0,\r\n            xAxis.z, yAxis.z, zAxis.z, 0,\r\n            0, 0, 0, 1,\r\n        );\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置欧拉角\r\n     * @param euler\r\n     */\r\n    public makeRotationFromEuler(euler: Euler): Matrix4 {\r\n\r\n        let te = this.elements;\r\n\r\n        let x = euler.x; let y = euler.y; let z = euler.z;\r\n        let a = Math.cos(x); let b = Math.sin(x);\r\n        let c = Math.cos(y); let d = Math.sin(y);\r\n        let e = Math.cos(z); let f = Math.sin(z);\r\n\r\n        if (euler.order == EulerOrder.XYZ) {\r\n            let ae = a * e;  let af = a * f;  let be = b * e;  let bf = b * f;\r\n\r\n            te[0] = c * e;\r\n            te[4] = -c * f;\r\n            te[8] = d;\r\n\r\n            te[1] = af + be * d;\r\n            te[5] = ae - bf * d;\r\n            te[9] = -b * c;\r\n\r\n            te[2] = bf - ae * d;\r\n            te[6] = be + af * d;\r\n            te[10] = a * c;\r\n        } else if (euler.order == EulerOrder.YXZ) {\r\n            let ce = c * e;  let cf = c * f;  let de = d * e;  let df = d * f;\r\n\r\n            te[0] = ce + df * b;\r\n            te[4] = de * b - cf;\r\n            te[8] = a * d;\r\n\r\n            te[1] = a * f;\r\n            te[5] = a * e;\r\n            te[9] = -b;\r\n\r\n            te[2] = cf * b - de;\r\n            te[6] = df + ce * b;\r\n            te[10] = a * c;\r\n        } else if (euler.order == EulerOrder.ZXY) {\r\n            let ce = c * e;  let cf = c * f;  let de = d * e;  let df = d * f;\r\n\r\n            te[0] = ce - df * b;\r\n            te[4] = -a * f;\r\n            te[8] = de + cf * b;\r\n\r\n            te[1] = cf + de * b;\r\n            te[5] = a * e;\r\n            te[9] = df - ce * b;\r\n\r\n            te[2] = -a * d;\r\n            te[6] = b;\r\n            te[10] = a * c;\r\n        } else if (euler.order == EulerOrder.ZYX) {\r\n            let ae = a * e;  let af = a * f;  let be = b * e;  let bf = b * f;\r\n\r\n            te[0] = c * e;\r\n            te[4] = be * d - af;\r\n            te[8] = ae * d + bf;\r\n\r\n            te[1] = c * f;\r\n            te[5] = bf * d + ae;\r\n            te[9] = af * d - be;\r\n\r\n            te[2] = -d;\r\n            te[6] = b * c;\r\n            te[10] = a * c;\r\n        } else if (euler.order == EulerOrder.YZX) {\r\n            let ac = a * c;  let ad = a * d;  let bc = b * c;  let bd = b * d;\r\n\r\n            te[0] = c * e;\r\n            te[4] = bd - ac * f;\r\n            te[8] = bc * f + ad;\r\n\r\n            te[1] = f;\r\n            te[5] = a * e;\r\n            te[9] = -b * e;\r\n\r\n            te[2] = -d * e;\r\n            te[6] = ad * f + bc;\r\n            te[10] = ac - bd * f;\r\n        } else if (euler.order == EulerOrder.XZY) {\r\n            let ac = a * c;  let ad = a * d;  let bc = b * c;  let bd = b * d;\r\n\r\n            te[0] = c * e;\r\n            te[4] = -f;\r\n            te[8] = d * e;\r\n\r\n            te[1] = ac * f + bd;\r\n            te[5] = a * e;\r\n            te[9] = ad * f - bc;\r\n\r\n            te[2] = bc * f - ad;\r\n            te[6] = b * e;\r\n            te[10] = bd * f + ac;\r\n        }\r\n\r\n        // bottom row\r\n        te[3] = 0;\r\n        te[7] = 0;\r\n        te[11] = 0;\r\n\r\n        // last column\r\n        te[12] = 0;\r\n        te[13] = 0;\r\n        te[14] = 0;\r\n        te[15] = 1;\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置四元数\r\n     * @param quaternion\r\n     */\r\n    public makeRotationFromQuaternion(quaternion: Quaternion): Matrix4 {\r\n        return this.compose(Vector3.ZERO, quaternion, Vector3.ONE);\r\n    }\r\n\r\n    /**\r\n     * 构造从eye到target的旋转矩阵\r\n     * @param eye\r\n     * @param target\r\n     * @param up\r\n     */\r\n    public lookAt(eye: InVector3, target: InVector3, up: InVector3): Matrix4 {\r\n\r\n        const te = this.elements;\r\n\r\n        MathTmp.Vector3[2].subVectors(eye, target);\r\n\r\n        if (MathTmp.Vector3[2].lengthSq() == 0) {\r\n\r\n            // eye and target are in the same position\r\n\r\n            MathTmp.Vector3[2].z = 1;\r\n\r\n        }\r\n\r\n        MathTmp.Vector3[2].normalize();\r\n        MathTmp.Vector3[0].crossVectors(up, MathTmp.Vector3[2]);\r\n\r\n        if (MathTmp.Vector3[0].lengthSq() == 0) {\r\n\r\n            // up and z are parallel\r\n\r\n            if (Math.abs(up.z) == 1) {\r\n\r\n                MathTmp.Vector3[2].x += 0.0001;\r\n\r\n            } else {\r\n\r\n                MathTmp.Vector3[2].z += 0.0001;\r\n\r\n            }\r\n\r\n            MathTmp.Vector3[2].normalize();\r\n            MathTmp.Vector3[0].crossVectors(up, MathTmp.Vector3[2]);\r\n\r\n        }\r\n\r\n        MathTmp.Vector3[0].normalize();\r\n        MathTmp.Vector3[1].crossVectors(MathTmp.Vector3[2], MathTmp.Vector3[0]);\r\n\r\n        te[ 0 ] = MathTmp.Vector3[0].x; te[ 4 ] = MathTmp.Vector3[1].x; te[ 8 ] = MathTmp.Vector3[2].x;\r\n        te[ 1 ] = MathTmp.Vector3[0].y; te[ 5 ] = MathTmp.Vector3[1].y; te[ 9 ] = MathTmp.Vector3[2].y;\r\n        te[ 2 ] = MathTmp.Vector3[0].z; te[ 6 ] = MathTmp.Vector3[1].z; te[ 10 ] = MathTmp.Vector3[2].z;\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 转逆矩阵\r\n     */\r\n    public inverse(): Matrix4 {\r\n         let a00;  let a01;  let a02;  let a03;\r\n         let a10;  let a11;  let a12;  let a13;\r\n         let a20;  let a21;  let a22;  let a23;\r\n         let a30;  let a31;  let a32;  let a33;\r\n         let b00;  let b01;  let b02;  let b03;\r\n         let b04;  let b05;  let b06;  let b07;\r\n         let b08;  let b09;  let b10;  let b11;\r\n         let det;  let invDet;  let m;\r\n\r\n        m = this.elements;\r\n        a00 = m[0];\r\n        a01 = m[1];\r\n        a02 = m[2];\r\n        a03 = m[3];\r\n        a10 = m[4];\r\n        a11 = m[5];\r\n        a12 = m[6];\r\n        a13 = m[7];\r\n        a20 = m[8];\r\n        a21 = m[9];\r\n        a22 = m[10];\r\n        a23 = m[11];\r\n        a30 = m[12];\r\n        a31 = m[13];\r\n        a32 = m[14];\r\n        a33 = m[15];\r\n\r\n        b00 = a00 * a11 - a01 * a10;\r\n        b01 = a00 * a12 - a02 * a10;\r\n        b02 = a00 * a13 - a03 * a10;\r\n        b03 = a01 * a12 - a02 * a11;\r\n        b04 = a01 * a13 - a03 * a11;\r\n        b05 = a02 * a13 - a03 * a12;\r\n        b06 = a20 * a31 - a21 * a30;\r\n        b07 = a20 * a32 - a22 * a30;\r\n        b08 = a20 * a33 - a23 * a30;\r\n        b09 = a21 * a32 - a22 * a31;\r\n        b10 = a21 * a33 - a23 * a31;\r\n        b11 = a22 * a33 - a23 * a32;\r\n\r\n        det = (b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06);\r\n        if (det == 0) {\r\n\r\n            return this.identity();\r\n\r\n        } else {\r\n            invDet = 1 / det;\r\n\r\n            m[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;\r\n            m[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;\r\n            m[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;\r\n            m[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;\r\n            m[4] = (-a10 * b11 + a12 * b08 - a13 * b07) * invDet;\r\n            m[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;\r\n            m[6] = (-a30 * b05 + a32 * b02 - a33 * b01) * invDet;\r\n            m[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;\r\n            m[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;\r\n            m[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;\r\n            m[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;\r\n            m[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;\r\n            m[12] = (-a10 * b09 + a11 * b07 - a12 * b06) * invDet;\r\n            m[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;\r\n            m[14] = (-a30 * b03 + a31 * b01 - a32 * b00) * invDet;\r\n            m[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;\r\n        }\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 乘以矩阵\r\n     * @param matrix4\r\n     */\r\n    public multiply(matrix4: InMatrix4): Matrix4 {\r\n        return this.multiplyMatrices(this, matrix4);\r\n    }\r\n\r\n    /**\r\n     * 乘以当前矩阵\r\n     * @param matrix4\r\n     */\r\n    public premultiply(matrix4: InMatrix4): Matrix4 {\r\n        return this.multiplyMatrices(matrix4, this);\r\n    }\r\n\r\n    /**\r\n     * 两个矩阵相乘\r\n     * @param aMat\r\n     * @param bMat\r\n     */\r\n    public multiplyMatrices(aMat: InMatrix4, bMat: InMatrix4): Matrix4 {\r\n        const ae = aMat.elements;\r\n        const be = bMat.elements;\r\n        const te = this.elements;\r\n\r\n        const a11 = ae[0]; const a12 = ae[4]; const a13 = ae[8]; const a14 = ae[12];\r\n        const a21 = ae[1]; const a22 = ae[5]; const a23 = ae[9]; const a24 = ae[13];\r\n        const a31 = ae[2]; const a32 = ae[6]; const a33 = ae[10]; const a34 = ae[14];\r\n        const a41 = ae[3]; const a42 = ae[7]; const a43 = ae[11]; const a44 = ae[15];\r\n\r\n        const b11 = be[0]; const b12 = be[4]; const b13 = be[8]; const b14 = be[12];\r\n        const b21 = be[1]; const b22 = be[5]; const b23 = be[9]; const b24 = be[13];\r\n        const b31 = be[2]; const b32 = be[6]; const b33 = be[10]; const b34 = be[14];\r\n        const b41 = be[3]; const b42 = be[7]; const b43 = be[11]; const b44 = be[15];\r\n\r\n        te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\r\n        te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\r\n        te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\r\n        te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\r\n\r\n        te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\r\n        te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\r\n        te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\r\n        te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\r\n\r\n        te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\r\n        te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\r\n        te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\r\n        te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\r\n\r\n        te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\r\n        te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\r\n        te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\r\n        te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 乘以Matrix3矩阵\r\n     * @param matrix3\r\n     */\r\n    public multiplyMatrix3(matrix3: Matrix3): Matrix4 {\r\n\r\n        const left0 = this.elements[0];\r\n        const left1 = this.elements[1];\r\n        const left2 = this.elements[2];\r\n        const left4 = this.elements[4];\r\n        const left5 = this.elements[5];\r\n        const left6 = this.elements[6];\r\n        const left8 = this.elements[8];\r\n        const left9 = this.elements[9];\r\n        const left10 = this.elements[10];\r\n\r\n        const right0 = matrix3.elements[0];\r\n        const right1 = matrix3.elements[1];\r\n        const right2 = matrix3.elements[2];\r\n        const right4 = matrix3.elements[3];\r\n        const right5 = matrix3.elements[4];\r\n        const right6 = matrix3.elements[5];\r\n        const right8 = matrix3.elements[6];\r\n        const right9 = matrix3.elements[7];\r\n        const right10 = matrix3.elements[8];\r\n\r\n        const column0Row0 = left0 * right0 + left4 * right1 + left8 * right2;\r\n        const column0Row1 = left1 * right0 + left5 * right1 + left9 * right2;\r\n        const column0Row2 = left2 * right0 + left6 * right1 + left10 * right2;\r\n\r\n        const column1Row0 = left0 * right4 + left4 * right5 + left8 * right6;\r\n        const column1Row1 = left1 * right4 + left5 * right5 + left9 * right6;\r\n        const column1Row2 = left2 * right4 + left6 * right5 + left10 * right6;\r\n\r\n        const column2Row0 = left0 * right8 + left4 * right9 + left8 * right10;\r\n        const column2Row1 = left1 * right8 + left5 * right9 + left9 * right10;\r\n        const column2Row2 = left2 * right8 + left6 * right9 + left10 * right10;\r\n\r\n        this.elements[0] = column0Row0;\r\n        this.elements[1] = column0Row1;\r\n        this.elements[2] = column0Row2;\r\n        this.elements[3] = 0.0;\r\n        this.elements[4] = column1Row0;\r\n        this.elements[5] = column1Row1;\r\n        this.elements[6] = column1Row2;\r\n        this.elements[7] = 0.0;\r\n        this.elements[8] = column2Row0;\r\n        this.elements[9] = column2Row1;\r\n        this.elements[10] = column2Row2;\r\n        this.elements[11] = 0.0;\r\n        this.elements[12] = this.elements[12];\r\n        this.elements[13] = this.elements[13];\r\n        this.elements[14] = this.elements[14];\r\n        this.elements[15] = this.elements[15];\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 乘以标量\r\n     * @param scalar\r\n     */\r\n    public multiplyScalar(scalar: number): Matrix4 {\r\n\r\n        const te = this.elements;\r\n        te[0] *= scalar; te[4] *= scalar; te[8] *= scalar; te[12] *= scalar;\r\n        te[1] *= scalar; te[5] *= scalar; te[9] *= scalar; te[13] *= scalar;\r\n        te[2] *= scalar; te[6] *= scalar; te[10] *= scalar; te[14] *= scalar;\r\n        te[3] *= scalar; te[7] *= scalar; te[11] *= scalar; te[15] *= scalar;\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 乘以标量Vector3\r\n     * @param vec\r\n     */\r\n    public multiplyScalarVector(vec: Vector3): Matrix4 {\r\n\r\n        const te = this.elements;\r\n        te[0] *= vec.x;\r\n        te[1] *= vec.x;\r\n        te[2] *= vec.x;\r\n        te[3] = 0;\r\n        te[4] *= vec.y;\r\n        te[5] *= vec.y;\r\n        te[6] *= vec.y;\r\n        te[7] = 0;\r\n        te[8] *= vec.z;\r\n        te[9] *= vec.z;\r\n        te[10] *= vec.z;\r\n        te[15] = 1;\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 行列式\r\n     */\r\n    public determinant(): number {\r\n        const te = this.elements;\r\n\r\n        const n11 = te[0]; const n12 = te[4]; const n13 = te[8]; const n14 = te[12];\r\n        const n21 = te[1]; const n22 = te[5]; const n23 = te[9]; const n24 = te[13];\r\n        const n31 = te[2]; const n32 = te[6]; const n33 = te[10]; const n34 = te[14];\r\n        const n41 = te[3]; const n42 = te[7]; const n43 = te[11]; const n44 = te[15];\r\n\r\n        return (\r\n            n41 * (\r\n                +n14 * n23 * n32\r\n                - n13 * n24 * n32\r\n                - n14 * n22 * n33\r\n                + n12 * n24 * n33\r\n                + n13 * n22 * n34\r\n                - n12 * n23 * n34\r\n            ) +\r\n            n42 * (\r\n                +n11 * n23 * n34\r\n                - n11 * n24 * n33\r\n                + n14 * n21 * n33\r\n                - n13 * n21 * n34\r\n                + n13 * n24 * n31\r\n                - n14 * n23 * n31\r\n            ) +\r\n            n43 * (\r\n                +n11 * n24 * n32\r\n                - n11 * n22 * n34\r\n                - n14 * n21 * n32\r\n                + n12 * n21 * n34\r\n                + n14 * n22 * n31\r\n                - n12 * n24 * n31\r\n            ) +\r\n            n44 * (\r\n                -n13 * n22 * n31\r\n                - n11 * n23 * n32\r\n                + n11 * n22 * n33\r\n                + n13 * n21 * n32\r\n                - n12 * n21 * n33\r\n                + n12 * n23 * n31\r\n            )\r\n\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 转置\r\n     */\r\n    public transpose(): Matrix4 {\r\n\r\n        let te = this.elements;\r\n        let tmp;\r\n\r\n        tmp = te[1]; te[1] = te[4]; te[4] = tmp;\r\n        tmp = te[2]; te[2] = te[8]; te[8] = tmp;\r\n        tmp = te[6]; te[6] = te[9]; te[9] = tmp;\r\n\r\n        tmp = te[3]; te[3] = te[12]; te[12] = tmp;\r\n        tmp = te[7]; te[7] = te[13]; te[13] = tmp;\r\n        tmp = te[11]; te[11] = te[14]; te[14] = tmp;\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置位置XYZ\r\n     * @param x\r\n     * @param y\r\n     * @param z\r\n     */\r\n    public setPositionXYZ(x: number, y: number, z: number): Matrix4 {\r\n        const te = this.elements;\r\n        te[12] = x;\r\n        te[13] = y;\r\n        te[14] = z;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置位置坐标\r\n     * @param vec\r\n     */\r\n    public setPositionVector(vec: InVector3): Matrix4 {\r\n        return this.setPositionXYZ(vec.x, vec.y, vec.z);\r\n    }\r\n\r\n    /**\r\n     * 设置缩放XYZ\r\n     * @param x\r\n     * @param y\r\n     * @param z\r\n     */\r\n    public setScaleXYZ(x: number, y: number, z: number): Matrix4 {\r\n        const m = this.elements;\r\n        m[0] = x;\r\n        m[5] = y;\r\n        m[10] = z;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置缩放系数\r\n     * @param vec\r\n     */\r\n    public setScaleVector(vec: InVector3): Matrix4 {\r\n        return this.setScaleXYZ(vec.x, vec.y, vec.z);\r\n    }\r\n\r\n    /**\r\n     * 提取逆矩阵\r\n     * @param matrix4\r\n     */\r\n    public getInverse(matrix4: InMatrix4): Matrix4 {\r\n\r\n        // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\r\n        const te = this.elements;\r\n        const me = matrix4.elements;\r\n\r\n        const n11 = me[0]; const n21 = me[1]; const n31 = me[2]; const n41 = me[3];\r\n        const n12 = me[4]; const n22 = me[5]; const n32 = me[6]; const n42 = me[7];\r\n        const n13 = me[8]; const n23 = me[9]; const n33 = me[10]; const n43 = me[11];\r\n        const n14 = me[12]; const n24 = me[13]; const n34 = me[14]; const n44 = me[15];\r\n\r\n        const t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;\r\n        const t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;\r\n        const t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;\r\n        const t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\r\n\r\n        const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\r\n\r\n        if (det == 0) {\r\n            return this.identity();\r\n        }\r\n\r\n        const detInv = 1 / det;\r\n\r\n        te[0] = t11 * detInv;\r\n        te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;\r\n        te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;\r\n        te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;\r\n\r\n        te[4] = t12 * detInv;\r\n        te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;\r\n        te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;\r\n        te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;\r\n\r\n        te[8] = t13 * detInv;\r\n        te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;\r\n        te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;\r\n        te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;\r\n\r\n        te[12] = t14 * detInv;\r\n        te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;\r\n        te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;\r\n        te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 平移当前矩阵\r\n     * @param x\r\n     * @param y\r\n     * @param z\r\n     */\r\n    public translateXYZ(x: number, y: number, z: number): Matrix4 {\r\n        const te = this.elements;\r\n        const px = x;\r\n        const py = y;\r\n        const pz = z;\r\n\r\n        te[12] += px;\r\n        te[13] += py;\r\n        te[14] += pz;\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 平移当前矩阵\r\n     * @param vec\r\n     */\r\n    public translateVector(vec: InVector3): Matrix4 {\r\n        return this.translateXYZ(vec.x, vec.y, vec.z);\r\n    }\r\n\r\n    /**\r\n     * 缩放当前矩阵\r\n     * @param x\r\n     * @param y\r\n     * @param z\r\n     */\r\n    public scaleXYZ(x: number, y: number, z: number): Matrix4 {\r\n        const te = this.elements;\r\n        const px = x;\r\n        const py = y;\r\n        const pz = z;\r\n\r\n        te[0] *= px; te[4] *= py; te[8] *= pz;\r\n        te[1] *= px; te[5] *= py; te[9] *= pz;\r\n        te[2] *= px; te[6] *= py; te[10] *= pz;\r\n        te[3] *= px; te[7] *= py; te[11] *= pz;\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 缩放当前矩阵\r\n     * @param vec\r\n     */\r\n    public scaleVector(vec: InVector3): Matrix4 {\r\n        return this.scaleXYZ(vec.x, vec.y, vec.z);\r\n    }\r\n\r\n    /**\r\n     * 获取3个轴方向的最大缩放值\r\n     */\r\n    public getMaxScaleOnAxis(): number {\r\n\r\n        const te = this.elements;\r\n        const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\r\n        const scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\r\n        const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\r\n        return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));\r\n    }\r\n\r\n    /**\r\n     * 设置平移矩阵\r\n     * @param x\r\n     * @param y\r\n     * @param z\r\n     */\r\n    public makeTranslationXYZ(x: number, y: number, z: number): Matrix4 {\r\n        this.set(\r\n            1, 0, 0, x,\r\n            0, 1, 0, y,\r\n            0, 0, 1, z,\r\n            0, 0, 0, 1,\r\n        );\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置平移矩阵\r\n     * @param vec\r\n     */\r\n    public makeTranslationVector(vec: InVector3): Matrix4 {\r\n        return this.makeTranslationXYZ(vec.x, vec.y, vec.z);\r\n    }\r\n\r\n    /**\r\n     * 设置X轴旋转矩阵\r\n     * @param theta\r\n     */\r\n    public makeRotationX(theta: number): Matrix4 {\r\n        const c = Math.cos(theta);\r\n        const s = Math.sin(theta);\r\n\r\n        this.set(\r\n            1, 0, 0, 0,\r\n            0, c, -s, 0,\r\n            0, s, c, 0,\r\n            0, 0, 0, 1,\r\n        );\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置Y轴旋转矩阵\r\n     * @param theta\r\n     */\r\n    public makeRotationY(theta: number): Matrix4 {\r\n        const c = Math.cos(theta);\r\n        const s = Math.sin(theta);\r\n\r\n        this.set(\r\n            c, 0, s, 0,\r\n            0, 1, 0, 0,\r\n            -s, 0, c, 0,\r\n            0, 0, 0, 1,\r\n        );\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置Z轴旋转矩阵\r\n     * @param theta\r\n     */\r\n    public makeRotationZ(theta: number): Matrix4 {\r\n        const c = Math.cos(theta);\r\n        const s = Math.sin(theta);\r\n\r\n        this.set(\r\n            c, -s, 0, 0,\r\n            s, c, 0, 0,\r\n            0, 0, 1, 0,\r\n            0, 0, 0, 1,\r\n        );\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置任意轴旋转角\r\n     * @param axis\r\n     * @param angle\r\n     */\r\n    public makeRotationAxis(axis: InVector3, angle: number): Matrix4 {\r\n\r\n        const c = Math.cos(angle);\r\n        const s = Math.sin(angle);\r\n        const t = 1 - c;\r\n        const x = axis.x; const y = axis.y; const z = axis.z;\r\n        const tx = t * x; const ty = t * y;\r\n\r\n        this.set(\r\n            tx * x + c, tx * y - s * z, tx * z + s * y, 0,\r\n            tx * y + s * z, ty * y + c, ty * z - s * x, 0,\r\n            tx * z - s * y, ty * z + s * x, t * z * z + c, 0,\r\n            0, 0, 0, 1,\r\n        );\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置缩放矩阵\r\n     * @param x\r\n     * @param y\r\n     * @param z\r\n     */\r\n    public makeScaleXYZ(x: number, y: number, z: number): Matrix4 {\r\n        this.set(\r\n            x, 0, 0, 0,\r\n            0, y, 0, 0,\r\n            0, 0, z, 0,\r\n            0, 0, 0, 1,\r\n        );\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置缩放矩阵\r\n     * @param vec\r\n     */\r\n    public makeScaleVector(vec: InVector3): Matrix4 {\r\n        return this.makeScaleXYZ(vec.x, vec.y, vec.z);\r\n    }\r\n\r\n    /**\r\n     * 设置切变矩阵\r\n     * @param x\r\n     * @param y\r\n     * @param z\r\n     */\r\n    public makeShearXYZ(x: number, y: number, z: number): Matrix4 {\r\n        this.set(\r\n            1, y, z, 0,\r\n            x, 1, z, 0,\r\n            x, y, 1, 0,\r\n            0, 0, 0, 1,\r\n        );\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置切变矩阵\r\n     * @param vec\r\n     */\r\n    public makeShearVector(vec: InVector3): Matrix4 {\r\n        return this.makeShearXYZ(vec.x, vec.y, vec.z);\r\n    }\r\n\r\n    /**\r\n     * 设置3x3矩阵\r\n     * @param matrix3\r\n     */\r\n    public makeMatrix3(matrix3: Matrix3): Matrix4 {\r\n        this.elements[0] = matrix3.elements[0];\r\n        this.elements[1] = matrix3.elements[1];\r\n        this.elements[2] = matrix3.elements[2];\r\n        this.elements[4] = matrix3.elements[3];\r\n        this.elements[5] = matrix3.elements[4];\r\n        this.elements[6] = matrix3.elements[5];\r\n        this.elements[8] = matrix3.elements[6];\r\n        this.elements[9] = matrix3.elements[7];\r\n        this.elements[10] = matrix3.elements[8];\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置矩阵的位置，旋转，缩放\r\n     * @param position\r\n     * @param quaternion\r\n     * @param scale\r\n     */\r\n    public compose(position: InVector3, quaternion: Quaternion, scale: InVector3): Matrix4 {\r\n\r\n        const te = this.elements;\r\n\r\n        const x = quaternion.x; const y = quaternion.y; const z = quaternion.z; const w = quaternion.w;\r\n        const x2 = x + x; const\ty2 = y + y; const z2 = z + z;\r\n        const xx = x * x2; const xy = x * y2; const xz = x * z2;\r\n        const yy = y * y2; const yz = y * z2; const zz = z * z2;\r\n        const wx = w * x2; const wy = w * y2; const wz = w * z2;\r\n\r\n        const sx = scale.x; const sy = scale.y; const sz = scale.z;\r\n\r\n        te[0] = (1 - (yy + zz)) * sx;\r\n        te[1] = (xy + wz) * sx;\r\n        te[2] = (xz - wy) * sx;\r\n        te[3] = 0;\r\n\r\n        te[4] = (xy - wz) * sy;\r\n        te[5] = (1 - (xx + zz)) * sy;\r\n        te[6] = (yz + wx) * sy;\r\n        te[7] = 0;\r\n\r\n        te[8] = (xz + wy) * sz;\r\n        te[9] = (yz - wx) * sz;\r\n        te[10] = (1 - (xx + yy)) * sz;\r\n        te[11] = 0;\r\n\r\n        te[12] = position.x;\r\n        te[13] = position.y;\r\n        te[14] = position.z;\r\n        te[15] = 1;\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 分解矩阵\r\n     * @param position\r\n     * @param quaternion\r\n     * @param scale\r\n     */\r\n    public decompose(position: Nullable<Vector3>, quaternion: Nullable<Quaternion>, scale: Nullable<Vector3>): Matrix4 {\r\n\r\n        const te = this.elements;\r\n\r\n        let sx = MathTmp.Vector3[0].set(te[ 0 ], te[ 1 ], te[ 2 ]).length();\r\n        const sy = MathTmp.Vector3[0].set(te[ 4 ], te[ 5 ], te[ 6 ]).length();\r\n        const sz = MathTmp.Vector3[0].set(te[ 8 ], te[ 9 ], te[ 10 ]).length();\r\n\r\n        // if determine is negative, we need to invert one scale\r\n        const det = this.determinant();\r\n        if (det < 0) { sx = -sx; }\r\n\r\n        if (position) {\r\n            position.x = te[12];\r\n            position.y = te[13];\r\n            position.z = te[14];\r\n        }\r\n\r\n        // scale the rotation part\r\n        MathTmp.Matrix4[0].copy(this);\r\n\r\n        const invSX = 1 / sx;\r\n        const invSY = 1 / sy;\r\n        const invSZ = 1 / sz;\r\n\r\n        MathTmp.Matrix4[0].elements[ 0 ] *= invSX;\r\n        MathTmp.Matrix4[0].elements[ 1 ] *= invSX;\r\n        MathTmp.Matrix4[0].elements[ 2 ] *= invSX;\r\n\r\n        MathTmp.Matrix4[0].elements[ 4 ] *= invSY;\r\n        MathTmp.Matrix4[0].elements[ 5 ] *= invSY;\r\n        MathTmp.Matrix4[0].elements[ 6 ] *= invSY;\r\n\r\n        MathTmp.Matrix4[0].elements[ 8 ] *= invSZ;\r\n        MathTmp.Matrix4[0].elements[ 9 ] *= invSZ;\r\n        MathTmp.Matrix4[0].elements[ 10 ] *= invSZ;\r\n\r\n        if (quaternion) {\r\n            quaternion.setFromRotationMatrix(MathTmp.Matrix4[0]);\r\n        }\r\n\r\n        if (scale) {\r\n            scale.x = sx;\r\n            scale.y = sy;\r\n            scale.z = sz;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 构造投影矩阵\r\n     * @param left\r\n     * @param right\r\n     * @param top\r\n     * @param bottom\r\n     * @param near\r\n     * @param far\r\n     */\r\n    public makePerspective(left: number, right: number, top: number, bottom: number, near: number, far: number): Matrix4 {\r\n\r\n        const te = this.elements;\r\n        const x = 2 * near / (right - left);\r\n        const y = 2 * near / (top - bottom);\r\n\r\n        const a = (right + left) / (right - left);\r\n        const b = (top + bottom) / (top - bottom);\r\n        const c = -(far + near) / (far - near);\r\n        const d = -2 * far * near / (far - near);\r\n\r\n        te[0] = x;\r\n        te[1] = 0;\r\n        te[2] = 0;\r\n        te[3] = 0;\r\n        te[4] = 0;\r\n        te[5] = y;\r\n        te[6] = 0;\r\n        te[7] = 0;\r\n        te[8] = a;\r\n        te[9] = b;\r\n        te[10] = c;\r\n        te[11] = -1;\r\n        te[12] = 0;\r\n        te[13] = 0;\r\n        te[14] = d;\r\n        te[15] = 0;\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 构造无限远投影矩阵\r\n     * @param left\r\n     * @param right\r\n     * @param top\r\n     * @param bottom\r\n     * @param near\r\n     */\r\n    public makeInfinitePerspective(left: number, right: number, top: number, bottom: number, near: number): Matrix4 {\r\n\r\n        const te = this.elements;\r\n        const x = 2 * near / (right - left);\r\n        const y = 2 * near / (top - bottom);\r\n\r\n        const a = (right + left) / (right - left);\r\n        const b = (top + bottom) / (top - bottom);\r\n        const c = -1;\r\n        const d = -2 * near;\r\n\r\n        te[0] = x;\r\n        te[1] = 0;\r\n        te[2] = 0;\r\n        te[3] = 0;\r\n        te[4] = 0;\r\n        te[5] = y;\r\n        te[6] = 0;\r\n        te[7] = 0;\r\n        te[8] = a;\r\n        te[9] = b;\r\n        te[10] = c;\r\n        te[11] = -1;\r\n        te[12] = 0;\r\n        te[13] = 0;\r\n        te[14] = d;\r\n        te[15] = 0;\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 构造正交矩阵\r\n     * @param left\r\n     * @param right\r\n     * @param top\r\n     * @param bottom\r\n     * @param near\r\n     * @param far\r\n     */\r\n    public makeOrthographic(left: number, right: number, top: number, bottom: number, near: number, far: number): Matrix4 {\r\n\r\n        const te = this.elements;\r\n        const w = 1.0 / (right - left);\r\n        const h = 1.0 / (top - bottom);\r\n        const p = 1.0 / (far - near);\r\n\r\n        const x = (right + left) * w;\r\n        const y = (top + bottom) * h;\r\n        const z = (far + near) * p;\r\n\r\n        te[0] = 2 * w;\tte[4] = 0;\tte[8] = 0;\tte[12] = -x;\r\n        te[1] = 0;\tte[5] = 2 * h;\tte[9] = 0;\tte[13] = -y;\r\n        te[2] = 0;\tte[6] = 0;\tte[10] = -2 * p;\tte[14] = -z;\r\n        te[3] = 0;\tte[7] = 0;\tte[11] = 0;\tte[15] = 1;\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 构造视口矩阵\r\n     * @param x\r\n     * @param y\r\n     * @param width\r\n     * @param height\r\n     * @param nearDepthRange\r\n     * @param farDepthRange\r\n     */\r\n    public makeViewportTransformation(x: number, y: number, width: number, height: number, nearDepthRange: number = 1.0, farDepthRange: number = 1.0): Matrix4 {\r\n\r\n        const halfWidth = width * 0.5;\r\n        const halfHeight = height * 0.5;\r\n        const halfDepth = (farDepthRange - nearDepthRange) * 0.5;\r\n\r\n        const column0Row0 = halfWidth;\r\n        const column1Row1 = halfHeight;\r\n        const column2Row2 = halfDepth;\r\n        const column3Row0 = x + halfWidth;\r\n        const column3Row1 = y + halfHeight;\r\n        const column3Row2 = nearDepthRange + halfDepth;\r\n        const column3Row3 = 1.0;\r\n\r\n        const te = this.elements;\r\n\r\n        te[0] = column0Row0;\r\n        te[1] = 0.0;\r\n        te[2] = 0.0;\r\n        te[3] = 0.0;\r\n        te[4] = 0.0;\r\n        te[5] = column1Row1;\r\n        te[6] = 0.0;\r\n        te[7] = 0.0;\r\n        te[8] = 0.0;\r\n        te[9] = 0.0;\r\n        te[10] = column2Row2;\r\n        te[11] = 0.0;\r\n        te[12] = column3Row0;\r\n        te[13] = column3Row1;\r\n        te[14] = column3Row2;\r\n        te[15] = column3Row3;\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 构造视图矩阵\r\n     * @param position\r\n     * @param direction\r\n     * @param up\r\n     * @param right\r\n     */\r\n    public makeView(position: InVector3, direction: InVector3, up: InVector3, right: InVector3): Matrix4 {\r\n\r\n        const te = this.elements;\r\n\r\n        te[0] = right.x;\r\n        te[1] = up.x;\r\n        te[2] = -direction.x;\r\n        te[3] = 0.0;\r\n\r\n        te[4] = right.y;\r\n        te[5] = up.y;\r\n        te[6] = -direction.y;\r\n        te[7] = 0.0;\r\n\r\n        te[8] = right.z;\r\n        te[9] = up.z;\r\n        te[10] = -direction.z;\r\n        te[11] = 0.0;\r\n\r\n        te[12] = -right.dot(position);\r\n        te[13] = -up.dot(position);\r\n        te[14] = direction.dot(position);\r\n        te[15] = 1.0;\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Buffer属性乘以当前矩阵\r\n     * @param attribute\r\n     */\r\n    public applyToBufferAttribute(attribute: BufferAttribute): BufferAttribute {\r\n        for (let i = 0, l = attribute.count; i < l; i++) {\r\n            MathTmp.Vector3[0].x = attribute.getX(i);\r\n            MathTmp.Vector3[0].y = attribute.getY(i);\r\n            MathTmp.Vector3[0].z = attribute.getZ(i);\r\n            MathTmp.Vector3[0].applyMatrix4(this);\r\n            attribute.setXYZ(i, MathTmp.Vector3[0].x, MathTmp.Vector3[0].y, MathTmp.Vector3[0].z);\r\n        }\r\n        return attribute;\r\n    }\r\n\r\n    /**\r\n     * 是否相等\r\n     * @param matrix4\r\n     * @returns {boolean}\r\n     */\r\n    public equals(matrix4: InMatrix4): boolean {\r\n        const te = this.elements;\r\n        const me = matrix4.elements;\r\n        for (let i = 0; i < 16; i++) {\r\n            if (te[i] != me[i]) { return false; }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 是否近似相等\r\n     * @param right\r\n     * @param relativeEpsilon\r\n     * @param absoluteEpsilon\r\n     */\r\n    public equalsEpsilon(right: InMatrix4, relativeEpsilon: number, absoluteEpsilon: Nullable<number> = null): boolean {\r\n        const te = this.elements;\r\n        const me = right.elements;\r\n        for (let i = 0; i < 16; i++) {\r\n            if (!MathUtils.equalsEpsilon(te[i], me[i], relativeEpsilon, absoluteEpsilon)) { return false; }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 从数组复制\r\n     * @param array\r\n     * @param offset\r\n     */\r\n    public fromArray(array: FloatArray, offset = 0): Matrix4 {\r\n        for (let i = 0; i < 16; i++) {\r\n            this.elements[i] = array[i + offset];\r\n        }\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 复制到数组\r\n     * @param array\r\n     * @param offset\r\n     */\r\n    public toArray(array: FloatArray = [], offset = 0): FloatArray {\r\n        const te = this.elements;\r\n\r\n        array[offset] = te[0];\r\n        array[offset + 1] = te[1];\r\n        array[offset + 2] = te[2];\r\n        array[offset + 3] = te[3];\r\n\r\n        array[offset + 4] = te[4];\r\n        array[offset + 5] = te[5];\r\n        array[offset + 6] = te[6];\r\n        array[offset + 7] = te[7];\r\n\r\n        array[offset + 8] = te[8];\r\n        array[offset + 9] = te[9];\r\n        array[offset + 10] = te[10];\r\n        array[offset + 11] = te[11];\r\n\r\n        array[offset + 12] = te[12];\r\n        array[offset + 13] = te[13];\r\n        array[offset + 14] = te[14];\r\n        array[offset + 15] = te[15];\r\n\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * 从二进制复制\r\n     * @param dataBuffer\r\n     */\r\n    public fromDataBuffer(dataBuffer: BinaryBuffer): Matrix4 {\r\n        for (let i = 0; i < 16; i++) {\r\n            this.elements[i] = dataBuffer.readFloat32();\r\n        }\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 复制到二进制\r\n     * @param dataBuffer\r\n     */\r\n    public toDataBuffer(dataBuffer: BinaryBuffer): Matrix4 {\r\n        for (let i = 0; i < 16; i++) {\r\n            dataBuffer.writeFloat32(this.elements[i]);\r\n        }\r\n        return this;\r\n    }\r\n}\r\n",
        "import { DeepImmutable, FloatArray, int, Nullable } from \"../types\";\r\nimport { InVector3, Vector3 } from \"./Vector3\";\r\nimport { Matrix4 } from \"./Matrix4\";\r\nimport { BinaryBuffer, BufferAttribute } from \"../Misc\";\r\nimport { Quaternion } from \"./Quaternion\";\r\nimport { MathUtils } from \"./MathUtils\";\r\nimport { MathTmp } from \"./MathTmp\";\r\n\r\ntype InMatrix3 = Matrix3 | DeepImmutable<Matrix3>;\r\n\r\n/**\r\n * 3x3矩阵\r\n * @category Math\r\n */\r\nexport class Matrix3 {\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    private static _identityReadOnly = new Matrix3() as DeepImmutable<Matrix3>;\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _notify: boolean;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _onNotify: any;\r\n\r\n    /**\r\n     * 内部元素\r\n     */\r\n    public elements: number[];\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param elements\r\n     */\r\n    constructor(elements: number[] = []) {\r\n        this._notify = true;\r\n        this._onNotify = null;\r\n\r\n        this.elements = [\r\n            1, 0, 0,\r\n            0, 1, 0,\r\n            0, 0, 1,\r\n        ];\r\n        if (elements.length > 0) {\r\n            this.fromArray(elements);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建对象\r\n     */\r\n    public static Build() {\r\n        return new Matrix3();\r\n    }\r\n\r\n    /**\r\n     * 计算元素索引\r\n     * @param column\r\n     * @param row\r\n     */\r\n    public static getElementIndex(column: int, row: int): int {\r\n        return column * 3 + row;\r\n    }\r\n\r\n    /**\r\n     * 单位矩阵\r\n     */\r\n    public static get IDENTITY(): DeepImmutable<Matrix3> {\r\n        return Matrix3._identityReadOnly;\r\n    }\r\n\r\n    /**\r\n     * 通知回调\r\n     */\r\n    public get notify() {\r\n        return this._notify;\r\n    }\r\n    public set notify(value: boolean) {\r\n        this._notify = value;\r\n    }\r\n\r\n    /**\r\n     * 设置通知回调\r\n     */\r\n    public setNotifyFunc(value: any): Matrix3 {\r\n        this._onNotify = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 触发通知\r\n     */\r\n    private triggerNotify(): void {\r\n        if (this._notify) {\r\n            if (this._onNotify) {\r\n                this._onNotify();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置矩阵参数\r\n     * @param n11\r\n     * @param n12\r\n     * @param n13\r\n     * @param n21\r\n     * @param n22\r\n     * @param n23\r\n     * @param n31\r\n     * @param n32\r\n     * @param n33\r\n     */\r\n    public set(n11: number, n12: number, n13: number, n21: number, n22: number, n23: number, n31: number, n32: number, n33: number): Matrix3 {\r\n\r\n        const te = this.elements;\r\n        te[0] = n11; te[1] = n21; te[2] = n31;\r\n        te[3] = n12; te[4] = n22; te[5] = n32;\r\n        te[6] = n13; te[7] = n23; te[8] = n33;\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 是否单位矩阵\r\n     */\r\n    public isIdentity(): boolean {\r\n        return this.equals(Matrix3.IDENTITY);\r\n    }\r\n\r\n    /**\r\n     * 单位化矩阵\r\n     */\r\n    public identity(): Matrix3 {\r\n        this.set(\r\n            1, 0, 0,\r\n            0, 1, 0,\r\n            0, 0, 1,\r\n        );\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): Matrix3 {\r\n        return new Matrix3().copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param matrix3\r\n     */\r\n    public copy(matrix3: InMatrix3): Matrix3 {\r\n        const te = this.elements;\r\n        const me = matrix3.elements;\r\n        te[0] = me[0]; te[1] = me[1]; te[2] = me[2];\r\n        te[3] = me[3]; te[4] = me[4]; te[5] = me[5];\r\n        te[6] = me[6]; te[7] = me[7]; te[8] = me[8];\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置绕X轴旋转\r\n     * @param angle\r\n     */\r\n    public setFromRotationX(angle: number): Matrix3 {\r\n        const cosAngle = Math.cos(angle);\r\n        const sinAngle = Math.sin(angle);\r\n\r\n        const te = this.elements;\r\n\r\n        te[0] = 1.0;\r\n        te[1] = 0.0;\r\n        te[2] = 0.0;\r\n        te[3] = 0.0;\r\n        te[4] = cosAngle;\r\n        te[5] = sinAngle;\r\n        te[6] = 0.0;\r\n        te[7] = -sinAngle;\r\n        te[8] = cosAngle;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置绕Y轴旋转\r\n     * @param angle\r\n     */\r\n    public setFromRotationY(angle: number): Matrix3 {\r\n        const cosAngle = Math.cos(angle);\r\n        const sinAngle = Math.sin(angle);\r\n\r\n        const te = this.elements;\r\n\r\n        te[0] = cosAngle;\r\n        te[1] = sinAngle;\r\n        te[2] = 0.0;\r\n        te[3] = -sinAngle;\r\n        te[4] = cosAngle;\r\n        te[5] = 0.0;\r\n        te[6] = 0.0;\r\n        te[7] = 0.0;\r\n        te[8] = 1.0;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置绕Z轴旋转\r\n     * @param angle\r\n     */\r\n    public setFromRotationZ(angle: number): Matrix3 {\r\n        const cosAngle = Math.cos(angle);\r\n        const sinAngle = Math.sin(angle);\r\n\r\n        const te = this.elements;\r\n\r\n        te[0] = cosAngle;\r\n        te[1] = 0.0;\r\n        te[2] = -sinAngle;\r\n        te[3] = 0.0;\r\n        te[4] = 1.0;\r\n        te[5] = 0.0;\r\n        te[6] = sinAngle;\r\n        te[7] = 0.0;\r\n        te[8] = cosAngle;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置Matrix4矩阵\r\n     * @param matrix4\r\n     */\r\n    public setFromMatrix4(matrix4: Matrix4): Matrix3 {\r\n        const me = matrix4.elements;\r\n        this.set(\r\n            me[0], me[4], me[8],\r\n            me[1], me[5], me[9],\r\n            me[2], me[6], me[10],\r\n        );\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 提取XYZ轴\r\n     * @param xAxis\r\n     * @param yAxis\r\n     * @param zAxis\r\n     */\r\n    public extractBasis(xAxis = new Vector3(), yAxis = new Vector3(), zAxis = new Vector3()): Matrix3 {\r\n        const te = this.elements;\r\n        xAxis.fromArray(te, 0);\r\n        yAxis.fromArray(te, 3);\r\n        zAxis.fromArray(te, 6);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置XYZ轴\r\n     * @param xAxis\r\n     * @param yAxis\r\n     * @param zAxis\r\n     */\r\n    public makeBasis(xAxis: InVector3, yAxis: InVector3, zAxis: InVector3): Matrix3 {\r\n        this.set(\r\n            xAxis.x, yAxis.x, zAxis.x,\r\n            xAxis.y, yAxis.y, zAxis.y,\r\n            xAxis.z, yAxis.z, zAxis.z,\r\n        );\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取X轴\r\n     * @param x\r\n     */\r\n    public getX(x = new Vector3()): Vector3 {\r\n        return x.set(this.elements[0], this.elements[1], this.elements[2]);\r\n    }\r\n\r\n    /**\r\n     * 获取Y轴\r\n     * @param y\r\n     */\r\n    public getY(y = new Vector3()): Vector3 {\r\n        return y.set(this.elements[3], this.elements[4], this.elements[5]);\r\n    }\r\n\r\n    /**\r\n     * 获取Z轴\r\n     * @param z\r\n     */\r\n    public getZ(z = new Vector3()): Vector3 {\r\n        return z.set(this.elements[6], this.elements[7], this.elements[8]);\r\n    }\r\n\r\n    /**\r\n     * 获取单个分量\r\n     * @param column\r\n     * @param row\r\n     */\r\n    public getElement(column: int, row: int): number {\r\n        const index = Matrix3.getElementIndex(column, row);\r\n        return this.elements[index];\r\n    }\r\n\r\n    /**\r\n     * 设置单个分量\r\n     * @param column\r\n     * @param row\r\n     * @param value\r\n     */\r\n    public setElement(column: int, row: int, value: number): Matrix3 {\r\n        const index = Matrix3.getElementIndex(column, row);\r\n        this.elements[index] = value;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取列\r\n     * @param index\r\n     * @param vec3\r\n     */\r\n    public getColumn(index: int, vec3 = new Vector3()): Vector3 {\r\n        const startIndex = index * 3;\r\n        const x = this.elements[startIndex];\r\n        const y = this.elements[startIndex + 1];\r\n        const z = this.elements[startIndex + 2];\r\n\r\n        vec3.x = x;\r\n        vec3.y = y;\r\n        vec3.z = z;\r\n        return vec3;\r\n    }\r\n\r\n    /**\r\n     * 设置列\r\n     * @param index\r\n     * @param vec3\r\n     */\r\n    public setColumn(index: int, vec3: InVector3): Matrix3 {\r\n        const startIndex = index * 3;\r\n        this.elements[startIndex] = vec3.x;\r\n        this.elements[startIndex + 1] = vec3.y;\r\n        this.elements[startIndex + 2] = vec3.z;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取行\r\n     * @param index\r\n     * @param vec3\r\n     * @returns {Vector3}\r\n     * @memberOf Matrix3.prototype\r\n     */\r\n    public getRow(index: int, vec3 = new Vector3()): Vector3 {\r\n        const x = this.elements[index];\r\n        const y = this.elements[index + 3];\r\n        const z = this.elements[index + 6];\r\n        vec3.x = x;\r\n        vec3.y = y;\r\n        vec3.z = z;\r\n        return vec3;\r\n    }\r\n\r\n    /**\r\n     * 设置行\r\n     * @param index\r\n     * @param vec3\r\n     */\r\n    public setRow(index: int, vec3: InVector3): Matrix3 {\r\n        this.elements[index] = vec3.x;\r\n        this.elements[index + 3] = vec3.y;\r\n        this.elements[index + 6] = vec3.z;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 生成缩放矩阵\r\n     * @param x\r\n     * @param y\r\n     * @param z\r\n     */\r\n    public makeScale(x: number, y: number, z: number): Matrix3 {\r\n        this.set(\r\n            x, 0, 0,\r\n            0, y, 0,\r\n            0, 0, z,\r\n        );\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 乘以Matrix3矩阵\r\n     * @param matrix3\r\n     */\r\n    public multiply(matrix3: InMatrix3): Matrix3 {\r\n        return this.multiplyMatrices(this, matrix3);\r\n    }\r\n\r\n    /**\r\n     * 被Matrix3乘以\r\n     * @param matrix3\r\n     */\r\n    public premultiply(matrix3: InMatrix3) {\r\n        return this.multiplyMatrices(matrix3, this);\r\n    }\r\n\r\n    /**\r\n     * 两个矩阵相乘\r\n     * @param aMat\r\n     * @param bMat\r\n     */\r\n    public multiplyMatrices(aMat: InMatrix3, bMat: InMatrix3): Matrix3 {\r\n        const ae = aMat.elements;\r\n        const be = bMat.elements;\r\n        const te = this.elements;\r\n\r\n        const a11 = ae[0]; const a12 = ae[3]; const a13 = ae[6];\r\n        const a21 = ae[1]; const a22 = ae[4]; const a23 = ae[7];\r\n        const a31 = ae[2]; const a32 = ae[5]; const a33 = ae[8];\r\n\r\n        const b11 = be[0]; const b12 = be[3]; const b13 = be[6];\r\n        const b21 = be[1]; const b22 = be[4]; const b23 = be[7];\r\n        const b31 = be[2]; const b32 = be[5]; const b33 = be[8];\r\n\r\n        te[0] = a11 * b11 + a12 * b21 + a13 * b31;\r\n        te[3] = a11 * b12 + a12 * b22 + a13 * b32;\r\n        te[6] = a11 * b13 + a12 * b23 + a13 * b33;\r\n\r\n        te[1] = a21 * b11 + a22 * b21 + a23 * b31;\r\n        te[4] = a21 * b12 + a22 * b22 + a23 * b32;\r\n        te[7] = a21 * b13 + a22 * b23 + a23 * b33;\r\n\r\n        te[2] = a31 * b11 + a32 * b21 + a33 * b31;\r\n        te[5] = a31 * b12 + a32 * b22 + a33 * b32;\r\n        te[8] = a31 * b13 + a32 * b23 + a33 * b33;\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 乘以标量\r\n     * @param scalar\r\n     */\r\n    public multiplyScalar(scalar: number): Matrix3 {\r\n        const te = this.elements;\r\n        te[0] *= scalar; te[3] *= scalar; te[6] *= scalar;\r\n        te[1] *= scalar; te[4] *= scalar; te[7] *= scalar;\r\n        te[2] *= scalar; te[5] *= scalar; te[8] *= scalar;\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 乘以标量Vector3\r\n     * @param vec\r\n     */\r\n    public multiplyScalarVector(vec: InVector3): Matrix3 {\r\n        const te = this.elements;\r\n        te[0] *= vec.x;\r\n        te[1] *= vec.x;\r\n        te[2] *= vec.x;\r\n        te[3] *= vec.y;\r\n        te[4] *= vec.y;\r\n        te[5] *= vec.y;\r\n        te[6] *= vec.z;\r\n        te[7] *= vec.z;\r\n        te[8] *= vec.z;\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取行列式\r\n     * @returns {number}\r\n     */\r\n    public determinant(): number {\r\n        const te = this.elements;\r\n        const a = te[0]; const b = te[1]; const c = te[2];\r\n        const d = te[3]; const e = te[4]; const f = te[5];\r\n        const g = te[6]; const h = te[7]; const i = te[8];\r\n        return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\r\n    }\r\n\r\n    /**\r\n     * 转逆矩阵\r\n     */\r\n    public inverse(): Matrix3 {\r\n        return this.getInverse(this);\r\n    }\r\n\r\n    /**\r\n     * 取Matrix3的逆矩阵\r\n     * @param matrix3\r\n     */\r\n    public getInverse(matrix3: InMatrix3): Matrix3 {\r\n\r\n        const me = matrix3.elements;\r\n        const te = this.elements;\r\n\r\n        const n11 = me[0]; const n21 = me[1]; const n31 = me[2];\r\n        const n12 = me[3]; const n22 = me[4]; const n32 = me[5];\r\n        const n13 = me[6]; const n23 = me[7]; const n33 = me[8];\r\n\r\n        const t11 = n33 * n22 - n32 * n23;\r\n        const t12 = n32 * n13 - n33 * n12;\r\n        const t13 = n23 * n12 - n22 * n13;\r\n\r\n        const det = n11 * t11 + n21 * t12 + n31 * t13;\r\n\r\n        if (det == 0) {\r\n            return this.identity();\r\n        }\r\n\r\n        const detInv = 1 / det;\r\n\r\n        te[0] = t11 * detInv;\r\n        te[1] = (n31 * n23 - n33 * n21) * detInv;\r\n        te[2] = (n32 * n21 - n31 * n22) * detInv;\r\n\r\n        te[3] = t12 * detInv;\r\n        te[4] = (n33 * n11 - n31 * n13) * detInv;\r\n        te[5] = (n31 * n12 - n32 * n11) * detInv;\r\n\r\n        te[6] = t13 * detInv;\r\n        te[7] = (n21 * n13 - n23 * n11) * detInv;\r\n        te[8] = (n22 * n11 - n21 * n12) * detInv;\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 转置\r\n     */\r\n    public transpose(): Matrix3 {\r\n        let tmp;\r\n        let m = this.elements;\r\n        tmp = m[1]; m[1] = m[3]; m[3] = tmp;\r\n        tmp = m[2]; m[2] = m[6]; m[6] = tmp;\r\n        tmp = m[5]; m[5] = m[7]; m[7] = tmp;\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 取Matrix4的法线矩阵\r\n     * @param matrix4\r\n     */\r\n    public getNormalMatrix(matrix4: Matrix4) {\r\n        return this.setFromMatrix4(matrix4).getInverse(this).transpose();\r\n    }\r\n\r\n    /**\r\n     * 设置UV矩阵\r\n     * @param tx\r\n     * @param ty\r\n     * @param sx\r\n     * @param sy\r\n     * @param rotation\r\n     * @param cx\r\n     * @param cy\r\n     */\r\n    public setUvTransform(tx: number, ty: number, sx: number, sy: number, rotation: number, cx: number, cy: number): Matrix3 {\r\n        const c = Math.cos(rotation);\r\n        const s = Math.sin(rotation);\r\n        return this.set(\r\n            sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx,\r\n            -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty,\r\n            0, 0, 1,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 缩放矩阵\r\n     * @param x\r\n     * @param y\r\n     */\r\n    public scale(x: number, y: number): Matrix3 {\r\n        const te = this.elements;\r\n        const sx = x;\r\n        const sy = y;\r\n        te[0] *= sx; te[3] *= sx; te[6] *= sx;\r\n        te[1] *= sy; te[4] *= sy; te[7] *= sy;\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 旋转矩阵\r\n     * @param theta\r\n     */\r\n    public rotate(theta: number): Matrix3 {\r\n        const c = Math.cos(theta);\r\n        const s = Math.sin(theta);\r\n\r\n        const te = this.elements;\r\n\r\n        const a11 = te[0];\r\n        const a12 = te[3];\r\n        const a13 = te[6];\r\n        const a21 = te[1];\r\n        const a22 = te[4];\r\n        const a23 = te[7];\r\n\r\n        te[0] = c * a11 + s * a21;\r\n        te[3] = c * a12 + s * a22;\r\n        te[6] = c * a13 + s * a23;\r\n\r\n        te[1] = -s * a11 + c * a21;\r\n        te[4] = -s * a12 + c * a22;\r\n        te[7] = -s * a13 + c * a23;\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 平移矩阵\r\n     * @param x\r\n     * @param y\r\n     */\r\n    public translate(x: number, y: number): Matrix3 {\r\n        const te = this.elements;\r\n\r\n        const tx = x;\r\n        const ty = y;\r\n\r\n        te[0] += tx * te[2]; te[3] += tx * te[5]; te[6] += tx * te[8];\r\n        te[1] += ty * te[2]; te[4] += ty * te[5]; te[7] += ty * te[8];\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置四元数\r\n     * @param quaternion\r\n     */\r\n    public makeRotationFromQuaternion(quaternion: Quaternion): Matrix3 {\r\n        const te = this.elements;\r\n\r\n        const x = quaternion.x;\r\n        const y = quaternion.y;\r\n        const z = quaternion.z;\r\n        const w = quaternion.w;\r\n\r\n        const x2 = x + x;\r\n        const y2 = y + y;\r\n        const z2 = z + z;\r\n\r\n        const xx = x * x2;\r\n        const xy = x * y2;\r\n        const xz = x * z2;\r\n        const yy = y * y2;\r\n        const yz = y * z2;\r\n        const zz = z * z2;\r\n        const wx = w * x2;\r\n        const wy = w * y2;\r\n        const wz = w * z2;\r\n\r\n        te[0] = (1 - (yy + zz));\r\n        te[1] = (xy + wz);\r\n        te[2] = (xz - wy);\r\n\r\n        te[3] = (xy - wz);\r\n        te[4] = (1 - (xx + zz));\r\n        te[5] = (yz + wx);\r\n\r\n        te[6] = (xz + wy);\r\n        te[7] = (yz - wx);\r\n        te[8] = (1 - (xx + yy));\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 应用于Buffer属性\r\n     * @param attribute\r\n     */\r\n    public applyToBufferAttribute(attribute: BufferAttribute): BufferAttribute {\r\n        for (let i = 0, l = attribute.count; i < l; i++) {\r\n            MathTmp.Vector3[0].x = attribute.getX(i);\r\n            MathTmp.Vector3[0].y = attribute.getY(i);\r\n            MathTmp.Vector3[0].z = attribute.getZ(i);\r\n            MathTmp.Vector3[0].applyMatrix3(this);\r\n            attribute.setXYZ(i, MathTmp.Vector3[0].x, MathTmp.Vector3[0].y, MathTmp.Vector3[0].z);\r\n        }\r\n        return attribute;\r\n    }\r\n\r\n    /**\r\n     * 是否相等\r\n     * @param matrix3\r\n     * @returns {boolean}\r\n     */\r\n    public equals(matrix3: InMatrix3): boolean {\r\n        const te = this.elements;\r\n        const me = matrix3.elements;\r\n        for (let i = 0; i < 9; i++) {\r\n            if (te[i] != me[i]) { return false; }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 是否近似相等\r\n     * @param right\r\n     * @param relativeEpsilon\r\n     * @param absoluteEpsilon\r\n     */\r\n    public equalsEpsilon(right: InMatrix3, relativeEpsilon: number, absoluteEpsilon: Nullable<number> = null): boolean {\r\n        const te = this.elements;\r\n        const me = right.elements;\r\n        for (let i = 0; i < 9; i++) {\r\n            if (!MathUtils.equalsEpsilon(te[i], me[i], relativeEpsilon, absoluteEpsilon)) { return false; }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 从数组复制\r\n     * @param array\r\n     * @param offset\r\n     */\r\n    public fromArray(array: FloatArray, offset = 0): Matrix3 {\r\n        for (let i = 0; i < 9; i++) {\r\n            this.elements[i] = array[i + offset];\r\n        }\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 复制到数组\r\n     * @param array\r\n     * @param offset\r\n     */\r\n    public toArray(array: FloatArray = [], offset = 0): FloatArray {\r\n        const te = this.elements;\r\n\r\n        array[offset] = te[0];\r\n        array[offset + 1] = te[1];\r\n        array[offset + 2] = te[2];\r\n\r\n        array[offset + 3] = te[3];\r\n        array[offset + 4] = te[4];\r\n        array[offset + 5] = te[5];\r\n\r\n        array[offset + 6] = te[6];\r\n        array[offset + 7] = te[7];\r\n        array[offset + 8] = te[8];\r\n\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * 从二进制复制\r\n     * @param dataBuffer\r\n     */\r\n    public fromDataBuffer(dataBuffer: BinaryBuffer): Matrix3 {\r\n        for (let i = 0; i < 9; i++) {\r\n            this.elements[i] = dataBuffer.readFloat32();\r\n        }\r\n\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 复制到二进制\r\n     * @param dataBuffer\r\n     */\r\n    public toDataBuffer(dataBuffer: BinaryBuffer): Matrix3 {\r\n        for (let i = 0; i < 9; i++) {\r\n            dataBuffer.writeFloat32(this.elements[i]);\r\n        }\r\n        return this;\r\n    }\r\n}\r\n",
        "/**\r\n * 相交类型\r\n * @category Math\r\n */\r\nexport enum IntervalsType {\r\n    /**\r\n     * 没有交集\r\n     */\r\n    isEmpty,\r\n    /**\r\n     * 间隔接触一个端点，[t0,t0]。\r\n     */\r\n    isPoint,\r\n    /**\r\n     * 相交的有限长度区间，[t0,t1]。\r\n     */\r\n    isFinite,\r\n    /**\r\n     * 交集的区间，[t0，+∞]。结果。重叠[0]是t0和结果。重叠[1]作为正确端点为+∞的消息是+1(您仍然需要结果类型来了解这种解释)。\r\n     */\r\n    isPositiveInfinite,\r\n    /**\r\n     * 相交的半无限区间，(-∞，t1)。结果。重叠[0]=1表示左端点为-∞(您仍然需要结果类型来了解这种解释)。结果。[1]是t1重叠。\r\n     */\r\n    isNegativeInfinite,\r\n    /**\r\n     * 动态查询都将类型设置为isDynamicQuery，因为查询查找第一次和最后一次联系的时间。\r\n     */\r\n    isDynamicQuery\r\n}\r\n\r\n/**\r\n * 求相交结果\r\n * @category Math\r\n */\r\nexport interface IntervalsResult {\r\n    intersect: boolean;\r\n    numIntersections: number;\r\n    overlap: number[];\r\n    type: IntervalsType;\r\n}\r\n\r\n/**\r\n * 求相交\r\n * @category Math\r\n */\r\nexport abstract class Intervals {\r\n\r\n    public static staticQuery(interval0: number[], interval1: number[]): IntervalsResult {\r\n\r\n        const result = {\r\n            intersect: false,\r\n            numIntersections: 0,\r\n            overlap: [0, 0],\r\n            type: IntervalsType.isEmpty\r\n        };\r\n\r\n        if (interval0[1] < interval1[0] || interval0[0] > interval1[1])\r\n        {\r\n            result.numIntersections = 0;\r\n            result.overlap[0] = 0;\r\n            result.overlap[1] = 0;\r\n            result.type = IntervalsType.isEmpty;\r\n        }\r\n        else if (interval0[1] > interval1[0])\r\n        {\r\n            if (interval0[0] < interval1[1])\r\n            {\r\n                result.overlap[0] = (interval0[0] < interval1[0] ? interval1[0] : interval0[0]);\r\n                result.overlap[1] = (interval0[1] > interval1[1] ? interval1[1] : interval0[1]);\r\n                if (result.overlap[0] < result.overlap[1])\r\n                {\r\n                    result.numIntersections = 2;\r\n                    result.type = IntervalsType.isFinite;\r\n                }\r\n                else\r\n                {\r\n                    result.numIntersections = 1;\r\n                    result.type = IntervalsType.isPoint;\r\n                }\r\n            }\r\n            else  // interval0[0] == interval1[1]\r\n            {\r\n                result.numIntersections = 1;\r\n                result.overlap[0] = interval0[0];\r\n                result.overlap[1] = result.overlap[0];\r\n                result.type = IntervalsType.isPoint;\r\n            }\r\n        }\r\n        else  // interval0[1] == interval1[0]\r\n        {\r\n            result.numIntersections = 1;\r\n            result.overlap[0] = interval0[1];\r\n            result.overlap[1] = result.overlap[0];\r\n            result.type = IntervalsType.isPoint;\r\n        }\r\n\r\n        result.intersect = (result.numIntersections > 0);\r\n\r\n        return result;\r\n    }\r\n}\r\n",
        "import { SphereSphereIntersectType } from \"../Enums/SphereSphereIntersectType\";\r\nimport { Vector3 } from \"./Vector3\";\r\nimport { FloatArray, Nullable } from \"../types\";\r\nimport { Box3 } from \"./Box3\";\r\nimport { Matrix4 } from \"./Matrix4\";\r\nimport { Triangle } from \"./Triangle\";\r\nimport { SphereSphereIntersect, SphereTriangleIntersect } from \"./InterfaceType/IntersectResult\";\r\nimport { MathTmp } from \"./MathTmp\";\r\n\r\n/**\r\n * 3D包围球\r\n * @category Math\r\n */\r\nexport class Sphere {\r\n\r\n    /**\r\n     * 中心点\r\n     */\r\n    public center: Vector3 = new Vector3();\r\n    /**\r\n     * 半径\r\n     */\r\n    public radius: number = 0;\r\n\r\n    /**\r\n     *构造函数\r\n     * @param center\r\n     * @param radius\r\n     */\r\n    constructor(center: Nullable<Vector3> = null, radius: Nullable<number> = null) {\r\n        if (center) {\r\n            this.center.copy(center);\r\n        }\r\n        if (radius) {\r\n            this.radius = radius;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建对象\r\n     * @constructor\r\n     */\r\n    public static Build() {\r\n        return new Sphere();\r\n    }\r\n\r\n    /**\r\n     * 设置中点和半径\r\n     * @param center\r\n     * @param radius\r\n     */\r\n    public set(center: Vector3, radius: number): Sphere {\r\n        this.center.copy(center);\r\n        this.radius = radius;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 从坐标数组计算包围球\r\n     * @param points\r\n     * @param optionalCenter\r\n     */\r\n    public setFromPoints(points: Vector3[], optionalCenter: Nullable<Vector3> = null): Sphere {\r\n\r\n        const center = this.center;\r\n\r\n        if (optionalCenter) {\r\n            center.copy(optionalCenter);\r\n        } else {\r\n            MathTmp.Box3[0].setFromPoints(points).getCenter(center);\r\n        }\r\n\r\n        let maxRadiusSq = 0;\r\n        for (let i = 0, il = points.length; i < il; i++) {\r\n            maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[ i ]));\r\n        }\r\n        this.radius = Math.sqrt(maxRadiusSq);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): Sphere {\r\n        return new Sphere().copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param sphere\r\n     */\r\n    public copy(sphere: Sphere): Sphere {\r\n        this.center.copy(sphere.center);\r\n        this.radius = sphere.radius;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 是否为空\r\n     */\r\n    public empty(): boolean {\r\n        return (this.radius <= 0);\r\n    }\r\n\r\n    /**\r\n     * 重置为空\r\n     */\r\n    public makeEmpty(): Sphere {\r\n        this.center.set(0, 0, 0);\r\n        this.radius = 0;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 是否包含点\r\n     * @param point\r\n     */\r\n    public containsPoint(point: Vector3): boolean {\r\n        return (point.distanceToSquared(this.center) <= (this.radius * this.radius));\r\n    }\r\n\r\n    /**\r\n     * 是否包含包围球\r\n     * @param sphere\r\n     */\r\n    public containsSphere(sphere: Sphere): boolean {\r\n        return this.containsPoint(sphere.center) && this.radius >= sphere.radius;\r\n    }\r\n\r\n    /**\r\n     * 是否包含包围盒\r\n     * @param box\r\n     */\r\n    public containsBox(box: Box3): boolean {\r\n        const sphere = new Sphere();\r\n        box.getBoundingSphere(sphere);\r\n        return this.containsSphere(sphere);\r\n    }\r\n\r\n    /**\r\n     * 球面到点的距离\r\n     * @param point\r\n     */\r\n    public distanceToPoint(point: Vector3): number {\r\n        return (point.distanceTo(this.center) - this.radius);\r\n    }\r\n\r\n    /**\r\n     * 是否与包围球相交\r\n     * @param sphere\r\n     */\r\n    public intersectsSphere(sphere: Sphere): boolean {\r\n        const radiusSum = this.radius + sphere.radius;\r\n        return sphere.center.distanceToSquared(this.center) <= (radiusSum * radiusSum);\r\n    }\r\n\r\n    /**\r\n     * 与包围球相交结果\r\n     * @param sphere\r\n     */\r\n    public intersectSphere(sphere: Sphere): SphereSphereIntersect {\r\n\r\n        const sphere0 = this;\r\n        const sphere1 = sphere;\r\n\r\n        const c1mC0 = MathTmp.Vector3[0].subVectors(sphere1.center, sphere0.center);\r\n        const sqrLen = c1mC0.dot(c1mC0);\r\n        const r0 = sphere0.radius, r1 = sphere1.radius;\r\n        const rSum = r0 + r1;\r\n        const rSumSqr = rSum * rSum;\r\n\r\n        if (sqrLen > rSumSqr) {\r\n            return {\r\n                intersect: false,\r\n                type: SphereSphereIntersectType.NONE\r\n            };\r\n        }\r\n\r\n        if (sqrLen == rSumSqr) {\r\n            return {\r\n                intersect: true,\r\n                type: SphereSphereIntersectType.POINT,\r\n                point: new Vector3().copy(sphere0.center).add(c1mC0.normalize().multiplyScalar(r0))\r\n            };\r\n        }\r\n\r\n        const rDif = r0 - r1;\r\n        const rDifSqr = rDif * rDif;\r\n        if (sqrLen < rDifSqr) {\r\n            return {\r\n                intersect: true,\r\n                type: (rDif <= 0 ? SphereSphereIntersectType.SPHERE : SphereSphereIntersectType.SPHERE1_IN_SPHERE0),\r\n                point: new Vector3().addVectors(sphere0.center, sphere1.center).multiplyScalar(0.5)\r\n            };\r\n        }\r\n\r\n        if (sqrLen == rDifSqr) {\r\n            const result = {\r\n                intersect: true,\r\n                type: 0,\r\n                point: new Vector3()\r\n            };\r\n            if (rDif <= 0) {\r\n                result.type = SphereSphereIntersectType.SPHERE0_IN_SPHERE1_POINT;\r\n                result.point.copy(sphere1.center).add(c1mC0.normalize().multiplyScalar(r1));\r\n            }\r\n            else {\r\n                result.type = SphereSphereIntersectType.SPHERE1_IN_SPHERE0_POINT;\r\n                result.point.copy(sphere0.center).add(c1mC0.normalize().multiplyScalar(r0));\r\n            }\r\n            return result;\r\n        }\r\n\r\n        // Compute t for which the circle of intersection has center\r\n        // K = C0 + t*(C1 - C0).\r\n        const t = (0.5) * (1 + rDif * rSum / sqrLen);\r\n\r\n        const result = {\r\n            intersect: true,\r\n            type: SphereSphereIntersectType.SPHERE,\r\n            circle: new Sphere()\r\n        };\r\n\r\n        // Compute the center and radius of the circle of intersection.\r\n        result.circle.center.copy(sphere0.center).add(MathTmp.Vector3[0].copy(c1mC0).multiplyScalar(t));\r\n        result.circle.radius = Math.sqrt(Math.max(r0 * r0 - t * t * sqrLen, 0));\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 是否与三角形相交\r\n     * @param triangle\r\n     */\r\n    public intersecsTriangle(triangle: Triangle): boolean {\r\n        const distance = triangle.distanceToPoint(this.center, MathTmp.Vector3[0]);\r\n        return distance < this.radius;\r\n    }\r\n\r\n    /**\r\n     * 与三角形相交结果\r\n     * @param triangle\r\n     */\r\n    public intersectTriangle(triangle: Triangle): SphereTriangleIntersect {\r\n\r\n        const closestPoint = new Vector3();\r\n        const distance = triangle.distanceToPoint(this.center, closestPoint);\r\n\r\n        return {\r\n            intersect: distance < this.radius,\r\n            point: closestPoint\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 限制坐标\r\n     * @param point\r\n     * @param target\r\n     */\r\n    public clampPoint(point: Vector3, target = new Vector3()): Vector3 {\r\n\r\n        const deltaLengthSq = this.center.distanceToSquared(point);\r\n\r\n        target.copy(point);\r\n\r\n        if (deltaLengthSq > (this.radius * this.radius)) {\r\n            target.sub(this.center).normalize();\r\n            target.multiplyScalar(this.radius).add(this.center);\r\n        }\r\n\r\n        return target;\r\n    }\r\n\r\n    /**\r\n     * 获取包围盒\r\n     * @param target\r\n     */\r\n    public getBoundingBox(target = new Box3()): Box3 {\r\n\r\n        target.set(this.center, this.center);\r\n        target.expandByScalar(this.radius);\r\n        return target;\r\n    }\r\n\r\n    /**\r\n     * 乘以Matrix4矩阵\r\n     * @param matrix\r\n     */\r\n    public applyMatrix4(matrix: Matrix4): Sphere {\r\n        this.center.applyMatrix4(matrix);\r\n        this.radius = this.radius * matrix.getMaxScaleOnAxis();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 平移包围球\r\n     * @param offset\r\n     */\r\n    public translate(offset: Vector3): Sphere {\r\n        this.center.add(offset);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 是否相等\r\n     * @param sphere\r\n     */\r\n    public equals(sphere: Sphere): boolean {\r\n        return sphere.center.equals(this.center) && (sphere.radius == this.radius);\r\n    }\r\n\r\n    /**\r\n     * 复制到数组\r\n     * @param array\r\n     * @param offset\r\n     */\r\n    public toArray(array: FloatArray, offset: number = 0): FloatArray {\r\n\r\n        this.center.toArray(array, offset);\r\n        array[offset + 3] = this.radius;\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * 从数组复制\r\n     * @param array\r\n     * @param offset\r\n     */\r\n    public fromArray(array: FloatArray = [], offset: number = 0): Sphere {\r\n\r\n        this.center.fromArray(array, offset);\r\n        this.radius = array[offset + 3];\r\n        return this;\r\n    }\r\n}\r\n",
        "export * from \"./Event\";\r\nexport * from \"./EventDispatcher\";\r\n",
        "import { BufferArray, int, Nullable } from \"../../types\";\r\nimport { Constants, GLConstants } from \"../../Engines\";\r\nimport { DataTypeFormat } from \"../../Misc/DataTypeFormat\";\r\nimport { ColorRGB } from \"../../Math/ColorRGB\";\r\nimport { ColorRGBA } from \"../../Math/ColorRGBA\";\r\nimport { Vector2 } from \"../../Math/Vector2\";\r\nimport { Vector3 } from \"../../Math/Vector3\";\r\nimport { Vector4 } from \"../../Math/Vector4\";\r\nimport { Matrix3 } from \"../../Math/Matrix3\";\r\nimport { Matrix4 } from \"../../Math/Matrix4\";\r\nimport { BinaryBuffer } from \"../../Misc/BinaryBuffer\";\r\nimport { BufferAttrUpdate } from \"./BufferAttrUpdate\";\r\nimport { GLDataBuffer } from \"../../Engines/GLDataBuffer\";\r\nimport { IDisposable } from \"../../Misc/IDisposable\";\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst _vector3 = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _vector2 = new Vector2();\r\n\r\n/**\r\n * Buffer属性JSON格式\r\n * @category Misc\r\n */\r\nexport interface BufferAttrJSON {\r\n    /**\r\n     * 类型\r\n     */\r\n    type: number;\r\n    /**\r\n     * 元素大小\r\n     */\r\n    itemSize: number;\r\n    /**\r\n     * 数据\r\n     */\r\n    array: number[];\r\n    /**\r\n     * 是否归一化\r\n     */\r\n    normalized: boolean;\r\n}\r\n\r\n/**\r\n * Buffer属性\r\n * @category Misc\r\n */\r\nexport class BufferAttribute implements IDisposable {\r\n\r\n    /**\r\n     * 名称\r\n     */\r\n    public name: string;\r\n    public type: number;\r\n    public count: int;\r\n    public itemSize: int;\r\n    public normalized: boolean;\r\n    public usage: number;\r\n    public updateRange: BufferAttrUpdate;\r\n    public array: BufferArray;\r\n    public target: number;\r\n\r\n    protected _version: number;\r\n    protected _reference: number;\r\n    protected _glBuffer: Nullable<GLDataBuffer>;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param array\r\n     * @param itemSize\r\n     * @param normalized\r\n     */\r\n    constructor(array: BufferArray, itemSize: number, normalized: boolean = false) {\r\n\r\n        this.name = '';\r\n        this.type = 0;\r\n\r\n        this.array = array;\r\n        this.itemSize = itemSize;\r\n        this.count = array != undefined ? array.length / itemSize : 0;\r\n        this.normalized = normalized;\r\n        this.type = DataTypeFormat.dataTypeFromTypedArray(array);\r\n        this.target = Constants.ArrayBufferTarget;\r\n        this.usage = Constants.StaticDrawUsage;\r\n        this.updateRange = {offset: 0, count: -1};\r\n\r\n        this._version = 0;\r\n        this._reference = 0;\r\n        this._glBuffer = null;\r\n    }\r\n\r\n    public get glBuffer() {\r\n        return this._glBuffer;\r\n    }\r\n    public set glBuffer(value) {\r\n        if (this._glBuffer != value) {\r\n            if (this._glBuffer) {\r\n                this._glBuffer.dispose();\r\n            }\r\n            this._glBuffer = value;\r\n            if (this._glBuffer) {\r\n                this._glBuffer.addReference();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 版本\r\n     */\r\n    public get version() {\r\n        return this._version;\r\n    }\r\n\r\n    /**\r\n     * 引用\r\n     */\r\n    public get reference() {\r\n        return this._reference;\r\n    }\r\n\r\n    /**\r\n     * 更新版本\r\n     */\r\n    public set needsUpdate(value: boolean) {\r\n        if (value) {\r\n            this._version++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 释放\r\n     */\r\n    public dispose(): void {\r\n        this._reference--;\r\n        if (this._reference == 0) {\r\n            if (this._glBuffer) {\r\n                this._glBuffer.dispose();\r\n                this._glBuffer = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 增加引用\r\n     */\r\n    public addReference(): void {\r\n        this._reference++;\r\n    }\r\n\r\n    /**\r\n     * 设置数据\r\n     * @param array\r\n     */\r\n    public setArray(array: BufferArray): BufferAttribute {\r\n        this.array = array;\r\n        this.count = this.array.length / this.itemSize;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置标志\r\n     * @param value\r\n     */\r\n    public setUsage(value: number): BufferAttribute {\r\n        this.usage = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): BufferAttribute {\r\n        return new BufferAttribute(this.array, this.itemSize, this.normalized).copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: BufferAttribute): BufferAttribute {\r\n        const type = DataTypeFormat.typedArrayFromDataType(source.type);\r\n\r\n        this.name = source.name;\r\n        this.itemSize = source.itemSize;\r\n        this.count = source.count;\r\n        this.normalized = source.normalized;\r\n        this.usage = source.usage;\r\n\r\n        if (type) {\r\n            this.array = new type(source.array);\r\n            this.type = source.type;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 指定位置复制\r\n     * @param index1\r\n     * @param attribute\r\n     * @param index2\r\n     */\r\n    public copyAt(index1: int, attribute: BufferAttribute, index2: int): BufferAttribute {\r\n        index1 *= this.itemSize;\r\n        index2 *= attribute.itemSize;\r\n        for (let i = 0, l = this.itemSize; i < l; i++) {\r\n            this.array[index1 + i] = attribute.array[index2 + i];\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 复制数组\r\n     * @param array\r\n     */\r\n    public copyArray(array: BufferArray): BufferAttribute {\r\n        this.array.set(array);\r\n        this.count = this.array.length / this.itemSize;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 复制颜色ColorRGB数组\r\n     * @param colors\r\n     */\r\n    public copyColorRGBsArray(colors: ColorRGB[]): BufferAttribute {\r\n        const array = this.array;\r\n\r\n        let offset = 0;\r\n        for (let i = 0, l = colors.length; i < l; i++) {\r\n            const color = colors[i];\r\n            array[offset++] = color.r;\r\n            array[offset++] = color.g;\r\n            array[offset++] = color.b;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 复制颜色ColorRGBA数组\r\n     * @param colors\r\n     */\r\n    public copyColorRGBAsArray(colors: ColorRGBA[]): BufferAttribute {\r\n        const array = this.array;\r\n        let offset = 0;\r\n\r\n        for (let i = 0, l = colors.length; i < l; i++) {\r\n            const color = colors[i];\r\n            array[offset++] = color.r;\r\n            array[offset++] = color.g;\r\n            array[offset++] = color.b;\r\n            array[offset++] = color.a;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 复制Vector2数组\r\n     * @param vectors\r\n     */\r\n    public copyVector2sArray(vectors: Vector2[]): BufferAttribute {\r\n        const array = this.array;\r\n        let offset = 0;\r\n\r\n        for (let i = 0, l = vectors.length; i < l; i++) {\r\n            const vector = vectors[i];\r\n            array[offset++] = vector.x;\r\n            array[offset++] = vector.y;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 复制Vector3数组\r\n     * @param vectors\r\n     */\r\n    public copyVector3sArray(vectors: Vector3[]): BufferAttribute {\r\n        const array = this.array;\r\n        let offset = 0;\r\n\r\n        for (let i = 0, l = vectors.length; i < l; i++) {\r\n            const vector = vectors[i];\r\n            array[offset++] = vector.x;\r\n            array[offset++] = vector.y;\r\n            array[offset++] = vector.z;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 复制Vector4数组\r\n     * @param vectors\r\n     */\r\n    public copyVector4sArray(vectors: Vector4[]): BufferAttribute {\r\n        const array = this.array;\r\n        let offset = 0;\r\n\r\n        for (let i = 0, l = vectors.length; i < l; i++) {\r\n            const vector = vectors[i];\r\n            array[offset++] = vector.x;\r\n            array[offset++] = vector.y;\r\n            array[offset++] = vector.z;\r\n            array[offset++] = vector.w;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 乘以Matrix3矩阵\r\n     * @param matrix3\r\n     */\r\n    public applyMatrix3(matrix3: Matrix3): BufferAttribute {\r\n\r\n        if (this.itemSize == 2) {\r\n\r\n            for (let i = 0, l = this.count; i < l; i++) {\r\n                _vector2.fromBufferAttribute(this, i);\r\n                _vector2.applyMatrix3(matrix3);\r\n                this.setXY(i, _vector2.x, _vector2.y);\r\n            }\r\n\r\n        } else if (this.itemSize == 3) {\r\n\r\n            for (let i = 0, l = this.count; i < l; i++) {\r\n                _vector3.fromBufferAttribute(this, i);\r\n                _vector3.applyMatrix3(matrix3);\r\n                this.setXYZ(i, _vector3.x, _vector3.y, _vector3.z);\r\n            }\r\n\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 乘以Matrix4矩阵\r\n     * @param matrix4\r\n     */\r\n    public applyMatrix4(matrix4: Matrix4): BufferAttribute {\r\n\r\n       if (this.itemSize == 3) {\r\n            for (let i = 0, l = this.count; i < l; i++) {\r\n                _vector3.fromBufferAttribute(this, i);\r\n                _vector3.applyMatrix4(matrix4);\r\n                this.setXYZ(i, _vector3.x, _vector3.y, _vector3.z);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 乘以法线矩阵\r\n     * @param matrix3\r\n     */\r\n    public applyNormalMatrix(matrix3: Matrix3): BufferAttribute {\r\n\r\n        if (this.itemSize == 3) {\r\n            for (let i = 0, l = this.count; i < l; i++) {\r\n                _vector3.fromBufferAttribute(this, i);\r\n                _vector3.applyNormalMatrix(matrix3);\r\n                this.setXYZ(i, _vector3.x, _vector3.y, _vector3.z);\r\n            }\r\n        }\r\n        return this;\r\n\r\n    }\r\n\r\n    /**\r\n     * 变换向量\r\n     * @param matrix4\r\n     */\r\n    public transformDirection(matrix4: Matrix4): BufferAttribute {\r\n\r\n        if (this.itemSize == 3) {\r\n            for (let i = 0, l = this.count; i < l; i++) {\r\n                _vector3.fromBufferAttribute(this, i);\r\n                matrix4.transformVector3(_vector3, _vector3);\r\n                this.setXYZ(i, _vector3.x, _vector3.y, _vector3.z);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 变换坐标\r\n     * @param matrix4\r\n     */\r\n    public transformPoint(matrix4: Matrix4): BufferAttribute {\r\n\r\n        if (this.itemSize == 3) {\r\n            for (let i = 0, l = this.count; i < l; i++) {\r\n                _vector3.fromBufferAttribute(this, i);\r\n                matrix4.transformPoint(_vector3, _vector3);\r\n                this.setXYZ(i, _vector3.x, _vector3.y, _vector3.z);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 指定位置获取Value\r\n     * @param offset\r\n     */\r\n    public get(offset: number): number {\r\n        return this.array[offset];\r\n    }\r\n\r\n    /**\r\n     * 指定位置设置Value\r\n     * @param value\r\n     * @param offset\r\n     */\r\n    public set(value: number[], offset: int = 0): BufferAttribute {\r\n        this.array.set(value, offset);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 根据itemSize指定位置获取X\r\n     * @param index\r\n     */\r\n    public getX(index: int): number {\r\n        return this.array[index * this.itemSize];\r\n    }\r\n\r\n    /**\r\n     * 根据itemSize指定位置设置X\r\n     * @param index\r\n     * @param x\r\n     */\r\n    public setX(index: int, x: number): BufferAttribute {\r\n        this.array[index * this.itemSize] = x;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 根据itemSize指定位置获取Y\r\n     * @param index\r\n     */\r\n    public getY(index: int): number {\r\n        return this.array[index * this.itemSize + 1];\r\n    }\r\n\r\n    /**\r\n     * 根据itemSize指定位置设置Y\r\n     * @param index\r\n     * @param y\r\n     */\r\n    public setY(index: int, y: number): BufferAttribute {\r\n        this.array[index * this.itemSize + 1] = y;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 根据itemSize指定位置获取Z\r\n     * @param index\r\n     */\r\n    public getZ(index: int): number {\r\n        return this.array[index * this.itemSize + 2];\r\n    }\r\n\r\n    /**\r\n     * 根据itemSize指定位置设置Z\r\n     * @param index\r\n     * @param z\r\n     */\r\n    public setZ(index: int, z: number): BufferAttribute {\r\n        this.array[index * this.itemSize + 2] = z;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 根据itemSize指定位置获取W\r\n     * @param index\r\n     */\r\n    public getW(index: int): number {\r\n        return this.array[index * this.itemSize + 3];\r\n    }\r\n\r\n    /**\r\n     * 根据itemSize指定位置设置W\r\n     * @param index\r\n     * @param W\r\n     */\r\n    public setW(index: int, W: number): BufferAttribute {\r\n        this.array[index * this.itemSize + 3] = W;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 根据itemSize指定位置设置XY\r\n     * @param index\r\n     * @param x\r\n     * @param y\r\n     */\r\n    public setXY(index: int, x: number, y: number): BufferAttribute {\r\n        index *= this.itemSize;\r\n        this.array[index + 0] = x;\r\n        this.array[index + 1] = y;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 根据itemSize指定位置设置XYZ\r\n     * @param index\r\n     * @param x\r\n     * @param y\r\n     * @param z\r\n     */\r\n    public setXYZ(index: int, x: number, y: number, z: number): BufferAttribute {\r\n        index *= this.itemSize;\r\n        this.array[index + 0] = x;\r\n        this.array[index + 1] = y;\r\n        this.array[index + 2] = z;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 根据itemSize指定位置设置XYZW\r\n     * @param index\r\n     * @param x\r\n     * @param y\r\n     * @param z\r\n     * @param w\r\n     */\r\n    public setXYZW(index: int, x: number, y: number, z: number, w: number): BufferAttribute {\r\n        index *= this.itemSize;\r\n        this.array[index + 0] = x;\r\n        this.array[index + 1] = y;\r\n        this.array[index + 2] = z;\r\n        this.array[index + 3] = w;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 转JSON\r\n     */\r\n    public toJSON(): BufferAttrJSON {\r\n        return {\r\n            itemSize: this.itemSize,\r\n            type: this.type,\r\n            array: Array.prototype.slice.call(this.array),\r\n            normalized: this.normalized,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public serializeBinary(dataBuffer: BinaryBuffer) {\r\n        dataBuffer.writeUint8(1);\r\n        dataBuffer.writeUint8(this.itemSize);\r\n        dataBuffer.writeBoolean(this.normalized);\r\n        dataBuffer.writeUint32(this.type);\r\n        dataBuffer.writeString(this.name);\r\n\r\n        dataBuffer.writeUint32(this.array.length);\r\n\r\n        switch (this.type) {\r\n            case Constants.ByteType:\r\n                for (let i = 0; i < this.array.length; ++i) {\r\n                    dataBuffer.writeInt8(this.array[i]);\r\n                }\r\n                break;\r\n            case Constants.UnsignedByteType:\r\n                for (let i = 0; i < this.array.length; ++i) {\r\n                    dataBuffer.writeUint8(this.array[i]);\r\n                }\r\n                break;\r\n            case Constants.ShortType:\r\n                for (let i = 0; i < this.array.length; ++i) {\r\n                    dataBuffer.writeInt16(this.array[i]);\r\n                }\r\n                break;\r\n            case Constants.UnsignedShortType:\r\n                for (let i = 0; i < this.array.length; ++i) {\r\n                    dataBuffer.writeUint16(this.array[i]);\r\n                }\r\n                break;\r\n            case Constants.IntType:\r\n                for (let i = 0; i < this.array.length; ++i) {\r\n                    dataBuffer.writeInt32(this.array[i]);\r\n                }\r\n                break;\r\n            case Constants.UnsignedIntType:\r\n                for (let i = 0; i < this.array.length; ++i) {\r\n                    dataBuffer.writeUint32(this.array[i]);\r\n                }\r\n                break;\r\n            case Constants.FloatType:\r\n                for (let i = 0; i < this.array.length; ++i) {\r\n                    dataBuffer.writeFloat32(this.array[i]);\r\n                }\r\n                break;\r\n            case Constants.DoubleType:\r\n                for (let i = 0; i < this.array.length; ++i) {\r\n                    dataBuffer.writeFloat64(this.array[i]);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 反序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public deserializeBinary(dataBuffer: BinaryBuffer) {\r\n\r\n        // @ts-ignore\r\n        const dataVersion = dataBuffer.readUint8();\r\n\r\n        this.itemSize = dataBuffer.readUint8();\r\n        this.normalized = dataBuffer.readBoolean();\r\n        this.type = dataBuffer.readUint32();\r\n        this.name = dataBuffer.readString();\r\n\r\n        const length = dataBuffer.readUint32();\r\n        this.count = length / this.itemSize;\r\n\r\n        switch (this.type) {\r\n            case Constants.ByteType:\r\n                this.array = new Int8Array(length);\r\n                for (let i = 0; i < length; ++i) {\r\n                    this.array[i] = dataBuffer.readInt8();\r\n                }\r\n                break;\r\n            case Constants.UnsignedByteType:\r\n                this.array = new Uint8Array(length);\r\n                for (let i = 0; i < length; ++i) {\r\n                    this.array[i] = dataBuffer.readUint8();\r\n                }\r\n                break;\r\n            case Constants.ShortType:\r\n                this.array = new Int8Array(length);\r\n                for (let i = 0; i < length; ++i) {\r\n                    this.array[i] = dataBuffer.readInt16();\r\n                }\r\n                break;\r\n            case Constants.UnsignedShortType:\r\n                this.array = new Int16Array(length);\r\n                for (let i = 0; i < length; ++i) {\r\n                    this.array[i] = dataBuffer.readUint16();\r\n                }\r\n                break;\r\n            case Constants.IntType:\r\n                this.array = new Int32Array(length);\r\n                for (let i = 0; i < length; ++i) {\r\n                    this.array[i] = dataBuffer.readInt32();\r\n                }\r\n                break;\r\n            case Constants.UnsignedIntType:\r\n                this.array = new Uint32Array(length);\r\n                for (let i = 0; i < length; ++i) {\r\n                    this.array[i] = dataBuffer.readUint32();\r\n                }\r\n                break;\r\n            case Constants.FloatType:\r\n                this.array = new Float32Array(length);\r\n                for (let i = 0; i < length; ++i) {\r\n                    this.array[i] = dataBuffer.readFloat32();\r\n                }\r\n                break;\r\n            case Constants.DoubleType:\r\n                this.array = new Float64Array(length);\r\n                for (let i = 0; i < length; ++i) {\r\n                    this.array[i] = dataBuffer.readFloat64();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\n",
        "import { Nullable } from \"../../types\";\r\nimport { MathUtils, Matrix3, Vector2 } from \"../../Math\";\r\nimport { Constants } from \"../Constants\";\r\nimport { GLTexture } from \"../GLTexture\";\r\n\r\n/**\r\n * 纹理\r\n * @category Engine\r\n */\r\nexport class Texture {\r\n\r\n    /**\r\n     * uuid\r\n     */\r\n    public uuid: string;\r\n    /**\r\n     * 名称\r\n     */\r\n    public name: string;\r\n\r\n    /**\r\n     * 宽度\r\n     */\r\n    public width: number;\r\n    /**\r\n     * 高度\r\n     */\r\n    public height: number;\r\n    /**\r\n     * 压缩贴图\r\n     */\r\n    public compression: boolean;\r\n\r\n    /**\r\n     * 像素格式\r\n     */\r\n    public format: number;\r\n    /**\r\n     * 数据类型\r\n     */\r\n    public type: number;\r\n    /**\r\n     * 环境映射模式\r\n     */\r\n    public mapping: number;\r\n    /**\r\n     * 颜色编码模式\r\n     */\r\n    public encoding: number;\r\n    /**\r\n     * 字节对齐\r\n     */\r\n    public unpackAlignment: number;\r\n    /**\r\n     * 生成Mipmaps\r\n     */\r\n    public generateMipmaps: boolean;\r\n    /**\r\n     * 预乘Alpha\r\n     */\r\n    public premultiplyAlpha: boolean;\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _wrapU: number;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _wrapV: number;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _wrapR: number;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _filter: number;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _flipY: boolean;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _anisotropy: number;\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _offset: Vector2;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _repeat: Vector2;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _center: Vector2;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _rotation: number;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _matrix: Matrix3;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _needsUpdateMatrix: boolean;\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _version: number;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _reference: number;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _glTexture: Nullable<GLTexture>;\r\n\r\n    /**\r\n     * 构造函数\r\n     */\r\n    constructor() {\r\n\r\n        this.uuid = MathUtils.generateUUID();\r\n        this.name = '';\r\n\r\n        this.format = Constants.RGBAFormat;\r\n        this.type = Constants.UnsignedByteType;\r\n        this.encoding = Constants.LinearEncoding;\r\n        this.mapping = Constants.UVMapping;\r\n        this.unpackAlignment = 4;\r\n        this.generateMipmaps = true;\r\n        this.premultiplyAlpha = false;\r\n\r\n        this._wrapU = Constants.ClampToEdgeWrapping;\r\n        this._wrapV = Constants.ClampToEdgeWrapping;\r\n        this._wrapR = Constants.ClampToEdgeWrapping;\r\n        this._filter = Constants.LinearLinearMipLinearFilter;\r\n        this._anisotropy = 1;\r\n\r\n        this._flipY = true;\r\n        this._offset = new Vector2(0, 0);\r\n        this._repeat = new Vector2(1, 1);\r\n        this._center = new Vector2(0, 0);\r\n        this._rotation = 0;\r\n        this._matrix = new Matrix3();\r\n        this._needsUpdateMatrix = false;\r\n\r\n        this._version = 0;\r\n        this._reference = 0;\r\n        this._glTexture = null;\r\n    }\r\n\r\n    /**\r\n     * 是否准备好\r\n     */\r\n    public get isReady(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * UV映射方式\r\n     */\r\n    public get wrapU() {\r\n        return this._wrapU;\r\n    }\r\n    public set wrapU(value) {\r\n        if (this._wrapU != value) {\r\n            this._wrapU = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * UV映射方式\r\n     */\r\n    public get wrapV() {\r\n        return this._wrapV;\r\n    }\r\n    public set wrapV(value) {\r\n        if (this._wrapV != value) {\r\n            this._wrapV = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * UV映射方式\r\n     */\r\n    public get wrapR() {\r\n        return this._wrapR;\r\n    }\r\n    public set wrapR(value) {\r\n        if (this._wrapR != value) {\r\n            this._wrapR = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 过滤方式\r\n     */\r\n    public get filter() {\r\n        return this._filter;\r\n    }\r\n    public set filter(value) {\r\n        if (this._filter != value) {\r\n            this._filter = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 反向Y\r\n     */\r\n    public get flipY() {\r\n        return this._flipY;\r\n    }\r\n    public set flipY(value) {\r\n        if (this._flipY != value) {\r\n            this._flipY = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 各向异性过滤\r\n     */\r\n    public get anisotropy() {\r\n        return this._anisotropy;\r\n    }\r\n    public set anisotropy(value) {\r\n        if (this._anisotropy != value) {\r\n            this._anisotropy = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * UV偏移\r\n     */\r\n    public get offset() {\r\n        return this._offset;\r\n    }\r\n    public set offset(value) {\r\n        if (!this._offset.equals(value)) {\r\n            this._offset = value;\r\n            this._needsUpdateMatrix = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * UV重复\r\n     */\r\n    public get repeat() {\r\n        return this._repeat;\r\n    }\r\n    public set repeat(value) {\r\n        if (!this._repeat.equals(value)) {\r\n            this._repeat = value;\r\n            this._needsUpdateMatrix = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * UV中心点\r\n     */\r\n    public get center() {\r\n        return this._center;\r\n    }\r\n    public set center(value) {\r\n        if (!this._center.equals(value)) {\r\n            this._center = value;\r\n            this._needsUpdateMatrix = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * UV旋转\r\n     */\r\n    public get rotation() {\r\n        return this._rotation;\r\n    }\r\n    public set rotation(value) {\r\n        if (this._rotation != value) {\r\n            this._rotation = value;\r\n            this._needsUpdateMatrix = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * UV矩阵\r\n     */\r\n    public get matrix() {\r\n        if (this._needsUpdateMatrix) {\r\n            this.updateMatrix();\r\n        }\r\n        return this._matrix;\r\n    }\r\n    public set matrix(value) {\r\n        this._matrix.copy(value);\r\n    }\r\n\r\n    /**\r\n     * 版本\r\n     */\r\n    public get version() {\r\n        return this._version;\r\n    }\r\n\r\n    /**\r\n     * GL纹理\r\n     */\r\n    public get glTexture() {\r\n        return this._glTexture;\r\n    }\r\n    public set glTexture(value) {\r\n        if (this._glTexture != value) {\r\n            if (this._glTexture) {\r\n                this._glTexture.addReference();\r\n            }\r\n            this._glTexture = value;\r\n            if (this._glTexture) {\r\n                this._glTexture.dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 需要更新\r\n     * @param value\r\n     */\r\n    public set needsUpdate(value: boolean) {\r\n        if (value) {\r\n            this._version++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新UV矩阵\r\n     */\r\n    public updateMatrix(): void {\r\n        this._needsUpdateMatrix = false;\r\n        this._matrix.setUvTransform(this._offset.x, this._offset.y, this._repeat.x, this._repeat.y, this._rotation, this._center.x, this._center.y);\r\n    }\r\n\r\n    /**\r\n     * 增加引用\r\n     */\r\n    public addReference(): void {\r\n        this._reference++;\r\n    }\r\n\r\n    /**\r\n     * 释放GL纹理\r\n     */\r\n    public releaseGLTexture(): void {\r\n        if (this._glTexture) {\r\n            this._glTexture.dispose();\r\n            this._glTexture = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): Texture {\r\n        return new Texture().copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: Texture): Texture {\r\n        this.name = source.name;\r\n\r\n        this.format = source.format;\r\n        this.type = source.type;\r\n        this.mapping = source.mapping;\r\n        this.generateMipmaps = source.generateMipmaps;\r\n        this.premultiplyAlpha = source.premultiplyAlpha;\r\n        this.unpackAlignment = source.unpackAlignment;\r\n        this.encoding = source.encoding;\r\n\r\n        this._offset.copy(source.offset);\r\n        this._repeat.copy(source.repeat);\r\n        this._center.copy(source.center);\r\n        this._rotation = source.rotation;\r\n        this._matrix.copy(source.matrix);\r\n\r\n        this._flipY = source.flipY;\r\n        this._wrapU = source.wrapU;\r\n        this._wrapV = source.wrapV;\r\n        this._wrapR = source.wrapR;\r\n        this._filter = source.filter;\r\n        this._anisotropy = source.anisotropy;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 释放\r\n     */\r\n    public dispose(): void {\r\n        this._reference--;\r\n        if (this._reference == 0) {\r\n            this.releaseGLTexture();\r\n        }\r\n    }\r\n}\r\n",
        "import { MathUtils } from \"../Math/MathUtils\";\r\nimport { Euler, InVector3, Matrix3, Matrix4, Quaternion, Vector3 } from \"../Math\";\r\nimport { MathTmp } from \"../Math/MathTmp\";\r\nimport { AbstractObject } from \"./AbstractObject\";\r\nimport { Scene } from \"./Scene\";\r\nimport { Nullable } from \"../types\";\r\n\r\n/**\r\n * 基础3D对象\r\n */\r\nexport class TransformObject extends AbstractObject {\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    [key: string]: any;\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _position = new Vector3();\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _rotation = new Euler();\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _quaternion = new Quaternion();\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _scale = new Vector3(1, 1, 1);\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _matrix = new Matrix4();\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _matrixWorld = new Matrix4();\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _pivotMatrix = new Matrix4();\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _matrixWorldInverse = new Matrix4();\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _pivotMatrixInverse = new Matrix4();\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _normalMatrix = new Matrix3();\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _modelViewMatrix = new Matrix4();\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _modelViewProjectionMatrix = new Matrix4();\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _transModelViewMatrix = new Matrix4();\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _transModelViewMatrixInverse = new Matrix4();\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _modelViewRelativeMatrix = new Matrix4();\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _modelViewProjectionRelativeMatrix = new Matrix4();\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _lastPosition = new Vector3();\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _lastRotation = new Euler();\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _lastQuaternion = new Quaternion();\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _lastScale = new Vector3(1, 1, 1);\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _lastMatrix = new Matrix4();\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _lastMatrixWorld = new Matrix4();\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _lastPivotMatrix = new Matrix4();\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _tempPosition = new Vector3();\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _tempRotation = new Euler();\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _tempQuaternion = new Quaternion();\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _tempScale = new Vector3(1, 1, 1);\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _tempMatrix = new Matrix4();\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _tempMatrixWorld = new Matrix4();\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _tempPivotMatrix = new Matrix4();\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _usePivotMatrix = false;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _matrixNeedsUpdate = true;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _matrixWorldNeedsUpdate = true;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param scene\r\n     * @param parent\r\n     * @param name\r\n     * @param isPure\r\n     */\r\n    constructor(scene: Scene, parent: Nullable<AbstractObject> = null, name: string = '', isPure: boolean = true) {\r\n        super(scene, parent, name);\r\n\r\n        this._position.setNotifyFunc(this._onPositionChange.bind(this));\r\n        this._rotation.setNotifyFunc(this._onRotationChange.bind(this));\r\n        this._quaternion.setNotifyFunc(this._onQuaternionChange.bind(this));\r\n        this._scale.setNotifyFunc(this._onScaleChange.bind(this));\r\n        this._matrix.setNotifyFunc(this._onMatrixChange.bind(this));\r\n        this._matrixWorld.setNotifyFunc(this._onMatrixWorldChange.bind(this));\r\n        this._pivotMatrix.setNotifyFunc(this._onPivotMatrixChange.bind(this));\r\n\r\n        if (isPure) {\r\n            this.scene.addTransform(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 本地坐标\r\n     */\r\n    get position() {\r\n        return this._position;\r\n    }\r\n    set position(value: InVector3) {\r\n        this._position.copy(value);\r\n    }\r\n\r\n    /**\r\n     * 本地缩放\r\n     */\r\n    get scale() {\r\n        return this._scale;\r\n    }\r\n    set scale(value: InVector3) {\r\n        this._scale.copy(value);\r\n    }\r\n\r\n    /**\r\n     * 本地四元数\r\n     */\r\n    get quaternion() {\r\n        return this._quaternion;\r\n    }\r\n    set quaternion(value: Quaternion) {\r\n        this._quaternion.copy(value);\r\n    }\r\n\r\n    /**\r\n     * 本地欧拉角\r\n     */\r\n    get rotation() {\r\n        return this._rotation;\r\n    }\r\n    set rotation(value: Euler) {\r\n        this._rotation.copy(value);\r\n    }\r\n\r\n    /**\r\n     * 可见层\r\n     */\r\n    get visibleLayers() {\r\n        return this._visibleLayers;\r\n    }\r\n\r\n    /**\r\n     * 本地矩阵\r\n     */\r\n    get matrix() {\r\n        return this._matrix;\r\n    }\r\n\r\n    /**\r\n     * 世界矩阵\r\n     */\r\n    get matrixWorld() {\r\n        return this._matrixWorld;\r\n    }\r\n\r\n    /**\r\n     * 世界逆矩阵\r\n     */\r\n    get matrixWorldInverse() {\r\n        return this._matrixWorldInverse;\r\n    }\r\n\r\n    /**\r\n     * 使用锚点矩阵\r\n     */\r\n    get usePivotMatrix() {\r\n        return this._usePivotMatrix;\r\n    }\r\n\r\n    /**\r\n     * 锚点矩阵\r\n     */\r\n    get pivotMatrix() {\r\n        return this._pivotMatrix;\r\n    }\r\n\r\n    /**\r\n     * 锚点逆矩阵\r\n     */\r\n    get pivotMatrixInverse() {\r\n        return this._pivotMatrixInverse;\r\n    }\r\n\r\n    /**\r\n     * 法线矩阵\r\n     */\r\n    get normalMatrix() {\r\n        return this._normalMatrix;\r\n    }\r\n    set normalMatrix(value: Matrix3) {\r\n        this._normalMatrix.copy(value);\r\n    }\r\n\r\n    /**\r\n     * MV矩阵\r\n     */\r\n    get modelViewMatrix() {\r\n        return this._modelViewMatrix;\r\n    }\r\n    set modelViewMatrix(value: Matrix4) {\r\n        this._modelViewMatrix.copy(value);\r\n    }\r\n\r\n    /**\r\n     * MVP矩阵\r\n     */\r\n    get modelViewProjectionMatrix() {\r\n        return this._modelViewProjectionMatrix;\r\n    }\r\n    set modelViewProjectionMatrix(value: Matrix4) {\r\n        this._modelViewProjectionMatrix.copy(value);\r\n    }\r\n\r\n    /**\r\n     * TMV矩阵\r\n     */\r\n    get transModelViewMatrix() {\r\n        return this._transModelViewMatrix;\r\n    }\r\n    set transModelViewMatrix(value: Matrix4) {\r\n        this._transModelViewMatrix.copy(value);\r\n    }\r\n\r\n    /**\r\n     * TMV逆矩阵\r\n     */\r\n    get transModelViewMatrixInverse() {\r\n        return this._transModelViewMatrixInverse;\r\n    }\r\n    set transModelViewMatrixInverse(value: Matrix4) {\r\n        this._transModelViewMatrixInverse.copy(value);\r\n    }\r\n\r\n    /**\r\n     * MVR矩阵\r\n     */\r\n    get modelViewRelativeMatrix() {\r\n        return this._modelViewRelativeMatrix;\r\n    }\r\n    set modelViewRelativeMatrix(value: Matrix4) {\r\n        this._modelViewRelativeMatrix.copy(value);\r\n    }\r\n\r\n    /**\r\n     * MVPR矩阵\r\n     */\r\n    get modelViewProjectionRelativeMatrix() {\r\n        return this._modelViewProjectionRelativeMatrix;\r\n    }\r\n    set modelViewProjectionRelativeMatrix(value: Matrix4) {\r\n        this._modelViewProjectionRelativeMatrix.copy(value);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @private\r\n     */\r\n    private _onRotationChange() {\r\n        this._quaternion.notify = false;\r\n        this._quaternion.setFromEuler(this._rotation);\r\n        this._quaternion.notify = true;\r\n\r\n        if (!this._rotation.equals(this._lastRotation)) {\r\n            this._tempRotation.copy(this._lastRotation);\r\n            this._lastRotation.copy(this._rotation);\r\n\r\n            this._matrixNeedsUpdate = true;\r\n\r\n            this.onRotationChanged(this._tempRotation, this._lastRotation);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @private\r\n     */\r\n    private _onQuaternionChange() {\r\n        this._rotation.notify = false;\r\n        this._rotation.setFromQuaternion(this._quaternion, null);\r\n        this._rotation.notify = true;\r\n\r\n        if (!this._quaternion.equals(this._lastQuaternion)) {\r\n            this._tempQuaternion.copy(this._lastQuaternion);\r\n            this._lastQuaternion.copy(this._quaternion);\r\n\r\n            this._matrixNeedsUpdate = true;\r\n\r\n            this.onQuaternionChanged(this._tempQuaternion, this._lastQuaternion);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @private\r\n     */\r\n    private _onPositionChange() {\r\n        if (!this._position.equals(this._lastPosition)) {\r\n            this._tempPosition.copy(this._lastPosition);\r\n            this._lastPosition.copy(this._position);\r\n\r\n            this._matrixNeedsUpdate = true;\r\n\r\n            this.onPositionChanged(this._tempPosition, this._lastPosition);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @private\r\n     */\r\n    private _onScaleChange() {\r\n        if (!this._scale.equals(this._lastScale)) {\r\n            this._tempScale.copy(this._lastScale);\r\n            this._lastScale.copy(this._scale);\r\n\r\n            this._matrixNeedsUpdate = true;\r\n\r\n            this.onScaleChanged(this._tempScale, this._lastScale);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @private\r\n     */\r\n    private _onMatrixChange() {\r\n        if (!this._matrix.equals(this._lastMatrix)) {\r\n            this._tempMatrix.copy(this._lastMatrix);\r\n            this._lastMatrix.copy(this._matrix);\r\n\r\n            this.onMatrixChanged(this._tempMatrix, this._lastMatrix);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @private\r\n     */\r\n    private _onMatrixWorldChange() {\r\n        if (!this._matrixWorld.equals(this._lastMatrixWorld)) {\r\n            this._tempMatrixWorld.copy(this._lastMatrixWorld);\r\n            this._lastMatrixWorld.copy(this._matrixWorld);\r\n\r\n            this.onMatrixWorldChanged(this._tempMatrixWorld, this._lastMatrixWorld);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @private\r\n     */\r\n    private _onPivotMatrixChange() {\r\n        if (!this._pivotMatrix.equals(this._lastPivotMatrix)) {\r\n            this._tempPivotMatrix.copy(this._lastPivotMatrix);\r\n            this._lastPivotMatrix.copy(this._pivotMatrix);\r\n\r\n            this._pivotMatrixInverse.getInverse(this._pivotMatrix);\r\n            this._usePivotMatrix = !this._pivotMatrix.isIdentity();\r\n\r\n            this._matrixNeedsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 欧拉角改变\r\n     * @param oldValue\r\n     * @param newValue\r\n     * @ignore\r\n     */\r\n    protected onRotationChanged(oldValue: Euler, newValue: Euler): void {\r\n    }\r\n\r\n    /**\r\n     * 四元数改变\r\n     * @param oldValue\r\n     * @param newValue\r\n     * @ignore\r\n     */\r\n    protected onQuaternionChanged(oldValue: Quaternion, newValue: Quaternion): void {\r\n    }\r\n\r\n    /**\r\n     * 位置改变\r\n     * @param oldValue\r\n     * @param newValue\r\n     * @ignore\r\n     */\r\n    protected onPositionChanged(oldValue: Vector3, newValue: Vector3): void {\r\n    }\r\n\r\n    /**\r\n     * 缩放改变\r\n     * @param oldValue\r\n     * @param newValue\r\n     * @ignore\r\n     */\r\n    protected onScaleChanged(oldValue: Vector3, newValue: Vector3): void {\r\n    }\r\n\r\n    /**\r\n     * 本地矩阵改变\r\n     * @param oldValue\r\n     * @param newValue\r\n     * @ignore\r\n     */\r\n    protected onMatrixChanged(oldValue: Matrix4, newValue: Matrix4): void {\r\n    }\r\n\r\n    /**\r\n     * 世界矩阵改变\r\n     * @param oldValue\r\n     * @param newValue\r\n     * @ignore\r\n     */\r\n    protected onMatrixWorldChanged(oldValue: Matrix4, newValue: Matrix4): void {\r\n    }\r\n\r\n    /**\r\n     * 矩阵变换\r\n     * @param matrix\r\n     */\r\n    public applyMatrix(matrix: Matrix4): TransformObject {\r\n        this.matrix.premultiply(matrix);\r\n        this.matrix.decompose(this._position, this._quaternion, this._scale);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 四元数变换\r\n     * @param quaternion\r\n     */\r\n    public applyQuaternion(quaternion: Quaternion): TransformObject {\r\n        this._quaternion.premultiply(quaternion);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置本地轴和角度\r\n     * @param axis\r\n     * @param angle\r\n     */\r\n    public setRotationFromAxisAngle(axis: InVector3, angle: number): TransformObject {\r\n        this._quaternion.setFromAxisAngle(axis, angle);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置欧拉角\r\n     * @param euler\r\n     */\r\n    public setRotationFromEuler(euler: Euler): TransformObject {\r\n        this._quaternion.setFromEuler(euler);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置旋转矩阵\r\n     * @param matrix\r\n     */\r\n    public setRotationFromMatrix(matrix: Matrix3 | Matrix4): TransformObject {\r\n        this._quaternion.setFromRotationMatrix(matrix);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置四元数\r\n     * @param quaternion\r\n     */\r\n    public setRotationFromQuaternion(quaternion: Quaternion): TransformObject {\r\n        this._quaternion.copy(quaternion);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 绕本地轴旋转\r\n     * @param axis\r\n     * @param angle\r\n     */\r\n    public rotateOnAxis(axis: InVector3, angle: number): TransformObject {\r\n        this._tempQuaternion.setFromAxisAngle(axis, angle);\r\n        this._quaternion.multiply(this._tempQuaternion);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 绕世界轴旋转\r\n     * @param axis\r\n     * @param angle\r\n     */\r\n    public rotateOnWorldAxis(axis: InVector3, angle: number): TransformObject {\r\n        this._tempQuaternion.setFromAxisAngle(axis, angle);\r\n        this._quaternion.premultiply(this._tempQuaternion);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 绕本地X轴旋转\r\n     * @param angle\r\n     */\r\n    public rotateX(angle: number): TransformObject {\r\n        return this.rotateOnAxis(Vector3.UNIT_X, angle);\r\n    }\r\n\r\n    /**\r\n     * 绕本地Y轴旋转\r\n     * @param angle\r\n     */\r\n    public rotateY(angle: number): TransformObject {\r\n        return this.rotateOnAxis(Vector3.UNIT_Y, angle);\r\n    }\r\n\r\n    /**\r\n     * 绕本地Z轴旋转\r\n     * @param angle\r\n     */\r\n    public rotateZ(angle: number): TransformObject {\r\n        return this.rotateOnAxis(Vector3.UNIT_Z, angle);\r\n    }\r\n\r\n    /**\r\n     * 沿本地轴平移\r\n     * @param axis\r\n     * @param distance\r\n     */\r\n    public translateOnAxis(axis: InVector3, distance: number): TransformObject {\r\n        this._tempPosition.copy(axis).applyQuaternion(this._quaternion);\r\n        this.position.add(this._tempPosition.multiplyScalar(distance));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 沿本地X轴平移\r\n     * @param distance\r\n     */\r\n    public translateX(distance: number): TransformObject {\r\n        return this.translateOnAxis(Vector3.UNIT_X, distance);\r\n    }\r\n\r\n    /**\r\n     * 沿本地Y轴平移\r\n     * @param distance\r\n     */\r\n    public translateY(distance: number): TransformObject {\r\n        return this.translateOnAxis(Vector3.UNIT_Y, distance);\r\n    }\r\n\r\n    /**\r\n     * 沿本地Z轴平移\r\n     * @param distance\r\n     */\r\n    public translateZ(distance: number): TransformObject {\r\n        return this.translateOnAxis(Vector3.UNIT_Z, distance);\r\n    }\r\n\r\n    /**\r\n     * 设置本地坐标\r\n     * @param position\r\n     */\r\n    public setPosition(position: Vector3): TransformObject {\r\n        this._position.copy(position);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置本地缩放\r\n     * @param scale\r\n     */\r\n    public setScale(scale: Vector3): TransformObject {\r\n        this._scale.copy(scale);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置世界坐标\r\n     * @param position\r\n     */\r\n    public setWorldPosition(position: Vector3): TransformObject {\r\n        if (!this._parent) {\r\n            this._position.copy(position);\r\n        } else {\r\n            this._parent.matrixWorldInverse.transformPoint(position, this._position);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置世界四元数\r\n     * @param quaternion\r\n     */\r\n    public setWorldRotation(quaternion: Quaternion): TransformObject {\r\n        if (!this._parent) {\r\n            this._quaternion.copy(quaternion);\r\n        } else {\r\n            this._tempQuaternion.copy(this._parent.quaternion).inverse();\r\n            this._quaternion.notify = false;\r\n            this._quaternion.copy(this._tempQuaternion);\r\n            this._quaternion.notify = true;\r\n            this._quaternion.multiply(quaternion);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 本地坐标转世界坐标\r\n     * @param position\r\n     * @param result\r\n     */\r\n    public localToWorld(position: Vector3, result = new Vector3()): Vector3 {\r\n        result.copy(position);\r\n        return result.applyMatrix4(this.matrixWorld);\r\n    }\r\n\r\n    /**\r\n     * 世界坐标转本地坐标\r\n     * @param position\r\n     * @param result\r\n     */\r\n    public worldToLocal(position: Vector3, result = new Vector3()): Vector3 {\r\n        result.copy(position);\r\n        return result.applyMatrix4(this.matrixWorld);\r\n    }\r\n\r\n    /**\r\n     * 朝向目标\r\n     * @param target\r\n     */\r\n    public lookAt(target: Vector3): TransformObject {\r\n\r\n        this._tempPosition.setFromMatrixPosition(this.matrixWorld);\r\n        this._tempMatrix.lookAt(target, this._tempPosition, Vector3.UNIT_Y);\r\n\r\n        if (this._parent) {\r\n            this._quaternion.notify = false;\r\n            this._quaternion.setFromRotationMatrix(this._tempMatrix);\r\n            this._parent.matrixWorld.getRotationMatrix4(this._tempMatrix);\r\n            this._tempQuaternion.setFromRotationMatrix(this._tempMatrix);\r\n            this._quaternion.notify = true;\r\n            this._quaternion.premultiply(this._tempQuaternion.inverse());\r\n        }\r\n        else {\r\n            this._quaternion.setFromRotationMatrix(this._tempMatrix);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 锚点位置\r\n     * @param target\r\n     */\r\n    public getPivotPosition(target = new Vector3()): Vector3 {\r\n        target.x = -this._pivotMatrix.elements[12];\r\n        target.y = -this._pivotMatrix.elements[13];\r\n        target.z = -this._pivotMatrix.elements[14];\r\n        return target;\r\n    }\r\n\r\n    /**\r\n     * 锚点世界位置\r\n     * @param target\r\n     */\r\n    public getWorldPivotPosition(target = new Vector3()): Vector3 {\r\n        target = this.getPivotPosition(target);\r\n        return target.setFromMatrixPosition(this.matrixWorld);\r\n    }\r\n\r\n    /**\r\n     * 世界坐标\r\n     * @param target\r\n     */\r\n    public getWorldPosition(target = new Vector3()): Vector3 {\r\n        return target.setFromMatrixPosition(this.matrixWorld);\r\n    }\r\n\r\n    /**\r\n     * 世界四元数\r\n     * @param target\r\n     */\r\n    public getWorldQuaternion(target = new Quaternion()): Quaternion {\r\n        this.matrixWorld.decompose(null, target, null);\r\n        return target;\r\n    }\r\n\r\n    /**\r\n     * 世界欧拉角\r\n     * @param target\r\n     */\r\n    public getWorldRotaion(target = new Euler()): Euler {\r\n        this.matrixWorld.decompose(null, this._tempQuaternion, null);\r\n        target.setFromQuaternion(this._tempQuaternion, this._rotation.order);\r\n        return target;\r\n    }\r\n\r\n    /**\r\n     * 世界缩放\r\n     * @param target\r\n     */\r\n    public getWorldScale(target = new Vector3()): Vector3 {\r\n        this.matrixWorld.decompose(null, null, target);\r\n        return target;\r\n    }\r\n\r\n    /**\r\n     * 世界朝向\r\n     * @param target\r\n     */\r\n    public getWorldDirection(target = new Vector3()): Vector3 {\r\n        const e = this.matrixWorld.elements;\r\n        return target.set(e[8], e[9], e[10]).normalize();\r\n    }\r\n\r\n    /**\r\n     * 本地上方向\r\n     * @param dir\r\n     */\r\n    public getLocalUp(dir = new Vector3()): Vector3 {\r\n        dir.set(0, 1, 0);\r\n        return dir.applyQuaternion(this.quaternion).normalize();\r\n    }\r\n\r\n    /**\r\n     * 本地下方向\r\n     * @param dir\r\n     */\r\n    public getLocalDown(dir = new Vector3()): Vector3 {\r\n        dir.set(0, -1, 0);\r\n        return dir.applyQuaternion(this.quaternion).normalize();\r\n    }\r\n\r\n    /**\r\n     * 本地正方向\r\n     * @param dir\r\n     */\r\n    public getLocalForward(dir = new Vector3()): Vector3 {\r\n        dir.set(0, 0, 1);\r\n        return dir.applyQuaternion(this.quaternion).normalize();\r\n    }\r\n\r\n    /**\r\n     * 本地后方向\r\n     * @param dir\r\n     */\r\n    public getLocalBackward(dir = new Vector3()): Vector3 {\r\n        dir.set(0, 0, -1);\r\n        return dir.applyQuaternion(this.quaternion).normalize();\r\n    }\r\n\r\n    /**\r\n     * 本地左方向\r\n     * @param dir\r\n     */\r\n    public getLocalLeft(dir = new Vector3()): Vector3 {\r\n        dir.set(-1, 0, 0);\r\n        return dir.applyQuaternion(this.quaternion).normalize();\r\n    }\r\n\r\n    /**\r\n     * 本地右方向\r\n     * @param dir\r\n     */\r\n    public getLocalRight(dir = new Vector3()): Vector3 {\r\n        dir.set(1, 0, 0);\r\n        return dir.applyQuaternion(this.quaternion).normalize();\r\n    }\r\n\r\n    /**\r\n     * 世界上方向\r\n     * @param dir\r\n     */\r\n    public getWorldUp(dir = new Vector3()): Vector3 {\r\n        dir.set(0, 1, 0);\r\n        return this.matrixWorld.transformVector3(dir, dir).normalize();\r\n    }\r\n\r\n    /**\r\n     * 世界下方向\r\n     * @param dir\r\n     */\r\n    public getWorldDown(dir = new Vector3()): Vector3 {\r\n        dir.set(0, -1, 0);\r\n        return this.matrixWorld.transformVector3(dir, dir).normalize();\r\n    }\r\n\r\n    /**\r\n     * 世界正方向\r\n     * @param dir\r\n     */\r\n    public getWorldForward(dir = new Vector3()): Vector3 {\r\n        dir.set(0, 0, 1);\r\n        return this.matrixWorld.transformVector3(dir, dir).normalize();\r\n    }\r\n\r\n    /**\r\n     * 世界后方向\r\n     * @param dir\r\n     */\r\n    public getWorldBackward(dir = new Vector3()): Vector3 {\r\n        dir.set(0, 0, -1);\r\n        return this.matrixWorld.transformVector3(dir, dir).normalize();\r\n    }\r\n\r\n    /**\r\n     * 世界左方向\r\n     * @param dir\r\n     */\r\n    public getWorldLeft(dir = new Vector3()): Vector3 {\r\n        dir.set(-1, 0, 0);\r\n        return this.matrixWorld.transformVector3(dir, dir).normalize();\r\n    }\r\n\r\n    /**\r\n     * 世界右方向\r\n     * @param dir\r\n     */\r\n    public getWorldRight(dir = new Vector3()): Vector3 {\r\n        dir.set(1, 0, 0);\r\n        return this.matrixWorld.transformVector3(dir, dir).normalize();\r\n    }\r\n\r\n    /**\r\n     * 偏航角\r\n     */\r\n    public getHeading(): number {\r\n        return MathUtils.TWO_PI - MathUtils.zeroToTwoPi(this.rotation.y);\r\n    }\r\n\r\n    /**\r\n     * 俯仰角\r\n     */\r\n    public getPitch(): number {\r\n        return MathUtils.clamp(this.rotation.x, -1.0, 1.0);\r\n    }\r\n\r\n    /**\r\n     * 翻滚角\r\n     */\r\n    public getRoll(): number {\r\n        return MathUtils.zeroToTwoPi(this.rotation.z + MathUtils.TWO_PI);\r\n    }\r\n\r\n    /**\r\n     * 更新本地矩阵\r\n     * @param force\r\n     */\r\n    public updateMatrix(force: boolean = false): TransformObject {\r\n\r\n        if (this._matrixNeedsUpdate || force) {\r\n\r\n            this._matrix.notify = false;\r\n\r\n            this._tempMatrix.copy(this._matrix);\r\n\r\n            if (this._usePivotMatrix) {\r\n                const pivotScaleM = MathTmp.Matrix4[0].makeScaleXYZ(this.scale.x, this.scale.y, this.scale.z);\r\n                const pivotRotationM = MathTmp.Matrix4[1].makeRotationFromQuaternion(this.quaternion);\r\n\r\n                this._matrix.multiplyMatrices(pivotScaleM, this._pivotMatrix);\r\n                this._matrix.premultiply(pivotRotationM);\r\n                this._matrix.premultiply(this.pivotMatrixInverse);\r\n                this._matrix.translateVector(this.position);\r\n            }\r\n            else {\r\n                this._matrix.compose(this.position, this.quaternion, this.scale);\r\n            }\r\n\r\n            this._matrix.notify = true;\r\n\r\n            this._matrixNeedsUpdate = false;\r\n\r\n            this._matrixWorldNeedsUpdate = true;\r\n\r\n            this.onMatrixChanged(this._tempMatrix, this._matrix);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 更新世界矩阵\r\n     * @param force\r\n     */\r\n    public updateMatrixWorld(force: boolean = false): TransformObject {\r\n\r\n        this.updateMatrix();\r\n\r\n        if (this._matrixWorldNeedsUpdate || force) {\r\n\r\n            this._matrixWorld.notify = false;\r\n\r\n            this._tempMatrixWorld.copy(this._matrixWorld);\r\n\r\n            if (!this._parent) {\r\n\r\n                this._matrixWorld.copy(this._matrix);\r\n\r\n            } else {\r\n\r\n                this._matrixWorld.multiplyMatrices(this._parent.matrixWorld, this._matrix);\r\n\r\n            }\r\n\r\n            this._matrixWorld.notify = true;\r\n\r\n            this._matrixWorldInverse.getInverse(this._matrixWorld);\r\n\r\n            this._matrixWorldNeedsUpdate = false;\r\n\r\n            force = true;\r\n\r\n            this.onMatrixWorldChanged(this._tempMatrixWorld, this._matrixWorld);\r\n        }\r\n\r\n        const children = this.children;\r\n        for (let i = 0, l = children.length; i < l; i++) {\r\n            children[i].updateMatrixWorld(force);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 更新世界矩阵\r\n     * @param updateParents\r\n     * @param updateChildren\r\n     * @param force\r\n     */\r\n    public updateWorldMatrix(updateParents: boolean = false, updateChildren: boolean = false, force: boolean = false): TransformObject {\r\n\r\n        if (updateParents && this._parent != null) {\r\n            this._parent.updateWorldMatrix(true, false, force);\r\n        }\r\n\r\n        this.updateMatrix();\r\n\r\n        if (this._matrixWorldNeedsUpdate || force) {\r\n\r\n            this._matrixWorld.notify = false;\r\n\r\n            this._tempMatrixWorld.copy(this._matrixWorld);\r\n\r\n            if (!this._parent) {\r\n\r\n                this._matrixWorld.copy(this._matrix);\r\n\r\n            } else {\r\n\r\n                this._matrixWorld.multiplyMatrices(this._parent.matrixWorld, this._matrix);\r\n\r\n            }\r\n\r\n            this._matrixWorld.notify = true;\r\n\r\n            this._matrixWorldInverse.getInverse(this._matrixWorld);\r\n\r\n            this._matrixWorldNeedsUpdate = false;\r\n\r\n            force = true;\r\n\r\n            this.onMatrixWorldChanged(this._tempMatrixWorld, this._matrixWorld);\r\n        }\r\n\r\n        if (updateChildren) {\r\n            const children = this.children;\r\n            for (let i = 0, l = children.length; i < l; i++) {\r\n                children[i].updateWorldMatrix(false, true, force);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): TransformObject {\r\n        return new TransformObject(this._scene, this._parent).copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: TransformObject): TransformObject {\r\n        return this;\r\n    }\r\n}\r\n",
        "import { Vector3 } from \"./Vector3\";\r\nimport { FloatArray, Nullable } from \"../types\";\r\nimport { BufferAttribute } from \"../Misc\";\r\nimport { AbstractObject } from \"../Scene/AbstractObject\";\r\nimport { Sphere } from \"./Sphere\";\r\nimport { Intervals } from \"./Algorithm/Intervals\";\r\nimport { OBB } from \"./OBB\";\r\nimport { LCPSolver } from \"./Algorithm/LCPSolver\";\r\nimport { Matrix4 } from \"./Matrix4\";\r\nimport { Box3Box3Intersect } from \"./InterfaceType/IntersectResult\";\r\nimport { Box3OBBDistance } from \"./InterfaceType/DistanceResult\";\r\nimport { MathTmp } from \"./MathTmp\";\r\nimport { InterleavedBufferAttribute } from \"../Scene/Geometries/InterleavedBufferAttribute\";\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst _tempArray1 = new Array<number>(3);\r\n/**\r\n * @ignore\r\n */\r\nconst _tempArray2 = new Array<number>(3);\r\n\r\n/**\r\n * 3D包围盒\r\n * @category Math\r\n */\r\nexport class Box3 {\r\n    /**\r\n     * 最小值\r\n     */\r\n    public min: Vector3;\r\n    /**\r\n     * 最大值\r\n     */\r\n    public max: Vector3;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param min\r\n     * @param max\r\n     */\r\n    constructor(min: Nullable<Vector3> = null, max: Nullable<Vector3> = null) {\r\n        this.min = new Vector3(+Infinity, +Infinity, +Infinity);\r\n        this.max = new Vector3(-Infinity, -Infinity, -Infinity);\r\n\r\n        if (min) {\r\n            this.min.copy(min);\r\n        }\r\n        if (max) {\r\n            this.min.copy(max);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建对象\r\n     * @constructor\r\n     */\r\n    public static Build() {\r\n        return new Box3();\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): Box3 {\r\n        return new Box3(this.min, this.max);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param box\r\n     */\r\n    public copy(box: Box3): Box3 {\r\n        this.min.copy(box.min);\r\n        this.max.copy(box.max);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置Min,Max\r\n     * @param min\r\n     * @param max\r\n     */\r\n    public set(min: Vector3, max: Vector3): Box3 {\r\n        this.min.copy(min);\r\n        this.max.copy(max);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置坐标Number数组\r\n     * @param array\r\n     */\r\n    public setFromArray(array: number[]): Box3 {\r\n        let minX = +Infinity;\r\n        let minY = +Infinity;\r\n        let minZ = +Infinity;\r\n\r\n        let maxX = -Infinity;\r\n        let maxY = -Infinity;\r\n        let maxZ = -Infinity;\r\n\r\n        for (let i = 0, l = array.length; i < l; i += 3) {\r\n            const x = array[i];\r\n            const y = array[i + 1];\r\n            const z = array[i + 2];\r\n\r\n            if (x < minX) { minX = x; }\r\n            if (y < minY) { minY = y; }\r\n            if (z < minZ) { minZ = z; }\r\n\r\n            if (x > maxX) { maxX = x; }\r\n            if (y > maxY) { maxY = y; }\r\n            if (z > maxZ) { maxZ = z; }\r\n        }\r\n\r\n        this.min.set(minX, minY, minZ);\r\n        this.max.set(maxX, maxY, maxZ);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置Buffer属性\r\n     * @param attribute\r\n     */\r\n    public setFromBufferAttribute(attribute: BufferAttribute | InterleavedBufferAttribute): Box3 {\r\n        let minX = +Infinity;\r\n        let minY = +Infinity;\r\n        let minZ = +Infinity;\r\n\r\n        let maxX = -Infinity;\r\n        let maxY = -Infinity;\r\n        let maxZ = -Infinity;\r\n\r\n        for (let i = 0, l = attribute.count; i < l; i++) {\r\n            const x = attribute.getX(i);\r\n            const y = attribute.getY(i);\r\n            const z = attribute.getZ(i);\r\n\r\n            if (x < minX) { minX = x; }\r\n            if (y < minY) { minY = y; }\r\n            if (z < minZ) { minZ = z; }\r\n\r\n            if (x > maxX) { maxX = x; }\r\n            if (y > maxY) { maxY = y; }\r\n            if (z > maxZ) { maxZ = z; }\r\n        }\r\n\r\n        this.min.set(minX, minY, minZ);\r\n        this.max.set(maxX, maxY, maxZ);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置Vector3数组\r\n     * @param points\r\n     */\r\n    public setFromPoints(points: Vector3[]): Box3 {\r\n\r\n        this.makeEmpty();\r\n\r\n        for (let i = 0, il = points.length; i < il; i++) {\r\n            this.expandByPoint(points[i]);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置中心点和大小\r\n     * @param center\r\n     * @param size\r\n     */\r\n    public setFromCenterAndSize(center: Vector3, size: Vector3): Box3 {\r\n\r\n        const halfSize = MathTmp.Vector3[0].copy(size).multiplyScalar(0.5);\r\n        this.min.copy(center).sub(halfSize);\r\n        this.max.copy(center).add(halfSize);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置对象\r\n     * @param object\r\n     */\r\n    public setFromObject(object: AbstractObject): Box3 {\r\n\r\n        this.makeEmpty();\r\n\r\n        return this.expandByObject(object);\r\n    }\r\n\r\n    /**\r\n     * 重置为空\r\n     */\r\n    public makeEmpty(): Box3 {\r\n        this.min.x = this.min.y = this.min.z = +Infinity;\r\n        this.max.x = this.max.y = this.max.z = -Infinity;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 是否为空\r\n     */\r\n    public isEmpty(): boolean {\r\n        return (this.max.x < this.min.x) || (this.max.y < this.min.y) || (this.max.z < this.min.z);\r\n    }\r\n\r\n    /**\r\n     * 获取中心点\r\n     * @param target\r\n     * @returns {Vector3}\r\n     */\r\n    public getCenter(target = new Vector3()): Vector3 {\r\n        return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\r\n    }\r\n\r\n    /**\r\n     * 获取大小\r\n     * @param target\r\n     */\r\n    public getSize(target = new Vector3()): Vector3 {\r\n        return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);\r\n    }\r\n\r\n    /**\r\n     * 获取区段\r\n     * @param target\r\n     */\r\n    public getExtent(target = new Vector3()): Vector3 {\r\n        return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min).multiplyScalar(0.5);\r\n    }\r\n\r\n    /**\r\n     * 扩张坐标点\r\n     * @param point\r\n     */\r\n    public expandByPoint(point: Vector3): Box3 {\r\n        this.min.min(point);\r\n        this.max.max(point);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 扩张向量\r\n     * @param vector\r\n     */\r\n    public expandByVector(vector: Vector3): Box3 {\r\n        this.min.sub(vector);\r\n        this.max.add(vector);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 扩张缩放\r\n     * @param scalar\r\n     */\r\n    public expandByScalar(scalar: number): Box3 {\r\n        this.min.addScalar(-scalar);\r\n        this.max.addScalar(scalar);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 扩张Mesh对象\r\n     * @param object\r\n     */\r\n    public expandByObject(object: AbstractObject): Box3 {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取包围球\r\n     * @param target\r\n     */\r\n    public getBoundingSphere(target = new Sphere()): Sphere {\r\n        this.getCenter(target.center);\r\n        target.radius = this.getSize(MathTmp.Vector3[0]).length() * 0.5;\r\n        return target;\r\n    }\r\n\r\n    /**\r\n     * 是否包含坐标点\r\n     * @param point\r\n     */\r\n    public containsPoint(point: Vector3): boolean {\r\n        return !(point.x < this.min.x || point.x > this.max.x ||\r\n            point.y < this.min.y || point.y > this.max.y ||\r\n            point.z < this.min.z || point.z > this.max.z);\r\n    }\r\n\r\n    /**\r\n     * 是否包含包围盒\r\n     * @param box\r\n     */\r\n    public containsBox(box: Box3): boolean {\r\n        return this.min.x <= box.min.x && box.max.x <= this.max.x &&\r\n            this.min.y <= box.min.y && box.max.y <= this.max.y &&\r\n            this.min.z <= box.min.z && box.max.z <= this.max.z;\r\n    }\r\n\r\n    /**\r\n     * 是否包含包围球\r\n     * @param sphere\r\n     */\r\n    public containsSphere(sphere = new Sphere()): boolean {\r\n        const boxSphere = new Sphere();\r\n        this.getBoundingSphere(boxSphere);\r\n        return boxSphere.containsSphere(sphere);\r\n    }\r\n\r\n    /**\r\n     * 坐标点相对Box尺寸的比例\r\n     * @param point\r\n     * @param target\r\n     */\r\n    public getParameter(point: Vector3, target = new Vector3()): Vector3 {\r\n\r\n        return target.set(\r\n            (point.x - this.min.x) / (this.max.x - this.min.x),\r\n            (point.y - this.min.y) / (this.max.y - this.min.y),\r\n            (point.z - this.min.z) / (this.max.z - this.min.z),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 限制坐标点\r\n     * @param point\r\n     * @param target\r\n     */\r\n    public clampPoint(point: Vector3, target = new Vector3()): Vector3 {\r\n\r\n        return target.copy(point).clamp(this.min, this.max);\r\n    }\r\n\r\n    /**\r\n     * 与包围盒的交集\r\n     * @param box\r\n     */\r\n    public intersect(box: Box3): Box3 {\r\n        this.min.max(box.min);\r\n        this.max.min(box.max);\r\n        if (this.isEmpty()) { this.makeEmpty(); }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 与包围盒的并集\r\n     * @param box\r\n     */\r\n    public union(box: Box3): Box3 {\r\n        this.min.min(box.min);\r\n        this.max.max(box.max);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 乘以Matrix4矩阵\r\n     * @param matrix\r\n     */\r\n    public applyMatrix4(matrix: Matrix4): Box3 {\r\n\r\n        if (this.isEmpty()) { return this; }\r\n\r\n        MathTmp.Vector3[ 0 ].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000\r\n        MathTmp.Vector3[ 1 ].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001\r\n        MathTmp.Vector3[ 2 ].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010\r\n        MathTmp.Vector3[ 3 ].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011\r\n        MathTmp.Vector3[ 4 ].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100\r\n        MathTmp.Vector3[ 5 ].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101\r\n        MathTmp.Vector3[ 6 ].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110\r\n        MathTmp.Vector3[ 7 ].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111\r\n\r\n        this.setFromPoints(MathTmp.Vector3);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 平移\r\n     * @param offset\r\n     */\r\n    public translate(offset: Vector3): Box3 {\r\n        this.min.add(offset);\r\n        this.max.add(offset);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 缩放\r\n     * @param scalar\r\n     */\r\n    public scale(scalar: number): Box3 {\r\n        this.min.multiplyScalar(scalar);\r\n        this.max.multiplyScalar(scalar);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 乘以向量\r\n     * @param vec\r\n     */\r\n    public multiply(vec: Vector3): Box3 {\r\n        this.min.multiply(vec);\r\n        this.max.multiply(vec);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 平移\r\n     * @param offset1\r\n     * @param offset2\r\n     */\r\n    public translates(offset1: Vector3, offset2: Vector3): Box3 {\r\n        this.min.add(offset1);\r\n        this.max.add(offset2);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 缩放\r\n     * @param scalar1\r\n     * @param scalar2\r\n     */\r\n    public scales(scalar1: number, scalar2: number): Box3 {\r\n        this.min.multiplyScalar(scalar1);\r\n        this.max.multiplyScalar(scalar2);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 乘以向量\r\n     * @param aVec\r\n     * @param bVec\r\n     */\r\n    public multiplies(aVec: Vector3, bVec: Vector3): Box3 {\r\n        this.min.multiply(aVec);\r\n        this.max.multiply(bVec);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 与坐标点的SQ距离\r\n     * @param point\r\n     * @param closestPoint\r\n     */\r\n    public distanceSqToPoint(point: Vector3, closestPoint: Nullable<Vector3> = null): number {\r\n\r\n        const boxCenter = this.getCenter(MathTmp.Vector3[0]);\r\n        const boxExtent = this.getExtent(MathTmp.Vector3[1]);\r\n        const closest = MathTmp.Vector3[2].subVectors(point, boxCenter);\r\n\r\n        let sqDistance = 0;\r\n\r\n        for (let i = 0; i < 3; ++i) {\r\n            if (closest.p[i] < -boxExtent.p[i]) {\r\n                const delta = closest.p[i] + boxExtent.p[i];\r\n                sqDistance += delta * delta;\r\n                closest.p[i] =  -boxExtent.p[i];\r\n            }\r\n            else if (closest.p[i] > boxExtent.p[i]) {\r\n                const delta = closest.p[i] - boxExtent.p[i];\r\n                sqDistance += delta * delta;\r\n                closest.p[i] =  boxExtent.p[i];\r\n            }\r\n        }\r\n\r\n        if (closestPoint) {\r\n            closestPoint.addVectors(closest, boxCenter);\r\n        }\r\n\r\n        return sqDistance;\r\n    }\r\n\r\n    /**\r\n     * 与坐标点的距离\r\n     * @param point\r\n     * @param closestPoint\r\n     */\r\n    public distanceToPoint(point: Vector3, closestPoint: Nullable<Vector3> = null): number {\r\n        return Math.sqrt(this.distanceSqToPoint(point, closestPoint));\r\n    }\r\n\r\n    /**\r\n     * 与包围盒的SQ距离\r\n     * @param box\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     */\r\n    public distanceSqToBox(box: Box3, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null): number {\r\n\r\n        MathTmp.Box3[0].makeEmpty();\r\n        MathTmp.Box3[1].makeEmpty();\r\n\r\n        let sqrDistance = 0;\r\n\r\n        for (let i = 0; i < 3; ++i) {\r\n\r\n            if (this.min.p[i] >= box.max.p[i]) {\r\n\r\n                const delta = this.min.p[i] - box.min.p[i];\r\n                sqrDistance += delta * delta;\r\n\r\n                if (closestPoint0) {\r\n                    MathTmp.Box3[0].min.p[i] =  this.min.p[i];\r\n                    MathTmp.Box3[0].max.p[i] =  this.min.p[i];\r\n                }\r\n                if (closestPoint1) {\r\n                    MathTmp.Box3[1].min.p[i] =  box.max.p[i];\r\n                    MathTmp.Box3[1].max.p[i] =  box.max.p[i];\r\n                }\r\n            }\r\n            else if (box.min.p[i] >= this.max.p[i]) {\r\n\r\n                const delta = box.min.p[i] - this.max.p[i];\r\n                sqrDistance += delta * delta;\r\n\r\n                if (closestPoint0) {\r\n                    MathTmp.Box3[0].min.p[i] =  this.max.p[i];\r\n                    MathTmp.Box3[0].max.p[i] =  this.max.p[i];\r\n                }\r\n                if (closestPoint1) {\r\n                    MathTmp.Box3[1].min.p[i] =  box.min.p[i];\r\n                    MathTmp.Box3[1].max.p[i] =  box.min.p[i];\r\n                }\r\n            }\r\n            else if (closestPoint0 || closestPoint1) {\r\n\r\n                const intr0 = [ this.min.p[i], this.max.p[i] ];\r\n                const intr1 = [ box.min.p[i], box.max.p[i] ];\r\n                const iiResult = Intervals.staticQuery(intr0, intr1);\r\n                if (closestPoint0) {\r\n                    MathTmp.Box3[0].min.p[i] =  iiResult.overlap[0];\r\n                    MathTmp.Box3[0].max.p[i] =  iiResult.overlap[1];\r\n                }\r\n                if (closestPoint1) {\r\n                    MathTmp.Box3[1].min.p[i] =  iiResult.overlap[0];\r\n                    MathTmp.Box3[1].max.p[i] =  iiResult.overlap[1];\r\n                }\r\n            }\r\n        }\r\n\r\n        if (closestPoint0) {\r\n            MathTmp.Box3[0].getCenter(closestPoint0);\r\n        }\r\n        if (closestPoint1) {\r\n            MathTmp.Box3[1].getCenter(closestPoint1);\r\n        }\r\n\r\n        return sqrDistance;\r\n    }\r\n\r\n    /**\r\n     * 与包围盒的距离\r\n     * @param box\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     */\r\n    public distanceToBox(box: Box3, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null): number {\r\n        return Math.sqrt(this.distanceSqToBox(box, closestPoint0, closestPoint1));\r\n    }\r\n\r\n    /**\r\n     * 与OBB的SQ距离\r\n     * @param box\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceSqToOBB(box: OBB, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Box3OBBDistance> = null): number {\r\n\r\n        const box0 = this;\r\n        const box1 = box;\r\n\r\n        const K = MathTmp.Vector3[0].subVectors(box0.max, box0.min);\r\n        const delta = MathTmp.Vector3[1].subVectors(box1.center, box0.min);\r\n\r\n        for (let i = 0; i < 3; ++i) {\r\n            delta.sub(MathTmp.Vector3[2].copy(box1.axis[i]).multiplyScalar(box1.extent.p[i]));\r\n        }\r\n\r\n        const rotDelta = MathTmp.Vector3[2];\r\n        for (let i = 0; i < 3; ++i) {\r\n            rotDelta.p[i] =  box1.axis[i].dot(delta);\r\n        }\r\n\r\n        const twoExtent = MathTmp.Vector3[3].copy(box1.extent).multiplyScalar(2);\r\n\r\n        const q = [\r\n            -delta.x, -delta.y, -delta.z, rotDelta.x, rotDelta.y, rotDelta.z,\r\n            K.x, K.y, K.z, twoExtent.x, twoExtent.y, twoExtent.z\r\n        ];\r\n\r\n        const z = 0;\r\n        const p = 1;\r\n        const m = -1;\r\n        const U0 = box1.axis[0];\r\n        const U1 = box1.axis[1];\r\n        const U2 = box1.axis[2];\r\n\r\n        const M = [\r\n            [p, z, z, -U0.x, -U1.x, -U1.z, p, z, z, z, z, z],\r\n            [z, p, z, -U0.y, -U1.y, -U1.y, z, p, z, z, z, z],\r\n            [z, z, p, -U0.z, -U1.z, -U1.z, z, z, p, z, z, z],\r\n            [-U0.x, -U0.y, -U0.z, p, z, z, z, z, z, p, z, z],\r\n            [-U1.x, -U1.y, -U1.z, z, p, z, z, z, z, z, p, z],\r\n            [-U2.x, -U2.y, -U2.z, z, z, p, z, z, z, z, z, p],\r\n            [m, z, z, z, z, z, z, z, z, z, z, z],\r\n            [z, m, z, z, z, z, z, z, z, z, z, z],\r\n            [z, z, m, z, z, z, z, z, z, z, z, z],\r\n            [z, z, z, m, z, z, z, z, z, z, z, z],\r\n            [z, z, z, z, m, z, z, z, z, z, z, z],\r\n            [z, z, z, z, z, m, z, z, z, z, z, z]\r\n        ];\r\n\r\n        const w = new Array<number>(12);\r\n        const zz = new Array<number>(12);\r\n\r\n        const mLCP = new LCPSolver(12);\r\n        if (mLCP.solve(q, M, w, zz)) {\r\n\r\n            if (parameter) {\r\n                parameter.queryIsSuccessful = true;\r\n                parameter.numLCPIterations = mLCP.getNumIterations();\r\n            }\r\n\r\n            for (let i = 0; i < 3; ++i) {\r\n\r\n                const boxParameter = zz[i] + box0.min.p[i];\r\n                if (parameter) {\r\n                    parameter.box0Parameter[i] = boxParameter;\r\n                }\r\n                MathTmp.Vector3[0].p[i] = boxParameter;\r\n            }\r\n\r\n            MathTmp.Vector3[1].copy(box1.center);\r\n            for (let i = 0, j = 3; i < 3; ++i, ++j) {\r\n\r\n                const boxParameter = zz[j] - box1.extent.p[i];\r\n                if (parameter) {\r\n                    parameter.box1Parameter[i] = boxParameter;\r\n                }\r\n                MathTmp.Vector3[1].add(MathTmp.Vector3[2].copy(box1.axis[i]).multiplyScalar(boxParameter));\r\n            }\r\n\r\n            if (closestPoint0) {\r\n                closestPoint0.copy(MathTmp.Vector3[0]);\r\n            }\r\n\r\n            if (closestPoint1) {\r\n                closestPoint1.copy(MathTmp.Vector3[1]);\r\n            }\r\n\r\n            const diff = MathTmp.Vector3[2].subVectors(MathTmp.Vector3[1], MathTmp.Vector3[0]);\r\n            return diff.dot(diff);\r\n        }\r\n        else {\r\n            if (parameter) {\r\n                parameter.queryIsSuccessful = false;\r\n                parameter.numLCPIterations = 0;\r\n            }\r\n        }\r\n\r\n        return NaN;\r\n    }\r\n\r\n    /**\r\n     * 与OBB的距离\r\n     * @param box\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     */\r\n    public distanceToOBB(box: OBB, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Box3OBBDistance> = null): number {\r\n        return Math.sqrt(this.distanceSqToOBB(box, closestPoint0, closestPoint1, parameter));\r\n    }\r\n\r\n    /**\r\n     * 与包围盒是否相交\r\n     * @param box\r\n     */\r\n    public intersectsBox(box: Box3): boolean {\r\n        return !(box.max.x < this.min.x || box.min.x > this.max.x ||\r\n            box.max.y < this.min.y || box.min.y > this.max.y ||\r\n            box.max.z < this.min.z || box.min.z > this.max.z);\r\n    }\r\n\r\n    /**\r\n     * 包围盒相交检测\r\n     * @param box\r\n     */\r\n    public intersectBox(box: Box3): Box3Box3Intersect {\r\n\r\n        const box0 = this;\r\n        const box1 = box;\r\n\r\n        const result = {\r\n            intersect: false,\r\n            box: new Box3()\r\n        };\r\n\r\n        for (let i = 0; i < 3; i++) {\r\n            if (box0.max.p[i] < box1.min.p[i] || box0.min.p[i] > box1.max.p[i]) {\r\n                result.intersect = false;\r\n                return result;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < 3; i++) {\r\n            if (box0.max.p[i] <= box1.max.p[i]) {\r\n                result.box.max.p[i] =  box0.max.p[i];\r\n            }\r\n            else {\r\n                result.box.max.p[i] =  box1.max.p[i];\r\n            }\r\n\r\n            if (box0.min.p[i] <= box1.min.p[i]) {\r\n                result.box.min.p[i] =  box1.min.p[i];\r\n            }\r\n            else {\r\n                result.box.min.p[i] =  box0.min.p[i];\r\n            }\r\n        }\r\n\r\n        result.intersect = true;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 与包围球是否相交\r\n     * @param sphere\r\n     */\r\n    public intersectsSphere(sphere: Sphere): boolean {\r\n        this.clampPoint(sphere.center, MathTmp.Vector3[0]);\r\n        return MathTmp.Vector3[0].distanceToSquared(sphere.center) <= (sphere.radius * sphere.radius);\r\n    }\r\n\r\n    /**\r\n     * 与OBB是否相交\r\n     * @param box\r\n     */\r\n    public intersectsOBB(box: OBB): boolean {\r\n\r\n        const box0 = this;\r\n        const box1 = box;\r\n\r\n        // Get the centered form of the aligned box.  The axes are implicitly\r\n        // A0[0] = (1,0,0), A0[1] = (0,1,0), and A0[2] = (0,0,1).\r\n        let C0 = box0.getCenter(MathTmp.Vector3[0]);\r\n        let E0 = box0.getExtent(MathTmp.Vector3[1]).toArray(_tempArray1);\r\n\r\n        // Convenience variables.\r\n        let C1 = box1.center;\r\n        let A1 = box1.axis;\r\n        let E1 = box1.extent.toArray(_tempArray2);\r\n\r\n        let cutoff = 1;\r\n        let existsParallelPair = false;\r\n\r\n        // Compute the difference of box centers.\r\n        let D = MathTmp.Vector3[2].subVectors(C1, C0);\r\n\r\n        let dot01: number[][] = [[], [], []];      // dot01[i][j] = Dot(A0[i],A1[j]) = A1[j][i]\r\n        let absDot01: number[][] = [[], [], []];   // |dot01[i][j]|\r\n        let r0; let r1; let r;                      // interval radii and distance between centers\r\n        let r01;                                    // r0 + r1\r\n\r\n        // Test for separation on the axis C0 + t*A0[0].\r\n        for (let i = 0; i < 3; ++i) {\r\n            dot01[0][i] = A1[i].x;\r\n            absDot01[0][i] = Math.abs(A1[i].x);\r\n            if (absDot01[0][i] >= cutoff) {\r\n                existsParallelPair = true;\r\n            }\r\n        }\r\n        r = Math.abs(D.x);\r\n        r1 = E1[0] * absDot01[0][0] + E1[1] * absDot01[0][1] + E1[2] * absDot01[0][2];\r\n        r01 = E0[0] + r1;\r\n        if (r > r01) {\r\n            return false;\r\n        }\r\n\r\n        // Test for separation on the axis C0 + t*A0[1].\r\n        for (let i = 0; i < 3; ++i) {\r\n            dot01[1][i] = A1[i].y;\r\n            absDot01[1][i] = Math.abs(A1[i].y);\r\n            if (absDot01[1][i] >= cutoff) {\r\n                existsParallelPair = true;\r\n            }\r\n        }\r\n        r = Math.abs(D.y);\r\n        r1 = E1[0] * absDot01[1][0] + E1[1] * absDot01[1][1] + E1[2] * absDot01[1][2];\r\n        r01 = E0[1] + r1;\r\n        if (r > r01) {\r\n            return false;\r\n        }\r\n\r\n        // Test for separation on the axis C0 + t*A0[2].\r\n        for (let i = 0; i < 3; ++i) {\r\n            dot01[2][i] = A1[i].z;\r\n            absDot01[2][i] = Math.abs(A1[i].z);\r\n            if (absDot01[2][i] >= cutoff) {\r\n                existsParallelPair = true;\r\n            }\r\n        }\r\n        r = Math.abs(D.z);\r\n        r1 = E1[0] * absDot01[2][0] + E1[1] * absDot01[2][1] + E1[2] * absDot01[2][2];\r\n        r01 = E0[2] + r1;\r\n        if (r > r01) {\r\n            return false;\r\n        }\r\n\r\n        // Test for separation on the axis C0 + t*A1[0].\r\n        r = Math.abs(D.dot(A1[0]));\r\n        r0 = E0[0] * absDot01[0][0] + E0[1] * absDot01[1][0] + E0[2] * absDot01[2][0];\r\n        r01 = r0 + E1[0];\r\n        if (r > r01) {\r\n            return false;\r\n        }\r\n\r\n        // Test for separation on the axis C0 + t*A1[1].\r\n        r = Math.abs(D.dot(A1[1]));\r\n        r0 = E0[0] * absDot01[0][1] + E0[1] * absDot01[1][1] + E0[2] * absDot01[2][1];\r\n        r01 = r0 + E1[1];\r\n        if (r > r01) {\r\n            return false;\r\n        }\r\n\r\n        // Test for separation on the axis C0 + t*A1[2].\r\n        r = Math.abs(D.dot(A1[2]));\r\n        r0 = E0[0] * absDot01[0][2] + E0[1] * absDot01[1][2] + E0[2] * absDot01[2][2];\r\n        r01 = r0 + E1[2];\r\n        if (r > r01) {\r\n            return false;\r\n        }\r\n\r\n        // At least one pair of box axes was parallel, so the separation is\r\n        // effectively in 2D.  The edge-edge axes do not need to be tested.\r\n        if (existsParallelPair) {\r\n            return true;\r\n        }\r\n\r\n        // Test for separation on the axis C0 + t*A0[0]xA1[0].\r\n        r = Math.abs(D.z * dot01[1][0] - D.y * dot01[2][0]);\r\n        r0 = E0[1] * absDot01[2][0] + E0[2] * absDot01[1][0];\r\n        r1 = E1[1] * absDot01[0][2] + E1[2] * absDot01[0][1];\r\n        r01 = r0 + r1;\r\n        if (r > r01) {\r\n            return false;\r\n        }\r\n\r\n        // Test for separation on the axis C0 + t*A0[0]xA1[1].\r\n        r = Math.abs(D.z * dot01[1][1] - D.y * dot01[2][1]);\r\n        r0 = E0[1] * absDot01[2][1] + E0[2] * absDot01[1][1];\r\n        r1 = E1[0] * absDot01[0][2] + E1[2] * absDot01[0][0];\r\n        r01 = r0 + r1;\r\n        if (r > r01) {\r\n            return false;\r\n        }\r\n\r\n        // Test for separation on the axis C0 + t*A0[0]xA1[2].\r\n        r = Math.abs(D.z * dot01[1][2] - D.y * dot01[2][2]);\r\n        r0 = E0[1] * absDot01[2][2] + E0[2] * absDot01[1][2];\r\n        r1 = E1[0] * absDot01[0][1] + E1[1] * absDot01[0][0];\r\n        r01 = r0 + r1;\r\n        if (r > r01) {\r\n            return false;\r\n        }\r\n\r\n        // Test for separation on the axis C0 + t*A0[1]xA1[0].\r\n        r = Math.abs(D.x * dot01[2][0] - D.z * dot01[0][0]);\r\n        r0 = E0[0] * absDot01[2][0] + E0[2] * absDot01[0][0];\r\n        r1 = E1[1] * absDot01[1][2] + E1[2] * absDot01[1][1];\r\n        r01 = r0 + r1;\r\n        if (r > r01) {\r\n            return false;\r\n        }\r\n\r\n        // Test for separation on the axis C0 + t*A0[1]xA1[1].\r\n        r = Math.abs(D.x * dot01[2][1] - D.z * dot01[0][1]);\r\n        r0 = E0[0] * absDot01[2][1] + E0[2] * absDot01[0][1];\r\n        r1 = E1[0] * absDot01[1][2] + E1[2] * absDot01[1][0];\r\n        r01 = r0 + r1;\r\n        if (r > r01) {\r\n            return false;\r\n        }\r\n\r\n        // Test for separation on the axis C0 + t*A0[1]xA1[2].\r\n        r = Math.abs(D.x * dot01[2][2] - D.z * dot01[0][2]);\r\n        r0 = E0[0] * absDot01[2][2] + E0[2] * absDot01[0][2];\r\n        r1 = E1[0] * absDot01[1][1] + E1[1] * absDot01[1][0];\r\n        r01 = r0 + r1;\r\n        if (r > r01) {\r\n            return false;\r\n        }\r\n\r\n        // Test for separation on the axis C0 + t*A0[2]xA1[0].\r\n        r = Math.abs(D.y * dot01[0][0] - D.x * dot01[1][0]);\r\n        r0 = E0[0] * absDot01[1][0] + E0[1] * absDot01[0][0];\r\n        r1 = E1[1] * absDot01[2][2] + E1[2] * absDot01[2][1];\r\n        r01 = r0 + r1;\r\n        if (r > r01) {\r\n            return false;\r\n        }\r\n\r\n        // Test for separation on the axis C0 + t*A0[2]xA1[1].\r\n        r = Math.abs(D.y * dot01[0][1] - D.x * dot01[1][1]);\r\n        r0 = E0[0] * absDot01[1][1] + E0[1] * absDot01[0][1];\r\n        r1 = E1[0] * absDot01[2][2] + E1[2] * absDot01[2][0];\r\n        r01 = r0 + r1;\r\n        if (r > r01) {\r\n            return false;\r\n        }\r\n\r\n        // Test for separation on the axis C0 + t*A0[2]xA1[2].\r\n        r = Math.abs(D.y * dot01[0][2] - D.x * dot01[1][2]);\r\n        r0 = E0[0] * absDot01[1][2] + E0[1] * absDot01[0][2];\r\n        r1 = E1[0] * absDot01[2][1] + E1[1] * absDot01[2][0];\r\n        r01 = r0 + r1;\r\n        if (r > r01) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 是否相等\r\n     * @param box\r\n     */\r\n    public equals(box: Box3): boolean {\r\n        return box.min.equals(this.min) && box.max.equals(this.max);\r\n    }\r\n\r\n    /**\r\n     * 生成数组\r\n     * @param array\r\n     * @param offset\r\n     */\r\n    public toArray(array: FloatArray = [], offset = 0): FloatArray {\r\n        this.min.toArray(array, offset);\r\n        this.max.toArray(array, offset + 3);\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * 复制数组\r\n     * @param array\r\n     * @param offset\r\n     */\r\n    public fromArray(array: FloatArray, offset = 0): Box3 {\r\n        this.min.fromArray(array, offset);\r\n        this.max.fromArray(array, offset + 3);\r\n        return this;\r\n    }\r\n}\r\n",
        "import { DeepImmutable, FloatArray, int, Nullable } from \"../types\";\r\nimport { MathUtils } from \"./MathUtils\";\r\nimport { BinaryBuffer, BufferAttribute } from \"../Misc\";\r\n\r\ntype InColorRGB = ColorRGB | DeepImmutable<ColorRGB>;\r\n\r\n/**\r\n * @ignore\r\n */\r\ndeclare const _colorKeywords: {\r\n    [key: string]: number;\r\n\r\n    'aliceblue': 0xF0F8FF,\r\n    'antiquewhite': 0xFAEBD7,\r\n    'aqua': 0x00FFFF,\r\n    'aquamarine': 0x7FFFD4,\r\n    'azure': 0xF0FFFF,\r\n    'beige': 0xF5F5DC,\r\n    'bisque': 0xFFE4C4,\r\n    'black': 0x000000,\r\n    'blanchedalmond': 0xFFEBCD,\r\n    'blue': 0x0000FF,\r\n    'blueviolet': 0x8A2BE2,\r\n    'brown': 0xA52A2A,\r\n    'burlywood': 0xDEB887,\r\n    'cadetblue': 0x5F9EA0,\r\n    'chartreuse': 0x7FFF00,\r\n    'chocolate': 0xD2691E,\r\n    'coral': 0xFF7F50,\r\n    'cornflowerblue': 0x6495ED,\r\n    'cornsilk': 0xFFF8DC,\r\n    'crimson': 0xDC143C,\r\n    'cyan': 0x00FFFF,\r\n    'darkblue': 0x00008B,\r\n    'darkcyan': 0x008B8B,\r\n    'darkgoldenrod': 0xB8860B,\r\n    'darkgray': 0xA9A9A9,\r\n    'darkgreen': 0x006400,\r\n    'darkgrey': 0xA9A9A9,\r\n    'darkkhaki': 0xBDB76B,\r\n    'darkmagenta': 0x8B008B,\r\n    'darkolivegreen': 0x556B2F,\r\n    'darkorange': 0xFF8C00,\r\n    'darkorchid': 0x9932CC,\r\n    'darkred': 0x8B0000,\r\n    'darksalmon': 0xE9967A,\r\n    'darkseagreen': 0x8FBC8F,\r\n    'darkslateblue': 0x483D8B,\r\n    'darkslategray': 0x2F4F4F,\r\n    'darkslategrey': 0x2F4F4F,\r\n    'darkturquoise': 0x00CED1,\r\n    'darkviolet': 0x9400D3,\r\n    'deeppink': 0xFF1493,\r\n    'deepskyblue': 0x00BFFF,\r\n    'dimgray': 0x696969,\r\n    'dimgrey': 0x696969,\r\n    'dodgerblue': 0x1E90FF,\r\n    'firebrick': 0xB22222,\r\n    'floralwhite': 0xFFFAF0,\r\n    'forestgreen': 0x228B22,\r\n    'fuchsia': 0xFF00FF,\r\n    'gainsboro': 0xDCDCDC,\r\n    'ghostwhite': 0xF8F8FF,\r\n    'gold': 0xFFD700,\r\n    'goldenrod': 0xDAA520,\r\n    'gray': 0x808080,\r\n    'green': 0x008000,\r\n    'greenyellow': 0xADFF2F,\r\n    'grey': 0x808080,\r\n    'honeydew': 0xF0FFF0,\r\n    'hotpink': 0xFF69B4,\r\n    'indianred': 0xCD5C5C,\r\n    'indigo': 0x4B0082,\r\n    'ivory': 0xFFFFF0,\r\n    'khaki': 0xF0E68C,\r\n    'lavender': 0xE6E6FA,\r\n    'lavenderblush': 0xFFF0F5,\r\n    'lawngreen': 0x7CFC00,\r\n    'lemonchiffon': 0xFFFACD,\r\n    'lightblue': 0xADD8E6,\r\n    'lightcoral': 0xF08080,\r\n    'lightcyan': 0xE0FFFF,\r\n    'lightgoldenrodyellow': 0xFAFAD2,\r\n    'lightgray': 0xD3D3D3,\r\n    'lightgreen': 0x90EE90,\r\n    'lightgrey': 0xD3D3D3,\r\n    'lightpink': 0xFFB6C1,\r\n    'lightsalmon': 0xFFA07A,\r\n    'lightseagreen': 0x20B2AA,\r\n    'lightskyblue': 0x87CEFA,\r\n    'lightslategray': 0x778899,\r\n    'lightslategrey': 0x778899,\r\n    'lightsteelblue': 0xB0C4DE,\r\n    'lightyellow': 0xFFFFE0,\r\n    'lime': 0x00FF00,\r\n    'limegreen': 0x32CD32,\r\n    'linen': 0xFAF0E6,\r\n    'magenta': 0xFF00FF,\r\n    'maroon': 0x800000,\r\n    'mediumaquamarine': 0x66CDAA,\r\n    'mediumblue': 0x0000CD,\r\n    'mediumorchid': 0xBA55D3,\r\n    'mediumpurple': 0x9370DB,\r\n    'mediumseagreen': 0x3CB371,\r\n    'mediumslateblue': 0x7B68EE,\r\n    'mediumspringgreen': 0x00FA9A,\r\n    'mediumturquoise': 0x48D1CC,\r\n    'mediumvioletred': 0xC71585,\r\n    'midnightblue': 0x191970,\r\n    'mintcream': 0xF5FFFA,\r\n    'mistyrose': 0xFFE4E1,\r\n    'moccasin': 0xFFE4B5,\r\n    'navajowhite': 0xFFDEAD,\r\n    'navy': 0x000080,\r\n    'oldlace': 0xFDF5E6,\r\n    'olive': 0x808000,\r\n    'olivedrab': 0x6B8E23,\r\n    'orange': 0xFFA500,\r\n    'orangered': 0xFF4500,\r\n    'orchid': 0xDA70D6,\r\n    'palegoldenrod': 0xEEE8AA,\r\n    'palegreen': 0x98FB98,\r\n    'paleturquoise': 0xAFEEEE,\r\n    'palevioletred': 0xDB7093,\r\n    'papayawhip': 0xFFEFD5,\r\n    'peachpuff': 0xFFDAB9,\r\n    'peru': 0xCD853F,\r\n    'pink': 0xFFC0CB,\r\n    'plum': 0xDDA0DD,\r\n    'powderblue': 0xB0E0E6,\r\n    'purple': 0x800080,\r\n    'rebeccapurple': 0x663399,\r\n    'red': 0xFF0000,\r\n    'rosybrown': 0xBC8F8F,\r\n    'royalblue': 0x4169E1,\r\n    'saddlebrown': 0x8B4513,\r\n    'salmon': 0xFA8072,\r\n    'sandybrown': 0xF4A460,\r\n    'seagreen': 0x2E8B57,\r\n    'seashell': 0xFFF5EE,\r\n    'sienna': 0xA0522D,\r\n    'silver': 0xC0C0C0,\r\n    'skyblue': 0x87CEEB,\r\n    'slateblue': 0x6A5ACD,\r\n    'slategray': 0x708090,\r\n    'slategrey': 0x708090,\r\n    'snow': 0xFFFAFA,\r\n    'springgreen': 0x00FF7F,\r\n    'steelblue': 0x4682B4,\r\n    'tan': 0xD2B48C,\r\n    'teal': 0x008080,\r\n    'thistle': 0xD8BFD8,\r\n    'tomato': 0xFF6347,\r\n    'turquoise': 0x40E0D0,\r\n    'violet': 0xEE82EE,\r\n    'wheat': 0xF5DEB3,\r\n    'white': 0xFFFFFF,\r\n    'whitesmoke': 0xF5F5F5,\r\n    'yellow': 0xFFFF00,\r\n    'yellowgreen': 0x9ACD32\r\n};\r\n\r\n/**\r\n * HSL颜色\r\n * @category Math\r\n */\r\nexport interface ColorHSL {\r\n    h: number;\r\n    s: number;\r\n    l: number;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst _hslA: ColorHSL = {h: 0, s: 0, l: 0};\r\n/**\r\n * @ignore\r\n */\r\nconst _hslB: ColorHSL = {h: 0, s: 0, l: 0};\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction hue2rgb(p: number, q: number, t: number): number {\r\n    if (t < 0) { t += 1; }\r\n    if (t > 1) { t -= 1; }\r\n    if (t < 1 / 6) { return p + (q - p) * 6 * t; }\r\n    if (t < 1 / 2) { return q; }\r\n    if (t < 2 / 3) { return p + (q - p) * 6 * (2 / 3 - t); }\r\n    return p;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction sRGBToLinear(c: number): number {\r\n    return (c < 0.04045) ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction linearToSRGB(c: number): number {\r\n    return (c < 0.0031308) ? c * 12.92 : 1.055 * (Math.pow(c, 0.41666)) - 0.055;\r\n}\r\n\r\n/**\r\n * RGB颜色\r\n * @category Math\r\n */\r\nexport class ColorRGB {\r\n\r\n    public static readonly ALICEBLUE = new ColorRGB('#F0F8FF') as DeepImmutable<ColorRGB>;\r\n    public static readonly ANTIQUEWHITE = new ColorRGB('#FAEBD7') as DeepImmutable<ColorRGB>;\r\n    public static readonly AQUA = new ColorRGB('#00FFFF') as DeepImmutable<ColorRGB>;\r\n    public static readonly AQUAMARINE = new ColorRGB('#7FFFD4') as DeepImmutable<ColorRGB>;\r\n    public static readonly AZURE = new ColorRGB('#F0FFFF') as DeepImmutable<ColorRGB>;\r\n    public static readonly BEIGE = new ColorRGB('#F5F5DC') as DeepImmutable<ColorRGB>;\r\n    public static readonly BISQUE = new ColorRGB('#FFE4C4') as DeepImmutable<ColorRGB>;\r\n    public static readonly BLACK = new ColorRGB('#000000') as DeepImmutable<ColorRGB>;\r\n    public static readonly BLANCHEDALMOND = new ColorRGB('#FFEBCD') as DeepImmutable<ColorRGB>;\r\n    public static readonly BLUE = new ColorRGB('#0000FF') as DeepImmutable<ColorRGB>;\r\n    public static readonly BLUEVIOLET = new ColorRGB('#8A2BE2') as DeepImmutable<ColorRGB>;\r\n    public static readonly BROWN = new ColorRGB('#A52A2A') as DeepImmutable<ColorRGB>;\r\n    public static readonly BURLYWOOD = new ColorRGB('#DEB887') as DeepImmutable<ColorRGB>;\r\n    public static readonly CADETBLUE = new ColorRGB('#5F9EA0') as DeepImmutable<ColorRGB>;\r\n    public static readonly CHARTREUSE = new ColorRGB('#7FFF00') as DeepImmutable<ColorRGB>;\r\n    public static readonly CHOCOLATE = new ColorRGB('#D2691E') as DeepImmutable<ColorRGB>;\r\n    public static readonly CORAL = new ColorRGB('#FF7F50') as DeepImmutable<ColorRGB>;\r\n    public static readonly CORNFLOWERBLUE = new ColorRGB('#6495ED') as DeepImmutable<ColorRGB>;\r\n    public static readonly CORNSILK = new ColorRGB('#FFF8DC') as DeepImmutable<ColorRGB>;\r\n    public static readonly CRIMSON = new ColorRGB('#DC143C') as DeepImmutable<ColorRGB>;\r\n    public static readonly CYAN = new ColorRGB('#00FFFF') as DeepImmutable<ColorRGB>;\r\n    public static readonly DARKBLUE = new ColorRGB('#00008B') as DeepImmutable<ColorRGB>;\r\n    public static readonly DARKCYAN = new ColorRGB('#008B8B') as DeepImmutable<ColorRGB>;\r\n    public static readonly DARKGOLDENROD = new ColorRGB('#B8860B') as DeepImmutable<ColorRGB>;\r\n    public static readonly DARKGRAY = new ColorRGB('#A9A9A9') as DeepImmutable<ColorRGB>;\r\n    public static readonly DARKGREEN = new ColorRGB('#006400') as DeepImmutable<ColorRGB>;\r\n    public static readonly DARKGREY = ColorRGB.DARKGREEN;\r\n    public static readonly DARKKHAKI = new ColorRGB('#BDB76B') as DeepImmutable<ColorRGB>;\r\n    public static readonly DARKMAGENTA = new ColorRGB('#8B008B') as DeepImmutable<ColorRGB>;\r\n    public static readonly DARKOLIVEGREEN = new ColorRGB('#556B2F') as DeepImmutable<ColorRGB>;\r\n    public static readonly DARKORANGE = new ColorRGB('#FF8C00') as DeepImmutable<ColorRGB>;\r\n    public static readonly DARKORCHID = new ColorRGB('#9932CC') as DeepImmutable<ColorRGB>;\r\n    public static readonly DARKRED = new ColorRGB('#8B0000') as DeepImmutable<ColorRGB>;\r\n    public static readonly DARKSALMON = new ColorRGB('#E9967A') as DeepImmutable<ColorRGB>;\r\n    public static readonly DARKSEAGREEN = new ColorRGB('#8FBC8F') as DeepImmutable<ColorRGB>;\r\n    public static readonly DARKSLATEBLUE = new ColorRGB('#483D8B') as DeepImmutable<ColorRGB>;\r\n    public static readonly DARKSLATEGRAY = new ColorRGB('#2F4F4F') as DeepImmutable<ColorRGB>;\r\n    public static readonly DARKSLATEGREY = ColorRGB.DARKSLATEGRAY;\r\n    public static readonly DARKTURQUOISE = new ColorRGB('#00CED1') as DeepImmutable<ColorRGB>;\r\n    public static readonly DARKVIOLET = new ColorRGB('#9400D3') as DeepImmutable<ColorRGB>;\r\n    public static readonly DEEPPINK = new ColorRGB('#FF1493') as DeepImmutable<ColorRGB>;\r\n    public static readonly DEEPSKYBLUE = new ColorRGB('#00BFFF') as DeepImmutable<ColorRGB>;\r\n    public static readonly DIMGRAY = new ColorRGB('#696969') as DeepImmutable<ColorRGB>;\r\n    public static readonly DIMGREY = ColorRGB.DIMGRAY;\r\n    public static readonly DODGERBLUE = new ColorRGB('#1E90FF') as DeepImmutable<ColorRGB>;\r\n    public static readonly FIREBRICK = new ColorRGB('#B22222') as DeepImmutable<ColorRGB>;\r\n    public static readonly FLORALWHITE = new ColorRGB('#FFFAF0') as DeepImmutable<ColorRGB>;\r\n    public static readonly FORESTGREEN = new ColorRGB('#228B22') as DeepImmutable<ColorRGB>;\r\n    public static readonly FUCHSIA = new ColorRGB('#FF00FF') as DeepImmutable<ColorRGB>;\r\n    public static readonly GAINSBORO = new ColorRGB('#DCDCDC') as DeepImmutable<ColorRGB>;\r\n    public static readonly GHOSTWHITE = new ColorRGB('#F8F8FF') as DeepImmutable<ColorRGB>;\r\n    public static readonly GOLD = new ColorRGB('#FFD700') as DeepImmutable<ColorRGB>;\r\n    public static readonly GOLDENROD = new ColorRGB('#DAA520') as DeepImmutable<ColorRGB>;\r\n    public static readonly GRAY = new ColorRGB('#808080') as DeepImmutable<ColorRGB>;\r\n    public static readonly GREEN = new ColorRGB('#008000') as DeepImmutable<ColorRGB>;\r\n    public static readonly GREENYELLOW = new ColorRGB('#ADFF2F') as DeepImmutable<ColorRGB>;\r\n    public static readonly GREY = ColorRGB.GRAY;\r\n    public static readonly HONEYDEW = new ColorRGB('#F0FFF0') as DeepImmutable<ColorRGB>;\r\n    public static readonly HOTPINK = new ColorRGB('#FF69B4') as DeepImmutable<ColorRGB>;\r\n    public static readonly INDIANRED = new ColorRGB('#CD5C5C') as DeepImmutable<ColorRGB>;\r\n    public static readonly INDIGO = new ColorRGB('#4B0082') as DeepImmutable<ColorRGB>;\r\n    public static readonly IVORY = new ColorRGB('#FFFFF0') as DeepImmutable<ColorRGB>;\r\n    public static readonly KHAKI = new ColorRGB('#F0E68C') as DeepImmutable<ColorRGB>;\r\n    public static readonly LAVENDER = new ColorRGB('#E6E6FA') as DeepImmutable<ColorRGB>;\r\n    public static readonly LAVENDAR_BLUSH = new ColorRGB('#FFF0F5') as DeepImmutable<ColorRGB>;\r\n    public static readonly LAWNGREEN = new ColorRGB('#7CFC00') as DeepImmutable<ColorRGB>;\r\n    public static readonly LEMONCHIFFON = new ColorRGB('#FFFACD') as DeepImmutable<ColorRGB>;\r\n    public static readonly LIGHTBLUE = new ColorRGB('#ADD8E6') as DeepImmutable<ColorRGB>;\r\n    public static readonly LIGHTCORAL = new ColorRGB('#F08080') as DeepImmutable<ColorRGB>;\r\n    public static readonly LIGHTCYAN = new ColorRGB('#E0FFFF') as DeepImmutable<ColorRGB>;\r\n    public static readonly LIGHTGOLDENRODYELLOW = new ColorRGB('#FAFAD2') as DeepImmutable<ColorRGB>;\r\n    public static readonly LIGHTGRAY = new ColorRGB('#D3D3D3') as DeepImmutable<ColorRGB>;\r\n    public static readonly LIGHTGREEN = new ColorRGB('#90EE90') as DeepImmutable<ColorRGB>;\r\n    public static readonly LIGHTGREY = ColorRGB.LIGHTGRAY;\r\n    public static readonly LIGHTPINK = new ColorRGB('#FFB6C1') as DeepImmutable<ColorRGB>;\r\n    public static readonly LIGHTSEAGREEN = new ColorRGB('#20B2AA') as DeepImmutable<ColorRGB>;\r\n    public static readonly LIGHTSKYBLUE = new ColorRGB('#87CEFA') as DeepImmutable<ColorRGB>;\r\n    public static readonly LIGHTSLATEGRAY = new ColorRGB('#778899') as DeepImmutable<ColorRGB>;\r\n    public static readonly LIGHTSLATEGREY = ColorRGB.LIGHTSLATEGRAY;\r\n    public static readonly LIGHTSTEELBLUE = new ColorRGB('#B0C4DE') as DeepImmutable<ColorRGB>;\r\n    public static readonly LIGHTYELLOW = new ColorRGB('#FFFFE0') as DeepImmutable<ColorRGB>;\r\n    public static readonly LIME = new ColorRGB('#00FF00') as DeepImmutable<ColorRGB>;\r\n    public static readonly LIMEGREEN = new ColorRGB('#32CD32') as DeepImmutable<ColorRGB>;\r\n    public static readonly LINEN = new ColorRGB('#FAF0E6') as DeepImmutable<ColorRGB>;\r\n    public static readonly MAGENTA = new ColorRGB('#FF00FF') as DeepImmutable<ColorRGB>;\r\n    public static readonly MAROON = new ColorRGB('#800000') as DeepImmutable<ColorRGB>;\r\n    public static readonly MEDIUMAQUAMARINE = new ColorRGB('#66CDAA') as DeepImmutable<ColorRGB>;\r\n    public static readonly MEDIUMBLUE = new ColorRGB('#0000CD') as DeepImmutable<ColorRGB>;\r\n    public static readonly MEDIUMORCHID = new ColorRGB('#BA55D3') as DeepImmutable<ColorRGB>;\r\n    public static readonly MEDIUMPURPLE = new ColorRGB('#9370DB') as DeepImmutable<ColorRGB>;\r\n    public static readonly MEDIUMSEAGREEN = new ColorRGB('#3CB371') as DeepImmutable<ColorRGB>;\r\n    public static readonly MEDIUMSLATEBLUE = new ColorRGB('#7B68EE') as DeepImmutable<ColorRGB>;\r\n    public static readonly MEDIUMSPRINGGREEN = new ColorRGB('#00FA9A') as DeepImmutable<ColorRGB>;\r\n    public static readonly MEDIUMTURQUOISE = new ColorRGB('#48D1CC') as DeepImmutable<ColorRGB>;\r\n    public static readonly MEDIUMVIOLETRED = new ColorRGB('#C71585') as DeepImmutable<ColorRGB>;\r\n    public static readonly MIDNIGHTBLUE = new ColorRGB('#191970') as DeepImmutable<ColorRGB>;\r\n    public static readonly MINTCREAM = new ColorRGB('#F5FFFA') as DeepImmutable<ColorRGB>;\r\n    public static readonly MISTYROSE = new ColorRGB('#FFE4E1') as DeepImmutable<ColorRGB>;\r\n    public static readonly MOCCASIN = new ColorRGB('#FFE4B5') as DeepImmutable<ColorRGB>;\r\n    public static readonly NAVAJOWHITE = new ColorRGB('#FFDEAD') as DeepImmutable<ColorRGB>;\r\n    public static readonly NAVY = new ColorRGB('#000080') as DeepImmutable<ColorRGB>;\r\n    public static readonly OLDLACE = new ColorRGB('#FDF5E6') as DeepImmutable<ColorRGB>;\r\n    public static readonly OLIVE = new ColorRGB('#808000') as DeepImmutable<ColorRGB>;\r\n    public static readonly OLIVEDRAB = new ColorRGB('#6B8E23') as DeepImmutable<ColorRGB>;\r\n    public static readonly ORANGE = new ColorRGB('#FFA500') as DeepImmutable<ColorRGB>;\r\n    public static readonly ORANGERED = new ColorRGB('#FF4500') as DeepImmutable<ColorRGB>;\r\n    public static readonly ORCHID = new ColorRGB('#DA70D6') as DeepImmutable<ColorRGB>;\r\n    public static readonly PALEGOLDENROD = new ColorRGB('#EEE8AA') as DeepImmutable<ColorRGB>;\r\n    public static readonly PALEGREEN = new ColorRGB('#98FB98') as DeepImmutable<ColorRGB>;\r\n    public static readonly PALETURQUOISE = new ColorRGB('#AFEEEE') as DeepImmutable<ColorRGB>;\r\n    public static readonly PALEVIOLETRED = new ColorRGB('#DB7093') as DeepImmutable<ColorRGB>;\r\n    public static readonly PAPAYAWHIP = new ColorRGB('#FFEFD5') as DeepImmutable<ColorRGB>;\r\n    public static readonly PEACHPUFF = new ColorRGB('#FFDAB9') as DeepImmutable<ColorRGB>;\r\n    public static readonly PERU = new ColorRGB('#CD853F') as DeepImmutable<ColorRGB>;\r\n    public static readonly PINK = new ColorRGB('#FFC0CB') as DeepImmutable<ColorRGB>;\r\n    public static readonly PLUM = new ColorRGB('#DDA0DD') as DeepImmutable<ColorRGB>;\r\n    public static readonly POWDERBLUE = new ColorRGB('#B0E0E6') as DeepImmutable<ColorRGB>;\r\n    public static readonly PURPLE = new ColorRGB('#800080') as DeepImmutable<ColorRGB>;\r\n    public static readonly RED = new ColorRGB('#FF0000') as DeepImmutable<ColorRGB>;\r\n    public static readonly ROSYBROWN = new ColorRGB('#BC8F8F') as DeepImmutable<ColorRGB>;\r\n    public static readonly ROYALBLUE = new ColorRGB('#4169E1') as DeepImmutable<ColorRGB>;\r\n    public static readonly SADDLEBROWN = new ColorRGB('#8B4513') as DeepImmutable<ColorRGB>;\r\n    public static readonly SALMON = new ColorRGB('#FA8072') as DeepImmutable<ColorRGB>;\r\n    public static readonly SANDYBROWN = new ColorRGB('#F4A460') as DeepImmutable<ColorRGB>;\r\n    public static readonly SEAGREEN = new ColorRGB('#2E8B57') as DeepImmutable<ColorRGB>;\r\n    public static readonly SEASHELL = new ColorRGB('#FFF5EE') as DeepImmutable<ColorRGB>;\r\n    public static readonly SIENNA = new ColorRGB('#A0522D') as DeepImmutable<ColorRGB>;\r\n    public static readonly SILVER = new ColorRGB('#C0C0C0') as DeepImmutable<ColorRGB>;\r\n    public static readonly SKYBLUE = new ColorRGB('#87CEEB') as DeepImmutable<ColorRGB>;\r\n    public static readonly SLATEBLUE = new ColorRGB('#6A5ACD') as DeepImmutable<ColorRGB>;\r\n    public static readonly SLATEGRAY = new ColorRGB('#708090') as DeepImmutable<ColorRGB>;\r\n    public static readonly SLATEGREY = ColorRGB.SLATEGRAY;\r\n    public static readonly SNOW = new ColorRGB('#FFFAFA') as DeepImmutable<ColorRGB>;\r\n    public static readonly SPRINGGREEN = new ColorRGB('#00FF7F') as DeepImmutable<ColorRGB>;\r\n    public static readonly STEELBLUE = new ColorRGB('#4682B4') as DeepImmutable<ColorRGB>;\r\n    public static readonly TAN = new ColorRGB('#D2B48C') as DeepImmutable<ColorRGB>;\r\n    public static readonly TEAL = new ColorRGB('#008080') as DeepImmutable<ColorRGB>;\r\n    public static readonly THISTLE = new ColorRGB('#D8BFD8') as DeepImmutable<ColorRGB>;\r\n    public static readonly TOMATO = new ColorRGB('#FF6347') as DeepImmutable<ColorRGB>;\r\n    public static readonly TURQUOISE = new ColorRGB('#40E0D0') as DeepImmutable<ColorRGB>;\r\n    public static readonly VIOLET = new ColorRGB('#EE82EE') as DeepImmutable<ColorRGB>;\r\n    public static readonly WHEAT = new ColorRGB('#F5DEB3') as DeepImmutable<ColorRGB>;\r\n    public static readonly WHITE = new ColorRGB('#FFFFFF') as DeepImmutable<ColorRGB>;\r\n    public static readonly WHITESMOKE = new ColorRGB('#F5F5F5') as DeepImmutable<ColorRGB>;\r\n    public static readonly YELLOW = new ColorRGB('#FFFF00') as DeepImmutable<ColorRGB>;\r\n    public static readonly YELLOWGREEN = new ColorRGB('#9ACD32') as DeepImmutable<ColorRGB>;\r\n\r\n    /**\r\n     * R分量\r\n     */\r\n    public r: number = 1.0;\r\n    /**\r\n     * G分量\r\n     */\r\n    public g: number = 1.0;\r\n    /**\r\n     * B分量\r\n     */\r\n    public b: number = 1.0;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param r\r\n     * @param g\r\n     * @param b\r\n     */\r\n    constructor(r: null | number | string | InColorRGB = null, g: Nullable<number> = null, b: Nullable<number> = null) {\r\n\r\n        if (g == null && b == null) {\r\n            this.set(r);\r\n        }\r\n        else if (typeof r == 'number' && g != null && b != null) {\r\n            this.setRGB(r, g, b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建对象\r\n     */\r\n    public static Build() {\r\n        return new ColorRGB();\r\n    }\r\n\r\n    /**\r\n     * 设置Value\r\n     * @param value\r\n     */\r\n    public set(value: null | number | string | InColorRGB): ColorRGB {\r\n\r\n        if (value && value instanceof ColorRGB) {\r\n            this.copy(value);\r\n        } else if (typeof value == 'number') {\r\n            this.setHex(value);\r\n        } else if (typeof value == 'string') {\r\n            this.setStyle(value);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置标量\r\n     * @param scalar\r\n     */\r\n    public setScalar(scalar: number): ColorRGB {\r\n        this.r = scalar;\r\n        this.g = scalar;\r\n        this.b = scalar;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置16进值\r\n     * @param hex\r\n     */\r\n    public setHex(hex: number): ColorRGB {\r\n        hex = Math.floor(hex);\r\n        this.r = (hex >> 16 & 255) / 255;\r\n        this.g = (hex >> 8 & 255) / 255;\r\n        this.b = (hex & 255) / 255;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置RGB值\r\n     * @param r\r\n     * @param g\r\n     * @param b\r\n     */\r\n    public setRGB(r: number, g: number, b: number): ColorRGB {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置HSL值\r\n     * @param h\r\n     * @param s\r\n     * @param l\r\n     */\r\n    public setHSL(h: number, s: number, l: number): ColorRGB {\r\n\r\n        // h,s,l ranges are in 0.0 - 1.0\r\n        h = MathUtils.mod(h, 1);\r\n        s = MathUtils.clamp(s, 0, 1);\r\n        l = MathUtils.clamp(l, 0, 1);\r\n\r\n        if (s == 0) {\r\n            this.r = this.g = this.b = l;\r\n        } else {\r\n            const p = l <= 0.5 ? l * (1 + s) : l + s - (l * s);\r\n            const q = (2 * l) - p;\r\n\r\n            this.r = hue2rgb(q, p, h + 1 / 3);\r\n            this.g = hue2rgb(q, p, h);\r\n            this.b = hue2rgb(q, p, h - 1 / 3);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置CSS样式\r\n     * @param style\r\n     */\r\n    public setStyle(style: string): ColorRGB {\r\n\r\n        let m;\r\n\r\n        if ((m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec(style))) {\r\n            // rgb / hsl\r\n\r\n            let color;\r\n            let name = m[1];\r\n            let components = m[2];\r\n\r\n            switch (name) {\r\n                case 'rgb':\r\n                case 'rgba':\r\n\r\n                    color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components);\r\n                    if (color) {\r\n                        this.r = Math.min(255, parseInt(color[1], 10)) / 255;\r\n                        this.g = Math.min(255, parseInt(color[2], 10)) / 255;\r\n                        this.b = Math.min(255, parseInt(color[3], 10)) / 255;\r\n                        return this;\r\n                    }\r\n\r\n                    color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components);\r\n                    if (color) {\r\n                        this.r = Math.min(100, parseInt(color[1], 10)) / 100;\r\n                        this.g = Math.min(100, parseInt(color[2], 10)) / 100;\r\n                        this.b = Math.min(100, parseInt(color[3], 10)) / 100;\r\n                        return this;\r\n                    }\r\n\r\n                    break;\r\n\r\n                case 'hsl':\r\n                case 'hsla':\r\n\r\n                    color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components);\r\n                    if (color) {\r\n                        const h = parseFloat(color[1]) / 360;\r\n                        const s = parseInt(color[2], 10) / 100;\r\n                        const l = parseInt(color[3], 10) / 100;\r\n                        return this.setHSL(h, s, l);\r\n                    }\r\n\r\n                    break;\r\n            }\r\n\r\n        } else if ((m = (/^\\#([A-Fa-f0-9]+)$/.exec(style)))) {\r\n            // hex color\r\n\r\n            const hex = m[1];\r\n            const size = hex.length;\r\n\r\n            if (size == 3) {\r\n                // #ff0\r\n                this.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;\r\n                this.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;\r\n                this.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;\r\n                return this;\r\n\r\n            } else if (size == 6) {\r\n                // #ff0000\r\n                this.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;\r\n                this.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;\r\n                this.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;\r\n                return this;\r\n            }\r\n        }\r\n\r\n        if (style && style.length > 0) {\r\n\r\n            return this.setColorName(style);\r\n\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置内置颜色名\r\n     * @param style\r\n     */\r\n    public setColorName(style: string): ColorRGB {\r\n        const hex = _colorKeywords[ style ];\r\n        if (hex) {\r\n            this.setHex(hex);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置组件\r\n     * @param index\r\n     * @param value\r\n     */\r\n    public setComponent(index: int, value: number): ColorRGB {\r\n        switch (index) {\r\n            case 0: this.r = value; break;\r\n            case 1: this.g = value; break;\r\n            case 2: this.b = value; break;\r\n            default: throw new Error(`index is out of range: ${index}`);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取组件\r\n     * @param index\r\n     */\r\n    public getComponent(index: int): number {\r\n        switch (index) {\r\n            case 0: return this.r;\r\n            case 1: return this.g;\r\n            case 2: return this.b;\r\n            default: throw new Error(`index is out of range: ${index}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 组件的最大值\r\n     * @returns {number}\r\n     */\r\n    public maximumComponent(): number {\r\n        return Math.max(Math.max(this.r, this.g), this.b);\r\n    }\r\n\r\n    /**\r\n     * 组件的最小值\r\n     * @returns {number}\r\n     */\r\n    public minimumComponent(): number {\r\n        return Math.min(Math.min(this.r, this.g), this.b);\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): ColorRGB {\r\n        return new ColorRGB(this.r, this.g, this.b);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: InColorRGB): ColorRGB {\r\n        this.r = source.r;\r\n        this.g = source.g;\r\n        this.b = source.b;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置Gamma Color转成Linear\r\n     * @param color\r\n     * @param gammaFactor\r\n     */\r\n    public copyGammaToLinear(color: InColorRGB, gammaFactor = 2.0): ColorRGB {\r\n        this.r = Math.pow(color.r, gammaFactor);\r\n        this.g = Math.pow(color.g, gammaFactor);\r\n        this.b = Math.pow(color.b, gammaFactor);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置Linear Color转成Gamma\r\n     * @param color\r\n     * @param gammaFactor\r\n     */\r\n    public copyLinearToGamma(color: InColorRGB, gammaFactor = 2.0): ColorRGB {\r\n        const safeInverse = (gammaFactor > 0) ? (1.0 / gammaFactor) : 1.0;\r\n        this.r = Math.pow(color.r, safeInverse);\r\n        this.g = Math.pow(color.g, safeInverse);\r\n        this.b = Math.pow(color.b, safeInverse);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 转换Gamma到Linear\r\n     * @param gammaFactor\r\n     */\r\n    public convertGammaToLinear(gammaFactor: number): ColorRGB {\r\n        this.copyGammaToLinear(this, gammaFactor);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 转换Linear到Gamma\r\n     * @param gammaFactor\r\n     */\r\n    public convertLinearToGamma(gammaFactor: number): ColorRGB {\r\n        this.copyLinearToGamma(this, gammaFactor);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置SRGB Color转成Linear\r\n     * @param color\r\n     */\r\n    public copySRGBToLinear(color: InColorRGB): ColorRGB {\r\n        this.r = sRGBToLinear(color.r);\r\n        this.g = sRGBToLinear(color.g);\r\n        this.b = sRGBToLinear(color.b);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置Linear Color转成SRGB\r\n     * @param color\r\n     */\r\n    public copyLinearToSRGB(color: InColorRGB): ColorRGB {\r\n        this.r = linearToSRGB(color.r);\r\n        this.g = linearToSRGB(color.g);\r\n        this.b = linearToSRGB(color.b);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 转换SRGB成Linear\r\n     */\r\n    public convertSRGBToLinear(): ColorRGB {\r\n        this.copySRGBToLinear(this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 转换Linear成SRGB\r\n     */\r\n    public convertLinearToSRGB(): ColorRGB {\r\n        this.copyLinearToSRGB(this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取16进制\r\n     */\r\n    public getHex(): number {\r\n        return (this.r * 255) << 16 ^ (this.g * 255) << 8 ^ (this.b * 255) << 0;\r\n    }\r\n\r\n    /**\r\n     * 获取16进制字符串\r\n     */\r\n    public getHexString(): string {\r\n        return (`000000${this.getHex().toString(16)}`).slice(-6);\r\n    }\r\n\r\n    /**\r\n     * 获取HSL\r\n     * @param target\r\n     */\r\n    public getHSL(target: ColorHSL = {h: 0, s: 0, l: 0}): ColorHSL {\r\n\r\n        let r = this.r; let g = this.g; let b = this.b;\r\n\r\n        let max = Math.max(r, g, b);\r\n        let min = Math.min(r, g, b);\r\n\r\n        let hue = 0;\r\n        let saturation;\r\n        let lightness = (min + max) / 2.0;\r\n\r\n        if (min == max) {\r\n            hue = 0;\r\n            saturation = 0;\r\n        } else {\r\n            let delta = max - min;\r\n\r\n            saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);\r\n\r\n            switch (max) {\r\n                case r: hue = (g - b) / delta + (g < b ? 6 : 0); break;\r\n                case g: hue = (b - r) / delta + 2; break;\r\n                case b: hue = (r - g) / delta + 4; break;\r\n            }\r\n\r\n            hue /= 6;\r\n        }\r\n\r\n        target.h = hue;\r\n        target.s = saturation;\r\n        target.l = lightness;\r\n\r\n        return target;\r\n    }\r\n\r\n    /**\r\n     * 获取CSS样式\r\n     */\r\n    public getStyle(): string {\r\n        return `rgb(${(this.r * 255) | 0},${(this.g * 255) | 0},${(this.b * 255) | 0})`;\r\n    }\r\n\r\n    /**\r\n     * 偏移HSL\r\n     * @param h\r\n     * @param s\r\n     * @param l\r\n     */\r\n    public offsetHSL(h: number, s: number, l: number): ColorRGB {\r\n\r\n        this.getHSL(_hslA);\r\n\r\n        _hslA.h += h; _hslA.s += s; _hslA.l += l;\r\n\r\n        this.setHSL(_hslA.h, _hslA.s, _hslA.l);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 加上Color\r\n     * @param color\r\n     */\r\n    public add(color: InColorRGB): ColorRGB {\r\n        this.r += color.r;\r\n        this.g += color.g;\r\n        this.b += color.b;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 两个Color相加\r\n     * @param color1\r\n     * @param color2\r\n     */\r\n    public addColors(color1: InColorRGB, color2: InColorRGB): ColorRGB {\r\n        this.r = color1.r + color2.r;\r\n        this.g = color1.g + color2.g;\r\n        this.b = color1.b + color2.b;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 加上标量\r\n     * @param scalar\r\n     */\r\n    public addScalar(scalar: number): ColorRGB {\r\n        this.r += scalar;\r\n        this.g += scalar;\r\n        this.b += scalar;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 减去Color\r\n     * @param color\r\n     */\r\n    public sub(color: InColorRGB): ColorRGB {\r\n        this.r = Math.max(0, this.r - color.r);\r\n        this.g = Math.max(0, this.g - color.g);\r\n        this.b = Math.max(0, this.b - color.b);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 乘以Color\r\n     * @param color\r\n     */\r\n    public multiply(color: InColorRGB): ColorRGB {\r\n        this.r *= color.r;\r\n        this.g *= color.g;\r\n        this.b *= color.b;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 乘以标量\r\n     * @param scalar\r\n     */\r\n    public multiplyScalar(scalar: number): ColorRGB {\r\n        this.r *= scalar;\r\n        this.g *= scalar;\r\n        this.b *= scalar;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 线性插值\r\n     * @param color\r\n     * @param alpha\r\n     */\r\n    public lerp(color: InColorRGB, alpha: number): ColorRGB {\r\n        this.r += (color.r - this.r) * alpha;\r\n        this.g += (color.g - this.g) * alpha;\r\n        this.b += (color.b - this.b) * alpha;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * HSL线性插值\r\n     * @param color\r\n     * @param alpha\r\n     */\r\n    public lerpHSL(color: InColorRGB, alpha: number): ColorRGB {\r\n\r\n        this.getHSL(_hslA);\r\n        color.getHSL(_hslB);\r\n\r\n        const h = MathUtils.lerp(_hslA.h, _hslB.h, alpha);\r\n        const s = MathUtils.lerp(_hslA.s, _hslB.s, alpha);\r\n        const l = MathUtils.lerp(_hslA.l, _hslB.l, alpha);\r\n\r\n        this.setHSL(h, s, l);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 是否相等\r\n     * @param color\r\n     */\r\n    public equals(color: InColorRGB): boolean {\r\n        return (color.r == this.r) && (color.g == this.g) && (color.b == this.b);\r\n    }\r\n\r\n    /**\r\n     * 是否近似相等\r\n     * @param right\r\n     * @param relativeEpsilon\r\n     * @param absoluteEpsilon\r\n     */\r\n    public equalsEpsilon(right: InColorRGB, relativeEpsilon: number, absoluteEpsilon: Nullable<number> = null): boolean {\r\n        return MathUtils.equalsEpsilon(this.r, right.r, relativeEpsilon, absoluteEpsilon) &&\r\n            MathUtils.equalsEpsilon(this.g, right.g, relativeEpsilon, absoluteEpsilon) &&\r\n            MathUtils.equalsEpsilon(this.b, right.b, relativeEpsilon, absoluteEpsilon);\r\n    }\r\n\r\n    /**\r\n     * 复制Buffer属性\r\n     * @param attribute\r\n     * @param index\r\n     */\r\n    public fromBufferAttribute(attribute: BufferAttribute, index: int): ColorRGB {\r\n\r\n        this.r = attribute.getX(index);\r\n        this.g = attribute.getY(index);\r\n        this.b = attribute.getZ(index);\r\n\r\n        if (attribute.normalized) {\r\n            this.r /= 255;\r\n            this.g /= 255;\r\n            this.b /= 255;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 生成数组\r\n     * @param array\r\n     * @param offset\r\n     */\r\n    public toArray(array: FloatArray = [], offset: number = 0): FloatArray {\r\n\r\n        array[offset] = this.r;\r\n        array[offset + 1] = this.g;\r\n        array[offset + 2] = this.b;\r\n\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * 复制数组\r\n     * @param array\r\n     * @param offset\r\n     */\r\n    public fromArray(array: FloatArray, offset: number = 0): ColorRGB {\r\n\r\n        this.r = array[offset];\r\n        this.g = array[offset + 1];\r\n        this.b = array[offset + 2];\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 复制二进制\r\n     * @param dataBuffer\r\n     */\r\n    public fromDataBuffer(dataBuffer: BinaryBuffer): ColorRGB {\r\n        this.r = dataBuffer.readFloat32();\r\n        this.g = dataBuffer.readFloat32();\r\n        this.b = dataBuffer.readFloat32();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 生成二进制\r\n     * @param dataBuffer\r\n     */\r\n    public toDataBuffer(dataBuffer: BinaryBuffer): ColorRGB {\r\n        dataBuffer.writeFloat32(this.r);\r\n        dataBuffer.writeFloat32(this.g);\r\n        dataBuffer.writeFloat32(this.b);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 生成JSON\r\n     */\r\n    public toJSON(): number {\r\n        return this.getHex();\r\n    }\r\n}\r\n",
        "import { Curve } from \"./Curve\";\r\nimport { Vector2 } from \"../Vector2\";\r\nimport { Nullable } from \"../../types\";\r\nimport { BinaryBuffer } from \"../../Misc\";\r\n\r\n/**\r\n * 椭圆曲线路径\r\n * @category Curve\r\n */\r\nexport class EllipseCurve extends Curve<Vector2> {\r\n\r\n    public center: Vector2;\r\n    public xRadius: number;\r\n    public yRadius: number;\r\n    public aStartAngle: number;\r\n    public aEndAngle: number;\r\n    public aClockwise: boolean;\r\n    public aRotation: number;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param aX\r\n     * @param aY\r\n     * @param xRadius\r\n     * @param yRadius\r\n     * @param aStartAngle\r\n     * @param aEndAngle\r\n     * @param aClockwise\r\n     * @param aRotation\r\n     */\r\n    constructor(aX: number = 0, aY: number = 0,\r\n                xRadius: number = 1, yRadius: number = 1,\r\n                aStartAngle: number = 0, aEndAngle: number = 2 * Math.PI,\r\n                aClockwise: boolean = false,\r\n                aRotation: number = 0) {\r\n        super();\r\n\r\n        this.type = 'EllipseCurve';\r\n        this.center = new Vector2(aX || 0, aY || 0);\r\n        this.xRadius = xRadius;\r\n        this.yRadius = yRadius;\r\n        this.aStartAngle = aStartAngle;\r\n        this.aEndAngle = aEndAngle;\r\n        this.aClockwise = aClockwise ;\r\n        this.aRotation = aRotation ;\r\n    }\r\n\r\n    /**\r\n     * 圆心X\r\n     */\r\n    public get aX() {\r\n        return this.center.x;\r\n    }\r\n    public set aX(value) {\r\n        this.center.x = value;\r\n    }\r\n\r\n    /**\r\n     * 圆心Y\r\n     */\r\n    public get aY() {\r\n        return this.center.y;\r\n    }\r\n    public set aY(value) {\r\n        this.center.y = value;\r\n    }\r\n\r\n    /**\r\n     * 获取点\r\n     * @param t\r\n     * @param optionalTarget\r\n     */\r\n    public getPoint(t: number, optionalTarget: Nullable<Vector2> = null): Vector2 {\r\n\r\n        let point = optionalTarget || new Vector2();\r\n\r\n        let twoPi = Math.PI * 2;\r\n        let deltaAngle = this.aEndAngle - this.aStartAngle;\r\n        let samePoints = Math.abs(deltaAngle) < Number.EPSILON;\r\n\r\n        // ensures that deltaAngle is 0 .. 2 PI\r\n        while (deltaAngle < 0) { deltaAngle += twoPi; }\r\n        while (deltaAngle > twoPi) { deltaAngle -= twoPi; }\r\n\r\n        if (deltaAngle < Number.EPSILON) {\r\n            if (samePoints) {\r\n                deltaAngle = 0;\r\n            } else {\r\n                deltaAngle = twoPi;\r\n            }\r\n        }\r\n\r\n        if (this.aClockwise == true && !samePoints) {\r\n            if (deltaAngle == twoPi) {\r\n                deltaAngle = -twoPi;\r\n            } else {\r\n                deltaAngle = deltaAngle - twoPi;\r\n            }\r\n        }\r\n\r\n        let angle = this.aStartAngle + t * deltaAngle;\r\n        let x = this.aX + this.xRadius * Math.cos(angle);\r\n        let y = this.aY + this.yRadius * Math.sin(angle);\r\n\r\n        if (this.aRotation != 0) {\r\n            let cos = Math.cos(this.aRotation);\r\n            let sin = Math.sin(this.aRotation);\r\n\r\n            let tx = x - this.aX;\r\n            let ty = y - this.aY;\r\n\r\n            // Rotate the point about the center of the ellipse.\r\n            x = tx * cos - ty * sin + this.aX;\r\n            y = tx * sin + ty * cos + this.aY;\r\n        }\r\n\r\n        return point.set(x, y);\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone() {\r\n        return new EllipseCurve().copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: EllipseCurve): EllipseCurve {\r\n        super.copy(source);\r\n\r\n        this.aX = source.aX;\r\n        this.aY = source.aY;\r\n        this.xRadius = source.xRadius;\r\n        this.yRadius = source.yRadius;\r\n        this.aStartAngle = source.aStartAngle;\r\n        this.aEndAngle = source.aEndAngle;\r\n        this.aClockwise = source.aClockwise;\r\n        this.aRotation = source.aRotation;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 序列化JSON\r\n     */\r\n    public toJSON(): any {\r\n        const data = super.toJSON();\r\n        data.aX = this.aX;\r\n        data.aY = this.aY;\r\n        data.xRadius = this.xRadius;\r\n        data.yRadius = this.yRadius;\r\n        data.aStartAngle = this.aStartAngle;\r\n        data.aEndAngle = this.aEndAngle;\r\n        data.aClockwise = this.aClockwise;\r\n        data.aRotation = this.aRotation;\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * 反序列化JSON\r\n     * @param json\r\n     */\r\n    public fromJSON(json: any): EllipseCurve {\r\n        super.fromJSON(json);\r\n\r\n        this.aX = json.aX;\r\n        this.aY = json.aY;\r\n        this.xRadius = json.xRadius;\r\n        this.yRadius = json.yRadius;\r\n        this.aStartAngle = json.aStartAngle;\r\n        this.aEndAngle = json.aEndAngle;\r\n        this.aClockwise = json.aClockwise;\r\n        this.aRotation = json.aRotation;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public toDataBuffer(dataBuffer: BinaryBuffer): EllipseCurve {\r\n        super.toDataBuffer(dataBuffer);\r\n\r\n        dataBuffer.writeVector2(this.center);\r\n        dataBuffer.writeFloat32(this.xRadius);\r\n        dataBuffer.writeFloat32(this.yRadius);\r\n        dataBuffer.writeFloat32(this.aStartAngle);\r\n        dataBuffer.writeFloat32(this.aEndAngle);\r\n        dataBuffer.writeFloat32(this.aRotation);\r\n        dataBuffer.writeBoolean(this.aClockwise);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 反序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public fromDataBuffer(dataBuffer: BinaryBuffer): EllipseCurve {\r\n        super.fromDataBuffer(dataBuffer);\r\n\r\n        this.center = dataBuffer.readVector2(this.center);\r\n        this.xRadius = dataBuffer.readFloat32();\r\n        this.yRadius = dataBuffer.readFloat32();\r\n        this.aStartAngle = dataBuffer.readFloat32();\r\n        this.aEndAngle = dataBuffer.readFloat32();\r\n        this.aRotation = dataBuffer.readFloat32();\r\n        this.aClockwise = dataBuffer.readBoolean();\r\n\r\n        return this;\r\n    }\r\n}\r\n",
        "/**\r\n * @ignore\r\n */\r\nexport namespace BezierCurveFunc {\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    export function CatmullRom(t: number, p0: number, p1: number, p2: number, p3: number): number {\r\n        let v0: number = (p2 - p0) * 0.5;\r\n        let v1: number = (p3 - p1) * 0.5;\r\n        let t2: number = t * t;\r\n        let t3: number = t * t2;\r\n        return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    export function QuadraticBezierP0(t: number, p: number): number {\r\n        let k: number = 1 - t;\r\n        return k * k * p;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    export function QuadraticBezierP1(t: number, p: number): number {\r\n        return 2 * (1 - t) * t * p;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    export function QuadraticBezierP2(t: number, p: number): number {\r\n        return t * t * p;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    export function QuadraticBezier(t: number, p0: number, p1: number, p2: number): number {\r\n        return QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    export function CubicBezierP0(t: number, p: number): number {\r\n        let k: number = 1 - t;\r\n        return k * k * k * p;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    export function CubicBezierP1(t: number, p: number): number {\r\n        let k: number = 1 - t;\r\n        return 3 * k * k * t * p;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    export function CubicBezierP2(t: number, p: number): number {\r\n        return 3 * (1 - t) * t * t * p;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    export function CubicBezierP3(t: number, p: number): number {\r\n        return t * t * t * p;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    export function CubicBezier(t: number, p0: number, p1: number, p2: number, p3: number): number {\r\n        return CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);\r\n    }\r\n}\r\n",
        "import { CSGVector3D } from './CSGVector3D';\r\nimport { CSG } from './CSG';\r\nimport { CSGMatrix4x4 } from './CSGMatrix4x4';\r\nimport { CSGPlane } from './CSGPlane';\r\n\r\n/**\r\n * CSG顶点类\r\n */\r\nexport class CSGVertex {\r\n    /**\r\n     * 三维向量\r\n     */\r\n    private pos: CSGVector3D;\r\n\r\n    /**\r\n     * 分类号\r\n     */\r\n    private tag: number;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param pos\r\n     */\r\n    constructor(pos: CSGVector3D) {\r\n        this.pos = pos;\r\n    }\r\n\r\n    /**\r\n     * 根据对象创造顶点对象\r\n     * @param obj\r\n     */\r\n    static fromObject(obj: any): CSGVertex {\r\n        let pos = new CSGVector3D(obj.pos);\r\n        return new CSGVertex(pos);\r\n    }\r\n\r\n    // Return a vertex with all orientation-specific data (e.g. vertex normal) flipped. Called when the\r\n    // orientation of a polygon is flipped.\r\n    /**\r\n     * 获取翻转对象\r\n     */\r\n    public flipped(): CSGVertex {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取分类号\r\n     */\r\n    public getTag(): number {\r\n        let result = this.tag;\r\n        if (!result) {\r\n            result = CSG.getTag();\r\n            this.tag = result;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 根据t参数在此顶点和other顶点创建一个新的顶点\r\n     * @param other\r\n     * @param t\r\n     */\r\n    public interpolate(other: CSGVertex, t: number): CSGVertex {\r\n        let newpos = this.pos.lerp(other.pos, t);\r\n        return new CSGVertex(newpos);\r\n    }\r\n\r\n    /**\r\n     * 仿射几何\r\n     * @param matrix4x4\r\n     */\r\n    public transform(matrix4x4: CSGMatrix4x4): CSGVertex {\r\n        let newpos = this.pos.multiply4x4(matrix4x4);\r\n        return new CSGVertex(newpos);\r\n    }\r\n\r\n    /**\r\n     * 字符串转换\r\n     */\r\n    public toString(): string {\r\n        return this.pos.toString();\r\n    }\r\n\r\n    /**\r\n     * 镜像\r\n     * @param plane\r\n     */\r\n    public mirrored(plane: CSGPlane): CSGVertex {\r\n        return this.transform(CSGMatrix4x4.mirroring(plane));\r\n    }\r\n\r\n    /**\r\n     * X镜像\r\n     */\r\n    public mirroredX(): CSGVertex {\r\n        let plane = new CSGPlane(CSGVector3D.Create(1, 0, 0), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * Y镜像\r\n     */\r\n    public mirroredY(): CSGVertex {\r\n        let plane = new CSGPlane(CSGVector3D.Create(0, 1, 0), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * Z镜像\r\n     */\r\n    public mirroredZ(): CSGVertex  {\r\n        let plane = new CSGPlane(CSGVector3D.Create(0, 0, 1), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * 镜像顶点\r\n     * @param v\r\n     */\r\n    public translate(v: any): CSGVertex {\r\n        return this.transform(CSGMatrix4x4.translation(v));\r\n    }\r\n\r\n    /**\r\n     * 缩放顶点\r\n     * @param f\r\n     */\r\n    public scale(f: any) : CSGVertex {\r\n        return this.transform(CSGMatrix4x4.scaling(f));\r\n    }\r\n\r\n    /**\r\n     * 绕X轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateX(deg: number) : CSGVertex {\r\n        return this.transform(CSGMatrix4x4.rotationX(deg));\r\n    }\r\n\r\n    /**\r\n     * 绕Y轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateY(deg: number): CSGVertex {\r\n        return this.transform(CSGMatrix4x4.rotationY(deg));\r\n    }\r\n\r\n    /**\r\n     * 绕Z轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateZ(deg: number): CSGVertex {\r\n        return this.transform(CSGMatrix4x4.rotationZ(deg));\r\n    }\r\n\r\n    /**\r\n     * 旋转\r\n     * @param rotationCenter\r\n     * @param rotationAxis\r\n     * @param degrees\r\n     */\r\n    public rotate(rotationCenter: any, rotationAxis: any, degrees: any): CSGVertex {\r\n        return this.transform(CSGMatrix4x4.rotation(rotationCenter, rotationAxis, degrees));\r\n    }\r\n\r\n    /**\r\n     * 旋转欧拉角\r\n     * @param alpha\r\n     * @param beta\r\n     * @param gamma\r\n     * @param position\r\n     */\r\n    public rotateEulerAngles(alpha: any, beta: any, gamma: any, position: any) : CSGVertex {\r\n        const _position = position || [0, 0, 0];\r\n        let Rz1 = CSGMatrix4x4.rotationZ(alpha);\r\n        let Rx = CSGMatrix4x4.rotationX(beta);\r\n        let Rz2 = CSGMatrix4x4.rotationZ(gamma);\r\n        let T = CSGMatrix4x4.translation(new CSGVector3D(_position));\r\n        return this.transform(Rz2.multiply(Rx).multiply(Rz1).multiply(T));\r\n    }\r\n}\r\n",
        "import {CAG} from './CAG';\r\nimport {CSGVector3D} from './CSGVector3D';\r\nimport {CSGVertex} from './CSGVertex';\r\nimport {CSGPlane} from './CSGPlane';\r\nimport {CSGMatrix4x4} from './CSGMatrix4x4';\r\nimport {CSGPolygonShared} from './CSGPolygonShared';\r\nimport {CSG} from './CSG';\r\nimport {CSGOrthoNormalBasis} from './CSGOrthoNormalBasis';\r\nimport {Nullable} from \"../types\";\r\n\r\nfunction fnSortByIndex(a: any, b: any): any {\r\n    return a.index - b.index;\r\n}\r\n\r\n/**\r\n * CSG多边形\r\n */\r\nexport class CSGPolygon {\r\n    /**\r\n     * 顶点\r\n     */\r\n    public vertices: any;\r\n\r\n    /**\r\n     * 默认分享\r\n     */\r\n    defaultShared:any = new CSGPolygonShared(null);\r\n\r\n    /**\r\n     * 分享状态\r\n     */\r\n    public shared: any;\r\n\r\n    /**\r\n     * 平面\r\n     */\r\n    public plane: any;\r\n\r\n    /**\r\n     * 缓存包围球\r\n     */\r\n    private cachedBoundingSphere: any;\r\n\r\n    /**\r\n     * 缓冲包围盒\r\n     */\r\n    private cachedBoundingBox: any;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param vertices\r\n     * @param shared\r\n     * @param plane\r\n     */\r\n    constructor(vertices: any, shared?: Nullable<CSGPolygonShared>, plane?: any) {\r\n        this.vertices = vertices;\r\n        if (!shared) {\r\n            shared = this.defaultShared;\r\n        }\r\n        this.shared = shared;\r\n        // let numvertices = vertices.length;\r\n        if (arguments.length >= 3) {\r\n            this.plane = plane;\r\n        } else {\r\n            this.plane = CSGPlane.fromVector3Ds(vertices[0].pos, vertices[1].pos, vertices[2].pos);\r\n        }\r\n        /* if (_CSGDEBUG) {\r\n                this.checkIfConvex()\r\n            } */\r\n        this.defaultShared = new CSGPolygonShared(null);\r\n    }\r\n\r\n    /**\r\n     * 从对象创建\r\n     * @param obj\r\n     */\r\n    static fromObject(obj: any) {\r\n        let vertices = obj.vertices.map((v: any) => CSGVertex.fromObject(v));\r\n        let shared = CSGPolygonShared.fromObject(obj.shared);\r\n        let plane = CSGPlane.fromObject(obj.plane);\r\n        return new CSGPolygon(vertices, shared, plane);\r\n    }\r\n\r\n    /**\r\n     * 凸出顶点\r\n     * @param vertices\r\n     * @param planenormal\r\n     */\r\n    static verticesConvex(vertices: any[], planenormal: CSGOrthoNormalBasis) {\r\n        let numvertices = vertices.length;\r\n        if (numvertices > 2) {\r\n            let prevprevpos = vertices[numvertices - 2].pos;\r\n            let prevpos = vertices[numvertices - 1].pos;\r\n            for (let i = 0; i < numvertices; i++) {\r\n                let pos = vertices[i].pos;\r\n                if (!CSGPolygon.isConvexPoint(prevprevpos, prevpos, pos, planenormal)) {\r\n                    return false;\r\n                }\r\n                prevprevpos = prevpos;\r\n                prevpos = pos;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Create a polygon from the given points\\\\\r\n    /**\r\n     * 从给定点创建多边形\r\n     * @param points\r\n     * @param shared\r\n     * @param plane\r\n     */\r\n    static createFromPoints(points?: any, shared?: any, plane?: any) {\r\n        let normal;\r\n        if (arguments.length < 3) {\r\n            // initially set a dummy vertex normal:\r\n            normal = new CSGVector3D(0, 0, 0);\r\n        } else {\r\n            normal = plane.normal;\r\n        }\r\n        let vertices: CSGVertex[] = [];\r\n        points.map((p: any) => {\r\n            let vec = new CSGVector3D(p);\r\n            let vertex = new CSGVertex(vec);\r\n            vertices.push(vertex);\r\n        });\r\n        let polygon;\r\n        if (arguments.length < 3) {\r\n            polygon = new CSGPolygon(vertices, shared);\r\n        } else {\r\n            polygon = new CSGPolygon(vertices, shared, plane);\r\n        }\r\n        return polygon;\r\n    }\r\n\r\n    // calculate whether three points form a convex corner\r\n    //  prevpoint, point, nextpoint: the 3 coordinates (CSG.Vector3D instances)\r\n    //  normal: the normal vector of the plane\r\n    /**\r\n     * 判断凸出顶点\r\n     * @param prevpoint\r\n     * @param point\r\n     * @param nextpoint\r\n     * @param normal\r\n     */\r\n    static isConvexPoint(prevpoint: any, point: any, nextpoint: any, normal: any) {\r\n        let crossproduct = point.minus(prevpoint).cross(nextpoint.minus(point));\r\n        let crossdotnormal = crossproduct.dot(normal);\r\n        return (crossdotnormal >= 0);\r\n    }\r\n\r\n    /**\r\n     * 判断严格凸出顶点\r\n     * @param prevpoint\r\n     * @param point\r\n     * @param nextpoint\r\n     * @param normal\r\n     */\r\n    static isStrictlyConvexPoint(prevpoint: any, point: any, nextpoint: any, normal: any) {\r\n        let crossproduct = point.minus(prevpoint).cross(nextpoint.minus(point));\r\n        let crossdotnormal = crossproduct.dot(normal);\r\n        return (crossdotnormal >= 1e-5);\r\n    }\r\n\r\n    // check whether the polygon is convex (it should be, otherwise we will get unexpected results)\r\n    /**\r\n     * 判断是否凸出\r\n     */\r\n    public checkIfConvex() {\r\n        if (!CSGPolygon.verticesConvex(this.vertices, this.plane.normal)) {\r\n            CSGPolygon.verticesConvex(this.vertices, this.plane.normal);\r\n            throw new Error('Not convex!');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置颜色\r\n     * @param args\r\n     */\r\n    public setColor(args: any) {\r\n        let newshared = CSGPolygonShared.fromColor.apply(this, arguments);\r\n        this.shared = newshared;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取签名值\r\n     */\r\n    public getSignedVolume(): any {\r\n        let signedVolume = 0;\r\n        for (let i = 0; i < this.vertices.length - 2; i++) {\r\n            signedVolume += this.vertices[0].pos.dot(this.vertices[i + 1].pos\r\n                .cross(this.vertices[i + 2].pos));\r\n        }\r\n        signedVolume /= 6;\r\n        return signedVolume;\r\n    }\r\n\r\n    // Note: could calculate vectors only once to speed up\r\n    /**\r\n     * 获取区域\r\n     */\r\n    public getArea() {\r\n        let polygonArea = 0;\r\n        for (let i = 0; i < this.vertices.length - 2; i++) {\r\n            polygonArea += this.vertices[i + 1].pos.minus(this.vertices[0].pos)\r\n                .cross(this.vertices[i + 2].pos.minus(this.vertices[i + 1].pos)).length();\r\n        }\r\n        polygonArea /= 2;\r\n        return polygonArea;\r\n    }\r\n\r\n    // accepts array of features to calculate\r\n    // returns array of results\r\n    /**\r\n     * 获取特征\r\n     * @param features\r\n     */\r\n    public getTetraFeatures(features: any) {\r\n        let result: any[] = [];\r\n        features.forEach(function (this: CSGPolygon, feature: any) {\r\n            if (feature == 'volume') {\r\n                result.push(this.getSignedVolume());\r\n            } else if (feature == 'area') {\r\n                result.push(this.getArea());\r\n            }\r\n        }, this);\r\n        return result;\r\n    }\r\n\r\n    // Extrude a polygon into the direction offsetvector\r\n    // Returns a CSG object\r\n    /**\r\n     * 将多边形拉伸到偏移向量的方向上\r\n     * @param offsetvector\r\n     */\r\n    public extrude(offsetvector: any) {\r\n        let newpolygons = [];\r\n        let polygon1: any = this;\r\n        let direction = polygon1.plane.normal.dot(offsetvector);\r\n        if (direction > 0) {\r\n            polygon1 = polygon1.flipped();\r\n        }\r\n        newpolygons.push(polygon1);\r\n        let polygon2 = polygon1.translate(offsetvector);\r\n        let numvertices = this.vertices.length;\r\n        for (let i = 0; i < numvertices; i++) {\r\n            let sidefacepoints = [];\r\n            let nexti = (i < (numvertices - 1)) ? i + 1 : 0;\r\n            sidefacepoints.push(polygon1.vertices[i].pos);\r\n            sidefacepoints.push(polygon2.vertices[i].pos);\r\n            sidefacepoints.push(polygon2.vertices[nexti].pos);\r\n            sidefacepoints.push(polygon1.vertices[nexti].pos);\r\n            let sidefacepolygon = CSGPolygon.createFromPoints(sidefacepoints, this.shared);\r\n            newpolygons.push(sidefacepolygon);\r\n        }\r\n        polygon2 = polygon2.flipped();\r\n        newpolygons.push(polygon2);\r\n        return CSG.fromPolygons(newpolygons);\r\n    }\r\n\r\n    // returns an array with a CSG.Vector3D (center point) and a radius\r\n    /**\r\n     * 返回带有CSG.Vector3D（中心点）和半径的数组\r\n     */\r\n    public boundingSphere() {\r\n        if (!this.cachedBoundingSphere) {\r\n            let box = this.boundingBox();\r\n            let middle = box[0].plus(box[1]).times(0.5);\r\n            let radius3 = box[1].minus(middle);\r\n            let radius = radius3.length();\r\n            this.cachedBoundingSphere = [middle, radius];\r\n        }\r\n        return this.cachedBoundingSphere;\r\n    }\r\n\r\n    // returns an array of two CSG.Vector3Ds (minimum coordinates and maximum coordinates)\r\n    /**\r\n     * 获取包围盒\r\n     */\r\n    public boundingBox() {\r\n        if (!this.cachedBoundingBox) {\r\n            let minpoint;\r\n            let\r\n                maxpoint;\r\n            let vertices = this.vertices;\r\n            let numvertices = vertices.length;\r\n            if (numvertices == 0) {\r\n                minpoint = new CSGVector3D(0, 0, 0);\r\n            } else {\r\n                minpoint = vertices[0].pos;\r\n            }\r\n            maxpoint = minpoint;\r\n            for (let i = 1; i < numvertices; i++) {\r\n                let point = vertices[i].pos;\r\n                minpoint = minpoint.min(point);\r\n                maxpoint = maxpoint.max(point);\r\n            }\r\n            this.cachedBoundingBox = [minpoint, maxpoint];\r\n        }\r\n        return this.cachedBoundingBox;\r\n    }\r\n\r\n    /**\r\n     * 变址浮点运算\r\n     */\r\n    public flipped() {\r\n        let newvertices = this.vertices.map((v: CSGVertex) => v.flipped());\r\n        newvertices.reverse();\r\n        let newplane = this.plane.flipped();\r\n        return new CSGPolygon(newvertices, this.shared, newplane);\r\n    }\r\n\r\n    // Affine transformation of polygon. Returns a new CSG.Polygon\r\n    /**\r\n     * 多边形的仿射变换\r\n     * @param matrix4x4\r\n     */\r\n    public transform(matrix4x4: CSGMatrix4x4) {\r\n        let newvertices = this.vertices.map((v: CSGVertex) => v.transform(matrix4x4));\r\n        let newplane = this.plane.transform(matrix4x4);\r\n        if (matrix4x4.isMirroring()) {\r\n            // need to reverse the vertex order\r\n            // in order to preserve the inside/outside orientation:\r\n            newvertices.reverse();\r\n        }\r\n        return new CSGPolygon(newvertices, this.shared, newplane);\r\n    }\r\n\r\n    /**\r\n     * 转字符串\r\n     */\r\n    public toString() {\r\n        let result = `Polygon plane: ${this.plane.toString()}\\n`;\r\n        this.vertices.map((vertex: CSGVertex) => {\r\n            result += `  ${vertex.toString()}\\n`;\r\n        });\r\n        return result;\r\n    }\r\n\r\n    // project the 3D polygon onto a plane\r\n    /**\r\n     * 将3D多边形投影到平面上\r\n     * @param orthobasis\r\n     */\r\n    public projectToOrthoNormalBasis(orthobasis: any) {\r\n        let points2d = this.vertices.map((vertex: any) => orthobasis.to2D(vertex.pos));\r\n        let result = CAG.fromPointsNoCheck(points2d);\r\n        let area = result.area();\r\n        if (Math.abs(area) < 1e-5) {\r\n            // the polygon was perpendicular to the orthnormal plane. The resulting 2D polygon would be degenerate\r\n            // return an empty area instead:\r\n            result = new CAG();\r\n        } else if (area < 0) {\r\n            result = result.flipped();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates solid from slices (CSG.Polygon) by generating walls\r\n     * @param {Object} options Solid generating options\r\n     *  - numslices {Number} Number of slices to be generated\r\n     *  - callback(t, slice) {Function} Callback function generating slices.\r\n     *          arguments: t = [0..1], slice = [0..numslices - 1]\r\n     *          return: CSG.Polygon or null to skip\r\n     *  - loop {Boolean} no flats, only walls, it's used to generate solids like a tor\r\n     */\r\n\r\n    /**\r\n     * 从片生成实体\r\n     * @param options\r\n     */\r\n    public solidFromSlices(options: any) {\r\n        let polygons: any[] = [];\r\n        let csg = null;\r\n        let prev = null;\r\n        let bottom: any;\r\n        let top: any = null;\r\n        let numSlices = 2;\r\n        let bLoop = false;\r\n        let fnCallback;\r\n        let flipped = null;\r\n        if (options) {\r\n            bLoop = Boolean(options.loop);\r\n            if (options.numslices) {\r\n                numSlices = options.numslices;\r\n            }\r\n            if (options.callback) {\r\n                fnCallback = options.callback;\r\n            }\r\n        }\r\n        if (!fnCallback) {\r\n            let square = CSGPolygon.createFromPoints([\r\n                [0, 0, 0],\r\n                [1, 0, 0],\r\n                [1, 1, 0],\r\n                [0, 1, 0],\r\n            ]);\r\n            fnCallback = function (t: number, slice: any) {\r\n                return t == 0 || t == 1 ? square.translate([0, 0, t]) : null;\r\n            };\r\n        }\r\n        for (let i = 0, iMax = numSlices - 1; i <= iMax; i++) {\r\n            csg = fnCallback.call(this, i / iMax, i);\r\n            if (csg) {\r\n                if (!(csg instanceof CSGPolygon)) {\r\n                    throw new Error('CSG.Polygon.solidFromSlices callback error: CSG.Polygon expected');\r\n                }\r\n                csg.checkIfConvex();\r\n                if (prev) { // generate walls\r\n                    if (flipped == null) { // not generated yet\r\n                        flipped = prev.plane.signedDistanceToPoint(csg.vertices[0].pos) < 0;\r\n                    }\r\n                    this._addWalls(polygons, prev, csg, flipped);\r\n                } else { // the first - will be a bottom\r\n                    bottom = csg;\r\n                }\r\n                prev = csg;\r\n            } // callback can return null to skip that slice\r\n        }\r\n        top = csg;\r\n        if (bLoop) {\r\n            let bSameTopBottom = bottom.vertices.length == top.vertices.length &&\r\n                bottom.vertices.every((v: any, index: any) => v.pos.equals(top.vertices[index].pos));\r\n            // if top and bottom are not the same -\r\n            // generate walls between them\r\n            if (!bSameTopBottom) {\r\n                this._addWalls(polygons, top, bottom, flipped);\r\n            } // else - already generated\r\n        } else {\r\n            // save top and bottom\r\n            // TODO: flip if necessary\r\n            let result: any;\r\n            if (flipped) {\r\n                result = bottom;\r\n            } else {\r\n                result = bottom.flipped();\r\n            }\r\n            polygons.unshift(result);\r\n            polygons.push(flipped ? top.flipped() : top);\r\n        }\r\n        return CSG.fromPolygons(polygons);\r\n    }\r\n\r\n    /**\r\n     * 添加墙多边形数组\r\n     * @param walls Array of wall polygons\r\n     * @param bottom Bottom polygon\r\n     * @param top Top polygon\r\n     */\r\n    private _addWalls(walls: any, bottom: any, top: any, bFlipped: any) {\r\n        let bottomPoints = bottom.vertices.slice(0); // make a copy\r\n        let topPoints = top.vertices.slice(0); // make a copy\r\n        let color = top.shared || null;\r\n        // check if bottom perimeter is closed\r\n        if (!bottomPoints[0].pos.equals(bottomPoints[bottomPoints.length - 1].pos)) {\r\n            bottomPoints.push(bottomPoints[0]);\r\n        }\r\n        // check if top perimeter is closed\r\n        if (!topPoints[0].pos.equals(topPoints[topPoints.length - 1].pos)) {\r\n            topPoints.push(topPoints[0]);\r\n        }\r\n        if (bFlipped) {\r\n            bottomPoints = bottomPoints.reverse();\r\n            topPoints = topPoints.reverse();\r\n        }\r\n        let iTopLen = topPoints.length - 1;\r\n        let iBotLen = bottomPoints.length - 1;\r\n        let iExtra = iTopLen - iBotLen; // how many extra triangles we need\r\n        let bMoreTops = iExtra > 0;\r\n        let bMoreBottoms = iExtra < 0;\r\n        let aMin = []; // indexes to start extra triangles (polygon with minimal square)\r\n        // init - we need exactly /iExtra/ small triangles\r\n        for (let i = Math.abs(iExtra); i > 0; i--) {\r\n            aMin.push({\r\n                len: Infinity,\r\n                index: -1,\r\n            });\r\n        }\r\n        let len;\r\n        if (bMoreBottoms) {\r\n            for (let i = 0; i < iBotLen; i++) {\r\n                len = bottomPoints[i].pos.distanceToSquared(bottomPoints[i + 1].pos);\r\n                // find the element to replace\r\n                for (let j = aMin.length - 1; j >= 0; j--) {\r\n                    if (aMin[j].len > len) {\r\n                        aMin[j].len = len;\r\n                        aMin[j].index = j;\r\n                        break;\r\n                    }\r\n                } // for\r\n            }\r\n        } else if (bMoreTops) {\r\n            for (let i = 0; i < iTopLen; i++) {\r\n                len = topPoints[i].pos.distanceToSquared(topPoints[i + 1].pos);\r\n                // find the element to replace\r\n                for (let j = aMin.length - 1; j >= 0; j--) {\r\n                    if (aMin[j].len > len) {\r\n                        aMin[j].len = len;\r\n                        aMin[j].index = j;\r\n                        break;\r\n                    }\r\n                } // for\r\n            }\r\n        } // if\r\n        // sort by index\r\n        aMin.sort(fnSortByIndex);\r\n        let getTriangle = function addWallsPutTriangle(pointA: any, pointB: any, pointC: any, color: any) {\r\n            return new CSGPolygon([pointA, pointB, pointC], color);\r\n            // return bFlipped ? triangle.flipped() : triangle;\r\n        };\r\n        let bpoint = bottomPoints[0];\r\n        let tpoint = topPoints[0];\r\n        let secondPoint;\r\n        let nBotFacet;\r\n        let\r\n            nTopFacet; // length of triangle facet side\r\n        for (let iB = 0, iT = 0, iMax = iTopLen + iBotLen; iB + iT < iMax;) {\r\n            if (aMin.length) {\r\n                if (bMoreTops && iT == aMin[0].index) { // one vertex is on the bottom, 2 - on the top\r\n                    secondPoint = topPoints[++iT];\r\n                    // console.log('<<< extra top: ' + secondPoint + ', ' + tpoint + ', bottom: ' + bpoint);\r\n                    walls.push(getTriangle(\r\n                        secondPoint, tpoint, bpoint, color,\r\n                    ));\r\n                    tpoint = secondPoint;\r\n                    aMin.shift();\r\n                    continue;\r\n                } else if (bMoreBottoms && iB == aMin[0].index) {\r\n                    secondPoint = bottomPoints[++iB];\r\n                    walls.push(getTriangle(\r\n                        tpoint, bpoint, secondPoint, color,\r\n                    ));\r\n                    bpoint = secondPoint;\r\n                    aMin.shift();\r\n                    continue;\r\n                }\r\n            }\r\n            // choose the shortest path\r\n            if (iB < iBotLen) { // one vertex is on the top, 2 - on the bottom\r\n                nBotFacet = tpoint.pos.distanceToSquared(bottomPoints[iB + 1].pos);\r\n            } else {\r\n                nBotFacet = Infinity;\r\n            }\r\n            if (iT < iTopLen) { // one vertex is on the bottom, 2 - on the top\r\n                nTopFacet = bpoint.pos.distanceToSquared(topPoints[iT + 1].pos);\r\n            } else {\r\n                nTopFacet = Infinity;\r\n            }\r\n            if (nBotFacet <= nTopFacet) {\r\n                secondPoint = bottomPoints[++iB];\r\n                walls.push(getTriangle(\r\n                    tpoint, bpoint, secondPoint, color,\r\n                ));\r\n                bpoint = secondPoint;\r\n            } else if (iT < iTopLen) { // nTopFacet < Infinity\r\n                secondPoint = topPoints[++iT];\r\n                // console.log('<<< top: ' + secondPoint + ', ' + tpoint + ', bottom: ' + bpoint);\r\n                walls.push(getTriangle(\r\n                    secondPoint, tpoint, bpoint, color,\r\n                ));\r\n                tpoint = secondPoint;\r\n            }\r\n        }\r\n        return walls;\r\n    }\r\n\r\n    /**\r\n     * 镜像平面\r\n     * @param plane\r\n     */\r\n    private mirrored(plane: CSGPlane) {\r\n        return this.transform(CSGMatrix4x4.mirroring(plane));\r\n    }\r\n\r\n    /**\r\n     * X轴镜像\r\n     */\r\n    private mirroredX() {\r\n        let plane = new CSGPlane(CSGVector3D.Create(1, 0, 0), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * Y轴镜像\r\n     */\r\n    private mirroredY() {\r\n        let plane = new CSGPlane(CSGVector3D.Create(0, 1, 0), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * Z轴镜像\r\n     */\r\n    private mirroredZ() {\r\n        let plane = new CSGPlane(CSGVector3D.Create(0, 0, 1), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * 转化\r\n     * @param v\r\n     */\r\n    private translate(v: any) {\r\n        return this.transform(CSGMatrix4x4.translation(v));\r\n    }\r\n\r\n    /**\r\n     * 缩放\r\n     * @param f\r\n     */\r\n    private scale(f: any) {\r\n        return this.transform(CSGMatrix4x4.scaling(f));\r\n    }\r\n\r\n    /**\r\n     * X轴旋转\r\n     * @param deg\r\n     */\r\n    private rotateX(deg: any) {\r\n        return this.transform(CSGMatrix4x4.rotationX(deg));\r\n    }\r\n\r\n    /**\r\n     * Y轴旋转\r\n     * @param deg\r\n     */\r\n    private rotateY(deg: any) {\r\n        return this.transform(CSGMatrix4x4.rotationY(deg));\r\n    }\r\n\r\n    /**\r\n     * Z轴旋转\r\n     * @param deg\r\n     */\r\n    private rotateZ(deg: any) {\r\n        return this.transform(CSGMatrix4x4.rotationZ(deg));\r\n    }\r\n\r\n    /**\r\n     * 旋转\r\n     * @param rotationCenter\r\n     * @param rotationAxis\r\n     * @param degrees\r\n     */\r\n    private rotate(rotationCenter: any, rotationAxis: any, degrees: any) {\r\n        return this.transform(CSGMatrix4x4.rotation(rotationCenter, rotationAxis, degrees));\r\n    }\r\n\r\n    /**\r\n     * 旋转欧拉角\r\n     * @param alpha\r\n     * @param beta\r\n     * @param gamma\r\n     * @param position\r\n     */\r\n    private rotateEulerAngles(alpha: any, beta: any, gamma: any, position: any) {\r\n        position = position || [0, 0, 0];\r\n        let Rz1 = CSGMatrix4x4.rotationZ(alpha);\r\n        let Rx = CSGMatrix4x4.rotationX(beta);\r\n        let Rz2 = CSGMatrix4x4.rotationZ(gamma);\r\n        let T = CSGMatrix4x4.translation(new CSGVector3D(position));\r\n        return this.transform(Rz2.multiply(Rx).multiply(Rz1).multiply(T));\r\n    }\r\n}\r\n",
        "import {CSGVector2D} from './CSGVector2D';\r\nimport {CAGVertex} from './CAGVertex';\r\nimport {CAGSide} from './CAGSide';\r\nimport {CSG} from './CSG';\r\nimport {CSGConnector} from './CSGConnector';\r\nimport {CSGVector3D} from './CSGVector3D';\r\nimport {CSGPolygon} from './CSGPolygon';\r\nimport {CSGOrthoNormalBasis} from './CSGOrthoNormalBasis';\r\nimport {CSGVertex} from './CSGVertex';\r\nimport {CSGMatrix4x4} from './CSGMatrix4x4';\r\nimport {CSGPlane} from './CSGPlane';\r\nimport {CAGFuzzyFactory} from './CAGFuzzyFactory';\r\nimport {CSGPath2D} from './CSGPath2D';\r\n\r\n/**\r\n * CAG类\r\n */\r\nexport class CAG {\r\n    public sides: any[];\r\n    static defaultResolution2D: any;\r\n    public isCanonicalized: boolean;\r\n\r\n    /**\r\n     * 构造函数\r\n     */\r\n    constructor() {\r\n\r\n    }\r\n\r\n    /**\r\n     * 从边创建\r\n     * @param sides\r\n     */\r\n    static fromSides(sides: any): CAG {\r\n        let cag = new CAG();\r\n        cag.sides = sides;\r\n        return cag;\r\n    }\r\n\r\n    // Construct a CAG from a list of points (a polygon)\r\n    // Rotation direction of the points is not relevant. Points can be a convex or concave polygon.\r\n    // Polygon must not self intersect\r\n    /**\r\n     * 从点列表创建\r\n     * @param points\r\n     */\r\n    static fromPoints(points: any[]): CAG {\r\n        let numpoints = points.length;\r\n        if (numpoints < 3) {\r\n            throw new Error('CAG shape needs at least 3 points');\r\n        }\r\n        let sides: any = [];\r\n        let prevpoint = new CSGVector2D(points[numpoints - 1]);\r\n        let prevvertex = new CAGVertex(prevpoint);\r\n        points.map((p: any) => {\r\n            let point = new CSGVector2D(p);\r\n            let vertex = new CAGVertex(point);\r\n            let side = new CAGSide(prevvertex, vertex);\r\n            sides.push(side);\r\n            prevvertex = vertex;\r\n        });\r\n        let result = CAG.fromSides(sides);\r\n        if (result.isSelfIntersecting()) {\r\n            throw new Error('Polygon is self intersecting!');\r\n        }\r\n        let area = result.area();\r\n        if (Math.abs(area) < 1e-5) {\r\n            throw new Error('Degenerate polygon!');\r\n        }\r\n        if (area < 0) {\r\n            result = result.flipped();\r\n        }\r\n        result = result.canonicalized();\r\n        return result;\r\n    }\r\n\r\n    // Like CAG.fromPoints but does not check if it's a valid polygon.\r\n    // Points should rotate counter clockwise\r\n    /**\r\n     * 从点创建\r\n     * @param points\r\n     */\r\n    static fromPointsNoCheck(points: any[]): CAG {\r\n        let sides: any = [];\r\n        let prevpoint = new CSGVector2D(points[points.length - 1]);\r\n        let prevvertex = new CAGVertex(prevpoint);\r\n        points.map((p: any) => {\r\n            let point = new CSGVector2D(p);\r\n            let vertex = new CAGVertex(point);\r\n            let side = new CAGSide(prevvertex, vertex);\r\n            sides.push(side);\r\n            prevvertex = vertex;\r\n        });\r\n        return CAG.fromSides(sides);\r\n    }\r\n\r\n    // Converts a CSG to a CAG. The CSG must consist of polygons with only z coordinates +1 and -1\r\n    // as constructed by CAG._toCSGWall(-1, 1). This is so we can use the 3D union(), intersect() etc\r\n    /**\r\n     * 从虚拟CSG创建\r\n     * @param csg\r\n     */\r\n    static fromFakeCSG(csg: CSG): CAG {\r\n        let sides = csg.polygons.map((p: any) => CAGSide._fromFakePolygon(p))\r\n            .filter((s: any) => s != null);\r\n        return CAG.fromSides(sides);\r\n    }\r\n\r\n    // see if the line between p0start and p0end intersects with the line between p1start and p1end\r\n    // returns true if the lines strictly intersect, the end points are not counted!\r\n    /**\r\n     * 线切断\r\n     * @param p0start\r\n     * @param p0end\r\n     * @param p1start\r\n     * @param p1end\r\n     */\r\n    static linesIntersect(p0start: CSGVector3D, p0end: CSGVector3D, p1start: CSGVector3D, p1end: CSGVector3D): boolean {\r\n        if (p0end.equals(p1start) || p1end.equals(p0start)) {\r\n            let d = p1end.minus(p1start).unit().plus(p0end.minus(p0start).unit()).length();\r\n            if (d < 1e-5) {\r\n                return true;\r\n            }\r\n        } else {\r\n            let d0: any = p0end.minus(p0start);\r\n            let d1: any = p1end.minus(p1start);\r\n            if (Math.abs(d0.cross(d1)) < 1e-9) {\r\n                return false;\r\n            } // lines are parallel\r\n            let alphas = CSG.solve2Linear(-d0.x, d1.x, -d0.y, d1.y, p0start.x - p1start.x, p0start.y - p1start.y);\r\n            if ((alphas[0] > 1e-6) && (alphas[0] < 0.999999) && (alphas[1] > 1e-5) && (alphas[1] < 0.999999)) {\r\n                return true;\r\n            }\r\n            //    if( (alphas[0] >= 0) && (alphas[0] <= 1) && (alphas[1] >= 0) && (alphas[1] <= 1) ) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /* Construct a circle\r\n        options:\r\n          center: a 2D center point\r\n          radius: a scalar\r\n          resolution: number of sides per 360 degree rotation\r\n        returns a CAG object\r\n        */\r\n    /**\r\n     * 圆形\r\n     * @param options\r\n     */\r\n    static circle(options: any): CAG {\r\n        options = options || {};\r\n        let center = CSG.parseOptionAs2DVector(options, 'center', [0, 0]);\r\n        let radius = CSG.parseOptionAsFloat(options, 'radius', 1);\r\n        let resolution = CSG.parseOptionAsInt(options, 'resolution', this.defaultResolution2D);\r\n        let sides = [];\r\n        let prevvertex: any;\r\n        for (let i = 0; i <= resolution; i++) {\r\n            let radians = 2 * Math.PI * i / resolution;\r\n            let point = CSGVector2D.fromAngleRadians(radians).times(radius).plus(center);\r\n            let vertex = new CAGVertex(point);\r\n            if (i > 0) {\r\n                sides.push(new CAGSide(prevvertex, vertex));\r\n            }\r\n            prevvertex = vertex;\r\n        }\r\n        return CAG.fromSides(sides);\r\n    }\r\n\r\n    /* Construct a rectangle\r\n        options:\r\n          center: a 2D center point\r\n          radius: a 2D vector with width and height\r\n          returns a CAG object\r\n        */\r\n    /**\r\n     * 圆角矩阵\r\n     * @param options\r\n     */\r\n    static rectangle(options: any): CAG {\r\n        options = options || {};\r\n        let c;\r\n        let r;\r\n        if (('corner1' in options) || ('corner2' in options)) {\r\n            if (('center' in options) || ('radius' in options)) {\r\n                throw new Error('rectangle: should either give a radius and center parameter, or a corner1 and corner2 parameter');\r\n            }\r\n            let corner1 = CSG.parseOptionAs2DVector(options, 'corner1', [0, 0]);\r\n            let corner2 = CSG.parseOptionAs2DVector(options, 'corner2', [1, 1]);\r\n            c = corner1.plus(corner2).times(0.5);\r\n            r = corner2.minus(corner1).times(0.5);\r\n        } else {\r\n            c = CSG.parseOptionAs2DVector(options, 'center', [0, 0]);\r\n            r = CSG.parseOptionAs2DVector(options, 'radius', [1, 1]);\r\n        }\r\n        r = r.abs(); // negative radii make no sense\r\n        let rswap = new CSGVector2D(r.x, -r.y);\r\n        let points = [\r\n            c.plus(r), c.plus(rswap), c.minus(r), c.minus(rswap),\r\n        ];\r\n        return CAG.fromPoints(points);\r\n    }\r\n\r\n    //     let r = CSG.roundedRectangle({\r\n    //       center: [0, 0],\r\n    //       radius: [2, 1],\r\n    //       roundradius: 0.2,\r\n    //       resolution: 8,\r\n    //     });\r\n    /**\r\n     * 圆角矩形\r\n     * @param options\r\n     */\r\n    static roundedRectangle(options: any): CAG {\r\n        options = options || {};\r\n        let center;\r\n        let\r\n            radius;\r\n        if (('corner1' in options) || ('corner2' in options)) {\r\n            if (('center' in options) || ('radius' in options)) {\r\n                throw new Error('roundedRectangle: should either give a radius and center parameter, or a corner1 and corner2 parameter');\r\n            }\r\n            let corner1 = CSG.parseOptionAs2DVector(options, 'corner1', [0, 0]);\r\n            let corner2 = CSG.parseOptionAs2DVector(options, 'corner2', [1, 1]);\r\n            center = corner1.plus(corner2).times(0.5);\r\n            radius = corner2.minus(corner1).times(0.5);\r\n        } else {\r\n            center = CSG.parseOptionAs2DVector(options, 'center', [0, 0]);\r\n            radius = CSG.parseOptionAs2DVector(options, 'radius', [1, 1]);\r\n        }\r\n        radius = radius.abs(); // negative radii make no sense\r\n        let roundradius = CSG.parseOptionAsFloat(options, 'roundradius', 0.2);\r\n        let resolution = CSG.parseOptionAsInt(options, 'resolution', this.defaultResolution2D);\r\n        let maxroundradius = Math.min(radius.x, radius.y);\r\n        maxroundradius -= 0.1;\r\n        roundradius = Math.min(roundradius, maxroundradius);\r\n        roundradius = Math.max(0, roundradius);\r\n        radius = new CSGVector2D(radius.x - roundradius, radius.y - roundradius);\r\n        let rect = CAG.rectangle({\r\n            center,\r\n            radius,\r\n        });\r\n        if (roundradius > 0) {\r\n            rect = rect.expand(roundradius, resolution);\r\n        }\r\n        return rect;\r\n    }\r\n\r\n    // Reconstruct a CAG from the output of toCompactBinary()\r\n    /**\r\n     * 从压缩文件创建\r\n     * @param bin\r\n     */\r\n    static fromCompactBinary(bin: any) {\r\n        if (bin.class != 'CAG') {\r\n            throw new Error('Not a CAG');\r\n        }\r\n        let vertices = [];\r\n        let vertexData = bin.vertexData;\r\n        let numvertices = vertexData.length / 2;\r\n        let arrayindex = 0;\r\n        for (let vertexindex = 0; vertexindex < numvertices; vertexindex++) {\r\n            let x = vertexData[arrayindex++];\r\n            let y = vertexData[arrayindex++];\r\n            let pos = new CSGVector2D(x, y);\r\n            let vertex = new CAGVertex(pos);\r\n            vertices.push(vertex);\r\n        }\r\n        let sides = [];\r\n        let numsides = bin.sideVertexIndices.length / 2;\r\n        arrayindex = 0;\r\n        for (let sideindex = 0; sideindex < numsides; sideindex++) {\r\n            let vertexindex0 = bin.sideVertexIndices[arrayindex++];\r\n            let vertexindex1 = bin.sideVertexIndices[arrayindex++];\r\n            let side = new CAGSide(vertices[vertexindex0], vertices[vertexindex1]);\r\n            sides.push(side);\r\n        }\r\n        let cag = this.fromSides(sides);\r\n        cag.isCanonicalized = true;\r\n        return cag;\r\n    }\r\n\r\n    /**\r\n     * 转化为字符串\r\n     */\r\n    public toString() {\r\n        let result = `CAG (${this.sides.length} sides):\\n`;\r\n        this.sides.map((side: any) => {\r\n            result += `  ${side.toString()}\\n`;\r\n        });\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 创建CSG\r\n     * @param z0\r\n     * @param z1\r\n     * @private\r\n     */\r\n    private _toCSGWall(z0: any, z1: any) {\r\n        let polygons = this.sides.map((side: any) => side.toPolygon3D(z0, z1));\r\n        return CSG.fromPolygons(polygons);\r\n    }\r\n\r\n    /**\r\n     * 转化成一对三维向量\r\n     * @param m\r\n     * @private\r\n     */\r\n    private _toVector3DPairs(m: any) {\r\n        // transform m\r\n        let pairs = this.sides.map((side: any) => {\r\n            let p0 = side.vertex0.pos;\r\n            let p1 = side.vertex1.pos;\r\n            return [\r\n                CSGVector3D.Create(p0.x, p0.y, 0),\r\n                CSGVector3D.Create(p1.x, p1.y, 0),\r\n            ];\r\n        });\r\n        if (typeof m != 'undefined') {\r\n            pairs = pairs.map((pair) => pair.map((v) => v.transform(m)));\r\n        }\r\n        return pairs;\r\n    }\r\n\r\n    /*\r\n         * transform a cag into the polygons of a corresponding 3d plane, positioned per options\r\n         * Accepts a connector for plane positioning, or optionally\r\n         * single translation, axisVector, normalVector arguments\r\n         * (toConnector has precedence over single arguments if provided)\r\n         */\r\n    /**\r\n     * 将cag转换为相应3d平面的多边形（按选项定位）\r\n     * @param options\r\n     * @private\r\n     */\r\n    private _toPlanePolygons(options: any) {\r\n        let flipped = options.flipped || false;\r\n        // reference connector for transformation\r\n        let origin = [0, 0, 0];\r\n        let defaultAxis = [0, 0, 1];\r\n        let defaultNormal = [0, 1, 0];\r\n        let thisConnector = new CSGConnector(origin, defaultAxis, defaultNormal);\r\n        // translated connector per options\r\n        let translation = options.translation || origin;\r\n        let axisVector = options.axisVector || defaultAxis;\r\n        let normalVector = options.normalVector || defaultNormal;\r\n        // will override above if options has toConnector\r\n        let toConnector = options.toConnector ||\r\n            new CSGConnector(translation, axisVector, normalVector);\r\n        // resulting transform\r\n        let m = thisConnector.getTransformationTo(toConnector, false, 0);\r\n        // create plane as a (partial non-closed) CSG in XY plane\r\n        let bounds = this.getBounds();\r\n        bounds[0] = bounds[0].minus(new CSGVector2D(1, 1));\r\n        bounds[1] = bounds[1].plus(new CSGVector2D(1, 1));\r\n        let csgshell = this._toCSGWall(-1, 1);\r\n        let csgplane = CSG.fromPolygons([new CSGPolygon([\r\n            new CSGVertex(new CSGVector3D(bounds[0].x, bounds[0].y, 0)),\r\n            new CSGVertex(new CSGVector3D(bounds[1].x, bounds[0].y, 0)),\r\n            new CSGVertex(new CSGVector3D(bounds[1].x, bounds[1].y, 0)),\r\n            new CSGVertex(new CSGVector3D(bounds[0].x, bounds[1].y, 0)),\r\n        ])]);\r\n        if (flipped) {\r\n            csgplane = csgplane.invert();\r\n        }\r\n        // intersectSub -> prevent premature retesselate/canonicalize\r\n        csgplane = csgplane.intersectSub(csgshell);\r\n        // only keep the polygons in the z plane:\r\n        let polys = csgplane.polygons.filter((polygon) => Math.abs(polygon.plane.normal.z) > 0.99);\r\n        // finally, position the plane per passed transformations\r\n        return polys.map((poly) => poly.transform(m));\r\n    }\r\n\r\n    /*\r\n         * given 2 connectors, this returns all polygons of a \"wall\" between 2\r\n         * copies of this cag, positioned in 3d space as \"bottom\" and\r\n         * \"top\" plane per connectors toConnector1, and toConnector2, respectively\r\n         */\r\n    /**\r\n     * 给定2个连接器，这将返回2之间的“墙”的所有多边形\r\n     * @param options\r\n     * @private\r\n     */\r\n    private _toWallPolygons(options: any) {\r\n        // normals are going to be correct as long as toConn2.point - toConn1.point\r\n        // points into cag normal direction (check in caller)\r\n        // arguments: options.toConnector1, options.toConnector2, options.cag\r\n        //     walls go from toConnector1 to toConnector2\r\n        //     optionally, target cag to point to - cag needs to have same number of sides as this!\r\n        let origin = [0, 0, 0];\r\n        let defaultAxis = [0, 0, 1];\r\n        let defaultNormal = [0, 1, 0];\r\n        let thisConnector = new CSGConnector(origin, defaultAxis, defaultNormal);\r\n        // arguments:\r\n        let toConnector1 = options.toConnector1;\r\n        // let toConnector2 = new CSGConnector([0, 0, -30], defaultAxis, defaultNormal);\r\n        let toConnector2 = options.toConnector2;\r\n        if (!(toConnector1 instanceof CSGConnector && toConnector2 instanceof CSGConnector)) {\r\n            throw ('could not parse CSG.Connector arguments toConnector1 or toConnector2');\r\n        }\r\n        if (options.cag) {\r\n            if (options.cag.sides.length != this.sides.length) {\r\n                throw ('target cag needs same sides count as start cag');\r\n            }\r\n        }\r\n        // target cag is same as this unless specified\r\n        let toCag = options.cag || this;\r\n        let m1 = thisConnector.getTransformationTo(toConnector1, false, 0);\r\n        let m2 = thisConnector.getTransformationTo(toConnector2, false, 0);\r\n        let vps1 = this._toVector3DPairs(m1);\r\n        let vps2 = toCag._toVector3DPairs(m2);\r\n        let polygons: any = [];\r\n        vps1.forEach((vp1, i) => {\r\n            polygons.push(new CSGPolygon([\r\n                new CSGVertex(vps2[i][1]), new CSGVertex(vps2[i][0]), new CSGVertex(vp1[0]),\r\n            ]));\r\n            polygons.push(new CSGPolygon([\r\n                new CSGVertex(vps2[i][1]), new CSGVertex(vp1[0]), new CSGVertex(vp1[1]),\r\n            ]));\r\n        });\r\n        return polygons;\r\n    }\r\n\r\n    /**\r\n     * 联合\r\n     * @param cag\r\n     */\r\n    public union(cag: any) {\r\n        let cags;\r\n        if (cag instanceof Array) {\r\n            cags = cag;\r\n        } else {\r\n            cags = [cag];\r\n        }\r\n        let r = this._toCSGWall(-1, 1);\r\n        r = r.union(\r\n            cags.map((cag) => cag._toCSGWall(-1, 1).reTesselated()));\r\n        return CAG.fromFakeCSG(r).canonicalized();\r\n    }\r\n\r\n    /**\r\n     * 减去\r\n     * @param cag\r\n     */\r\n    public subtract(cag: any) {\r\n        let cags;\r\n        if (cag instanceof Array) {\r\n            cags = cag;\r\n        } else {\r\n            cags = [cag];\r\n        }\r\n        let r: any = this._toCSGWall(-1, 1);\r\n        cags.map((cag) => {\r\n            r = r.subtractSub(cag._toCSGWall(-1, 1), false, false);\r\n        });\r\n        r = r.reTesselated();\r\n        r = r.canonicalized();\r\n        r = CAG.fromFakeCSG(r);\r\n        r = r.canonicalized();\r\n        return r;\r\n    }\r\n\r\n    /**\r\n     * 求交\r\n     * @param cag\r\n     */\r\n    public intersect(cag: any) {\r\n        let cags;\r\n        if (cag instanceof Array) {\r\n            cags = cag;\r\n        } else {\r\n            cags = [cag];\r\n        }\r\n        let r: any = this._toCSGWall(-1, 1);\r\n        cags.map((cag) => {\r\n            r = r.intersectSub(cag._toCSGWall(-1, 1), false, false);\r\n        });\r\n        r = r.reTesselated();\r\n        r = r.canonicalized();\r\n        r = CAG.fromFakeCSG(r);\r\n        r = r.canonicalized();\r\n        return r;\r\n    }\r\n\r\n    /**\r\n     * 转化\r\n     * @param matrix4x4\r\n     */\r\n    public transform(matrix4x4: any) {\r\n        let ismirror = matrix4x4.isMirroring();\r\n        let newsides = this.sides.map((side) => side.transform(matrix4x4));\r\n        let result = CAG.fromSides(newsides);\r\n        if (ismirror) {\r\n            result = result.flipped();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // see http://local.wasp.uwa.edu.au/~pbourke/geometry/polyarea/ :\r\n    // Area of the polygon. For a counter clockwise rotating polygon the area is positive, otherwise negative\r\n    // Note(bebbi): this looks wrong. See polygon getArea()\r\n    /**\r\n     * 获取多边形面积\r\n     */\r\n    public area() {\r\n        let polygonArea = 0;\r\n        this.sides.map((side) => {\r\n            polygonArea += side.vertex0.pos.cross(side.vertex1.pos);\r\n        });\r\n        polygonArea *= 0.5;\r\n        return polygonArea;\r\n    }\r\n\r\n    /**\r\n     * 获取新对象\r\n     */\r\n    public flipped() {\r\n        let newsides = this.sides.map((side) => side.flipped());\r\n        newsides.reverse();\r\n        return CAG.fromSides(newsides);\r\n    }\r\n\r\n    /**\r\n     * 获取包围盒\r\n     */\r\n    public getBounds() {\r\n        let minpoint: any;\r\n        if (this.sides.length == 0) {\r\n            minpoint = new CSGVector2D(0, 0);\r\n        } else {\r\n            minpoint = this.sides[0].vertex0.pos;\r\n        }\r\n        let maxpoint = minpoint;\r\n        this.sides.map((side) => {\r\n            minpoint = minpoint.min(side.vertex0.pos);\r\n            minpoint = minpoint.min(side.vertex1.pos);\r\n            maxpoint = maxpoint.max(side.vertex0.pos);\r\n            maxpoint = maxpoint.max(side.vertex1.pos);\r\n        });\r\n        return [minpoint, maxpoint];\r\n    }\r\n\r\n    /**\r\n     * 自相交状态\r\n     * @param debug\r\n     */\r\n    public isSelfIntersecting(debug?: any) {\r\n        let numsides = this.sides.length;\r\n        for (let i = 0; i < numsides; i++) {\r\n            let side0 = this.sides[i];\r\n            for (let ii = i + 1; ii < numsides; ii++) {\r\n                let side1 = this.sides[ii];\r\n                if (CAG.linesIntersect(side0.vertex0.pos, side0.vertex1.pos, side1.vertex0.pos, side1.vertex1.pos)) {\r\n                    if (debug) {\r\n                        console.log(side0);\r\n                        console.log(side1);\r\n                    }\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 扩大壳体\r\n     * @param radius\r\n     * @param resolution\r\n     */\r\n    public expandedShell(radius: any, resolution: any) {\r\n        resolution = resolution || 8;\r\n        if (resolution < 4) {\r\n            resolution = 4;\r\n        }\r\n        let cags = [];\r\n        let pointmap: any = {};\r\n        let cag = this.canonicalized();\r\n        cag.sides.map((side) => {\r\n            let d = side.vertex1.pos.minus(side.vertex0.pos);\r\n            let dl = d.length();\r\n            if (dl > 1e-5) {\r\n                d = d.times(1.0 / dl);\r\n                let normal = d.normal().times(radius);\r\n                let shellpoints = [\r\n                    side.vertex1.pos.plus(normal),\r\n                    side.vertex1.pos.minus(normal),\r\n                    side.vertex0.pos.minus(normal),\r\n                    side.vertex0.pos.plus(normal),\r\n                ];\r\n                //      let newcag = CAG.fromPointsNoCheck(shellpoints);\r\n                let newcag = CAG.fromPoints(shellpoints);\r\n                cags.push(newcag);\r\n                for (let step = 0; step < 2; step++) {\r\n                    let p1 = (step == 0) ? side.vertex0.pos : side.vertex1.pos;\r\n                    let p2 = (step == 0) ? side.vertex1.pos : side.vertex0.pos;\r\n                    let tag = `${p1.x} ${p1.y}`;\r\n                    if (!(tag in pointmap)) {\r\n                        pointmap[tag] = [];\r\n                    }\r\n                    pointmap[tag].push({\r\n                        p1,\r\n                        p2,\r\n                    });\r\n                }\r\n            }\r\n        });\r\n        for (let tag in pointmap) {\r\n            let m = pointmap[tag];\r\n            let angle1;\r\n            let\r\n                angle2;\r\n            let pcenter = m[0].p1;\r\n            if (m.length == 2) {\r\n                let end1 = m[0].p2;\r\n                let end2 = m[1].p2;\r\n                angle1 = end1.minus(pcenter).angleDegrees();\r\n                angle2 = end2.minus(pcenter).angleDegrees();\r\n                if (angle2 < angle1) {\r\n                    angle2 += 360;\r\n                }\r\n                if (angle2 >= (angle1 + 360)) {\r\n                    angle2 -= 360;\r\n                }\r\n                if (angle2 < angle1 + 180) {\r\n                    let t = angle2;\r\n                    angle2 = angle1 + 360;\r\n                    angle1 = t;\r\n                }\r\n                angle1 += 90;\r\n                angle2 -= 90;\r\n            } else {\r\n                angle1 = 0;\r\n                angle2 = 360;\r\n            }\r\n            let fullcircle = (angle2 > angle1 + 359.999);\r\n            if (fullcircle) {\r\n                angle1 = 0;\r\n                angle2 = 360;\r\n            }\r\n            if (angle2 > (angle1 + 1e-5)) {\r\n                let points = [];\r\n                if (!fullcircle) {\r\n                    points.push(pcenter);\r\n                }\r\n                let numsteps = Math.round(resolution * (angle2 - angle1) / 360);\r\n                if (numsteps < 1) {\r\n                    numsteps = 1;\r\n                }\r\n                for (let step = 0; step <= numsteps; step++) {\r\n                    let angle = angle1 + step / numsteps * (angle2 - angle1);\r\n                    if (step == numsteps) {\r\n                        angle = angle2;\r\n                    } // prevent rounding errors\r\n                    let point = pcenter.plus(CSGVector2D.fromAngleDegrees(angle).times(radius));\r\n                    if ((!fullcircle) || (step > 0)) {\r\n                        points.push(point);\r\n                    }\r\n                }\r\n                let newcag = CAG.fromPointsNoCheck(points);\r\n                cags.push(newcag);\r\n            }\r\n        }\r\n        let result = new CAG();\r\n        result = result.union(cags);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 向外偏移\r\n     * @param radius\r\n     * @param resolution\r\n     */\r\n    public expand(radius: any, resolution: any) {\r\n        let result = this.union(this.expandedShell(radius, resolution));\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 向内偏移\r\n     * @param radius\r\n     * @param resolution\r\n     */\r\n    public contract(radius: any, resolution: any) {\r\n        let result = this.subtract(this.expandedShell(radius, resolution));\r\n        return result;\r\n    }\r\n\r\n    // extrude the CAG in a certain plane.\r\n    // Giving just a plane is not enough, multiple different extrusions in the same plane would be possible\r\n    // by rotating around the plane's origin. An additional right-hand vector should be specified as well,\r\n    // and this is exactly a CSG.OrthoNormalBasis.\r\n    // orthonormalbasis: characterizes the plane in which to extrude\r\n    // depth: thickness of the extruded shape. Extrusion is done from the plane towards above (unless\r\n    // symmetrical option is set, see below)\r\n    //\r\n    // options:\r\n    //   {symmetrical: true}  // extrude symmetrically in two directions about the plane\r\n    /**\r\n     * 将CAG挤压到特定平面\r\n     * @param orthonormalbasis\r\n     * @param depth\r\n     * @param options\r\n     */\r\n    public extrudeInOrthonormalBasis(orthonormalbasis: any, depth: any, options?: any) {\r\n        // first extrude in the regular Z plane:\r\n        if (!(orthonormalbasis instanceof CSGOrthoNormalBasis)) {\r\n            throw new Error('extrudeInPlane: the first parameter should be a CSG.OrthoNormalBasis');\r\n        }\r\n        let extruded = this.extrude({\r\n            offset: [0, 0, depth],\r\n        });\r\n        if (CSG.parseOptionAsBool(options, 'symmetrical', false)) {\r\n            extruded = extruded.translate([0, 0, -depth / 2]);\r\n        }\r\n        let matrix = orthonormalbasis.getInverseProjectionMatrix();\r\n        extruded = extruded.transform(matrix);\r\n        return extruded;\r\n    }\r\n\r\n    // Extrude in a standard cartesian plane, specified by two axis identifiers. Each identifier can be\r\n    // one of [\"X\",\"Y\",\"Z\",\"-X\",\"-Y\",\"-Z\"]\r\n    // The 2d x axis will map to the first given 3D axis, the 2d y axis will map to the second.\r\n    // See CSG.OrthoNormalBasis.GetCartesian for details.\r\n    /**\r\n     * 在标准笛卡尔坐标系中挤压\r\n     * @param axis1\r\n     * @param axis2\r\n     * @param depth\r\n     * @param options\r\n     */\r\n    public extrudeInPlane(axis1: any, axis2: any, depth: any, options: any) {\r\n        return this.extrudeInOrthonormalBasis(CSGOrthoNormalBasis.GetCartesian(axis1, axis2), depth, options);\r\n    }\r\n\r\n    // extruded=cag.extrude({offset: [0,0,10], twistangle: 360, twiststeps: 100});\r\n    // linear extrusion of 2D shape, with optional twist\r\n    // The 2d shape is placed in in z=0 plane and extruded into direction <offset> (a CSG.Vector3D)\r\n    // The final face is rotated <twistangle> degrees. Rotation is done around the origin of the 2d shape (i.e. x=0, y=0)\r\n    // twiststeps determines the resolution of the twist (should be >= 1)\r\n    // returns a CSG object\r\n    /**\r\n     * 挤压\r\n     * @param options\r\n     */\r\n    public extrude(options: any) {\r\n        if (this.sides.length == 0) {\r\n            // empty!\r\n            return new CSG();\r\n        }\r\n        let offsetVector = CSG.parseOptionAs3DVector(options, 'offset', [0, 0, 1]);\r\n        let twistangle = CSG.parseOptionAsFloat(options, 'twistangle', 0);\r\n        let twiststeps = CSG.parseOptionAsInt(options, 'twiststeps', CSG.defaultResolution3D);\r\n        if (offsetVector.z == 0) {\r\n            throw ('offset cannot be orthogonal to Z axis');\r\n        }\r\n        if (twistangle == 0 || twiststeps < 1) {\r\n            twiststeps = 1;\r\n        }\r\n        let normalVector = CSGVector3D.Create(0, 1, 0);\r\n        let polygons: any = [];\r\n        // bottom and top\r\n        polygons = polygons.concat(this._toPlanePolygons({\r\n            translation: [0, 0, 0],\r\n            normalVector,\r\n            flipped: !(offsetVector.z < 0),\r\n        }));\r\n        polygons = polygons.concat(this._toPlanePolygons({\r\n            translation: offsetVector,\r\n            normalVector: normalVector.rotateZ(twistangle),\r\n            flipped: offsetVector.z < 0,\r\n        }));\r\n        // walls\r\n        for (let i = 0; i < twiststeps; i++) {\r\n            let c1 = new CSGConnector(offsetVector.times(i / twiststeps), [0, 0, offsetVector.z],\r\n                normalVector.rotateZ(i * twistangle / twiststeps));\r\n            let c2 = new CSGConnector(offsetVector.times((i + 1) / twiststeps), [0, 0, offsetVector.z],\r\n                normalVector.rotateZ((i + 1) * twistangle / twiststeps));\r\n            polygons = polygons.concat(this._toWallPolygons({\r\n                toConnector1: c1,\r\n                toConnector2: c2,\r\n            }));\r\n        }\r\n        return CSG.fromPolygons(polygons);\r\n    }\r\n\r\n    /*\r\n         * extrude CAG to 3d object by rotating the origin around the y axis\r\n         * (and turning everything into XY plane)\r\n         * arguments: options dict with angle and resolution, both optional\r\n         */\r\n    /**\r\n     * 旋转拉伸\r\n     * @param options\r\n     */\r\n    public rotateExtrude(options: any) {\r\n        let alpha = CSG.parseOptionAsFloat(options, 'angle', 360);\r\n        let resolution = CSG.parseOptionAsInt(options, 'resolution', CSG.defaultResolution3D);\r\n        let EPS = 1e-5;\r\n        alpha = alpha > 360 ? alpha % 360 : alpha;\r\n        let origin = [0, 0, 0];\r\n        let axisV = CSGVector3D.Create(0, 1, 0);\r\n        let normalV = [0, 0, 1];\r\n        let polygons: any = [];\r\n        // planes only needed if alpha > 0\r\n        let connS = new CSGConnector(origin, axisV, normalV);\r\n        if (alpha > 0 && alpha < 360) {\r\n            // we need to rotate negative to satisfy wall function condition of\r\n            // building in the direction of axis vector\r\n            let connE = new CSGConnector(origin, axisV.rotateZ(-alpha), normalV);\r\n            polygons = polygons.concat(\r\n                this._toPlanePolygons({\r\n                    toConnector: connS,\r\n                    flipped: true,\r\n                }));\r\n            polygons = polygons.concat(\r\n                this._toPlanePolygons({\r\n                    toConnector: connE,\r\n                }));\r\n        }\r\n        let connT1 = connS;\r\n        let connT2;\r\n        let step = alpha / resolution;\r\n        for (let a = step; a <= alpha + EPS; a += step) {\r\n            connT2 = new CSGConnector(origin, axisV.rotateZ(-a), normalV);\r\n            polygons = polygons.concat(this._toWallPolygons({\r\n                toConnector1: connT1,\r\n                toConnector2: connT2,\r\n            }));\r\n            connT1 = connT2;\r\n        }\r\n        return CSG.fromPolygons(polygons).reTesselated();\r\n    }\r\n\r\n    // check if we are a valid CAG (for debugging)\r\n    // NOTE(bebbi) uneven side count doesn't work because rounding with EPS isn't taken into account\r\n    /**\r\n     * 检查我们是否为有效的CAG（用于调试）\r\n     */\r\n    public check() {\r\n        let EPS = 1e-5;\r\n        let errors = [];\r\n        if (this.isSelfIntersecting(true)) {\r\n            errors.push('Self intersects');\r\n        }\r\n        let pointcount: any = {};\r\n        this.sides.map((side) => {\r\n            function mappoint(p: any) {\r\n                let tag = `${p.x} ${p.y}`;\r\n                if (!(tag in pointcount)) {\r\n                    pointcount[tag] = 0;\r\n                }\r\n                pointcount[tag]++;\r\n            }\r\n\r\n            mappoint(side.vertex0.pos);\r\n            mappoint(side.vertex1.pos);\r\n        });\r\n        for (let tag in pointcount) {\r\n            let count = pointcount[tag];\r\n            if (count & 1) {\r\n                errors.push(`Uneven number of sides (${count}) for point ${tag}`);\r\n            }\r\n        }\r\n        let area = this.area();\r\n        if (area < EPS * EPS) {\r\n            errors.push(`Area is ${area}`);\r\n        }\r\n        if (errors.length > 0) {\r\n            let ertxt = '';\r\n            errors.map((err) => {\r\n                ertxt += `${err}\\n`;\r\n            });\r\n            throw new Error(ertxt);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 规范化\r\n     */\r\n    public canonicalized() {\r\n        if (this.isCanonicalized) {\r\n            return this;\r\n        } else {\r\n            let factory = new CAGFuzzyFactory();\r\n            let result = factory.getCAG(this);\r\n            result.isCanonicalized = true;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 压缩\r\n     */\r\n    public toCompactBinary() {\r\n        let cag = this.canonicalized();\r\n        let numsides = cag.sides.length;\r\n        let vertexmap: any = {};\r\n        let vertices: any = [];\r\n        let numvertices = 0;\r\n        let sideVertexIndices = new Uint32Array(2 * numsides);\r\n        let sidevertexindicesindex = 0;\r\n        cag.sides.map((side) => {\r\n            [side.vertex0, side.vertex1].map((v) => {\r\n                let vertextag = v.getTag();\r\n                let vertexindex;\r\n                if (!(vertextag in vertexmap)) {\r\n                    vertexindex = numvertices++;\r\n                    vertexmap[vertextag] = vertexindex;\r\n                    vertices.push(v);\r\n                } else {\r\n                    vertexindex = vertexmap[vertextag];\r\n                }\r\n                sideVertexIndices[sidevertexindicesindex++] = vertexindex;\r\n            });\r\n        });\r\n        let vertexData = new Float64Array(numvertices * 2);\r\n        let verticesArrayIndex = 0;\r\n        vertices.map((v: any) => {\r\n            let pos = v.pos;\r\n            vertexData[verticesArrayIndex++] = pos._x;\r\n            vertexData[verticesArrayIndex++] = pos._y;\r\n        });\r\n        let result = {\r\n            class: 'CAG',\r\n            sideVertexIndices,\r\n            vertexData,\r\n        };\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 获取外轮廓路径\r\n     */\r\n    public getOutlinePaths() {\r\n        let cag = this.canonicalized();\r\n        let sideTagToSideMap: any = {};\r\n        let startVertexTagToSideTagMap: any = {};\r\n        cag.sides.map((side) => {\r\n            let sidetag = side.getTag();\r\n            sideTagToSideMap[sidetag] = side;\r\n            let startvertextag = side.vertex0.getTag();\r\n            if (!(startvertextag in startVertexTagToSideTagMap)) {\r\n                startVertexTagToSideTagMap[startvertextag] = [];\r\n            }\r\n            startVertexTagToSideTagMap[startvertextag].push(sidetag);\r\n        });\r\n        let paths = [];\r\n        while (true) {\r\n            let startsidetag = null;\r\n            for (let aVertexTag in startVertexTagToSideTagMap) {\r\n                let sidesForThisVertex = startVertexTagToSideTagMap[aVertexTag];\r\n                startsidetag = sidesForThisVertex[0];\r\n                sidesForThisVertex.splice(0, 1);\r\n                if (sidesForThisVertex.length == 0) {\r\n                    delete startVertexTagToSideTagMap[aVertexTag];\r\n                }\r\n                break;\r\n            }\r\n            if (startsidetag == null) {\r\n                break;\r\n            } // we've had all sides\r\n            let connectedVertexPoints = [];\r\n            let sidetag = startsidetag;\r\n            let thisside = sideTagToSideMap[sidetag];\r\n            let startvertextag = thisside.vertex0.getTag();\r\n            while (true) {\r\n                connectedVertexPoints.push(thisside.vertex0.pos);\r\n                let nextvertextag = thisside.vertex1.getTag();\r\n                if (nextvertextag == startvertextag) {\r\n                    break;\r\n                } // we've closed the polygon\r\n                if (!(nextvertextag in startVertexTagToSideTagMap)) {\r\n                    throw new Error('Area is not closed!');\r\n                }\r\n                let nextpossiblesidetags = startVertexTagToSideTagMap[nextvertextag];\r\n                let nextsideindex = -1;\r\n                if (nextpossiblesidetags.length == 1) {\r\n                    nextsideindex = 0;\r\n                } else {\r\n                    // more than one side starting at the same vertex. This means we have\r\n                    // two shapes touching at the same corner\r\n                    let bestangle: any = null;\r\n                    let thisangle = thisside.direction().angleDegrees();\r\n                    for (let sideindex = 0; sideindex < nextpossiblesidetags.length; sideindex++) {\r\n                        let nextpossiblesidetag = nextpossiblesidetags[sideindex];\r\n                        let possibleside = sideTagToSideMap[nextpossiblesidetag];\r\n                        let angle = possibleside.direction().angleDegrees();\r\n                        let angledif = angle - thisangle;\r\n                        if (angledif < -180) {\r\n                            angledif += 360;\r\n                        }\r\n                        if (angledif >= 180) {\r\n                            angledif -= 360;\r\n                        }\r\n                        if ((nextsideindex < 0) || (angledif > bestangle)) {\r\n                            nextsideindex = sideindex;\r\n                            bestangle = angledif;\r\n                        }\r\n                    }\r\n                }\r\n                let nextsidetag = nextpossiblesidetags[nextsideindex];\r\n                nextpossiblesidetags.splice(nextsideindex, 1);\r\n                if (nextpossiblesidetags.length == 0) {\r\n                    delete startVertexTagToSideTagMap[nextvertextag];\r\n                }\r\n                thisside = sideTagToSideMap[nextsidetag];\r\n            } // inner loop\r\n            let path = new CSGPath2D(connectedVertexPoints, true);\r\n            paths.push(path);\r\n        } // outer loop\r\n        return paths;\r\n    }\r\n\r\n    /*\r\n        cag = cag.overCutInsideCorners(cutterradius);\r\n\r\n        Using a CNC router it's impossible to cut out a true sharp inside corner. The inside corner\r\n        will be rounded due to the radius of the cutter. This function compensates for this by creating\r\n        an extra cutout at each inner corner so that the actual cut out shape will be at least as large\r\n        as needed.\r\n        使用CNC铣刨机不可能切出真正的尖锐内角。\r\n        由于刀的半径，内角将被倒圆。\r\n        此功能通过在每个内角处创建一个额外的切口来弥补这一点，从而使实际的切口形状至少与所需的形状一样大。\r\n        */\r\n    public overCutInsideCorners(cutterradius: any) {\r\n        let cag = this.canonicalized();\r\n        // for each vertex determine the 'incoming' side and 'outgoing' side:\r\n        let pointmap: any = {}; // tag => {pos: coord, from: [], to: []}\r\n        cag.sides.map((side) => {\r\n            if (!(side.vertex0.getTag() in pointmap)) {\r\n                pointmap[side.vertex0.getTag()] = {\r\n                    pos: side.vertex0.pos,\r\n                    from: [],\r\n                    to: [],\r\n                };\r\n            }\r\n            pointmap[side.vertex0.getTag()].to.push(side.vertex1.pos);\r\n            if (!(side.vertex1.getTag() in pointmap)) {\r\n                pointmap[side.vertex1.getTag()] = {\r\n                    pos: side.vertex1.pos,\r\n                    from: [],\r\n                    to: [],\r\n                };\r\n            }\r\n            pointmap[side.vertex1.getTag()].from.push(side.vertex0.pos);\r\n        });\r\n        // overcut all sharp corners:\r\n        let cutouts = [];\r\n        for (let pointtag in pointmap) {\r\n            let pointobj = pointmap[pointtag];\r\n            if ((pointobj.from.length == 1) && (pointobj.to.length == 1)) {\r\n                // ok, 1 incoming side and 1 outgoing side:\r\n                let fromcoord = pointobj.from[0];\r\n                let pointcoord = pointobj.pos;\r\n                let tocoord = pointobj.to[0];\r\n                let v1 = pointcoord.minus(fromcoord).unit();\r\n                let v2 = tocoord.minus(pointcoord).unit();\r\n                let crossproduct = v1.cross(v2);\r\n                let isInnerCorner = (crossproduct < 0.001);\r\n                if (isInnerCorner) {\r\n                    // yes it's a sharp corner:\r\n                    let alpha = v2.angleRadians() - v1.angleRadians() + Math.PI;\r\n                    if (alpha < 0) {\r\n                        alpha += 2 * Math.PI;\r\n                    } else if (alpha >= 2 * Math.PI) {\r\n                        alpha -= 2 * Math.PI;\r\n                    }\r\n                    let midvector = v2.minus(v1).unit();\r\n                    let circlesegmentangle = 30 / 180 * Math.PI; // resolution of the circle: segments of 30 degrees\r\n                    // we need to increase the radius slightly so that our imperfect circle will contain a perfect circle of cutterradius\r\n                    let radiuscorrected = cutterradius / Math.cos(circlesegmentangle / 2);\r\n                    let circlecenter = pointcoord.plus(midvector.times(radiuscorrected));\r\n                    // we don't need to create a full circle; a pie is enough. Find the angles for the pie:\r\n                    let startangle = alpha + midvector.angleRadians();\r\n                    let deltaangle = 2 * (Math.PI - alpha);\r\n                    let numsteps = 2 * Math.ceil(deltaangle / circlesegmentangle / 2); // should be even\r\n                    // build the pie:\r\n                    let points = [circlecenter];\r\n                    for (let i = 0; i <= numsteps; i++) {\r\n                        let angle = startangle + i / numsteps * deltaangle;\r\n                        let p = CSGVector2D.fromAngleRadians(angle).times(radiuscorrected).plus(circlecenter);\r\n                        points.push(p);\r\n                    }\r\n                    cutouts.push(CAG.fromPoints(points));\r\n                }\r\n            }\r\n        }\r\n        let result = cag.subtract(cutouts);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 镜像\r\n     * @param plane\r\n     */\r\n    public mirrored(plane: any) {\r\n        return this.transform(CSGMatrix4x4.mirroring(plane));\r\n    }\r\n\r\n    /**\r\n     * X轴镜像\r\n     */\r\n    public mirroredX() {\r\n        let plane = new CSGPlane(CSGVector3D.Create(1, 0, 0), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * Y轴镜像\r\n     */\r\n    public mirroredY() {\r\n        let plane = new CSGPlane(CSGVector3D.Create(0, 1, 0), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * Z轴镜像\r\n     */\r\n    public mirroredZ() {\r\n        let plane = new CSGPlane(CSGVector3D.Create(0, 0, 1), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * 转化\r\n     * @param v\r\n     */\r\n    public translate(v: any) {\r\n        return this.transform(CSGMatrix4x4.translation(v));\r\n    }\r\n\r\n    /**\r\n     * 缩放\r\n     * @param f\r\n     */\r\n    public scale(f: any) {\r\n        return this.transform(CSGMatrix4x4.scaling(f));\r\n    }\r\n\r\n    /**\r\n     * X轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateX(deg: any) {\r\n        return this.transform(CSGMatrix4x4.rotationX(deg));\r\n    }\r\n\r\n    /**\r\n     * Y轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateY(deg: any) {\r\n        return this.transform(CSGMatrix4x4.rotationY(deg));\r\n    }\r\n\r\n    /**\r\n     * Z轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateZ(deg: any) {\r\n        return this.transform(CSGMatrix4x4.rotationZ(deg));\r\n    }\r\n\r\n    /**\r\n     * 旋转\r\n     * @param rotationCenter\r\n     * @param rotationAxis\r\n     * @param degrees\r\n     */\r\n    public rotate(rotationCenter: any, rotationAxis: any, degrees: any) {\r\n        return this.transform(CSGMatrix4x4.rotation(rotationCenter, rotationAxis, degrees));\r\n    }\r\n\r\n    /**\r\n     * 旋转欧拉角\r\n     * @param alpha\r\n     * @param beta\r\n     * @param gamma\r\n     * @param position\r\n     */\r\n    public rotateEulerAngles(alpha: any, beta: any, gamma: any, position: any) {\r\n        position = position || [0, 0, 0];\r\n        let Rz1 = CSGMatrix4x4.rotationZ(alpha);\r\n        let Rx = CSGMatrix4x4.rotationX(beta);\r\n        let Rz2 = CSGMatrix4x4.rotationZ(gamma);\r\n        let T = CSGMatrix4x4.translation(new CSGVector3D(position));\r\n        return this.transform(Rz2.multiply(Rx).multiply(Rz1).multiply(T));\r\n    }\r\n\r\n    /**\r\n     * 中心\r\n     * @param cAxes\r\n     */\r\n    public center(cAxes: any) {\r\n        let axes = ['x', 'y'];\r\n\r\n        cAxes = Array.prototype.map.call(arguments, (a: any) => a.toLowerCase());\r\n        // no args: center on all axes\r\n        if (!cAxes.length) {\r\n            cAxes = axes.slice();\r\n        }\r\n        let b = this.getBounds();\r\n\r\n        return this.translate(axes.map((a) => (cAxes.indexOf(a) > -1 ?\r\n            -(b[0][a] + b[1][a]) / 2 : 0)));\r\n    }\r\n}\r\n\r\n",
        "import { Box3, MathUtils, Matrix4, Quaternion, Sphere, Vector2, Vector3 } from \"../../Math\";\r\nimport { BufferAttribute } from \"./BufferAttribute\";\r\nimport { BufferArray, FloatArray, int, Nullable } from \"../../types\";\r\nimport { GeometryGroup } from \"./GeometryGroup\";\r\nimport { GeometryDrawRange } from \"./GeometryDrawRange\";\r\nimport { InterleavedBufferAttribute } from \"./InterleavedBufferAttribute\";\r\nimport { Float32BufferAttribute, UInt16BufferAttribute, UInt32BufferAttribute } from \"./TypeBufferAttribute\";\r\nimport { BufferAttributeKind } from \"./BufferAttributeKind\";\r\nimport { DataTypeFormat } from \"../../Misc\";\r\nimport { InterleavedBufferClone } from \"./InterleavedBufferClone\";\r\nimport { EventDispatcher, Event } from \"../../Events\";\r\nimport { ArrayUtils } from \"../../Misc/ArrayUtils\";\r\nimport { Constants } from \"../../Engines\";\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst _tempMatrix = new Matrix4();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVector1 = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVector2 = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempBox1 = new Box3();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempBox2 = new Box3();\r\n/**\r\n * @ignore\r\n */\r\nlet geometryPoolId = 0;\r\n\r\n/**\r\n * 几何对象\r\n */\r\nexport class Geometry extends EventDispatcher {\r\n\r\n    public id: number;\r\n    public uuid: string;\r\n    public name: string;\r\n\r\n    public indexAttrbute: Nullable<BufferAttribute>;\r\n    public attributes: {[key: string]: BufferAttribute | InterleavedBufferAttribute};\r\n\r\n    public morphAttributes: {[key: string]: (BufferAttribute | InterleavedBufferAttribute)[] };\r\n    public morphTargetsRelative: boolean;\r\n\r\n    public boundingBox: Nullable<Box3>;\r\n    public boundingSphere: Nullable<Sphere>;\r\n\r\n    public groups: GeometryGroup[];\r\n    public drawRange: GeometryDrawRange;\r\n    public version: number;\r\n    public reference: number;\r\n\r\n    /**\r\n     * 构造函数\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        this.uuid = MathUtils.generateUUID();\r\n        this.id = geometryPoolId += 2;\r\n        this.name = '';\r\n\r\n        this.indexAttrbute = null;\r\n        this.attributes = {};\r\n\r\n        this.morphAttributes = {};\r\n        this.morphTargetsRelative = false;\r\n\r\n        this.boundingBox = null;\r\n        this.boundingSphere = null;\r\n\r\n        this.groups = [];\r\n        this.drawRange = {start: 0, count: Infinity};\r\n        this.version = 0;\r\n        this.reference = 0;\r\n    }\r\n\r\n    /**\r\n     * 释放\r\n     */\r\n    public dispose() {\r\n        this.reference--;\r\n        if (this.reference == 0) {\r\n            super.dispose();\r\n\r\n            if (this.indexAttrbute) {\r\n                this.indexAttrbute.dispose();\r\n                this.indexAttrbute = null;\r\n            }\r\n\r\n            let attributes = this.attributes;\r\n            for (let key in attributes) {\r\n                if (attributes[key]) {\r\n                    attributes[key].dispose();\r\n                    delete attributes[key];\r\n                }\r\n            }\r\n\r\n            const morphAttributes = this.morphAttributes;\r\n            for (let key in morphAttributes) {\r\n                if (morphAttributes[key]) {\r\n                    let attributes = morphAttributes[key];\r\n                    for (let index in attributes) {\r\n                        attributes[index].dispose();\r\n                        delete attributes[index];\r\n                    }\r\n                    delete morphAttributes[key];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 增加引用\r\n     */\r\n    public addReference() {\r\n        this.reference++;\r\n    }\r\n\r\n    /**\r\n     * 获取索引属性\r\n     */\r\n    public getIndexAttrbute(): Nullable<BufferAttribute> {\r\n        return this.indexAttrbute;\r\n    }\r\n\r\n    /**\r\n     * 设置索引属性\r\n     * @param index\r\n     */\r\n    public setIndexAttrbute(index: BufferAttribute | number[]): Geometry {\r\n\r\n        if (this.indexAttrbute != index) {\r\n            if (this.indexAttrbute) {\r\n                this.indexAttrbute.dispose();\r\n                this.indexAttrbute = null;\r\n            }\r\n\r\n            if (Array.isArray(index)) {\r\n                this.indexAttrbute = new (ArrayUtils.arrayMax(index) > 65535 ? UInt32BufferAttribute : UInt16BufferAttribute)(index, 1);\r\n            } else {\r\n                this.indexAttrbute = index;\r\n            }\r\n\r\n            this.indexAttrbute.target = Constants.ElementBufferTarget;\r\n            this.indexAttrbute.addReference();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 是否空属性\r\n     */\r\n    public isEmptyAttribute(): boolean {\r\n        return Object.keys(this.attributes).length <= 0;\r\n    }\r\n\r\n    /**\r\n     * 是否存在属性\r\n     * @param name\r\n     */\r\n    public haveAttribute(name: string): boolean {\r\n        let attribute;\r\n        if (name == BufferAttributeKind.IndicesKind) {\r\n            attribute = this.indexAttrbute;\r\n        }\r\n        else {\r\n            attribute = this.attributes[name];\r\n        }\r\n        return attribute != null;\r\n    }\r\n\r\n    /**\r\n     * 获取属性\r\n     * @param name\r\n     */\r\n    public getAttribute(name: string): Nullable<BufferAttribute | InterleavedBufferAttribute> {\r\n\r\n        if (name == BufferAttributeKind.IndicesKind) {\r\n            return this.indexAttrbute;\r\n        }\r\n        return this.attributes[name];\r\n    }\r\n\r\n    /**\r\n     * 设置属性\r\n     * @param name\r\n     * @param attribute\r\n     */\r\n    public setAttribute(name: string, attribute: BufferAttribute | InterleavedBufferAttribute): Geometry {\r\n\r\n        if (attribute instanceof BufferAttribute) {\r\n            if (name == BufferAttributeKind.IndicesKind) {\r\n                return this.setIndexAttrbute(attribute);\r\n            }\r\n        }\r\n\r\n        if (this.attributes[name] != attribute) {\r\n\r\n            if (this.attributes[name]) {\r\n                this.attributes[name].dispose();\r\n            }\r\n\r\n            this.attributes[name] = attribute;\r\n\r\n            if (this.attributes[name]) {\r\n                this.attributes[name].addReference();\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 删除属性\r\n     * @param name\r\n     */\r\n    public removeAttribute(name: string): Geometry {\r\n        if (this.attributes[name]) {\r\n            this.attributes[name].dispose();\r\n            delete this.attributes[name];\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 强制刷新属性\r\n     */\r\n    public forceUpdateAttributes(): Geometry {\r\n        if (this.indexAttrbute) {\r\n            this.indexAttrbute.needsUpdate = true;\r\n        }\r\n\r\n        const attributes = this.attributes;\r\n        for (let key in attributes) {\r\n            if (this.attributes[key]) {\r\n                this.attributes[key].needsUpdate = true;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 添加分组\r\n     * @param start\r\n     * @param count\r\n     * @param materialIndex\r\n     */\r\n    public addGroup(start: number, count: number, materialIndex: number = 0): Geometry {\r\n        this.groups.push({\r\n            start,\r\n            count,\r\n            materialIndex\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 清空分组\r\n     */\r\n    public clearGroups(): Geometry {\r\n        this.groups.length = 0;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 根据材质索引排序分组\r\n     */\r\n    public sortGroupByMaterial(): Geometry {\r\n        this.groups.sort((a, b) => a.materialIndex - b.materialIndex);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 根据开始位置排序分组\r\n     */\r\n    public sortGroupByStart(): Geometry {\r\n        this.groups.sort((a, b) => a.start - b.start);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置渲染范围\r\n     * @param start\r\n     * @param count\r\n     */\r\n    public setDrawRange(start: number, count: number): Geometry {\r\n        this.drawRange.start = start;\r\n        this.drawRange.count = count;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 矩阵变换\r\n     * @param matrix4\r\n     */\r\n    public applyMatrix(matrix4: Matrix4): Geometry {\r\n\r\n        const position = this.attributes.position;\r\n        if (position) {\r\n            position.applyMatrix4(matrix4);\r\n            position.needsUpdate = true;\r\n        }\r\n\r\n        const normal = this.attributes.normal;\r\n        if (normal) {\r\n            normal.transformDirection(matrix4);\r\n            normal.needsUpdate = true;\r\n        }\r\n\r\n        const tangent = this.attributes.tangent;\r\n        if (tangent) {\r\n            tangent.transformDirection(matrix4);\r\n            tangent.needsUpdate = true;\r\n        }\r\n\r\n        if (this.boundingBox) {\r\n            this.computeBoundingBox();\r\n        }\r\n\r\n        if (this.boundingSphere) {\r\n            this.computeBoundingSphere();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 旋转四元数\r\n     * @param quaternion\r\n     */\r\n    public applyQuaternion(quaternion: Quaternion): Geometry {\r\n\r\n        const position = this.attributes.position;\r\n\r\n        if (position) {\r\n            quaternion.applyToBufferAttribute(position);\r\n            position.needsUpdate = true;\r\n        }\r\n\r\n        const normal = this.attributes.normal;\r\n        if (normal) {\r\n            quaternion.applyToBufferAttribute(normal);\r\n            normal.needsUpdate = true;\r\n        }\r\n\r\n        const tangent = this.attributes.tangent;\r\n        if (tangent) {\r\n            quaternion.applyToBufferAttribute(tangent);\r\n            normal.needsUpdate = true;\r\n        }\r\n\r\n        if (this.boundingBox) {\r\n            this.computeBoundingBox();\r\n        }\r\n\r\n        if (this.boundingSphere) {\r\n            this.computeBoundingSphere();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 绕X轴旋转\r\n     * @param angle\r\n     */\r\n    public rotateX(angle: number): Geometry {\r\n        _tempMatrix.makeRotationX(angle);\r\n        this.applyMatrix(_tempMatrix);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 绕Y轴旋转\r\n     * @param angle\r\n     */\r\n    public rotateY(angle: number): Geometry {\r\n        _tempMatrix.makeRotationY(angle);\r\n        this.applyMatrix(_tempMatrix);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 绕Z轴旋转\r\n     * @param angle\r\n     */\r\n    public rotateZ(angle: number): Geometry {\r\n        _tempMatrix.makeRotationZ(angle);\r\n        this.applyMatrix(_tempMatrix);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 平移\r\n     * @param offset\r\n     */\r\n    public translate(offset: Vector3): Geometry {\r\n        _tempMatrix.makeTranslationVector(offset);\r\n        this.applyMatrix(_tempMatrix);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 缩放\r\n     * @param scale\r\n     */\r\n    public scale(scale: Vector3): Geometry {\r\n        _tempMatrix.makeScaleVector(scale);\r\n        this.applyMatrix(_tempMatrix);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 朝向\r\n     * @param target\r\n     */\r\n    public lookAt(target: Vector3): Geometry {\r\n        _tempMatrix.lookAt(Vector3.ZERO, target, Vector3.UNIT_Y);\r\n        this.applyMatrix(_tempMatrix);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 把中心移到原点\r\n     */\r\n    public moveToOrigin(): Geometry {\r\n        this.computeBoundingBox();\r\n        this.boundingBox?.getCenter(_tempVector1).negate();\r\n        this.translate(_tempVector1);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置坐标点数组\r\n     * @param points\r\n     */\r\n    public setFromPoints(points: Vector3[] | Vector2[]): Geometry {\r\n        const position = [];\r\n\r\n        for (let i = 0, l = points.length; i < l; i++) {\r\n            let point = points[i];\r\n            position.push(point.x, point.y, point instanceof Vector2 ? 0 : point.z);\r\n        }\r\n\r\n        this.setAttribute(BufferAttributeKind.PositionKind, new Float32BufferAttribute(position, 3));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 计算包围盒\r\n     */\r\n    public computeBoundingBox(): Geometry {\r\n\r\n        if (this.boundingBox == null) {\r\n            this.boundingBox = new Box3();\r\n        }\r\n\r\n        const position = this.attributes[BufferAttributeKind.PositionKind];\r\n        const morphAttributesPosition = this.morphAttributes[BufferAttributeKind.PositionKind];\r\n\r\n        if (position) {\r\n\r\n            this.boundingBox.setFromBufferAttribute(position);\r\n\r\n            if (morphAttributesPosition) {\r\n\r\n                for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\r\n\r\n                    const morphAttribute = morphAttributesPosition[ i ];\r\n                    _tempBox1.setFromBufferAttribute(morphAttribute);\r\n\r\n                    if (this.morphTargetsRelative) {\r\n\r\n                        _tempVector1.addVectors(this.boundingBox.min, _tempBox1.min);\r\n                        this.boundingBox.expandByPoint(_tempVector1);\r\n\r\n                        _tempVector1.addVectors(this.boundingBox.max, _tempBox1.max);\r\n                        this.boundingBox.expandByPoint(_tempVector1);\r\n\r\n                    } else {\r\n\r\n                        this.boundingBox.expandByPoint(_tempBox1.min);\r\n                        this.boundingBox.expandByPoint(_tempBox1.max);\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n        } else {\r\n\r\n            this.boundingBox.makeEmpty();\r\n\r\n        }\r\n\r\n        if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {\r\n            console.warn('computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.');\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 计算包围球\r\n     */\r\n    public computeBoundingSphere(): Geometry {\r\n\r\n        if (this.boundingSphere == null) {\r\n            this.boundingSphere = new Sphere();\r\n        }\r\n\r\n        const position = this.attributes[BufferAttributeKind.PositionKind];\r\n        const morphAttributesPosition = this.morphAttributes[BufferAttributeKind.PositionKind];\r\n\r\n        if (position) {\r\n\r\n            const center = this.boundingSphere.center;\r\n\r\n            _tempBox1.setFromBufferAttribute(position);\r\n\r\n            if (morphAttributesPosition) {\r\n\r\n                for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\r\n\r\n                    const morphAttribute = morphAttributesPosition[i];\r\n                    _tempBox2.setFromBufferAttribute(morphAttribute);\r\n\r\n                    if (this.morphTargetsRelative) {\r\n\r\n                        _tempVector1.addVectors(_tempBox1.min, _tempBox2.min);\r\n                        _tempBox1.expandByPoint(_tempVector1);\r\n\r\n                        _tempVector1.addVectors(_tempBox1.max, _tempBox2.max);\r\n                        _tempBox1.expandByPoint(_tempVector1);\r\n\r\n                    } else {\r\n\r\n                        _tempBox1.expandByPoint(_tempBox2.min);\r\n                        _tempBox1.expandByPoint(_tempBox2.max);\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n            _tempBox1.getCenter(center);\r\n\r\n            let maxRadiusSq = 0;\r\n\r\n            for (let i = 0, il = position.count; i < il; i++) {\r\n                _tempVector1.fromBufferAttribute(position, i);\r\n                maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_tempVector1));\r\n            }\r\n\r\n            if (morphAttributesPosition) {\r\n\r\n                for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\r\n\r\n                    const morphAttribute = morphAttributesPosition[i];\r\n                    const morphTargetsRelative = this.morphTargetsRelative;\r\n\r\n                    for (let j = 0, jl = morphAttribute.count; j < jl; j++) {\r\n\r\n                        _tempVector1.fromBufferAttribute(morphAttribute, j);\r\n\r\n                        if (morphTargetsRelative) {\r\n                            _tempVector2.fromBufferAttribute(position, j);\r\n                            _tempVector1.add(_tempVector2);\r\n                        }\r\n\r\n                        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_tempVector1));\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n            this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\r\n\r\n            if (isNaN(this.boundingSphere.radius)) {\r\n\r\n                console.error('VISION.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this);\r\n\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 计算顶点法线\r\n     */\r\n    public computeVertexNormals(): Geometry {\r\n\r\n        const indexAttribute = this.getAttribute(BufferAttributeKind.IndicesKind);\r\n        const positionAttribute = this.getAttribute(BufferAttributeKind.PositionKind);\r\n        if (positionAttribute) {\r\n\r\n            let normalAttribute = this.getAttribute(BufferAttributeKind.NormalKind);\r\n            if (!normalAttribute) {\r\n\r\n                normalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);\r\n                this.setAttribute(BufferAttributeKind.NormalKind, normalAttribute);\r\n            }\r\n            else {\r\n                for (let i = 0, il = normalAttribute.count; i < il; i++) {\r\n                    normalAttribute.setXYZ(i, 0, 0, 0);\r\n                }\r\n            }\r\n\r\n            const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\r\n            const nA = new Vector3(), nB = new Vector3(), nC = new Vector3();\r\n            const cb = new Vector3(), ab = new Vector3();\r\n\r\n            if (indexAttribute) {\r\n\r\n                for (let i = 0, il = indexAttribute.count; i < il; i += 3) {\r\n\r\n                    const vA = indexAttribute.getX(i + 0);\r\n                    const vB = indexAttribute.getX(i + 1);\r\n                    const vC = indexAttribute.getX(i + 2);\r\n\r\n                    pA.fromBufferAttribute(positionAttribute, vA);\r\n                    pB.fromBufferAttribute(positionAttribute, vB);\r\n                    pC.fromBufferAttribute(positionAttribute, vC);\r\n\r\n                    cb.subVectors(pC, pB);\r\n                    ab.subVectors(pA, pB);\r\n                    cb.cross(ab);\r\n\r\n                    nA.fromBufferAttribute(normalAttribute, vA);\r\n                    nB.fromBufferAttribute(normalAttribute, vB);\r\n                    nC.fromBufferAttribute(normalAttribute, vC);\r\n\r\n                    nA.add(cb);\r\n                    nB.add(cb);\r\n                    nC.add(cb);\r\n\r\n                    normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);\r\n                    normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);\r\n                    normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);\r\n\r\n                }\r\n            }\r\n            else {\r\n\r\n                for (let i = 0, il = positionAttribute.count; i < il; i += 3) {\r\n\r\n                    pA.fromBufferAttribute(positionAttribute, i + 0);\r\n                    pB.fromBufferAttribute(positionAttribute, i + 1);\r\n                    pC.fromBufferAttribute(positionAttribute, i + 2);\r\n\r\n                    cb.subVectors(pC, pB);\r\n                    ab.subVectors(pA, pB);\r\n                    cb.cross(ab);\r\n\r\n                    normalAttribute.setXYZ(i + 0, cb.x, cb.y, cb.z);\r\n                    normalAttribute.setXYZ(i + 1, cb.x, cb.y, cb.z);\r\n                    normalAttribute.setXYZ(i + 2, cb.x, cb.y, cb.z);\r\n\r\n                }\r\n            }\r\n\r\n            this.normalizeNormals();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 归一化法线\r\n     */\r\n    public normalizeNormals(): Geometry {\r\n\r\n        const normals = this.attributes.normal;\r\n\r\n        for (let i = 0, il = normals.count; i < il; i++) {\r\n            _tempVector1.fromBufferAttribute(normals, i);\r\n            _tempVector1.normalize();\r\n            normals.setXYZ(i, _tempVector1.x, _tempVector1.y, _tempVector1.z);\r\n        }\r\n\r\n        normals.needsUpdate = true;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 合并相同属性\r\n     * @param geometry\r\n     * @param offset\r\n     */\r\n    public mergeAttributes(geometry: Geometry, offset: int = 0): Geometry {\r\n\r\n        const attributes = this.attributes;\r\n\r\n        for (let key in attributes) {\r\n\r\n            if (!geometry.attributes[key]) { continue; }\r\n\r\n            const attribute1 = attributes[key];\r\n            const attributeArray1 = attribute1.array;\r\n\r\n            const attribute2 = geometry.attributes[key];\r\n            const attributeArray2 = attribute2.array;\r\n\r\n            const attributeOffset = attribute2.itemSize * offset;\r\n            const length = Math.min(attributeArray2.length, attributeArray1.length - attributeOffset);\r\n\r\n            for (let i = 0, j = attributeOffset; i < length; i++, j++) {\r\n                attributeArray1[j] = attributeArray2[i];\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 转换无索引几何体\r\n     */\r\n    public toNonIndexed(): Geometry {\r\n\r\n        const convertBufferAttribute = (attribute: BufferAttribute, indices: FloatArray) => {\r\n            const array = attribute.array;\r\n            const itemSize = attribute.itemSize;\r\n            const normalized = attribute.normalized;\r\n            const array2: BufferArray = DataTypeFormat.createTypedArrayFromDataType(attribute.type, indices.length * itemSize)!;\r\n\r\n            let index = 0;\r\n            let index2 = 0;\r\n\r\n            for (let i = 0, l = indices.length; i < l; i++) {\r\n                index = indices[i] * itemSize;\r\n                for (let j = 0; j < itemSize; j++) {\r\n                    array2[index2++] = array[index++];\r\n                }\r\n            }\r\n\r\n            return new BufferAttribute(array2, itemSize, normalized);\r\n        };\r\n\r\n        if (!this.haveAttribute(BufferAttributeKind.IndicesKind)) {\r\n            return this;\r\n        }\r\n\r\n        const geometry2 = new Geometry();\r\n\r\n        const indicesAttribute = this.getAttribute(BufferAttributeKind.IndicesKind)!;\r\n\r\n        const attributes = this.attributes;\r\n        for (let name in attributes) {\r\n            const attribute = attributes[name];\r\n            if (attribute instanceof BufferAttribute) {\r\n                const newAttribute = convertBufferAttribute(attribute, indicesAttribute.array);\r\n                geometry2.setAttribute(name, newAttribute);\r\n            }\r\n        }\r\n\r\n        const morphAttributes = this.morphAttributes;\r\n        for (let name in morphAttributes) {\r\n            const morphArray = [];\r\n            const morphAttribute = morphAttributes[name];\r\n\r\n            for (let i = 0, il = morphAttribute.length; i < il; i++) {\r\n                const attribute = morphAttribute[i];\r\n                if (attribute instanceof BufferAttribute) {\r\n                    const newAttribute = convertBufferAttribute(attribute, indicesAttribute.array);\r\n                    morphArray.push(newAttribute);\r\n                }\r\n            }\r\n\r\n            geometry2.morphAttributes[name] = morphArray;\r\n        }\r\n\r\n        geometry2.morphTargetsRelative = this.morphTargetsRelative;\r\n\r\n        const groups = this.groups;\r\n        for (let i = 0, l = groups.length; i < l; i++) {\r\n            const group = groups[i];\r\n            geometry2.addGroup(group.start, group.count, group.materialIndex);\r\n        }\r\n\r\n        return geometry2;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): Geometry {\r\n        return new Geometry().copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: Geometry): Geometry {\r\n\r\n        this.name = source.name;\r\n\r\n        const index = source.getIndexAttrbute();\r\n        if (index) {\r\n            this.setIndexAttrbute(index.clone());\r\n        }\r\n\r\n        const interleavedBufferClone: InterleavedBufferClone = {\r\n            cacheKey: new Map<BufferArray, string>(),\r\n            arrayBuffers: {},\r\n            interleavedBuffers: {}\r\n        };\r\n\r\n        const attributes = source.attributes;\r\n        for (let name in attributes) {\r\n            const attribute = attributes[name];\r\n            this.setAttribute(name, attribute.clone(interleavedBufferClone));\r\n        }\r\n\r\n        const morphAttributes = source.morphAttributes;\r\n        for (let name in morphAttributes) {\r\n            const array = [];\r\n            const morphAttribute = morphAttributes[name];\r\n\r\n            for (let i = 0, l = morphAttribute.length; i < l; i++) {\r\n                array.push(morphAttribute[ i ].clone(interleavedBufferClone));\r\n            }\r\n\r\n            this.morphAttributes[name] = array;\r\n        }\r\n\r\n        this.morphTargetsRelative = source.morphTargetsRelative;\r\n\r\n        const groups = source.groups;\r\n        for (let i = 0, l = groups.length; i < l; i++) {\r\n            const group = groups[i];\r\n            this.addGroup(group.start, group.count, group.materialIndex);\r\n        }\r\n\r\n        const boundingBox = source.boundingBox;\r\n        if (boundingBox) {\r\n            this.boundingBox = boundingBox.clone();\r\n        }\r\n\r\n        const boundingSphere = source.boundingSphere;\r\n        if (boundingSphere) {\r\n            this.boundingSphere = boundingSphere.clone();\r\n        }\r\n\r\n        this.drawRange.start = source.drawRange.start;\r\n        this.drawRange.count = source.drawRange.count;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n}\r\n",
        "import { EulerOrder } from \"../Enums/EulerOrder\";\r\nimport { BinaryBuffer } from \"../Misc/BinaryBuffer\";\r\nimport { FloatArray, int, Nullable } from \"../types\";\r\nimport { Matrix3 } from \"./Matrix3\";\r\nimport { Matrix4 } from \"./Matrix4\";\r\nimport { MathUtils } from \"./MathUtils\";\r\nimport { Quaternion } from \"./Quaternion\";\r\nimport { Vector3 } from \"./Vector3\";\r\nimport { MathTmp } from \"./MathTmp\";\r\n\r\n/**\r\n * 欧拉角\r\n * @category Math\r\n */\r\nexport class Euler {\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _x: number;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _y: number;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _z: number;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _order: EulerOrder;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _notify: boolean;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _onNotify: any;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param x\r\n     * @param y\r\n     * @param z\r\n     * @param order\r\n     */\r\n    constructor(x: number = 0, y: number = 0, z: number = 0, order: EulerOrder = EulerOrder.YXZ) {\r\n        this._x = x;\r\n        this._y = y;\r\n        this._z = z;\r\n        this._order = order;\r\n        this._notify = true;\r\n        this._onNotify = null;\r\n    }\r\n\r\n    /**\r\n     * 创建对象\r\n     */\r\n    public static Build() {\r\n        return new Euler();\r\n    }\r\n\r\n    /**\r\n     * X轴弧度\r\n     */\r\n    public get x() {\r\n        return this._x;\r\n    }\r\n    public set x(value: number) {\r\n        if (this._x != value) {\r\n            this._x = value;\r\n            this.triggerNotify();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Y轴弧度\r\n     */\r\n    public get y() {\r\n        return this._y;\r\n    }\r\n    public set y(value: number) {\r\n        if (this._y != value) {\r\n            this._y = value;\r\n            this.triggerNotify();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Z轴弧度\r\n     */\r\n    public get z() {\r\n        return this._z;\r\n    }\r\n    public set z(value: number) {\r\n        if (this._z != value) {\r\n            this._z = value;\r\n            this.triggerNotify();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 分量顺序\r\n     */\r\n    public get order() {\r\n        return this._order;\r\n    }\r\n    public set order(value: number) {\r\n        if (this._order != value) {\r\n            this._order = value;\r\n            this.triggerNotify();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 通知回调\r\n     */\r\n    public get notify() {\r\n        return this._notify;\r\n    }\r\n    public set notify(value: boolean) {\r\n        this._notify = value;\r\n    }\r\n\r\n    /**\r\n     * 设置通知回调\r\n     */\r\n    public setNotifyFunc(value: any): Euler {\r\n        this._onNotify = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 触发通知\r\n     */\r\n    private triggerNotify(): void {\r\n        if (this._notify) {\r\n            if (this._onNotify) {\r\n                this._onNotify();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置XYZ分量\r\n     * @param x\r\n     * @param y\r\n     * @param z\r\n     * @param order\r\n     */\r\n    public set(x: number, y: number, z: number, order: Nullable<EulerOrder> = null): Euler {\r\n        this._x = x;\r\n        this._y = y;\r\n        this._z = z;\r\n        this._order = order || this._order;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置组件\r\n     * @param index\r\n     * @param value\r\n     */\r\n    public setComponent(index: int, value: number): Euler {\r\n        switch (index) {\r\n            case 0: this.x = value; break;\r\n            case 1: this.y = value; break;\r\n            case 2: this.z = value; break;\r\n            default: throw new Error(`index is out of range: ${index}`);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取组件\r\n     * @param index\r\n     */\r\n    public getComponent(index: int): number {\r\n        switch (index) {\r\n            case 0: return this.x;\r\n            case 1: return this.y;\r\n            case 2: return this.z;\r\n            default: throw new Error(`index is out of range: ${index}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): Euler {\r\n        return new Euler(this._x, this._y, this._z, this._order);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param euler\r\n     */\r\n    public copy(euler: Euler): Euler {\r\n        this._x = euler._x;\r\n        this._y = euler._y;\r\n        this._z = euler._z;\r\n        this._order = euler._order;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置旋转矩阵\r\n     * @param matrix\r\n     * @param order\r\n     */\r\n    public setFromRotationMatrix(matrix: Matrix3 | Matrix4, order: Nullable<EulerOrder>): Euler {\r\n\r\n        const clamp = MathUtils.clamp;\r\n\r\n        const te = matrix.elements;\r\n        const m11 = te[0];\r\n        const m12 = te[4];\r\n        const m13 = te[8];\r\n        const m21 = te[1];\r\n        const m22 = te[5];\r\n        const m23 = te[9];\r\n        const m31 = te[2];\r\n        const m32 = te[6];\r\n        const m33 = te[10];\r\n\r\n        order = order || this._order;\r\n\r\n        switch (order) {\r\n\r\n            case EulerOrder.XYZ:\r\n\r\n                this._y = Math.asin(clamp(m13, -1, 1));\r\n\r\n                if (Math.abs(m13) < 0.9999999) {\r\n\r\n                    this._x = Math.atan2(-m23, m33);\r\n                    this._z = Math.atan2(-m12, m11);\r\n\r\n                } else {\r\n\r\n                    this._x = Math.atan2(m32, m22);\r\n                    this._z = 0;\r\n\r\n                }\r\n\r\n                break;\r\n\r\n            case EulerOrder.YXZ:\r\n\r\n                this._x = Math.asin(-clamp(m23, -1, 1));\r\n\r\n                if (Math.abs(m23) < 0.9999999) {\r\n\r\n                    this._y = Math.atan2(m13, m33);\r\n                    this._z = Math.atan2(m21, m22);\r\n\r\n                } else {\r\n\r\n                    this._y = Math.atan2(-m31, m11);\r\n                    this._z = 0;\r\n\r\n                }\r\n\r\n                break;\r\n\r\n            case EulerOrder.ZXY:\r\n\r\n                this._x = Math.asin(clamp(m32, -1, 1));\r\n\r\n                if (Math.abs(m32) < 0.9999999) {\r\n\r\n                    this._y = Math.atan2(-m31, m33);\r\n                    this._z = Math.atan2(-m12, m22);\r\n\r\n                } else {\r\n\r\n                    this._y = 0;\r\n                    this._z = Math.atan2(m21, m11);\r\n\r\n                }\r\n\r\n                break;\r\n\r\n            case EulerOrder.ZYX:\r\n\r\n                this._y = Math.asin(-clamp(m31, -1, 1));\r\n\r\n                if (Math.abs(m31) < 0.9999999) {\r\n\r\n                    this._x = Math.atan2(m32, m33);\r\n                    this._z = Math.atan2(m21, m11);\r\n\r\n                } else {\r\n\r\n                    this._x = 0;\r\n                    this._z = Math.atan2(-m12, m22);\r\n\r\n                }\r\n\r\n                break;\r\n\r\n            case EulerOrder.YZX:\r\n\r\n                this._z = Math.asin(clamp(m21, -1, 1));\r\n\r\n                if (Math.abs(m21) < 0.9999999) {\r\n\r\n                    this._x = Math.atan2(-m23, m22);\r\n                    this._y = Math.atan2(-m31, m11);\r\n\r\n                } else {\r\n\r\n                    this._x = 0;\r\n                    this._y = Math.atan2(m13, m33);\r\n\r\n                }\r\n\r\n                break;\r\n\r\n            case EulerOrder.XZY:\r\n\r\n                this._z = Math.asin(-clamp(m12, -1, 1));\r\n\r\n                if (Math.abs(m12) < 0.9999999) {\r\n\r\n                    this._x = Math.atan2(m32, m22);\r\n                    this._y = Math.atan2(m13, m11);\r\n\r\n                } else {\r\n\r\n                    this._x = Math.atan2(-m23, m33);\r\n                    this._y = 0;\r\n\r\n                }\r\n\r\n                break;\r\n\r\n        }\r\n\r\n        this._order = order;\r\n\r\n        this.triggerNotify();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置四元数\r\n     * @param quaternion\r\n     * @param order\r\n     */\r\n    public setFromQuaternion(quaternion: Quaternion, order: Nullable<EulerOrder>): Euler {\r\n        MathTmp.Matrix4[0].makeRotationFromQuaternion(quaternion);\r\n        return this.setFromRotationMatrix(MathTmp.Matrix4[0], order);\r\n    }\r\n\r\n    /**\r\n     * 设置分量从Vector3\r\n     * @param vec\r\n     * @param order\r\n     */\r\n    public setFromVector3(vec: Vector3, order: Nullable<EulerOrder>): Euler {\r\n        return this.set(vec.x, vec.y, vec.z, order || this._order);\r\n    }\r\n\r\n    /**\r\n     * 转换旋转顺序\r\n     * @param newOrder\r\n     */\r\n    public reorder(newOrder: EulerOrder): Euler {\r\n        MathTmp.Quaternion[0].setFromEuler(this);\r\n        return this.setFromQuaternion(MathTmp.Quaternion[0], newOrder);\r\n    }\r\n\r\n    /**\r\n     * 是否相等\r\n     * @param euler\r\n     */\r\n    public equals(euler: Euler): boolean {\r\n        return (euler._x == this._x) && (euler._y == this._y) && (euler._z == this._z) && (euler._order == this._order);\r\n    }\r\n\r\n    /**\r\n     * 是否近似相等\r\n     * @param right\r\n     * @param relativeEpsilon\r\n     * @param absoluteEpsilon\r\n     */\r\n    public equalsEpsilon(right: Euler, relativeEpsilon: number, absoluteEpsilon: Nullable<number> = null): boolean {\r\n        return MathUtils.equalsEpsilon(this._x, right.x, relativeEpsilon, absoluteEpsilon) &&\r\n            MathUtils.equalsEpsilon(this._y, right.y, relativeEpsilon, absoluteEpsilon) &&\r\n            MathUtils.equalsEpsilon(this._z, right.z, relativeEpsilon, absoluteEpsilon) &&\r\n            this._order == right._order;\r\n    }\r\n\r\n    /**\r\n     * 从数组复制\r\n     * @param array\r\n     * @param offset\r\n     */\r\n    public fromArray(array: FloatArray, offset: number = 0): Euler {\r\n        this._x = array[offset];\r\n        this._y = array[offset + 1];\r\n        this._z = array[offset + 2];\r\n        this._order = array[offset + 3];\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 复制到数组\r\n     * @param array\r\n     * @param offset\r\n     */\r\n    public toArray(array: FloatArray = [], offset: number = 0): FloatArray {\r\n        array[offset] = this._x;\r\n        array[offset + 1] = this._y;\r\n        array[offset + 2] = this._z;\r\n        array[offset + 3] = this._order;\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * 从二进制复制\r\n     * @param dataBuffer\r\n     */\r\n    public fromDataBuffer(dataBuffer: BinaryBuffer): Euler {\r\n        this._x = dataBuffer.readFloat32();\r\n        this._y = dataBuffer.readFloat32();\r\n        this._z = dataBuffer.readFloat32();\r\n        this._order = dataBuffer.readInt8();\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 复制到二进制\r\n     * @param dataBuffer\r\n     */\r\n    public toDataBuffer(dataBuffer: BinaryBuffer): Euler {\r\n        dataBuffer.writeFloat32(this._x);\r\n        dataBuffer.writeFloat32(this._y);\r\n        dataBuffer.writeFloat32(this._z);\r\n        dataBuffer.writeInt8(this._order);\r\n        return this;\r\n    }\r\n}\r\n",
        "export * from \"./EulerOrder\";\r\nexport * from \"./CatmullRomType\";\r\nexport * from \"./SphereSphereIntersectType\";\r\nexport * from \"./PlanePolygonIntersectType\";\r\n",
        "import { DeepImmutable, float, FloatArray, int, Nullable } from \"../types\";\r\nimport { MathUtils } from \"./MathUtils\";\r\nimport { Euler } from \"./Euler\";\r\nimport { EulerOrder } from \"../Enums\";\r\nimport { Vector3 } from \"./Vector3\";\r\nimport { Matrix3 } from \"./Matrix3\";\r\nimport { Matrix4 } from \"./Matrix4\";\r\nimport { BinaryBuffer, BufferAttribute } from \"../Misc\";\r\nimport { MathTmp } from \"./MathTmp\";\r\nimport { InterleavedBufferAttribute } from \"../Scene/Geometries/InterleavedBufferAttribute\";\r\n\r\ntype InVector3 = Vector3 | DeepImmutable<Vector3>;\r\n\r\n/**\r\n * 四元数\r\n * @category Math\r\n */\r\nexport class Quaternion {\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _x: number;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _y: number;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _z: number;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _w: number;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _notify: boolean;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _onNotify: any;\r\n\r\n    /**\r\n     * 四元数插值\r\n     * @param qa\r\n     * @param qb\r\n     * @param qm\r\n     * @param t\r\n     */\r\n    public static slerp(qa: Quaternion, qb: Quaternion, qm: Quaternion, t: number): Quaternion {\r\n        return qm.copy(qa).slerp(qb, t);\r\n    }\r\n\r\n    /**\r\n     * 数组化的四元数插值\r\n     * @param dst\r\n     * @param dstOffset\r\n     * @param src0\r\n     * @param srcOffset0\r\n     * @param src1\r\n     * @param srcOffset1\r\n     * @param t\r\n     */\r\n    public static slerpFlat(dst: FloatArray, dstOffset: int, src0: FloatArray, srcOffset0: int, src1: FloatArray, srcOffset1: int, t: number): void {\r\n        let x0 = src0[srcOffset0 + 0];\r\n        let y0 = src0[srcOffset0 + 1];\r\n        let z0 = src0[srcOffset0 + 2];\r\n        let w0 = src0[srcOffset0 + 3];\r\n\r\n        let x1 = src1[srcOffset1 + 0];\r\n        let y1 = src1[srcOffset1 + 1];\r\n        let z1 = src1[srcOffset1 + 2];\r\n        let w1 = src1[srcOffset1 + 3];\r\n\r\n        if (w0 != w1 || x0 != x1 || y0 != y1 || z0 != z1) {\r\n\r\n            let s = 1 - t;\r\n            let cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1;\r\n            let dir = (cos >= 0 ? 1 : -1);\r\n            let sqrSin = 1 - cos * cos;\r\n\r\n            // Skip the Slerp for tiny steps to avoid numeric problems:\r\n            if (sqrSin > MathUtils.EPSILON14) {\r\n                let sin = Math.sqrt(sqrSin);\r\n                let len = Math.atan2(sin, cos * dir);\r\n\r\n                s = Math.sin(s * len) / sin;\r\n                t = Math.sin(t * len) / sin;\r\n            }\r\n\r\n            let tDir = t * dir;\r\n\r\n            x0 = x0 * s + x1 * tDir;\r\n            y0 = y0 * s + y1 * tDir;\r\n            z0 = z0 * s + z1 * tDir;\r\n            w0 = w0 * s + w1 * tDir;\r\n\r\n            // Normalize in case we just did a lerp:\r\n            if (s == 1 - t) {\r\n                let f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);\r\n\r\n                x0 *= f;\r\n                y0 *= f;\r\n                z0 *= f;\r\n                w0 *= f;\r\n            }\r\n        }\r\n\r\n        dst[dstOffset] = x0;\r\n        dst[dstOffset + 1] = y0;\r\n        dst[dstOffset + 2] = z0;\r\n        dst[dstOffset + 3] = w0;\r\n    }\r\n\r\n    /**\r\n     * 数组化的四元数相乘\r\n     * @param dst\r\n     * @param dstOffset\r\n     * @param src0\r\n     * @param srcOffset0\r\n     * @param src1\r\n     * @param srcOffset1\r\n     * @param t\r\n     */\r\n    public static multiplyQuaternionsFlat(dst: FloatArray, dstOffset: int, src0: FloatArray, srcOffset0: int, src1: FloatArray, srcOffset1: int, t: float): void {\r\n\r\n        let x0 = src0[ srcOffset0 + 0 ],\r\n            y0 = src0[ srcOffset0 + 1 ],\r\n            z0 = src0[ srcOffset0 + 2 ],\r\n            w0 = src0[ srcOffset0 + 3 ],\r\n\r\n            x1 = src1[ srcOffset1 + 0 ],\r\n            y1 = src1[ srcOffset1 + 1 ],\r\n            z1 = src1[ srcOffset1 + 2 ],\r\n            w1 = src1[ srcOffset1 + 3 ];\r\n\r\n        if (w0 != w1 || x0 != x1 || y0 != y1 || z0 != z1) {\r\n\r\n            let s = 1 - t,\r\n\r\n                cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\r\n\r\n                dir = (cos >= 0 ? 1 : -1),\r\n                sqrSin = 1 - cos * cos;\r\n\r\n            // Skip the Slerp for tiny steps to avoid numeric problems:\r\n            if (sqrSin > MathUtils.EPSILON14) {\r\n\r\n                let sin = Math.sqrt(sqrSin), len = Math.atan2(sin, cos * dir);\r\n\r\n                s = Math.sin(s * len) / sin;\r\n                t = Math.sin(t * len) / sin;\r\n\r\n            }\r\n\r\n            let tDir = t * dir;\r\n\r\n            x0 = x0 * s + x1 * tDir;\r\n            y0 = y0 * s + y1 * tDir;\r\n            z0 = z0 * s + z1 * tDir;\r\n            w0 = w0 * s + w1 * tDir;\r\n\r\n            // Normalize in case we just did a lerp:\r\n            if (s == 1 - t) {\r\n\r\n                let f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);\r\n\r\n                x0 *= f;\r\n                y0 *= f;\r\n                z0 *= f;\r\n                w0 *= f;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        dst[ dstOffset ] = x0;\r\n        dst[ dstOffset + 1 ] = y0;\r\n        dst[ dstOffset + 2 ] = z0;\r\n        dst[ dstOffset + 3 ] = w0;\r\n    }\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param x\r\n     * @param y\r\n     * @param z\r\n     * @param w\r\n     */\r\n    constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 1) {\r\n        this._x = x;\r\n        this._y = y;\r\n        this._z = z;\r\n        this._w = w;\r\n        this._notify = true;\r\n        this._onNotify = null;\r\n    }\r\n\r\n    /**\r\n     * 创建对象\r\n     */\r\n    public static Build() {\r\n        return new Quaternion();\r\n    }\r\n\r\n    /**\r\n     * X坐标\r\n     */\r\n    public get x() {\r\n        return this._x;\r\n    }\r\n    public set x(value: number) {\r\n        if (this._x != value) {\r\n            this._x = value;\r\n            this.triggerNotify();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Y坐标\r\n     */\r\n    public get y() {\r\n        return this._y;\r\n    }\r\n    public set y(value: number) {\r\n        if (this._y != value) {\r\n            this._y = value;\r\n            this.triggerNotify();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Z坐标\r\n     */\r\n    public get z() {\r\n        return this._z;\r\n    }\r\n    public set z(value: number) {\r\n        if (this._z != value) {\r\n            this._z = value;\r\n            this.triggerNotify();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * W坐标\r\n     */\r\n    public get w() {\r\n        return this._w;\r\n    }\r\n    public set w(value: number) {\r\n        if (this._w != value) {\r\n            this._w = value;\r\n            this.triggerNotify();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 通知回调\r\n     */\r\n    public get notify() {\r\n        return this._notify;\r\n    }\r\n    public set notify(value: boolean) {\r\n        this._notify = value;\r\n    }\r\n\r\n    /**\r\n     * 设置通知回调\r\n     */\r\n    public setNotifyFunc(value: any): Quaternion {\r\n        this._onNotify = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 触发通知\r\n     */\r\n    private triggerNotify(): void {\r\n        if (this._notify) {\r\n            if (this._onNotify) {\r\n                this._onNotify();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置XYZW分量\r\n     * @param x\r\n     * @param y\r\n     * @param z\r\n     * @param w\r\n     */\r\n    public set(x: number, y: number, z: number, w: number): Quaternion {\r\n        this._x = x;\r\n        this._y = y;\r\n        this._z = z;\r\n        this._w = w;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置组件\r\n     * @param index\r\n     * @param value\r\n     */\r\n    public setComponent(index: int, value: number): Quaternion {\r\n        switch (index) {\r\n            case 0: this.x = value; break;\r\n            case 1: this.y = value; break;\r\n            case 2: this.z = value; break;\r\n            case 3: this.w = value; break;\r\n            default: throw new Error(`index is out of range: ${index}`);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取组件\r\n     * @param index\r\n     */\r\n    public getComponent(index: int): number {\r\n        switch (index) {\r\n            case 0: return this._x;\r\n            case 1: return this._y;\r\n            case 2: return this._z;\r\n            case 3: return this._w;\r\n            default: throw new Error(`index is out of range: ${index}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): Quaternion {\r\n        return new Quaternion(this._x, this._y, this._z, this._w);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     */\r\n    public copy(source: Quaternion): Quaternion {\r\n        this._x = source.x;\r\n        this._y = source.y;\r\n        this._z = source.z;\r\n        this._w = source.w;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 加上Quaternion\r\n     * @param quaternion\r\n     */\r\n    public add(quaternion: Quaternion): Quaternion {\r\n        this._x += quaternion.x;\r\n        this._y += quaternion.y;\r\n        this._z += quaternion.z;\r\n        this._w += quaternion.w;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 两个四元数相加\r\n     * @param aQuat\r\n     * @param bQuat\r\n     */\r\n    public addQuaternions(aQuat: Quaternion, bQuat: Quaternion): Quaternion {\r\n        this._x = aQuat.x + bQuat.x;\r\n        this._y = aQuat.y + bQuat.y;\r\n        this._z = aQuat.z + bQuat.z;\r\n        this._w = aQuat.w + bQuat.w;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置欧拉角\r\n     * @param euler\r\n     */\r\n    public setFromEuler(euler: Euler): Quaternion {\r\n\r\n        const x = euler.x;\r\n        const y = euler.y;\r\n        const z = euler.z;\r\n        const order = euler.order;\r\n\r\n        // http://www.mathworks.com/matlabcentral/fileexchange/\r\n        // \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\r\n        //\tcontent/SpinCalc.m\r\n\r\n        const cos = Math.cos;\r\n        const sin = Math.sin;\r\n\r\n        const c1 = cos(x / 2);\r\n        const c2 = cos(y / 2);\r\n        const c3 = cos(z / 2);\r\n\r\n        const s1 = sin(x / 2);\r\n        const s2 = sin(y / 2);\r\n        const s3 = sin(z / 2);\r\n\r\n        switch (order) {\r\n\r\n            case EulerOrder.XYZ:\r\n                this._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n                this._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n                this._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n                this._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n                break;\r\n\r\n            case EulerOrder.YXZ:\r\n                this._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n                this._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n                this._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n                this._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n                break;\r\n\r\n            case EulerOrder.ZXY:\r\n                this._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n                this._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n                this._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n                this._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n                break;\r\n\r\n            case EulerOrder.ZYX:\r\n                this._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n                this._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n                this._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n                this._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n                break;\r\n\r\n            case EulerOrder.YZX:\r\n                this._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n                this._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n                this._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n                this._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n                break;\r\n\r\n            case EulerOrder.XZY:\r\n                this._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n                this._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n                this._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n                this._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n                break;\r\n        }\r\n\r\n        this.triggerNotify();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置旋转轴和角度\r\n     * @param axis\r\n     * @param angle\r\n     */\r\n    public setFromAxisAngle(axis: InVector3, angle: number): Quaternion {\r\n\r\n        const halfAngle = angle / 2;\r\n        const s = Math.sin(halfAngle);\r\n\r\n        this._x = axis.x * s;\r\n        this._y = axis.y * s;\r\n        this._z = axis.z * s;\r\n        this._w = Math.cos(halfAngle);\r\n\r\n        this.triggerNotify();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置旋转矩阵\r\n     * @param matrix\r\n     */\r\n    public setFromRotationMatrix(matrix: Matrix3 | Matrix4): Quaternion {\r\n\r\n        const isMatrix4: boolean = matrix instanceof Matrix4;\r\n        const te = matrix.elements;\r\n\r\n        const m11 = isMatrix4 ? te[0] : te[0]; const m12 = isMatrix4 ? te[4] : te[3]; const m13 = isMatrix4 ? te[8] : te[6];\r\n        const m21 = isMatrix4 ? te[1] : te[1]; const m22 = isMatrix4 ? te[5] : te[4]; const m23 = isMatrix4 ? te[9] : te[7];\r\n        const m31 = isMatrix4 ? te[2] : te[2]; const m32 = isMatrix4 ? te[6] : te[5]; const m33 = isMatrix4 ? te[10] : te[8];\r\n\r\n        const trace = m11 + m22 + m33;\r\n        let s;\r\n\r\n        if (trace > 0) {\r\n            s = 0.5 / Math.sqrt(trace + 1.0);\r\n\r\n            this._w = 0.25 / s;\r\n            this._x = (m32 - m23) * s;\r\n            this._y = (m13 - m31) * s;\r\n            this._z = (m21 - m12) * s;\r\n        } else if (m11 > m22 && m11 > m33) {\r\n            s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\r\n\r\n            this._w = (m32 - m23) / s;\r\n            this._x = 0.25 * s;\r\n            this._y = (m12 + m21) / s;\r\n            this._z = (m13 + m31) / s;\r\n        } else if (m22 > m33) {\r\n            s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\r\n\r\n            this._w = (m13 - m31) / s;\r\n            this._x = (m12 + m21) / s;\r\n            this._y = 0.25 * s;\r\n            this._z = (m23 + m32) / s;\r\n        } else {\r\n            s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\r\n\r\n            this._w = (m21 - m12) / s;\r\n            this._x = (m13 + m31) / s;\r\n            this._y = (m23 + m32) / s;\r\n            this._z = 0.25 * s;\r\n        }\r\n\r\n        this.triggerNotify();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置单位向量\r\n     * @param vFrom\r\n     * @param vTo\r\n     */\r\n    public setFromUnitVectors(vFrom: InVector3, vTo: InVector3): Quaternion {\r\n        // assumes direction vectors vFrom and vTo are normalized\r\n\r\n        const EPS = 0.000001;\r\n\r\n        let r = vFrom.dot(vTo) + 1;\r\n\r\n        if (r < EPS) {\r\n            r = 0;\r\n\r\n            if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\r\n                this._x = -vFrom.y;\r\n                this._y = vFrom.x;\r\n                this._z = 0;\r\n                this._w = r;\r\n            } else {\r\n                this._x = 0;\r\n                this._y = -vFrom.z;\r\n                this._z = vFrom.y;\r\n                this._w = r;\r\n            }\r\n        } else {\r\n            // crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\r\n\r\n            this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\r\n            this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\r\n            this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\r\n            this._w = r;\r\n        }\r\n\r\n        return this.normalize();\r\n    }\r\n\r\n    /**\r\n     * 与四元数之间的角度\r\n     * @param quaternion\r\n     */\r\n    public angleTo(quaternion: Quaternion): number {\r\n        return 2 * Math.acos(Math.abs(MathUtils.clamp(this.dot(quaternion), -1, 1)));\r\n    }\r\n\r\n    /**\r\n     * 旋转插值\r\n     * @param quaternion\r\n     * @param step\r\n     */\r\n    public rotateTowards(quaternion: Quaternion, step: number): Quaternion {\r\n\r\n        const angle = this.angleTo(quaternion);\r\n        if (angle == 0) { return this; }\r\n\r\n        const t = Math.min(1, step / angle);\r\n        this.slerp(quaternion, t);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 反向四元数\r\n     */\r\n    public inverse(): Quaternion {\r\n        return this.conjugate();\r\n    }\r\n\r\n    /**\r\n     * 反向四元数\r\n     */\r\n    public conjugate(): Quaternion {\r\n        this._x *= -1;\r\n        this._y *= -1;\r\n        this._z *= -1;\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 与四元数的点乘\r\n     * @param quaternion\r\n     */\r\n    public dot(quaternion: Quaternion): number {\r\n        return this._x * quaternion._x + this._y * quaternion._y + this._z * quaternion._z + this._w * quaternion._w;\r\n    }\r\n\r\n    /**\r\n     * 四元数的SQ长度\r\n     */\r\n    public lengthSq(): number {\r\n        return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\r\n    }\r\n\r\n    /**\r\n     * 四元数的长度\r\n     */\r\n    public length(): number {\r\n        return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);\r\n    }\r\n\r\n    /**\r\n     * 归一化四元数\r\n     */\r\n    public normalize(): Quaternion {\r\n        let l = this.length();\r\n\r\n        if (l == 0) {\r\n            this._x = 0;\r\n            this._y = 0;\r\n            this._z = 0;\r\n            this._w = 1;\r\n        } else {\r\n            l = 1 / l;\r\n\r\n            this._x = this._x * l;\r\n            this._y = this._y * l;\r\n            this._z = this._z * l;\r\n            this._w = this._w * l;\r\n        }\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 当前四元数乘以四元数\r\n     * @param quaternion\r\n     */\r\n    public multiply(quaternion: Quaternion): Quaternion {\r\n        return this.multiplyQuaternions(this, quaternion);\r\n    }\r\n\r\n    /**\r\n     * 四元数乘以当前四元数\r\n     * @param quaternion\r\n     */\r\n    public premultiply(quaternion: Quaternion): Quaternion {\r\n        return this.multiplyQuaternions(quaternion, this);\r\n    }\r\n\r\n    /**\r\n     * 两个四元数相乘\r\n     * @param aQuat\r\n     * @param bQuat\r\n     */\r\n    public multiplyQuaternions(aQuat: Quaternion, bQuat: Quaternion): Quaternion {\r\n\r\n        const qax = aQuat._x;\r\n        const qay = aQuat._y;\r\n        const qaz = aQuat._z;\r\n        const qaw = aQuat._w;\r\n\r\n        const qbx = bQuat._x;\r\n        const qby = bQuat._y;\r\n        const qbz = bQuat._z;\r\n        const qbw = bQuat._w;\r\n\r\n        this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\r\n        this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\r\n        this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\r\n        this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\r\n\r\n        this.triggerNotify();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 线性插值\r\n     * @param quaternion\r\n     * @param t\r\n     */\r\n    public slerp(quaternion: Quaternion, t: number): Quaternion {\r\n        if (t == 0) { return this; }\r\n        if (t == 1) { return this.copy(quaternion); }\r\n\r\n        const x = this._x;\r\n        const y = this._y;\r\n        const z = this._z;\r\n        const w = this._w;\r\n\r\n        // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\r\n\r\n        let cosHalfTheta = w * quaternion._w + x * quaternion._x + y * quaternion._y + z * quaternion._z;\r\n        if (cosHalfTheta < 0) {\r\n            this._w = -quaternion._w;\r\n            this._x = -quaternion._x;\r\n            this._y = -quaternion._y;\r\n            this._z = -quaternion._z;\r\n\r\n            cosHalfTheta = -cosHalfTheta;\r\n\r\n        } else {\r\n            this.copy(quaternion);\r\n        }\r\n\r\n        if (cosHalfTheta >= 1.0) {\r\n            this._w = w;\r\n            this._x = x;\r\n            this._y = y;\r\n            this._z = z;\r\n\r\n            return this;\r\n        }\r\n\r\n        const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\r\n\r\n        if (sqrSinHalfTheta <= MathUtils.EPSILON14) {\r\n            const s = 1 - t;\r\n            this._w = s * w + t * this._w;\r\n            this._x = s * x + t * this._x;\r\n            this._y = s * y + t * this._y;\r\n            this._z = s * z + t * this._z;\r\n\r\n            return this.normalize();\r\n        }\r\n\r\n        const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);\r\n        const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\r\n        const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta;\r\n        const ratioB = Math.sin(t * halfTheta) / sinHalfTheta;\r\n\r\n        this._w = (w * ratioA + this._w * ratioB);\r\n        this._x = (x * ratioA + this._x * ratioB);\r\n        this._y = (y * ratioA + this._y * ratioB);\r\n        this._z = (z * ratioA + this._z * ratioB);\r\n\r\n        this.triggerNotify();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 属性Buffer乘以四元数\r\n     * @param attribute\r\n     */\r\n    public applyToBufferAttribute(attribute: BufferAttribute | InterleavedBufferAttribute): BufferAttribute | InterleavedBufferAttribute {\r\n        for (let i = 0, l = attribute.count; i < l; i++) {\r\n            MathTmp.Vector3[0].x = attribute.getX(i);\r\n            MathTmp.Vector3[0].y = attribute.getY(i);\r\n            MathTmp.Vector3[0].z = attribute.getZ(i);\r\n            MathTmp.Vector3[0].applyQuaternion(this);\r\n            attribute.setXYZ(i, MathTmp.Vector3[0].x, MathTmp.Vector3[0].y, MathTmp.Vector3[0].z);\r\n        }\r\n        return attribute;\r\n    }\r\n\r\n    /**\r\n     * 是否相等\r\n     * @param quaternion\r\n     */\r\n    public equals(quaternion: Quaternion): boolean {\r\n        return (quaternion._x == this._x) && (quaternion._y == this._y) && (quaternion._z == this._z) && (quaternion._w == this._w);\r\n    }\r\n\r\n    /**\r\n     * 是否近似相等\r\n     * @param right\r\n     * @param relativeEpsilon\r\n     * @param absoluteEpsilon\r\n     */\r\n    public equalsEpsilon(right: Quaternion, relativeEpsilon: number, absoluteEpsilon: Nullable<number> = null): boolean {\r\n        return MathUtils.equalsEpsilon(this._x, right.x, relativeEpsilon, absoluteEpsilon) &&\r\n            MathUtils.equalsEpsilon(this._y, right.y, relativeEpsilon, absoluteEpsilon) &&\r\n            MathUtils.equalsEpsilon(this._z, right.z, relativeEpsilon, absoluteEpsilon) &&\r\n            MathUtils.equalsEpsilon(this._w, right.w, relativeEpsilon, absoluteEpsilon);\r\n    }\r\n\r\n    /**\r\n     * 从数组复制\r\n     * @param array\r\n     * @param offset\r\n     */\r\n    public fromArray(array: FloatArray, offset: number = 0): Quaternion {\r\n        this._x = array[offset];\r\n        this._y = array[offset + 1];\r\n        this._z = array[offset + 2];\r\n        this._w = array[offset + 3];\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 复制到数组\r\n     * @param array\r\n     * @param offset\r\n     */\r\n    public toArray(array: FloatArray = [], offset: number = 0): FloatArray {\r\n        array[offset] = this._x;\r\n        array[offset + 1] = this._y;\r\n        array[offset + 2] = this._z;\r\n        array[offset + 3] = this._w;\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * 从二进制复制\r\n     * @param dataBuffer\r\n     */\r\n    public fromDataBuffer(dataBuffer: BinaryBuffer): Quaternion {\r\n        this._x = dataBuffer.readFloat32();\r\n        this._y = dataBuffer.readFloat32();\r\n        this._z = dataBuffer.readFloat32();\r\n        this._w = dataBuffer.readFloat32();\r\n        this.triggerNotify();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 复制到二进制\r\n     * @param dataBuffer\r\n     */\r\n    public toDataBuffer(dataBuffer: BinaryBuffer): Quaternion {\r\n        dataBuffer.writeFloat32(this._x);\r\n        dataBuffer.writeFloat32(this._y);\r\n        dataBuffer.writeFloat32(this._z);\r\n        dataBuffer.writeFloat32(this._w);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 从Buffer属性复制\r\n     * @param attribute\r\n     * @param index\r\n     */\r\n    public fromBufferAttribute(attribute: BufferAttribute, index: int): Quaternion {\r\n        this._x = attribute.getX(index);\r\n        this._y = attribute.getY(index);\r\n        this._z = attribute.getZ(index);\r\n        this._w = attribute.getW(index);\r\n        return this;\r\n    }\r\n}\r\n",
        "import { Vector2 } from \"./Vector2\";\r\nimport { FloatArray, Nullable } from \"../types\";\r\nimport { BufferAttribute } from \"../Misc\";\r\nimport { Intervals } from \"./Algorithm/Intervals\";\r\nimport { Box2Box2Intersect } from \"./InterfaceType/IntersectResult\";\r\nimport { MathTmp } from \"./MathTmp\";\r\n\r\n/**\r\n * 2D包围盒\r\n * @category Math\r\n */\r\nexport class Box2 {\r\n\r\n    /**\r\n     * 最小值\r\n     */\r\n    public min: Vector2;\r\n\r\n    /**\r\n     * 最大值\r\n     */\r\n    public max: Vector2;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param min\r\n     * @param max\r\n     */\r\n    constructor(min: Nullable<Vector2> = null, max: Nullable<Vector2> = null) {\r\n        this.min = new Vector2(+Infinity, +Infinity);\r\n        this.max = new Vector2(-Infinity, -Infinity);\r\n\r\n        if (min) {\r\n            this.min.copy(min);\r\n        }\r\n        if (max) {\r\n            this.min.copy(max);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建对象\r\n     * @constructor\r\n     */\r\n    public static Build() {\r\n        return new Box2();\r\n    }\r\n\r\n    /**\r\n     * X坐标\r\n     */\r\n    public get x() {\r\n        return this.min.x;\r\n    }\r\n    public set x(value) {\r\n        const width = this.width;\r\n        this.min.x = value;\r\n        this.max.x = this.min.x + width;\r\n    }\r\n\r\n    /**\r\n     * Y坐标\r\n     */\r\n    public get y() {\r\n        return this.min.y;\r\n    }\r\n    public set y(value) {\r\n        const height = this.height;\r\n        this.min.y = value;\r\n        this.max.y = this.min.y + height;\r\n    }\r\n\r\n    /**\r\n     * 宽度\r\n     */\r\n    public get width() {\r\n        return this.max.x - this.min.x;\r\n    }\r\n    public set width(value) {\r\n        this.max.x = this.min.x + value;\r\n    }\r\n\r\n    /**\r\n     * 长度\r\n     */\r\n    public get height() {\r\n        return this.max.y - this.min.y;\r\n    }\r\n    public set height(value) {\r\n        this.max.y = this.min.y + value;\r\n    }\r\n\r\n    /**\r\n     * 中心点\r\n     */\r\n    public get center() {\r\n        return this.getCenter();\r\n    }\r\n    public set center(value) {\r\n        const extent = this.getExtent();\r\n        this.min.x = value.x - extent.x;\r\n        this.min.y = value.y - extent.y;\r\n        this.max.x = value.x + extent.x;\r\n        this.max.y = value.y + extent.y;\r\n    }\r\n\r\n    /**\r\n     * 位置\r\n     */\r\n    public get position() {\r\n        return this.min;\r\n    }\r\n    public set position(value) {\r\n        this.x = value.x;\r\n        this.y = value.y;\r\n    }\r\n\r\n    /**\r\n     * 大小\r\n     */\r\n    public get size() {\r\n        return this.getSize();\r\n    }\r\n    public set size(value) {\r\n        this.width = value.x;\r\n        this.height = value.y;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): Box2 {\r\n        return new Box2(this.min, this.max);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param box\r\n     */\r\n    public copy(box: Box2): Box2 {\r\n        this.min.copy(box.min);\r\n        this.max.copy(box.max);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置Min,Max\r\n     * @param min\r\n     * @param max\r\n     */\r\n    public set(min: Vector2, max: Vector2): Box2 {\r\n        this.min.copy(min);\r\n        this.max.copy(max);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置坐标Number数组\r\n     * @param array\r\n     */\r\n    public setFromArray(array: number[]): Box2 {\r\n        let minX = +Infinity;\r\n        let minY = +Infinity;\r\n\r\n        let maxX = -Infinity;\r\n        let maxY = -Infinity;\r\n\r\n        for (let i = 0, l = array.length; i < l; i += 3) {\r\n            const x = array[i];\r\n            const y = array[i + 1];\r\n\r\n            if (x < minX) { minX = x; }\r\n            if (y < minY) { minY = y; }\r\n\r\n            if (x > maxX) { maxX = x; }\r\n            if (y > maxY) { maxY = y; }\r\n        }\r\n\r\n        this.min.set(minX, minY);\r\n        this.max.set(maxX, maxY);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置Buffer属性\r\n     * @param attribute\r\n     */\r\n    public setFromBufferAttribute(attribute: BufferAttribute): Box2 {\r\n        let minX = +Infinity;\r\n        let minY = +Infinity;\r\n\r\n        let maxX = -Infinity;\r\n        let maxY = -Infinity;\r\n\r\n        for (let i = 0, l = attribute.count; i < l; i++) {\r\n            const x = attribute.getX(i);\r\n            const y = attribute.getY(i);\r\n\r\n            if (x < minX) { minX = x; }\r\n            if (y < minY) { minY = y; }\r\n\r\n            if (x > maxX) { maxX = x; }\r\n            if (y > maxY) { maxY = y; }\r\n        }\r\n\r\n        this.min.set(minX, minY);\r\n        this.max.set(maxX, maxY);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置Vector2数组\r\n     * @param points\r\n     */\r\n    public setFromPoints(points: Vector2[]): Box2 {\r\n\r\n        this.makeEmpty();\r\n\r\n        for (let i = 0, il = points.length; i < il; i++) {\r\n            this.expandByPoint(points[i]);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置中心点和大小\r\n     * @param center\r\n     * @param size\r\n     */\r\n    public setFromCenterAndSize(center: Vector2, size: Vector2): Box2 {\r\n\r\n        const halfSize = MathTmp.Vector2[0].copy(size).multiplyScalar(0.5);\r\n        this.min.copy(center).sub(halfSize);\r\n        this.max.copy(center).add(halfSize);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 重置为空\r\n     */\r\n    public makeEmpty(): Box2 {\r\n        this.min.x = this.min.y = +Infinity;\r\n        this.max.x = this.max.y = -Infinity;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 是否为空\r\n     */\r\n    public isEmpty(): boolean {\r\n        return (this.max.x < this.min.x) || (this.max.y < this.min.y);\r\n    }\r\n\r\n    /**\r\n     * 获取中心点\r\n     * @param target\r\n     * @returns {Vector2}\r\n     */\r\n    public getCenter(target = new Vector2()): Vector2 {\r\n        return this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\r\n    }\r\n\r\n    /**\r\n     * 获取大小\r\n     * @param target\r\n     */\r\n    public getSize(target = new Vector2()): Vector2 {\r\n        return this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);\r\n    }\r\n\r\n    /**\r\n     * 获取区段\r\n     * @param target\r\n     */\r\n    public getExtent(target = new Vector2()): Vector2 {\r\n        return this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min).multiplyScalar(0.5);\r\n    }\r\n\r\n    /**\r\n     * 扩张坐标点\r\n     * @param point\r\n     */\r\n    public expandByPoint(point: Vector2): Box2 {\r\n        this.min.min(point);\r\n        this.max.max(point);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 扩张向量\r\n     * @param vector\r\n     */\r\n    public expandByVector(vector: Vector2): Box2 {\r\n        this.min.sub(vector);\r\n        this.max.add(vector);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 扩张缩放\r\n     * @param scalar\r\n     */\r\n    public expandByScalar(scalar: number): Box2 {\r\n        this.min.addScalar(-scalar);\r\n        this.max.addScalar(scalar);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 是否包含坐标点\r\n     * @param point\r\n     */\r\n    public containsPoint(point: Vector2): boolean {\r\n        return !(point.x < this.min.x || point.x > this.max.x ||\r\n            point.y < this.min.y || point.y > this.max.y);\r\n    }\r\n\r\n    /**\r\n     * 是否包含包围盒\r\n     * @param box\r\n     */\r\n    public containsBox(box: Box2): boolean {\r\n        return this.min.x <= box.min.x && box.max.x <= this.max.x &&\r\n            this.min.y <= box.min.y && box.max.y <= this.max.y;\r\n    }\r\n\r\n    /**\r\n     * 坐标点相对Box尺寸的比例\r\n     * @param point\r\n     * @param target\r\n     */\r\n    public getParameter(point: Vector2, target = new Vector2()): Vector2 {\r\n\r\n        return target.set(\r\n            (point.x - this.min.x) / (this.max.x - this.min.x),\r\n            (point.y - this.min.y) / (this.max.y - this.min.y)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 限制坐标点\r\n     * @param point\r\n     * @param target\r\n     */\r\n    public clampPoint(point: Vector2, target = new Vector2()): Vector2 {\r\n\r\n        return target.copy(point).clamp(this.min, this.max);\r\n    }\r\n\r\n    /**\r\n     * 与包围盒的交集\r\n     * @param box\r\n     */\r\n    public intersect(box: Box2): Box2 {\r\n        this.min.max(box.min);\r\n        this.max.min(box.max);\r\n        if (this.isEmpty()) { this.makeEmpty(); }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 与包围盒的并集\r\n     * @param box\r\n     */\r\n    public union(box: Box2): Box2 {\r\n        this.min.min(box.min);\r\n        this.max.max(box.max);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 平移\r\n     * @param offset\r\n     */\r\n    public translate(offset: Vector2): Box2 {\r\n        this.min.add(offset);\r\n        this.max.add(offset);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 缩放\r\n     * @param scalar\r\n     */\r\n    public scale(scalar: number): Box2 {\r\n        this.min.multiplyScalar(scalar);\r\n        this.max.multiplyScalar(scalar);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 乘以向量\r\n     * @param vec\r\n     */\r\n    public multiply(vec: Vector2): Box2 {\r\n        this.min.multiply(vec);\r\n        this.max.multiply(vec);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 平移\r\n     * @param offset1\r\n     * @param offset2\r\n     */\r\n    public translates(offset1: Vector2, offset2: Vector2): Box2 {\r\n        this.min.add(offset1);\r\n        this.max.add(offset2);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 缩放\r\n     * @param scalar1\r\n     * @param scalar2\r\n     */\r\n    public scales(scalar1: number, scalar2: number): Box2 {\r\n        this.min.multiplyScalar(scalar1);\r\n        this.max.multiplyScalar(scalar2);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 乘以向量\r\n     * @param aVec\r\n     * @param bVec\r\n     */\r\n    public multiplies(aVec: Vector2, bVec: Vector2): Box2 {\r\n        this.min.multiply(aVec);\r\n        this.max.multiply(bVec);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 与坐标点的SQ距离\r\n     * @param point\r\n     * @param closestPoint\r\n     */\r\n    public distanceSqToPoint(point: Vector2, closestPoint: Nullable<Vector2> = null): number {\r\n\r\n        const boxCenter = this.getCenter(MathTmp.Vector2[0]);\r\n        const boxExtent = this.getExtent(MathTmp.Vector2[1]);\r\n        const closest = MathTmp.Vector2[2].subVectors(point, boxCenter);\r\n\r\n        let sqDistance = 0;\r\n\r\n        for (let i = 0; i < 2; ++i) {\r\n            if (closest.p[i] < -boxExtent.p[i]) {\r\n                const delta = closest.p[i] + boxExtent.p[i];\r\n                sqDistance += delta * delta;\r\n                closest.p[i] =  -boxExtent.p[i];\r\n            }\r\n            else if (closest.p[i] > boxExtent.p[i]) {\r\n                const delta = closest.p[i] - boxExtent.p[i];\r\n                sqDistance += delta * delta;\r\n                closest.p[i] =  boxExtent.p[i];\r\n            }\r\n        }\r\n\r\n        if (closestPoint) {\r\n            closestPoint.addVectors(closest, boxCenter);\r\n        }\r\n\r\n        return sqDistance;\r\n    }\r\n\r\n    /**\r\n     * 与坐标点的距离\r\n     * @param point\r\n     * @param closestPoint\r\n     */\r\n    public distanceToPoint(point: Vector2, closestPoint: Nullable<Vector2> = null): number {\r\n        return Math.sqrt(this.distanceSqToPoint(point, closestPoint));\r\n    }\r\n\r\n    /**\r\n     * 与包围盒的SQ距离\r\n     * @param box\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     */\r\n    public distanceSqToBox(box: Box2, closestPoint0: Nullable<Vector2> = null, closestPoint1: Nullable<Vector2> = null): number {\r\n\r\n        MathTmp.Box2[0].makeEmpty();\r\n        MathTmp.Box2[1].makeEmpty();\r\n\r\n        let sqrDistance = 0;\r\n\r\n        for (let i = 0; i < 2; ++i) {\r\n\r\n            if (this.min.p[i] >= box.max.p[i]) {\r\n\r\n                const delta = this.min.p[i] - box.min.p[i];\r\n                sqrDistance += delta * delta;\r\n\r\n                if (closestPoint0) {\r\n                    MathTmp.Box2[0].min.p[i] =  this.min.p[i];\r\n                    MathTmp.Box2[0].max.p[i] =  this.min.p[i];\r\n                }\r\n                if (closestPoint1) {\r\n                    MathTmp.Box2[1].min.p[i] =  box.max.p[i];\r\n                    MathTmp.Box2[1].max.p[i] =  box.max.p[i];\r\n                }\r\n            }\r\n            else if (box.min.p[i] >= this.max.p[i]) {\r\n\r\n                const delta = box.min.p[i] - this.max.p[i];\r\n                sqrDistance += delta * delta;\r\n\r\n                if (closestPoint0) {\r\n                    MathTmp.Box2[0].min.p[i] =  this.max.p[i];\r\n                    MathTmp.Box2[0].max.p[i] =  this.max.p[i];\r\n                }\r\n                if (closestPoint1) {\r\n                    MathTmp.Box2[1].min.p[i] =  box.min.p[i];\r\n                    MathTmp.Box2[1].max.p[i] =  box.min.p[i];\r\n                }\r\n            }\r\n            else if (closestPoint0 || closestPoint1) {\r\n\r\n                const intr0 = [ this.min.p[i], this.max.p[i] ];\r\n                const intr1 = [ box.min.p[i], box.max.p[i] ];\r\n                const iiResult = Intervals.staticQuery(intr0, intr1);\r\n                if (closestPoint0) {\r\n                    MathTmp.Box2[0].min.p[i] =  iiResult.overlap[0];\r\n                    MathTmp.Box2[0].max.p[i] =  iiResult.overlap[1];\r\n                }\r\n                if (closestPoint1) {\r\n                    MathTmp.Box2[1].min.p[i] =  iiResult.overlap[0];\r\n                    MathTmp.Box2[1].max.p[i] =  iiResult.overlap[1];\r\n                }\r\n            }\r\n        }\r\n\r\n        if (closestPoint0) {\r\n            MathTmp.Box2[0].getCenter(closestPoint0);\r\n        }\r\n        if (closestPoint1) {\r\n            MathTmp.Box2[1].getCenter(closestPoint1);\r\n        }\r\n\r\n        return sqrDistance;\r\n    }\r\n\r\n    /**\r\n     * 与包围盒的距离\r\n     * @param box\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     */\r\n    public distanceToBox(box: Box2, closestPoint0: Nullable<Vector2> = null, closestPoint1: Nullable<Vector2> = null): number {\r\n        return Math.sqrt(this.distanceSqToBox(box, closestPoint0, closestPoint1));\r\n    }\r\n\r\n    /**\r\n     * 与包围盒是否相交\r\n     * @param box\r\n     */\r\n    public intersectsBox(box: Box2): boolean {\r\n        return !(box.max.x < this.min.x || box.min.x > this.max.x ||\r\n            box.max.y < this.min.y || box.min.y > this.max.y);\r\n    }\r\n\r\n    /**\r\n     * 包围盒相交检测\r\n     * @param box\r\n     */\r\n    public intersectBox(box: Box2): Box2Box2Intersect {\r\n\r\n        const box0 = this;\r\n        const box1 = box;\r\n\r\n        const result = {\r\n            intersect: false,\r\n            box: new Box2()\r\n        };\r\n\r\n        for (let i = 0; i < 2; i++) {\r\n            if (box0.max.p[i] < box1.min.p[i] || box0.min.p[i] > box1.max.p[i]) {\r\n                result.intersect = false;\r\n                return result;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < 2; i++) {\r\n            if (box0.max.p[i] <= box1.max.p[i]) {\r\n                result.box.max.p[i] =  box0.max.p[i];\r\n            }\r\n            else {\r\n                result.box.max.p[i] =  box1.max.p[i];\r\n            }\r\n\r\n            if (box0.min.p[i] <= box1.min.p[i]) {\r\n                result.box.min.p[i] =  box1.min.p[i];\r\n            }\r\n            else {\r\n                result.box.min.p[i] =  box0.min.p[i];\r\n            }\r\n        }\r\n\r\n        result.intersect = true;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 是否相等\r\n     * @param box\r\n     */\r\n    public equals(box: Box2): boolean {\r\n        return box.min.equals(this.min) && box.max.equals(this.max);\r\n    }\r\n\r\n    /**\r\n     * 生成数组\r\n     * @param array\r\n     * @param offset\r\n     */\r\n    public toArray(array: FloatArray = [], offset = 0): FloatArray {\r\n        this.min.toArray(array, offset);\r\n        this.max.toArray(array, offset + 3);\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * 复制数组\r\n     * @param array\r\n     * @param offset\r\n     */\r\n    public fromArray(array: FloatArray, offset = 0): Box2 {\r\n        this.min.fromArray(array, offset);\r\n        this.max.fromArray(array, offset + 3);\r\n        return this;\r\n    }\r\n}\r\n",
        "import { Nullable } from \"../types\";\r\nimport { Vector3 } from \"./Vector3\";\r\nimport { LineSegment3 } from \"./LineSegment3\";\r\nimport { Triangle } from \"./Triangle\";\r\nimport { Box3 } from \"./Box3\";\r\nimport { OBB } from \"./OBB\";\r\nimport { Ray3 } from \"./Ray3\";\r\nimport { Matrix4 } from \"./Matrix4\";\r\nimport {\r\n    Line3Box3Distance,\r\n    Line3OBBDistance,\r\n    Line3Line3Distance,\r\n    Line3Ray3Distance,\r\n    Line3Segment3Distance,\r\n    Line3TriangleDistance\r\n} from \"./InterfaceType/DistanceResult\";\r\nimport {\r\n    Line3Box3Intersect, Line3OBBIntersect,\r\n    Line3PlaneIntersect,\r\n    Line3SphereIntersect,\r\n    Line3TriangleIntersect\r\n} from \"./InterfaceType/IntersectResult\";\r\nimport { Sphere } from \"./Sphere\";\r\nimport { Plane } from \"./Plane\";\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec1 = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec2 = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec3 = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec4 = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec5 = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec6 = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec7 = new Vector3();\r\n\r\n/**\r\n * 3D直线\r\n * @category Math\r\n */\r\nexport class Line3 {\r\n\r\n    /**\r\n     * 原点\r\n     */\r\n    public origin: Vector3;\r\n    /**\r\n     * 方向\r\n     */\r\n    public direction: Vector3;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param origin\r\n     * @param direction\r\n     */\r\n    constructor(origin: Nullable<Vector3> = null, direction: Nullable<Vector3> = null) {\r\n        this.origin = new Vector3();\r\n        this.direction = new Vector3(0, 0, -1);\r\n\r\n        if (origin) {\r\n            this.origin.copy(origin);\r\n        }\r\n        if (direction) {\r\n            this.direction.copy(direction);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置原点和方向\r\n     * @param origin\r\n     * @param direction\r\n     */\r\n    public set(origin: Vector3, direction: Vector3): Line3 {\r\n        this.origin.copy(origin);\r\n        this.direction.copy(direction);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): Line3 {\r\n        return new Line3().copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param ray\r\n     */\r\n    public copy(ray: Line3): Line3 {\r\n        this.origin.copy(ray.origin);\r\n        this.direction.copy(ray.direction);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 点到直线的最近点\r\n     * @param point\r\n     * @param target\r\n     */\r\n    public closestPointToPoint(point: Vector3, target = new Vector3()): Vector3 {\r\n        target.subVectors(point, this.origin);\r\n\r\n        const directionDistance = target.dot(this.direction);\r\n        return target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\r\n    }\r\n\r\n    /**\r\n     * 到坐标点的SQ距离\r\n     * @param point\r\n     * @param lineClosest\r\n     */\r\n    public distanceSqToPoint(point: Vector3, lineClosest: Nullable<Vector3> = null): number {\r\n\r\n        const diff = _tempVec1.subVectors(point, this.origin);\r\n        const lineParameter = this.direction.dot(diff);\r\n        _tempVec2.copy(this.direction).multiplyScalar(lineParameter).add(this.origin);\r\n\r\n        if (lineClosest) {\r\n            lineClosest.copy(_tempVec2);\r\n        }\r\n\r\n        diff.subVectors(point, _tempVec2);\r\n        return diff.dot(diff);\r\n    }\r\n\r\n    /**\r\n     * 到坐标点的距离\r\n     * @param point\r\n     * @param lineClosest\r\n     */\r\n    public distanceToPoint(point: Vector3, lineClosest: Nullable<Vector3> = null): number {\r\n        return Math.sqrt(this.distanceSqToPoint(point, lineClosest));\r\n    }\r\n\r\n    /**\r\n     * 到射线的SQ距离\r\n     * @param ray\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceSqToRay(ray: Ray3, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Line3Ray3Distance> = null): number {\r\n\r\n        const diff = _tempVec1.subVectors(this.origin, ray.origin);\r\n        let a01 = -this.direction.dot(ray.direction);\r\n        let b0 = diff.dot(this.direction);\r\n        let s0, s1;\r\n\r\n        if (Math.abs(a01) < 1) {\r\n            const b1 = -diff.dot(ray.direction);\r\n            s1 = a01 * b0 - b1;\r\n\r\n            if (s1 >= 0) {\r\n                // Two interior points are closest, one on line and one\r\n                // on ray.\r\n                const det = 1 - a01 * a01;\r\n                s0 = (a01 * b1 - b0) / det;\r\n                s1 /= det;\r\n            }\r\n            else {\r\n                // Origin of ray and interior point of line are closest.\r\n                s0 = -b0;\r\n                s1 = 0;\r\n            }\r\n        }\r\n        else {\r\n            // Lines are parallel, closest pair with one point at ray\r\n            // origin.\r\n            s0 = -b0;\r\n            s1 = 0;\r\n        }\r\n\r\n        _tempVec2.copy(this.direction).multiplyScalar(s0).add(this.origin);\r\n        _tempVec3.copy(ray.direction).multiplyScalar(s1).add(ray.origin);\r\n\r\n        if (closestPoint0) {\r\n            closestPoint0.copy(_tempVec2);\r\n        }\r\n        if (closestPoint1) {\r\n            closestPoint1.copy(_tempVec3);\r\n        }\r\n        if (parameter) {\r\n            parameter.parameter = [s0, s1];\r\n        }\r\n        diff.subVectors(_tempVec2, _tempVec3);\r\n        return diff.dot(diff);\r\n    }\r\n\r\n    /**\r\n     * 到射线的距离\r\n     * @param ray\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceToRay(ray: Ray3, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Line3Ray3Distance> = null): number {\r\n        return Math.sqrt(this.distanceSqToRay(ray, closestPoint0, closestPoint1, parameter));\r\n    }\r\n\r\n    /**\r\n     * 到线段的SQ距离\r\n     * @param segment\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceSqToSegment(segment: LineSegment3, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Line3Segment3Distance> = null): number {\r\n\r\n        const segCenter = _tempVec1;\r\n        const segDirection = _tempVec2;\r\n        const segExtent = segment.getCenteredForm(segCenter, segDirection);\r\n\r\n        const diff = _tempVec3.subVectors(this.origin, segCenter);\r\n        let a01 = -this.direction.dot(segDirection);\r\n        let b0 = diff.dot(this.direction);\r\n        let s0, s1;\r\n\r\n        if (Math.abs(a01) < 1) {\r\n            // The line and segment are not parallel.\r\n            const det = 1 - a01 * a01;\r\n            const extDet = segExtent * det;\r\n            const b1 = -diff.dot(segDirection);\r\n            s1 = a01 * b0 - b1;\r\n\r\n            if (s1 >= -extDet) {\r\n                if (s1 <= extDet) {\r\n                    // Two interior points are closest, one on the line\r\n                    // and one on the segment.\r\n                    s0 = (a01 * b1 - b0) / det;\r\n                    s1 /= det;\r\n                }\r\n                else {\r\n                    // The endpoint e1 of the segment and an interior\r\n                    // point of the line are closest.\r\n                    s1 = segExtent;\r\n                    s0 = -(a01 * s1 + b0);\r\n                }\r\n            }\r\n            else {\r\n                // The endpoint e0 of the segment and an interior point\r\n                // of the line are closest.\r\n                s1 = -segExtent;\r\n                s0 = -(a01 * s1 + b0);\r\n            }\r\n        }\r\n        else {\r\n            // The line and segment are parallel.  Choose the closest pair\r\n            // so that one point is at segment origin.\r\n            s1 = 0;\r\n            s0 = -b0;\r\n        }\r\n\r\n        _tempVec4.copy(this.direction).multiplyScalar(s0).add(this.origin);\r\n        _tempVec5.copy(segDirection).multiplyScalar(s1).add(segCenter);\r\n\r\n        if (closestPoint0) {\r\n            closestPoint0.copy(_tempVec4);\r\n        }\r\n        if (closestPoint1) {\r\n            closestPoint1.copy(_tempVec5);\r\n        }\r\n\r\n        if (parameter) {\r\n            parameter.parameter = [s0, s1];\r\n        }\r\n\r\n        diff.subVectors(_tempVec4, _tempVec5);\r\n        return diff.dot(diff);\r\n    }\r\n\r\n    /**\r\n     * 到线段的距离\r\n     * @param segment\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceToSegment(segment: LineSegment3, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Line3Segment3Distance> = null): number {\r\n        return Math.sqrt(this.distanceSqToSegment(segment, closestPoint0, closestPoint1, parameter));\r\n    }\r\n\r\n    /**\r\n     * 到直线的SQ距离\r\n     * @param line\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceSqToLine(line: Line3, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Line3Line3Distance> = null): number {\r\n\r\n        const line0 = this;\r\n        const line1 = line;\r\n\r\n        const diff = _tempVec1.subVectors(line0.origin, line1.origin);\r\n        let a01 = -line0.direction.dot(line1.direction);\r\n        let b0 = diff.dot(line0.direction);\r\n        let s0, s1;\r\n\r\n        if (Math.abs(a01) < 1) {\r\n            // Lines are not parallel.\r\n            const det = 1 - a01 * a01;\r\n            const b1 = -diff.dot(line1.direction);\r\n            s0 = (a01 * b1 - b0) / det;\r\n            s1 = (a01 * b0 - b1) / det;\r\n        }\r\n        else {\r\n            // Lines are parallel, select any pair of closest points.\r\n            s0 = -b0;\r\n            s1 = 0;\r\n        }\r\n\r\n        _tempVec4.copy(line0.direction).multiplyScalar(s0).add(line0.origin);\r\n        _tempVec5.copy(line1.direction).multiplyScalar(s1).add(line1.origin);\r\n\r\n        if (closestPoint0) {\r\n            closestPoint0.copy(_tempVec4);\r\n        }\r\n        if (closestPoint1) {\r\n            closestPoint1.copy(_tempVec5);\r\n        }\r\n        if (parameter) {\r\n            parameter.parameter = [s0, s1];\r\n        }\r\n\r\n        diff.subVectors(_tempVec4, _tempVec5);\r\n        return diff.dot(diff);\r\n    }\r\n\r\n    /**\r\n     * 到直线的距离\r\n     * @param line\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceToLine(line: Line3, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Line3Line3Distance> = null): number {\r\n        return Math.sqrt(this.distanceSqToLine(line, closestPoint0, closestPoint1, parameter));\r\n    }\r\n\r\n    /**\r\n     * 到三角形的SQ距离\r\n     * @param triangle\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceSqToTriangle(triangle: Triangle, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Line3TriangleDistance> = null): number {\r\n\r\n        const edge0 = _tempVec1.subVectors(triangle.b, triangle.a);\r\n        const edge1 = _tempVec2.subVectors(triangle.c, triangle.a);\r\n        const normal = _tempVec3.crossVectors(edge0, edge1).normalize();\r\n        const NdD = normal.dot(this.direction);\r\n\r\n        let sqrDistance = 0;\r\n        let lineParameter = 0;\r\n\r\n        if (Math.abs(NdD) > 0) {\r\n\r\n            const diff = _tempVec4.subVectors(this.origin, triangle.a);\r\n            const basis: Vector3[] = [];  // {D, U, V}\r\n            basis[0] = _tempVec5.copy(this.direction);\r\n\r\n            Vector3.computeOrthogonalComplement(1, basis);\r\n\r\n            const UdE0 = basis[1].dot(edge0);\r\n            const UdE1 = basis[1].dot(edge1);\r\n            const UdDiff = basis[1].dot(diff);\r\n            const VdE0 = basis[2].dot(edge0);\r\n            const VdE1 = basis[2].dot(edge1);\r\n            const VdDiff = basis[2].dot(diff);\r\n            const invDet = 1 / (UdE0 * VdE1 - UdE1 * VdE0);\r\n\r\n            // Barycentric coordinates for the point of intersection.\r\n            const b1 = (VdE1 * UdDiff - UdE1 * VdDiff) * invDet;\r\n            const b2 = (UdE0 * VdDiff - VdE0 * UdDiff) * invDet;\r\n            const b0 = 1 - b1 - b2;\r\n\r\n            if (b0 >= 0 && b1 >= 0 && b2 >= 0) {\r\n\r\n                // Line parameter for the point of intersection.\r\n                const DdE0 = this.direction.dot(edge0);\r\n                const DdE1 = this.direction.dot(edge1);\r\n                const DdDiff = this.direction.dot(diff);\r\n                lineParameter = b1 * DdE0 + b2 * DdE1 - DdDiff;\r\n\r\n                // The intersection point is inside or on the triangle.\r\n                _tempVec6.copy(this.direction).multiplyScalar(lineParameter).add(this.origin);\r\n                _tempVec7.copy(triangle.a).add(edge0.multiplyScalar(b1)).add(edge1.multiplyScalar(b2));\r\n\r\n                if (closestPoint0) {\r\n                    closestPoint0.copy(_tempVec6);\r\n                }\r\n                if (closestPoint1) {\r\n                    closestPoint1.copy(_tempVec7);\r\n                }\r\n\r\n                if (parameter) {\r\n                    parameter.lineParameter = lineParameter;\r\n                    parameter.triangleParameter[0] = b0;\r\n                    parameter.triangleParameter[1] = b1;\r\n                    parameter.triangleParameter[2] = b2;\r\n                }\r\n\r\n                return sqrDistance;\r\n            }\r\n        }\r\n\r\n        sqrDistance = Infinity;\r\n\r\n        const line = new Line3(this.origin, this.direction);\r\n\r\n        for (let i0 = 2, i1 = 0; i1 < 3; i0 = i1++) {\r\n\r\n            const segCenter = _tempVec1.addVectors(triangle.p[i0], triangle.p[i1]).multiplyScalar(0.5);\r\n            const segDirection = _tempVec2.subVectors(triangle.p[i1], triangle.p[i0]);\r\n            const segExtent = 0.5 * segDirection.length();\r\n            segDirection.normalize();\r\n\r\n            const segment = new LineSegment3();\r\n            segment.setCenteredForm(segCenter, segDirection, segExtent);\r\n\r\n            const lsResult = {\r\n                parameter: [0, 0]\r\n            };\r\n            const segmentSqDistance = line.distanceSqToSegment(segment, _tempVec4, _tempVec5, lsResult);\r\n            if (segmentSqDistance < sqrDistance) {\r\n                sqrDistance = segmentSqDistance;\r\n                _tempVec6.copy(_tempVec4);\r\n                _tempVec7.copy(_tempVec5);\r\n\r\n                if (parameter) {\r\n                    parameter.lineParameter = lsResult.parameter[0];\r\n                    parameter.triangleParameter[i0] = 0.5 * (1 - lsResult.parameter[0] / segExtent);\r\n                    parameter.triangleParameter[i1] = 1 - parameter.triangleParameter[i0];\r\n                    parameter.triangleParameter[3 - i0 - i1] = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (closestPoint0) {\r\n            closestPoint0.copy(_tempVec6);\r\n        }\r\n        if (closestPoint1) {\r\n            closestPoint1.copy(_tempVec7);\r\n        }\r\n\r\n        return sqrDistance;\r\n    }\r\n\r\n    /**\r\n     * 到三角形的距离\r\n     * @param triangle\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceToTriangle(triangle: Triangle, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Line3TriangleDistance> = null): number {\r\n        return Math.sqrt(this.distanceSqToTriangle(triangle, closestPoint0, closestPoint1));\r\n    }\r\n\r\n    /**\r\n     * 到包围盒的SQ距离\r\n     * @param box\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceSqToBox(box: Box3, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Line3Box3Distance> = null): number {\r\n\r\n        const boxCenter = _tempVec1;\r\n        const boxExtent = _tempVec2;\r\n        box.getCenter(boxCenter);\r\n        box.getExtent(boxExtent);\r\n\r\n        const point = _tempVec3.subVectors(this.origin, boxCenter);\r\n        const direction = _tempVec4.copy(this.direction);\r\n\r\n        const result = {\r\n            sqrDistance: 0,\r\n            lineParameter: 0\r\n        };\r\n\r\n        const reflect = [];\r\n        for (let i = 0; i < 3; ++i) {\r\n            if (direction.p[i] < 0) {\r\n                point.p[i] =  -point.p[i];\r\n                direction.p[i] =  -direction.p[i];\r\n                reflect[i] = true;\r\n            }\r\n            else {\r\n                reflect[i] = false;\r\n            }\r\n        }\r\n\r\n        if (direction.x > 0) {\r\n            if (direction.y > 0) {\r\n                if (direction.z > 0) {\r\n                    // (+,+,+)\r\n                    DTBCaseNoZeros(point, direction, boxExtent, result);\r\n                }\r\n                else {\r\n                    // (+,+,0)\r\n                    DTBCase0(0, 1, 2, point, direction, boxExtent, result);\r\n                }\r\n            }\r\n            else {\r\n                if (direction.z > 0) {\r\n                    // (+,0,+)\r\n                    DTBCase0(0, 2, 1, point, direction, boxExtent, result);\r\n                }\r\n                else {\r\n                    // (+,0,0)\r\n                    DTBCase00(0, 1, 2, point, direction, boxExtent, result);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (direction.y > 0) {\r\n                if (direction.z > 0) {\r\n                    // (0,+,+)\r\n                    DTBCase0(1, 2, 0, point, direction, boxExtent, result);\r\n                }\r\n                else {\r\n                    // (0,+,0)\r\n                    DTBCase00(1, 0, 2, point, direction, boxExtent, result);\r\n                }\r\n            }\r\n            else {\r\n                if (direction.z > 0) {\r\n                    // (0,0,+)\r\n                    DTBCase00(2, 0, 1, point, direction, boxExtent, result);\r\n                }\r\n                else {\r\n                    // (0,0,0)\r\n                    DTBCase000(point, boxExtent, result);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < 3; ++i) {\r\n            if (reflect[i]) {\r\n                point.p[i] =  -point.p[i];\r\n            }\r\n        }\r\n\r\n        if (closestPoint0) {\r\n            closestPoint0.copy(this.direction).multiplyScalar(result.lineParameter).add(this.origin);\r\n        }\r\n        if (closestPoint1) {\r\n            closestPoint1.addVectors(boxCenter, point);\r\n        }\r\n        if (parameter) {\r\n            parameter.lineParameter = result.lineParameter;\r\n            parameter.sqrDistance = result.sqrDistance;\r\n        }\r\n        return result.sqrDistance;\r\n    }\r\n\r\n    /**\r\n     * 到包围盒的距离\r\n     * @param box\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceToBox(box: Box3, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Line3Box3Distance> = null): number {\r\n        return Math.sqrt(this.distanceSqToBox(box, closestPoint0, closestPoint1, parameter));\r\n    }\r\n\r\n    /**\r\n     * 到OBB的SQ距离\r\n     * @param box\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceSqToOBB(box: OBB, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Line3OBBDistance> = null): number {\r\n\r\n        const diff = _tempVec1.subVectors(this.origin, box.center);\r\n        const point = _tempVec2;\r\n        const direction = _tempVec3;\r\n        for (let i = 0; i < 3; ++i) {\r\n            point.p[i] = diff.dot(box.axis[i]);\r\n            direction.p[i] = this.direction.dot(box.axis[i]);\r\n        }\r\n\r\n        const boxExtent = box.getExtent(_tempVec4);\r\n\r\n        const result = {\r\n            sqrDistance: 0,\r\n            lineParameter: 0\r\n        };\r\n\r\n        const reflect = [];\r\n        for (let i = 0; i < 3; ++i) {\r\n            if (direction.p[i] < 0) {\r\n                point.p[i] =  -point.p[i];\r\n                direction.p[i] =  -direction.p[i];\r\n                reflect[i] = true;\r\n            }\r\n            else {\r\n                reflect[i] = false;\r\n            }\r\n        }\r\n\r\n        if (direction.x > 0) {\r\n            if (direction.y > 0) {\r\n                if (direction.z > 0) {\r\n                    // (+,+,+)\r\n                    DTBCaseNoZeros(point, direction, boxExtent, result);\r\n                }\r\n                else {\r\n                    // (+,+,0)\r\n                    DTBCase0(0, 1, 2, point, direction, boxExtent, result);\r\n                }\r\n            }\r\n            else {\r\n                if (direction.z > 0) {\r\n                    // (+,0,+)\r\n                    DTBCase0(0, 2, 1, point, direction, boxExtent, result);\r\n                }\r\n                else {\r\n                    // (+,0,0)\r\n                    DTBCase00(0, 1, 2, point, direction, boxExtent, result);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (direction.y > 0) {\r\n                if (direction.z > 0) {\r\n                    // (0,+,+)\r\n                    DTBCase0(1, 2, 0, point, direction, boxExtent, result);\r\n                }\r\n                else {\r\n                    // (0,+,0)\r\n                    DTBCase00(1, 0, 2, point, direction, boxExtent, result);\r\n                }\r\n            }\r\n            else {\r\n                if (direction.z > 0) {\r\n                    // (0,0,+)\r\n                    DTBCase00(2, 0, 1, point, direction, boxExtent, result);\r\n                }\r\n                else {\r\n                    // (0,0,0)\r\n                    DTBCase000(point, boxExtent, result);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < 3; ++i) {\r\n            if (reflect[i]) {\r\n                point.p[i] =  -point.p[i];\r\n            }\r\n        }\r\n\r\n        if (closestPoint0) {\r\n            closestPoint0.copy(this.direction).multiplyScalar(result.lineParameter).add(this.origin);\r\n        }\r\n        if (closestPoint1) {\r\n            closestPoint1.copy(box.center);\r\n\r\n            for (let i = 0; i < 3; ++i) {\r\n                closestPoint1.add(_tempVec5.copy(box.axis[i]).multiplyScalar(point.p[i]));\r\n            }\r\n        }\r\n        return result.sqrDistance;\r\n    }\r\n\r\n    /**\r\n     * 到OBB的距离\r\n     * @param box\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceToOBB(box: OBB, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Line3OBBDistance> = null): number {\r\n        return Math.sqrt(this.distanceSqToOBB(box, closestPoint0, closestPoint1, parameter));\r\n    }\r\n\r\n    /**\r\n     * 是否与三角形相交\r\n     * @param triangle\r\n     */\r\n    public intersectsTriangle(triangle: Triangle): boolean {\r\n\r\n        const diff = _tempVec1.subVectors(this.origin, triangle.p[0]);\r\n        const edge1 = _tempVec2.subVectors(triangle.p[1], triangle.p[0]);\r\n        const edge2 = _tempVec3.subVectors(triangle.p[2], triangle.p[0]);\r\n        const normal = _tempVec4.crossVectors(edge1, edge2);\r\n\r\n        let DdN = this.direction.dot(normal);\r\n        let sign;\r\n        if (DdN > 0) {\r\n            sign = 1;\r\n        }\r\n        else if (DdN < 0) {\r\n            sign = -1;\r\n            DdN = -DdN;\r\n        }\r\n        else {\r\n           return false;\r\n        }\r\n\r\n        const DdQxE2 = sign * this.direction.dotCross(diff, edge2);\r\n        if (DdQxE2 >= 0) {\r\n            const DdE1xQ = sign * this.direction.dotCross(edge1, diff);\r\n            if (DdE1xQ >= 0) {\r\n                if (DdQxE2 + DdE1xQ <= DdN) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 与三角形相交检测\r\n     * @param triangle\r\n     */\r\n    public intersectTriangle(triangle: Triangle): Line3TriangleIntersect {\r\n\r\n        const diff = _tempVec1.subVectors(this.origin, triangle.p[0]);\r\n        const edge1 = _tempVec2.subVectors(triangle.p[1], triangle.p[0]);\r\n        const edge2 = _tempVec3.subVectors(triangle.p[2], triangle.p[0]);\r\n        const normal = _tempVec4.crossVectors(edge1, edge2);\r\n\r\n        let DdN = this.direction.dot(normal);\r\n        let sign;\r\n        if (DdN > 0) {\r\n            sign = 1;\r\n        }\r\n        else if (DdN < 0) {\r\n            sign = -1;\r\n            DdN = -DdN;\r\n        }\r\n        else {\r\n            return {\r\n                intersect: false\r\n            };\r\n        }\r\n\r\n        const DdQxE2 = sign * this.direction.dotCross(diff, edge2);\r\n        if (DdQxE2 >= 0)\r\n        {\r\n            const DdE1xQ = sign * this.direction.dotCross(edge1, diff);\r\n            if (DdE1xQ >= 0)\r\n            {\r\n                if (DdQxE2 + DdE1xQ <= DdN)\r\n                {\r\n                    // Line intersects triangle.\r\n                    const QdN = -sign * diff.dot(normal);\r\n                    const inv = 1 / DdN;\r\n\r\n                    const result = {\r\n                        intersect: true,\r\n                        parameter: QdN * inv,\r\n                        triangleBary: new Array<number>(),\r\n                        point: new Vector3()\r\n                    };\r\n\r\n                    result.triangleBary[1] = DdQxE2 * inv;\r\n                    result.triangleBary[2] = DdE1xQ * inv;\r\n                    result.triangleBary[0] = 1 - result.triangleBary[1] - result.triangleBary[2];\r\n                    result.point.copy(this.direction).multiplyScalar(result.parameter).add(this.origin);\r\n                    return result;\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            intersect: false\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 是否与包围球相交\r\n     * @param sphere\r\n     */\r\n    public intersectsSphere(sphere: Sphere): boolean {\r\n\r\n        const diff = _tempVec1.subVectors(this.origin, sphere.center);\r\n        const a0 = diff.dot(diff) - sphere.radius * sphere.radius;\r\n        const a1 = this.direction.dot(diff);\r\n\r\n        // Intersection occurs when Q(t) has real roots.\r\n        const discr = a1 * a1 - a0;\r\n        return (discr >= 0);\r\n    }\r\n\r\n    /**\r\n     * 与包围球相交检测\r\n     * @param sphere\r\n     */\r\n    public intersectSphere(sphere: Sphere): Line3SphereIntersect {\r\n\r\n        const result = {\r\n            intersect: false,\r\n            numIntersections: 0,\r\n            parameter: new Array<number>(2),\r\n            point: new Array<Vector3>(2),\r\n        };\r\n\r\n        Line3.intersectSphere(this.origin, this.direction, sphere, result);\r\n\r\n        for (let i = 0; i < result.numIntersections; ++i) {\r\n            result.point[i] = new Vector3().copy(this.direction).multiplyScalar(result.parameter[i]).add(this.origin);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param lineOrigin\r\n     * @param lineDirection\r\n     * @param sphere\r\n     * @param result\r\n     */\r\n    public static intersectSphere(lineOrigin: Vector3, lineDirection: Vector3, sphere: Sphere, result: Line3SphereIntersect) {\r\n\r\n        const diff = _tempVec7.subVectors(lineOrigin, sphere.center);\r\n        const a0 = diff.dot(diff) - sphere.radius * sphere.radius;\r\n        const a1 = lineDirection.dot(diff);\r\n\r\n        // Intersection occurs when Q(t) has real roots.\r\n        const discr = a1 * a1 - a0;\r\n        if (discr > 0) {\r\n            result.intersect = true;\r\n            result.numIntersections = 2;\r\n            const root = Math.sqrt(discr);\r\n            result.parameter[0] = -a1 - root;\r\n            result.parameter[1] = -a1 + root;\r\n        }\r\n        else if (discr < 0) {\r\n            result.intersect = false;\r\n            result.numIntersections = 0;\r\n        }\r\n        else {\r\n            result.intersect = true;\r\n            result.numIntersections = 1;\r\n            result.parameter[0] = -a1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否与平面相交\r\n     * @param plane\r\n     */\r\n    public intersectsPlane(plane: Plane): boolean {\r\n\r\n        const DdN = this.direction.dot(plane.normal);\r\n        if (DdN != 0) {\r\n            return true;\r\n        }\r\n        else {\r\n            return plane.distanceToPoint(this.origin) == 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 与平面相交检测\r\n     * @param plane\r\n     */\r\n    public intersectPlane(plane: Plane): Line3PlaneIntersect {\r\n\r\n        const result = {\r\n            intersect: false,\r\n            numIntersections: 0,\r\n            parameter: 0,\r\n            point: new Vector3()\r\n        };\r\n\r\n        Line3.intersectPlane(this.origin, this.direction, plane, result);\r\n\r\n        if (result.intersect) {\r\n            result.point.copy(this.direction).multiplyScalar(result.parameter).add(this.origin);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param lineOrigin\r\n     * @param lineDirection\r\n     * @param plane\r\n     * @param result\r\n     */\r\n    public static intersectPlane(lineOrigin: Vector3, lineDirection: Vector3, plane: Plane, result: Line3PlaneIntersect) {\r\n\r\n        const DdN = lineDirection.dot(plane.normal);\r\n        const signedDistance = plane.distanceToPoint(lineOrigin);\r\n        const distance = Math.abs(signedDistance);\r\n\r\n        if (DdN != 0) {\r\n            result.intersect = true;\r\n            result.numIntersections = 1;\r\n            result.parameter = -signedDistance / DdN;\r\n        }\r\n        else\r\n        {\r\n            // The line and plane are parallel.  Determine whether the\r\n            // line is on the plane.\r\n            if (distance == 0) {\r\n                // The line is coincident with the plane, so choose t = 0\r\n                // for the parameter.\r\n                result.intersect = true;\r\n                result.numIntersections = Infinity;\r\n                result.parameter = 0;\r\n            }\r\n            else {\r\n                // The line is not on the plane.\r\n                result.intersect = false;\r\n                result.numIntersections = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否与包围盒相交\r\n     * @param box\r\n     */\r\n    public intersectsBox(box: Box3): boolean {\r\n\r\n        const boxCenter = box.getCenter(_tempVec1);\r\n        const boxExtent = box.getExtent(_tempVec2);\r\n\r\n        const lineOrigin = _tempVec3.subVectors(this.origin, boxCenter);\r\n        return Line3.intersectsBox(lineOrigin, this.direction, boxExtent);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param lineOrigin\r\n     * @param lineDirection\r\n     * @param boxExtent\r\n     */\r\n    public static intersectsBox(lineOrigin: Vector3, lineDirection: Vector3, boxExtent: Vector3): boolean {\r\n\r\n        const WxD = _tempVec7.crossVectors(lineDirection, lineOrigin);\r\n\r\n        const absWdU =\r\n            [\r\n                Math.abs(lineDirection.x),\r\n                Math.abs(lineDirection.y),\r\n                Math.abs(lineDirection.z)\r\n            ];\r\n\r\n        if (Math.abs(WxD.p[0]) > boxExtent.p[1] * absWdU[2] + boxExtent.p[2] * absWdU[1]) {\r\n            return false;\r\n        }\r\n\r\n        if (Math.abs(WxD.p[1]) > boxExtent.p[0] * absWdU[2] + boxExtent.p[2] * absWdU[0]) {\r\n            return false;\r\n        }\r\n\r\n        if (Math.abs(WxD.p[2]) > boxExtent.p[0] * absWdU[1] + boxExtent.p[1] * absWdU[0]) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 与包围盒相交检测\r\n     * @param box\r\n     */\r\n    public intersectBox(box: Box3): Line3Box3Intersect {\r\n\r\n        const boxCenter = box.getCenter(_tempVec1);\r\n        const boxExtent = box.getExtent(_tempVec2);\r\n\r\n        const lineOrigin = _tempVec3.subVectors(this.origin, boxCenter);\r\n\r\n        const result = {\r\n            intersect: false,\r\n            numPoints: 0,\r\n            lineParameter: new Array<number>(2),\r\n            point: new Array<Vector3>(2)\r\n        };\r\n\r\n         Line3.intersectBox(lineOrigin, this.direction, boxExtent, result);\r\n\r\n        for (let i = 0; i < result.numPoints; ++i) {\r\n            result.point[i] = new Vector3().copy(this.direction).multiplyScalar(result.lineParameter[i]).add(this.origin);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param lineOrigin\r\n     * @param lineDirection\r\n     * @param boxExtent\r\n     * @param result\r\n     */\r\n    public static intersectBox(lineOrigin: Vector3, lineDirection: Vector3, boxExtent: Vector3, result: Line3Box3Intersect): void {\r\n\r\n        const clip = (denom: number, numer: number, t: number[]): boolean => {\r\n\r\n            if (denom > 0) {\r\n                if (numer > denom * t[1]) {\r\n                    return false;\r\n                }\r\n                if (numer > denom * t[0]) {\r\n                    t[0] = numer / denom;\r\n                }\r\n                return true;\r\n            }\r\n            else if (denom < 0) {\r\n                if (numer > denom * t[0]) {\r\n                    return false;\r\n                }\r\n                if (numer > denom * t[1]) {\r\n                    t[1] = numer / denom;\r\n                }\r\n                return true;\r\n            }\r\n            else {\r\n                return numer <= 0;\r\n            }\r\n        };\r\n\r\n        const t = [-Infinity, Infinity];\r\n\r\n        if (clip(+lineDirection.p[0], -lineOrigin.p[0] - boxExtent.p[0], t) &&\r\n            clip(-lineDirection.p[0], +lineOrigin.p[0] - boxExtent.p[0], t) &&\r\n            clip(+lineDirection.p[1], -lineOrigin.p[1] - boxExtent.p[1], t) &&\r\n            clip(-lineDirection.p[1], +lineOrigin.p[1] - boxExtent.p[1], t) &&\r\n            clip(+lineDirection.p[2], -lineOrigin.p[2] - boxExtent.p[2], t) &&\r\n            clip(-lineDirection.p[2], +lineOrigin.p[2] - boxExtent.p[2], t))\r\n        {\r\n\r\n            result.intersect = true;\r\n\r\n            if (t[1] > t[0]) {\r\n                result.numPoints = 2;\r\n                result.lineParameter[0] = t[0];\r\n                result.lineParameter[1] = t[1];\r\n            }\r\n            else {\r\n                result.numPoints = 1;\r\n                result.lineParameter[0] = t[0];\r\n                result.lineParameter[1] = t[0];  // Used by derived classes.\r\n            }\r\n\r\n        }\r\n        else {\r\n\r\n            result.intersect = false;\r\n            result.numPoints = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否与OBB相交\r\n     * @param box\r\n     */\r\n    public intersectsOBB(box: OBB): boolean {\r\n\r\n        const diff = _tempVec1.subVectors(this.origin, box.center);\r\n        const lineOrigin = _tempVec2.set(diff.dot(box.axis[0]), diff.dot(box.axis[1]), diff.dot(box.axis[2]));\r\n        const lineDirection = _tempVec3.set(this.direction.dot(box.axis[0]), this.direction.dot(box.axis[1]), this.direction.dot(box.axis[2]));\r\n        const boxExtent = box.getExtent(_tempVec4);\r\n\r\n        return Line3.intersectsBox(lineOrigin, lineDirection, boxExtent);\r\n    }\r\n\r\n    /**\r\n     * 与OBB相交检测\r\n     * @param box\r\n     */\r\n    public intersectOBB(box: OBB): Line3OBBIntersect {\r\n\r\n        const diff = _tempVec1.subVectors(this.origin, box.center);\r\n        const lineOrigin = _tempVec2.set(diff.dot(box.axis[0]), diff.dot(box.axis[1]), diff.dot(box.axis[2]));\r\n        const lineDirection = _tempVec3.set(this.direction.dot(box.axis[0]), this.direction.dot(box.axis[1]), this.direction.dot(box.axis[2]));\r\n        const boxExtent = box.getExtent(_tempVec4);\r\n\r\n        const result = {\r\n            intersect: false,\r\n            numPoints: 0,\r\n            lineParameter: new Array<number>(2),\r\n            point: new Array<Vector3>(2)\r\n        };\r\n\r\n        Line3.intersectBox(lineOrigin, lineDirection, boxExtent, result);\r\n\r\n        for (let i = 0; i < result.numPoints; ++i) {\r\n            result.point[i] = new Vector3().copy(this.direction).multiplyScalar(result.lineParameter[i]).add(this.origin);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 乘以Matrix4矩阵\r\n     * @param matrix4\r\n     */\r\n    public applyMatrix4(matrix4: Matrix4): Line3 {\r\n        this.origin.applyMatrix4(matrix4);\r\n        matrix4.transformVector3(this.direction, this.direction);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 是否相等\r\n     * @param line\r\n     */\r\n    public equals(line: Line3): boolean {\r\n        return line.origin.equals(this.origin) && line.direction.equals(this.direction);\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst _tempPpE = new Array<number>(3);\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport function DTBFace(i0: number, i1: number, i2: number, pnt: Vector3, dir: Vector3, PmE: Vector3, boxExtent: Vector3, result: Line3Box3Distance) {\r\n\r\n    const PpE = _tempPpE;\r\n    PpE[0] = 0;\r\n    PpE[1] = 0;\r\n    PpE[2] = 0;\r\n\r\n    let lenSqr, inv, tmp, param, t, delta;\r\n\r\n    PpE[i1] = pnt.p[i1] + boxExtent.p[i1];\r\n    PpE[i2] = pnt.p[i2] + boxExtent.p[i2];\r\n\r\n    if (dir.p[i0] * PpE[i1] >= dir.p[i1] * PmE.p[i0])\r\n    {\r\n        if (dir.p[i0] * PpE[i2] >= dir.p[i2] * PmE.p[i0])\r\n        {\r\n            // v[i1] >= -e[i1], v[i2] >= -e[i2] (distance = 0)\r\n            pnt.p[i0] = boxExtent.p[i0];\r\n            inv = (1) / dir.p[i0];\r\n            pnt.p[i1] -= dir.p[i1] * PmE.p[i0] * inv;\r\n            pnt.p[i2] -= dir.p[i2] * PmE.p[i0] * inv;\r\n            result.lineParameter = -PmE.p[i0] * inv;\r\n        }\r\n        else\r\n        {\r\n            // v[i1] >= -e[i1], v[i2] < -e[i2]\r\n            lenSqr = dir.p[i0] * dir.p[i0] + dir.p[i2] * dir.p[i2];\r\n            tmp = lenSqr * PpE[i1] - dir.p[i1] * (dir.p[i0] * PmE.p[i0] + dir.p[i2] * PpE[i2]);\r\n            if (tmp <= (2) * lenSqr * boxExtent.p[i1])\r\n            {\r\n                t = tmp / lenSqr;\r\n                lenSqr += dir.p[i1] * dir.p[i1];\r\n                tmp = PpE[i1] - t;\r\n                delta = dir.p[i0] * PmE.p[i0] + dir.p[i1] * tmp + dir.p[i2] * PpE[i2];\r\n                param = -delta / lenSqr;\r\n                result.sqrDistance += PmE.p[i0] * PmE.p[i0] + tmp * tmp + PpE[i2] * PpE[i2] + delta * param;\r\n\r\n                result.lineParameter = param;\r\n                pnt.p[i0] = boxExtent.p[i0];\r\n                pnt.p[i1] = t - boxExtent.p[i1];\r\n                pnt.p[i2] = -boxExtent.p[i2];\r\n            }\r\n            else\r\n            {\r\n                lenSqr += dir.p[i1] * dir.p[i1];\r\n                delta = dir.p[i0] * PmE.p[i0] + dir.p[i1] * PmE.p[i1] + dir.p[i2] * PpE[i2];\r\n                param = -delta / lenSqr;\r\n                result.sqrDistance += PmE.p[i0] * PmE.p[i0] + PmE.p[i1] * PmE.p[i1] + PpE[i2] * PpE[i2] + delta * param;\r\n\r\n                result.lineParameter = param;\r\n                pnt.p[i0] = boxExtent.p[i0];\r\n                pnt.p[i1] = boxExtent.p[i1];\r\n                pnt.p[i2] = -boxExtent.p[i2];\r\n            }\r\n        }\r\n    }\r\n    else\r\n    {\r\n        if (dir.p[i0] * PpE[i2] >= dir.p[i2] * PmE.p[i0])\r\n        {\r\n            // v.p[i1] < -e.p[i1], v.p[i2] >= -e.p[i2]\r\n            lenSqr = dir.p[i0] * dir.p[i0] + dir.p[i1] * dir.p[i1];\r\n            tmp = lenSqr * PpE[i2] - dir.p[i2] * (dir.p[i0] * PmE.p[i0] + dir.p[i1] * PpE[i1]);\r\n            if (tmp <= (2) * lenSqr * boxExtent.p[i2])\r\n            {\r\n                t = tmp / lenSqr;\r\n                lenSqr += dir.p[i2] * dir.p[i2];\r\n                tmp = PpE[i2] - t;\r\n                delta = dir.p[i0] * PmE.p[i0] + dir.p[i1] * PpE[i1] + dir.p[i2] * tmp;\r\n                param = -delta / lenSqr;\r\n                result.sqrDistance += PmE.p[i0] * PmE.p[i0] + PpE[i1] * PpE[i1] + tmp * tmp + delta * param;\r\n\r\n                result.lineParameter = param;\r\n                pnt.p[i0] = boxExtent.p[i0];\r\n                pnt.p[i1] = -boxExtent.p[i1];\r\n                pnt.p[i2] = t - boxExtent.p[i2];\r\n            }\r\n            else\r\n            {\r\n                lenSqr += dir.p[i2] * dir.p[i2];\r\n                delta = dir.p[i0] * PmE.p[i0] + dir.p[i1] * PpE[i1] + dir.p[i2] * PmE.p[i2];\r\n                param = -delta / lenSqr;\r\n                result.sqrDistance += PmE.p[i0] * PmE.p[i0] + PpE[i1] * PpE[i1] + PmE.p[i2] * PmE.p[i2] + delta * param;\r\n\r\n                result.lineParameter = param;\r\n                pnt.p[i0] = boxExtent.p[i0];\r\n                pnt.p[i1] = -boxExtent.p[i1];\r\n                pnt.p[i2] = boxExtent.p[i2];\r\n            }\r\n        }\r\n        else\r\n        {\r\n            // v.p[i1] < -e.p[i1], v.p[i2] < -e.p[i2]\r\n            lenSqr = dir.p[i0] * dir.p[i0] + dir.p[i2] * dir.p[i2];\r\n            tmp = lenSqr * PpE[i1] - dir.p[i1] * (dir.p[i0] * PmE.p[i0] + dir.p[i2] * PpE[i2]);\r\n            if (tmp >= 0)\r\n            {\r\n                // v.p[i1]-edge is closest\r\n                if (tmp <= (2) * lenSqr * boxExtent.p[i1])\r\n                {\r\n                    t = tmp / lenSqr;\r\n                    lenSqr += dir.p[i1] * dir.p[i1];\r\n                    tmp = PpE[i1] - t;\r\n                    delta = dir.p[i0] * PmE.p[i0] + dir.p[i1] * tmp + dir.p[i2] * PpE[i2];\r\n                    param = -delta / lenSqr;\r\n                    result.sqrDistance += PmE.p[i0] * PmE.p[i0] + tmp * tmp + PpE[i2] * PpE[i2] + delta * param;\r\n\r\n                    result.lineParameter = param;\r\n                    pnt.p[i0] = boxExtent.p[i0];\r\n                    pnt.p[i1] = t - boxExtent.p[i1];\r\n                    pnt.p[i2] = -boxExtent.p[i2];\r\n                }\r\n                else\r\n                {\r\n                    lenSqr += dir.p[i1] * dir.p[i1];\r\n                    delta = dir.p[i0] * PmE.p[i0] + dir.p[i1] * PmE.p[i1] + dir.p[i2] * PpE[i2];\r\n                    param = -delta / lenSqr;\r\n                    result.sqrDistance += PmE.p[i0] * PmE.p[i0] + PmE.p[i1] * PmE.p[i1] + PpE[i2] * PpE[i2] + delta * param;\r\n\r\n                    result.lineParameter = param;\r\n                    pnt.p[i0] = boxExtent.p[i0];\r\n                    pnt.p[i1] = boxExtent.p[i1];\r\n                    pnt.p[i2] = -boxExtent.p[i2];\r\n                }\r\n                return;\r\n            }\r\n\r\n            lenSqr = dir.p[i0] * dir.p[i0] + dir.p[i1] * dir.p[i1];\r\n            tmp = lenSqr * PpE[i2] - dir.p[i2] * (dir.p[i0] * PmE.p[i0] + dir.p[i1] * PpE[i1]);\r\n            if (tmp >= 0)\r\n            {\r\n                // v.p[i2]-edge is closest\r\n                if (tmp <= (2) * lenSqr * boxExtent.p[i2])\r\n                {\r\n                    t = tmp / lenSqr;\r\n                    lenSqr += dir.p[i2] * dir.p[i2];\r\n                    tmp = PpE[i2] - t;\r\n                    delta = dir.p[i0] * PmE.p[i0] + dir.p[i1] * PpE[i1] + dir.p[i2] * tmp;\r\n                    param = -delta / lenSqr;\r\n                    result.sqrDistance += PmE.p[i0] * PmE.p[i0] + PpE[i1] * PpE[i1] + tmp * tmp + delta * param;\r\n\r\n                    result.lineParameter = param;\r\n                    pnt.p[i0] = boxExtent.p[i0];\r\n                    pnt.p[i1] = -boxExtent.p[i1];\r\n                    pnt.p[i2] = t - boxExtent.p[i2];\r\n                }\r\n                else\r\n                {\r\n                    lenSqr += dir.p[i2] * dir.p[i2];\r\n                    delta = dir.p[i0] * PmE.p[i0] + dir.p[i1] * PpE[i1] + dir.p[i2] * PmE.p[i2];\r\n                    param = -delta / lenSqr;\r\n                    result.sqrDistance += PmE.p[i0] * PmE.p[i0] + PpE[i1] * PpE[i1] + PmE.p[i2] * PmE.p[i2] + delta * param;\r\n\r\n                    result.lineParameter = param;\r\n                    pnt.p[i0] = boxExtent.p[i0];\r\n                    pnt.p[i1] = -boxExtent.p[i1];\r\n                    pnt.p[i2] = boxExtent.p[i2];\r\n                }\r\n                return;\r\n            }\r\n\r\n            // (v.p[i1],v.p[i2])-corner is closest\r\n            lenSqr += dir.p[i2] * dir.p[i2];\r\n            delta = dir.p[i0] * PmE.p[i0] + dir.p[i1] * PpE[i1] + dir.p[i2] * PpE[i2];\r\n            param = -delta / lenSqr;\r\n            result.sqrDistance += PmE.p[i0] * PmE.p[i0] + PpE[i1] * PpE[i1] + PpE[i2] * PpE[i2] + delta * param;\r\n\r\n            result.lineParameter = param;\r\n            pnt.p[i0] = boxExtent.p[i0];\r\n            pnt.p[i1] = -boxExtent.p[i1];\r\n            pnt.p[i2] = -boxExtent.p[i2];\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport function DTBCaseNoZeros(pnt: Vector3, dir: Vector3, boxExtent: Vector3, result: Line3Box3Distance) {\r\n\r\n    const PmE = _tempVec7.subVectors(pnt, boxExtent);\r\n    let prodDxPy = dir.p[0] * PmE.p[1];\r\n    let prodDyPx = dir.p[1] * PmE.p[0];\r\n    let prodDzPx, prodDxPz, prodDzPy, prodDyPz;\r\n\r\n    if (prodDyPx >= prodDxPy)\r\n    {\r\n        prodDzPx = dir.p[2] * PmE.p[0];\r\n        prodDxPz = dir.p[0] * PmE.p[2];\r\n        if (prodDzPx >= prodDxPz)\r\n        {\r\n            // line intersects x = e0\r\n            DTBFace(0, 1, 2, pnt, dir, PmE, boxExtent, result);\r\n        }\r\n        else\r\n        {\r\n            // line intersects z = e2\r\n            DTBFace(2, 0, 1, pnt, dir, PmE, boxExtent, result);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        prodDzPy = dir.p[2] * PmE.p[1];\r\n        prodDyPz = dir.p[1] * PmE.p[2];\r\n        if (prodDzPy >= prodDyPz)\r\n        {\r\n            // line intersects y = e1\r\n            DTBFace(1, 2, 0, pnt, dir, PmE, boxExtent, result);\r\n        }\r\n        else\r\n        {\r\n            // line intersects z = e2\r\n            DTBFace(2, 0, 1, pnt, dir, PmE, boxExtent, result);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport function DTBCase0(i0: number, i1: number, i2: number, pnt: Vector3, dir: Vector3, boxExtent: Vector3, result: Line3Box3Distance) {\r\n\r\n    let PmE0 = pnt.p[i0] - boxExtent.p[i0];\r\n    let PmE1 = pnt.p[i1] - boxExtent.p[i1];\r\n    let prod0 = dir.p[i1] * PmE0;\r\n    let prod1 = dir.p[i0] * PmE1;\r\n    let delta, invLSqr, inv;\r\n\r\n    if (prod0 >= prod1)\r\n    {\r\n        pnt.p[i0] = boxExtent.p[i0];\r\n\r\n        let PpE1 = pnt.p[i1] + boxExtent.p[i1];\r\n        delta = prod0 - dir.p[i0] * PpE1;\r\n        if (delta >= 0)\r\n        {\r\n            invLSqr = (1) / (dir.p[i0] * dir.p[i0] + dir.p[i1] * dir.p[i1]);\r\n            result.sqrDistance += delta * delta * invLSqr;\r\n            pnt.p[i1] = -boxExtent.p[i1];\r\n            result.lineParameter = -(dir.p[i0] * PmE0 + dir.p[i1] * PpE1) * invLSqr;\r\n        }\r\n        else\r\n        {\r\n            inv = (1) / dir.p[i0];\r\n            pnt.p[i1] -= prod0 * inv;\r\n            result.lineParameter = -PmE0 * inv;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        // line intersects P.p[i1] = e.p[i1]\r\n        pnt.p[i1] = boxExtent.p[i1];\r\n\r\n        let PpE0 = pnt.p[i0] + boxExtent.p[i0];\r\n        delta = prod1 - dir.p[i1] * PpE0;\r\n        if (delta >= 0)\r\n        {\r\n            invLSqr = (1) / (dir.p[i0] * dir.p[i0] + dir.p[i1] * dir.p[i1]);\r\n            result.sqrDistance += delta * delta * invLSqr;\r\n            pnt.p[i0] = -boxExtent.p[i0];\r\n            result.lineParameter = -(dir.p[i0] * PpE0 + dir.p[i1] * PmE1) * invLSqr;\r\n        }\r\n        else\r\n        {\r\n            inv = (1) / dir.p[i1];\r\n            pnt.p[i0] -= prod1 * inv;\r\n            result.lineParameter = -PmE1 * inv;\r\n        }\r\n    }\r\n\r\n    if (pnt.p[i2] < -boxExtent.p[i2])\r\n    {\r\n        delta = pnt.p[i2] + boxExtent.p[i2];\r\n        result.sqrDistance += delta * delta;\r\n        pnt.p[i2] = -boxExtent.p[i2];\r\n    }\r\n    else if (pnt.p[i2] > boxExtent.p[i2])\r\n    {\r\n        delta = pnt.p[i2] - boxExtent.p[i2];\r\n        result.sqrDistance += delta * delta;\r\n        pnt.p[i2] = boxExtent.p[i2];\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport function DTBCase00(i0: number, i1: number, i2: number, pnt: Vector3, dir: Vector3, boxExtent: Vector3, result: Line3Box3Distance) {\r\n\r\n    let delta;\r\n\r\n    result.lineParameter = (boxExtent.p[i0] - pnt.p[i0]) / dir.p[i0];\r\n\r\n    pnt.p[i0] = boxExtent.p[i0];\r\n\r\n    if (pnt.p[i1] < -boxExtent.p[i1])\r\n    {\r\n        delta = pnt.p[i1] + boxExtent.p[i1];\r\n        result.sqrDistance += delta * delta;\r\n        pnt.p[i1] = -boxExtent.p[i1];\r\n    }\r\n    else if (pnt.p[i1] > boxExtent.p[i1])\r\n    {\r\n        delta = pnt.p[i1] - boxExtent.p[i1];\r\n        result.sqrDistance += delta * delta;\r\n        pnt.p[i1] = boxExtent.p[i1];\r\n    }\r\n\r\n    if (pnt.p[i2] < -boxExtent.p[i2])\r\n    {\r\n        delta = pnt.p[i2] + boxExtent.p[i2];\r\n        result.sqrDistance += delta * delta;\r\n        pnt.p[i2] = -boxExtent.p[i2];\r\n    }\r\n    else if (pnt.p[i2] > boxExtent.p[i2])\r\n    {\r\n        delta = pnt.p[i2] - boxExtent.p[i2];\r\n        result.sqrDistance += delta * delta;\r\n        pnt.p[i2] = boxExtent.p[i2];\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport function DTBCase000(pnt: Vector3, boxExtent: Vector3, result: Line3Box3Distance) {\r\n\r\n    let delta;\r\n\r\n    if (pnt.p[0] < -boxExtent.p[0])\r\n    {\r\n        delta = pnt.p[0] + boxExtent.p[0];\r\n        result.sqrDistance += delta * delta;\r\n        pnt.p[0] = -boxExtent.p[0];\r\n    }\r\n    else if (pnt.p[0] > boxExtent.p[0])\r\n    {\r\n        delta = pnt.p[0] - boxExtent.p[0];\r\n        result.sqrDistance += delta * delta;\r\n        pnt.p[0] = boxExtent.p[0];\r\n    }\r\n\r\n    if (pnt.p[1] < -boxExtent.p[1])\r\n    {\r\n        delta = pnt.p[1] + boxExtent.p[1];\r\n        result.sqrDistance += delta * delta;\r\n        pnt.p[1] = -boxExtent.p[1];\r\n    }\r\n    else if (pnt.p[1] > boxExtent.p[1])\r\n    {\r\n        delta = pnt.p[1] - boxExtent.p[1];\r\n        result.sqrDistance += delta * delta;\r\n        pnt.p[1] = boxExtent.p[1];\r\n    }\r\n\r\n    if (pnt.p[2] < -boxExtent.p[2])\r\n    {\r\n        delta = pnt.p[2] + boxExtent.p[2];\r\n        result.sqrDistance += delta * delta;\r\n        pnt.p[2] = -boxExtent.p[2];\r\n    }\r\n    else if (pnt.p[2] > boxExtent.p[2])\r\n    {\r\n        delta = pnt.p[2] - boxExtent.p[2];\r\n        result.sqrDistance += delta * delta;\r\n        pnt.p[2] = boxExtent.p[2];\r\n    }\r\n}\r\n",
        "import { Curve } from \"./Curve\";\r\nimport { Vector2 } from \"../Vector2\";\r\nimport { Nullable } from \"../../types\";\r\nimport { BinaryBuffer } from \"../../Misc/BinaryBuffer\";\r\n\r\n/**\r\n * 2D直线路径\r\n * @category Curve\r\n */\r\nexport class LineCurve extends Curve<Vector2> {\r\n\r\n    public v1: Vector2 = new Vector2();\r\n    public v2: Vector2 = new Vector2();\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param v1\r\n     * @param v2\r\n     */\r\n    constructor(v1: Nullable<Vector2> = null, v2: Nullable<Vector2> = null) {\r\n        super();\r\n\r\n        this.type = 'LineCurve';\r\n        this.arcLengthDivisions = 10;\r\n\r\n        if (v1) { this.v1.copy(v1); }\r\n        if (v2) { this.v2.copy(v2); }\r\n    }\r\n\r\n    /**\r\n     * 获取点\r\n     * @param t\r\n     * @param optionalTarget\r\n     */\r\n    public getPoint(t: number, optionalTarget: Nullable<Vector2> = null): Vector2 {\r\n        const point = optionalTarget ?? new Vector2();\r\n\r\n        if (t == 1) {\r\n            point.copy(this.v2);\r\n        } else {\r\n            point.copy(this.v2).sub(this.v1);\r\n            point.multiplyScalar(t).add(this.v1);\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * 获取点\r\n     * @param u\r\n     * @param optionalTarget\r\n     */\r\n    public getPointAt(u: number, optionalTarget: Nullable<Vector2> = null): Vector2 {\r\n        return this.getPoint(u, optionalTarget);\r\n    }\r\n\r\n    /**\r\n     * 获取切线\r\n     * @param t\r\n     * @param optionalTarget\r\n     */\r\n    public getTangent(t: number, optionalTarget: Nullable<Vector2> = null): Vector2 {\r\n        const tangent = optionalTarget ?? new Vector2();\r\n        tangent.copy(this.v2).sub(this.v1).normalize();\r\n        return tangent;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): LineCurve {\r\n        return new LineCurve().copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: LineCurve): LineCurve {\r\n        super.copy(source);\r\n\r\n        this.v1.copy(source.v1);\r\n        this.v2.copy(source.v2);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 序列化JSON\r\n     */\r\n    public toJSON(): any {\r\n        const data = super.toJSON();\r\n        data.v1 = this.v1.toArray();\r\n        data.v2 = this.v2.toArray();\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * 反序列化JSON\r\n     * @param json\r\n     */\r\n    public fromJSON(json: any): LineCurve {\r\n        super.fromJSON(json);\r\n\r\n        this.v1.fromArray(json.v1);\r\n        this.v2.fromArray(json.v2);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public toDataBuffer(dataBuffer: BinaryBuffer): LineCurve {\r\n        super.toDataBuffer(dataBuffer);\r\n\r\n        this.v1.toDataBuffer(dataBuffer);\r\n        this.v2.toDataBuffer(dataBuffer);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 反序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public fromDataBuffer(dataBuffer: BinaryBuffer): LineCurve {\r\n        super.fromDataBuffer(dataBuffer);\r\n\r\n        this.v1.fromDataBuffer(dataBuffer);\r\n        this.v2.fromDataBuffer(dataBuffer);\r\n        return this;\r\n    }\r\n}\r\n",
        "import { Curve } from \"./Curve\";\r\nimport { Vector2 } from \"../Vector2\";\r\nimport { Nullable } from \"../../types\";\r\nimport { BezierCurveFunc } from \"./BezierCurveFunc\";\r\nimport { BinaryBuffer } from \"../../Misc\";\r\n\r\n/**\r\n * 样条曲线路径\r\n * @category Curve\r\n */\r\nexport class SplineCurve extends Curve<Vector2> {\r\n\r\n    public points: Vector2[];\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param points\r\n     */\r\n    constructor(points: Nullable<Vector2[]> = null) {\r\n        super();\r\n\r\n        this.type = 'SplineCurve';\r\n        this.points = points ?? [];\r\n    }\r\n\r\n    /**\r\n     * 获取点\r\n     * @param t\r\n     * @param optionalTarget\r\n     */\r\n    public getPoint(t: number, optionalTarget: Nullable<Vector2> = null): Vector2 {\r\n\r\n        let point = optionalTarget || new Vector2();\r\n\r\n        let points = this.points;\r\n        let p = (points.length - 1) * t;\r\n\r\n        let intPoint = Math.floor(p);\r\n        let weight = p - intPoint;\r\n\r\n        let p0 = points[intPoint == 0 ? intPoint : intPoint - 1];\r\n        let p1 = points[intPoint];\r\n        let p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\r\n        let p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\r\n\r\n        point.set(\r\n            BezierCurveFunc.CatmullRom(weight, p0.x, p1.x, p2.x, p3.x),\r\n            BezierCurveFunc.CatmullRom(weight, p0.y, p1.y, p2.y, p3.y),\r\n        );\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): SplineCurve {\r\n        return new SplineCurve(this.points);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: SplineCurve): SplineCurve {\r\n        super.copy(source);\r\n\r\n        this.points = [];\r\n        for (let i = 0, l = source.points.length; i < l; i++) {\r\n            let point = source.points[i];\r\n            this.points.push(point.clone());\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 序列化JSON\r\n     */\r\n    public toJSON(): any {\r\n        const data = super.toJSON();\r\n        data.points = [];\r\n\r\n        for (let i = 0, l = this.points.length; i < l; i++) {\r\n            let point = this.points[i];\r\n            data.points.push(point.toArray());\r\n        }\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * 反序列化JSON\r\n     * @param json\r\n     */\r\n    public fromJSON(json: any): SplineCurve {\r\n        super.fromJSON(json);\r\n\r\n        this.points = [];\r\n\r\n        for (let i = 0, l = json.points.length; i < l; i++) {\r\n            let point = json.points[i];\r\n            this.points.push(new Vector2().fromArray(point));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public toDataBuffer(dataBuffer: BinaryBuffer): SplineCurve {\r\n        super.toDataBuffer(dataBuffer);\r\n\r\n        dataBuffer.writeUint16(this.points.length);\r\n        this.points.forEach((point) => point.toDataBuffer(dataBuffer));\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 反序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public fromDataBuffer(dataBuffer: BinaryBuffer): SplineCurve {\r\n        super.fromDataBuffer(dataBuffer);\r\n\r\n        const count = dataBuffer.readUint16();\r\n        for (let i = 0; i < count; ++i) {\r\n            this.points.push(new Vector2().fromDataBuffer(dataBuffer));\r\n        }\r\n        return this;\r\n    }\r\n}\r\n",
        "import { CSGVector2D } from './CSGVector2D';\r\nimport { CSGVector3D } from './CSGVector3D';\r\nimport { CSGPlane } from './CSGPlane';\r\nimport { CSGLine3D } from './CSGLine3D';\r\nimport { CSGLine2D } from './CSGLine2D';\r\nimport { CSGMatrix4x4 } from './CSGMatrix4x4';\r\nimport { CSG } from './CSG';\r\n\r\n/**\r\n * 垂直向量基础类\r\n */\r\nexport class CSGOrthoNormalBasis {\r\n    /**\r\n     * 垂直轴\r\n     */\r\n    public v : CSGVector3D;\r\n\r\n    /**\r\n     * 水平轴\r\n     */\r\n    public u : CSGVector3D;\r\n\r\n    /**\r\n     * 平面\r\n     */\r\n    public plane : CSGPlane;\r\n\r\n    /**\r\n     * 平面起点\r\n     */\r\n    public planeorigin : CSGVector3D;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param plane\r\n     * @param rightvector\r\n     */\r\n    constructor(plane: CSGPlane, rightvector?: CSGVector3D) {\r\n        if (arguments.length < 2) {\r\n            // choose an arbitrary right hand vector, making sure it is somewhat orthogonal to the plane normal:\r\n            rightvector = plane.normal.randomNonParallelVector();\r\n        } else {\r\n            rightvector = new CSGVector3D(rightvector);\r\n        }\r\n        this.v = plane.normal.cross(rightvector).unit();\r\n        this.u = this.v.cross(plane.normal);\r\n        this.plane = plane;\r\n        this.planeorigin = plane.normal.times(plane.w);\r\n    }\r\n\r\n    // Get an orthonormal basis for the standard XYZ planes.\r\n    // Parameters: the names of two 3D axes. The 2d x axis will map to the first given 3D axis, the 2d y\r\n    // axis will map to the second.\r\n    // Prepend the axis with a \"-\" to invert the direction of this axis.\r\n    // For example: CSG.OrthoNormalBasis.GetCartesian(\"-Y\",\"Z\")\r\n    //   will return an orthonormal basis where the 2d X axis maps to the 3D inverted Y axis, and\r\n    //   the 2d Y axis maps to the 3D Z axis.\r\n    /**\r\n     * 获取标准XYZ平面的正交基准\r\n     * @param xaxisid\r\n     * @param yaxisid\r\n     * @constructor\r\n     */\r\n    static GetCartesian(xaxisid: any, yaxisid: any): CSGOrthoNormalBasis {\r\n        let axisid = `${xaxisid}/${yaxisid}`;\r\n        let planenormal; let\r\n            rightvector;\r\n        if (axisid == 'X/Y') {\r\n            planenormal = [0, 0, 1];\r\n            rightvector = [1, 0, 0];\r\n        } else if (axisid == 'Y/-X') {\r\n            planenormal = [0, 0, 1];\r\n            rightvector = [0, 1, 0];\r\n        } else if (axisid == '-X/-Y') {\r\n            planenormal = [0, 0, 1];\r\n            rightvector = [-1, 0, 0];\r\n        } else if (axisid == '-Y/X') {\r\n            planenormal = [0, 0, 1];\r\n            rightvector = [0, -1, 0];\r\n        } else if (axisid == '-X/Y') {\r\n            planenormal = [0, 0, -1];\r\n            rightvector = [-1, 0, 0];\r\n        } else if (axisid == '-Y/-X') {\r\n            planenormal = [0, 0, -1];\r\n            rightvector = [0, -1, 0];\r\n        } else if (axisid == 'X/-Y') {\r\n            planenormal = [0, 0, -1];\r\n            rightvector = [1, 0, 0];\r\n        } else if (axisid == 'Y/X') {\r\n            planenormal = [0, 0, -1];\r\n            rightvector = [0, 1, 0];\r\n        } else if (axisid == 'X/Z') {\r\n            planenormal = [0, -1, 0];\r\n            rightvector = [1, 0, 0];\r\n        } else if (axisid == 'Z/-X') {\r\n            planenormal = [0, -1, 0];\r\n            rightvector = [0, 0, 1];\r\n        } else if (axisid == '-X/-Z') {\r\n            planenormal = [0, -1, 0];\r\n            rightvector = [-1, 0, 0];\r\n        } else if (axisid == '-Z/X') {\r\n            planenormal = [0, -1, 0];\r\n            rightvector = [0, 0, -1];\r\n        } else if (axisid == '-X/Z') {\r\n            planenormal = [0, 1, 0];\r\n            rightvector = [-1, 0, 0];\r\n        } else if (axisid == '-Z/-X') {\r\n            planenormal = [0, 1, 0];\r\n            rightvector = [0, 0, -1];\r\n        } else if (axisid == 'X/-Z') {\r\n            planenormal = [0, 1, 0];\r\n            rightvector = [1, 0, 0];\r\n        } else if (axisid == 'Z/X') {\r\n            planenormal = [0, 1, 0];\r\n            rightvector = [0, 0, 1];\r\n        } else if (axisid == 'Y/Z') {\r\n            planenormal = [1, 0, 0];\r\n            rightvector = [0, 1, 0];\r\n        } else if (axisid == 'Z/-Y') {\r\n            planenormal = [1, 0, 0];\r\n            rightvector = [0, 0, 1];\r\n        } else if (axisid == '-Y/-Z') {\r\n            planenormal = [1, 0, 0];\r\n            rightvector = [0, -1, 0];\r\n        } else if (axisid == '-Z/Y') {\r\n            planenormal = [1, 0, 0];\r\n            rightvector = [0, 0, -1];\r\n        } else if (axisid == '-Y/Z') {\r\n            planenormal = [-1, 0, 0];\r\n            rightvector = [0, -1, 0];\r\n        } else if (axisid == '-Z/-Y') {\r\n            planenormal = [-1, 0, 0];\r\n            rightvector = [0, 0, -1];\r\n        } else if (axisid == 'Y/-Z') {\r\n            planenormal = [-1, 0, 0];\r\n            rightvector = [0, 1, 0];\r\n        } else if (axisid == 'Z/Y') {\r\n            planenormal = [-1, 0, 0];\r\n            rightvector = [0, 0, 1];\r\n        } else {\r\n            throw new Error('CSG.OrthoNormalBasis.GetCartesian: invalid combination of axis identifiers. Should pass two string arguments from [X,Y,Z,-X,-Y,-Z], being two different axes.');\r\n        }\r\n        return new CSGOrthoNormalBasis(new CSGPlane(new CSGVector3D(planenormal), 0), new CSGVector3D(rightvector));\r\n    }\r\n\r\n    // The z=0 plane, with the 3D x and y vectors mapped to the 2D x and y vector\r\n    /**\r\n     * Z平面\r\n     * @constructor\r\n     */\r\n    static Z0Plane() {\r\n        let plane = new CSGPlane(new CSGVector3D([0, 0, 1]), 0);\r\n        return new CSGOrthoNormalBasis(plane, new CSGVector3D([1, 0, 0]));\r\n    }\r\n\r\n    /**\r\n     * 获取投影矩阵\r\n     */\r\n    public getProjectionMatrix() {\r\n        return new CSGMatrix4x4([\r\n            this.u.x, this.v.x, this.plane.normal.x, 0,\r\n            this.u.y, this.v.y, this.plane.normal.y, 0,\r\n            this.u.z, this.v.z, this.plane.normal.z, 0,\r\n            0, 0, -this.plane.w, 1,\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * 获取翻转投影矩阵\r\n     */\r\n    public getInverseProjectionMatrix() {\r\n        let p = this.plane.normal.times(this.plane.w);\r\n        return new CSGMatrix4x4([\r\n            this.u.x, this.u.y, this.u.z, 0,\r\n            this.v.x, this.v.y, this.v.z, 0,\r\n            this.plane.normal.x, this.plane.normal.y, this.plane.normal.z, 0,\r\n            p.x, p.y, p.z, 1,\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * 转为2D\r\n     * @param vec3\r\n     */\r\n    public to2D(vec3: CSGVector3D) {\r\n        return new CSGVector2D(vec3.dot(this.u), vec3.dot(this.v));\r\n    }\r\n\r\n    /**\r\n     * 转为3D\r\n     * @param vec2\r\n     */\r\n    public to3D(vec2: any): CSGVector3D {\r\n        return this.planeorigin.plus(this.u.times(vec2.x)).plus(this.v.times(vec2.y));\r\n    }\r\n\r\n    /**\r\n     * 3D线段转2D线段\r\n     * @param line3d\r\n     */\r\n    public line3Dto2D(line3d: CSGLine3D): CSGLine2D {\r\n        let a = line3d.point;\r\n        let b = line3d.direction.plus(a);\r\n        let a2d = this.to2D(a);\r\n        let b2d = this.to2D(b);\r\n        return CSGLine2D.fromPoints(a2d, b2d);\r\n    }\r\n\r\n    /**\r\n     * 2D线段转3D线段\r\n     * @param line2d\r\n     */\r\n    public line2Dto3D(line2d: CSGLine2D): CSGLine3D {\r\n        let a = line2d.origin();\r\n        let b = line2d.direction().plus(a);\r\n        let a3d = this.to3D(a);\r\n        let b3d = this.to3D(b);\r\n        return CSGLine3D.fromPoints(a3d, b3d);\r\n    }\r\n\r\n    /**\r\n     * 转换\r\n     * @param matrix4x4\r\n     */\r\n    public transform(matrix4x4: CSGMatrix4x4): CSGOrthoNormalBasis {\r\n        let newplane = this.plane.transform(matrix4x4);\r\n        let rightpoint_transformed = this.u.transform(matrix4x4);\r\n        let origin_transformed = new CSGVector3D(0, 0, 0).transform(matrix4x4);\r\n        let newrighthandvector = rightpoint_transformed.minus(origin_transformed);\r\n        let newbasis = new CSGOrthoNormalBasis(newplane, newrighthandvector);\r\n        return newbasis;\r\n    }\r\n\r\n    /**\r\n     * 镜像\r\n     * @param plane\r\n     */\r\n    public mirrored(plane: CSGPlane): CSGOrthoNormalBasis {\r\n        return this.transform(CSGMatrix4x4.mirroring(plane));\r\n    }\r\n\r\n    /**\r\n     * X轴镜像\r\n     */\r\n    public mirroredX(): CSGOrthoNormalBasis {\r\n        let plane = new CSGPlane(CSGVector3D.Create(1, 0, 0), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * Y轴镜像\r\n     */\r\n    public mirroredY(): CSGOrthoNormalBasis {\r\n        let plane = new CSGPlane(CSGVector3D.Create(0, 1, 0), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * Z轴镜像\r\n     */\r\n    public mirroredZ(): CSGOrthoNormalBasis {\r\n        let plane = new CSGPlane(CSGVector3D.Create(0, 0, 1), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * 转化\r\n     * @param v\r\n     */\r\n    public translate(v: any): CSGOrthoNormalBasis {\r\n        return this.transform(CSGMatrix4x4.translation(v));\r\n    }\r\n\r\n    /**\r\n     * 缩放\r\n     * @param f\r\n     */\r\n    public scale(f: any): CSGOrthoNormalBasis {\r\n        return this.transform(CSGMatrix4x4.scaling(f));\r\n    }\r\n\r\n    /**\r\n     * X轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateX(deg: any): CSGOrthoNormalBasis {\r\n        return this.transform(CSGMatrix4x4.rotationX(deg));\r\n    }\r\n\r\n    /**\r\n     * Y轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateY(deg: any): CSGOrthoNormalBasis {\r\n        return this.transform(CSGMatrix4x4.rotationY(deg));\r\n    }\r\n\r\n    /**\r\n     * Z轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateZ(deg: any): CSGOrthoNormalBasis {\r\n        return this.transform(CSGMatrix4x4.rotationZ(deg));\r\n    }\r\n\r\n    /**\r\n     * 旋转\r\n     * @param rotationCenter\r\n     * @param rotationAxis\r\n     * @param degrees\r\n     */\r\n    public rotate(rotationCenter: any, rotationAxis: any, degrees: number): CSGOrthoNormalBasis {\r\n        return this.transform(CSGMatrix4x4.rotation(rotationCenter, rotationAxis, degrees));\r\n    }\r\n\r\n    /**\r\n     * 旋转欧拉角\r\n     * @param alpha\r\n     * @param beta\r\n     * @param gamma\r\n     * @param position\r\n     */\r\n    public rotateEulerAngles(alpha: number, beta: number, gamma: number, position: any): CSGOrthoNormalBasis {\r\n        position = position || [0, 0, 0];\r\n        let Rz1 = CSGMatrix4x4.rotationZ(alpha);\r\n        let Rx = CSGMatrix4x4.rotationX(beta);\r\n        let Rz2 = CSGMatrix4x4.rotationZ(gamma);\r\n        let T = CSGMatrix4x4.translation(new CSGVector3D(position));\r\n        return this.transform(Rz2.multiply(Rx).multiply(Rz1).multiply(T));\r\n    }\r\n}\r\n",
        "import { TransformObject } from \"../Scene/TransformObject\";\r\nimport { Frustum, Matrix4 } from \"../Math\";\r\nimport { AbstractObject, Scene } from \"../Scene\";\r\nimport { Nullable } from \"../types\";\r\nimport { Viewport } from \"../Math/Viewport\";\r\n\r\n/**\r\n * 摄像机\r\n * @category Camera\r\n */\r\nexport abstract class Camera extends TransformObject {\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _viewport: Viewport = new Viewport(0, 0, 1, 1);\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _frustum: Frustum = new Frustum();\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _projectionMatrix: Matrix4 = new Matrix4();\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _projectionMatrixInverse: Matrix4 = new Matrix4();\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _viewProjectionMatrix: Matrix4 = new Matrix4();\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _viewProjectionMatrixInverse: Matrix4 = new Matrix4();\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _needsUpdateCameraMatrix: boolean = true;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param scene\r\n     * @param activeIfNoneActive\r\n     * @param parent\r\n     * @param name\r\n     * @protected\r\n     */\r\n    protected constructor(scene: Scene, activeIfNoneActive: boolean = true, parent: Nullable<AbstractObject> = null, name: string = '') {\r\n        super(scene, parent, name);\r\n\r\n        this._visibleLayers.enableAll();\r\n\r\n        this.scene.addCamera(this);\r\n\r\n        if (activeIfNoneActive && !this.scene.activeCamera) {\r\n            this.scene.activeCamera = this;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 视口\r\n     */\r\n    public get viewport() {\r\n        return this._viewport;\r\n    }\r\n    public set viewport(value) {\r\n        this._viewport = value;\r\n    }\r\n\r\n    public get frustum() {\r\n        if (this._needsUpdateCameraMatrix) {\r\n            this.updateProjectionMatrix();\r\n        }\r\n        return this._frustum;\r\n    }\r\n\r\n    /**\r\n     * 投影矩阵PM\r\n     */\r\n    public get projectionMatrix() {\r\n        if (this._needsUpdateCameraMatrix) {\r\n            this.updateProjectionMatrix();\r\n        }\r\n        return this._projectionMatrix;\r\n    }\r\n\r\n    /**\r\n     * 投影逆矩阵IPM\r\n     */\r\n    public get projectionMatrixInverse() {\r\n        if (this._needsUpdateCameraMatrix) {\r\n            this.updateProjectionMatrix();\r\n        }\r\n        return this._projectionMatrixInverse;\r\n    }\r\n\r\n    /**\r\n     * VP矩阵\r\n     */\r\n    public get viewProjectionMatrix() {\r\n        if (this._needsUpdateCameraMatrix) {\r\n            this.updateProjectionMatrix();\r\n        }\r\n        return this._viewProjectionMatrix;\r\n    }\r\n\r\n    /**\r\n     * IVP矩阵\r\n     */\r\n    public get viewProjectionMatrixInverse() {\r\n        if (this._needsUpdateCameraMatrix) {\r\n            this.updateProjectionMatrix();\r\n        }\r\n        return this._viewProjectionMatrixInverse;\r\n    }\r\n\r\n    /**\r\n     * 更新投影矩阵\r\n     */\r\n    public abstract updateProjectionMatrix(): void;\r\n\r\n    /**\r\n     * @ignore\r\n     * @param oldValue\r\n     * @param newValue\r\n     * @protected\r\n     */\r\n    protected onMatrixWorldChanged(oldValue: Matrix4, newValue: Matrix4) {\r\n        super.onMatrixWorldChanged(oldValue, newValue);\r\n        this._needsUpdateCameraMatrix = true;\r\n    }\r\n}\r\n",
        "/**\r\n * 平面与多边形相交类型\r\n * @category Math\r\n */\r\nexport enum PlanePolygonIntersectType {\r\n    SPLIT,\r\n    POSITIVE_SIDE_VERTEX,\r\n    POSITIVE_SIDE_EDGE,\r\n    POSITIVE_SIDE_STRICT,\r\n    NEGATIVE_SIDE_VERTEX,\r\n    NEGATIVE_SIDE_EDGE,\r\n    NEGATIVE_SIDE_STRICT,\r\n    CONTAINED,\r\n    INVALID_POLYGON\r\n}\r\n",
        "import { int, Nullable } from \"../../types\";\r\n\r\n/**\r\n * LCP结果类型\r\n * @category Math\r\n */\r\nexport enum LCPResultType\r\n{\r\n    HAS_TRIVIAL_SOLUTION,\r\n    HAS_NONTRIVIAL_SOLUTION,\r\n    NO_SOLUTION,\r\n    FAILED_TO_CONVERGE,\r\n    INVALID_INPUT\r\n}\r\n\r\n/**\r\n * LCP求解结果\r\n * @category Math\r\n */\r\nexport interface LCPResult {\r\n    result: LCPResultType;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\ninterface LCPVariable {\r\n    name: string;\r\n    index: int;\r\n    complementary: int;\r\n    tuple: number[];\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nclass LCPSolverShared {\r\n    protected mDimension: int = 0;\r\n    protected mMaxIterations: int = 0;\r\n    protected mNumIterations: int = 0;\r\n\r\n    protected mVarBasic: LCPVariable[];\r\n    protected mVarNonbasic: LCPVariable[];\r\n\r\n    protected mNumCols: int = 0;\r\n\r\n    protected mAugmented: number[];\r\n    protected mQMin: number[];\r\n    protected mMinRatio: number[];\r\n    protected mRatio: number[];\r\n    protected mPoly: number[];\r\n\r\n    protected mZero: number = 0;\r\n    protected mOne: number = 1;\r\n\r\n    constructor(n: number, zero: number = 0, one: number = 1) {\r\n        this.mZero = zero;\r\n        this.mOne = one;\r\n\r\n        if (n > 0) {\r\n            this.mDimension = n;\r\n            this.mMaxIterations = n * n;\r\n        }\r\n        else {\r\n            this.mDimension = 0;\r\n            this.mMaxIterations = 0;\r\n        }\r\n    }\r\n\r\n    public getNumIterations(): number {\r\n        return this.mNumIterations;\r\n    }\r\n\r\n    public setMaxIterations(maxIterations: int): void {\r\n        this.mMaxIterations = (maxIterations > 0 ? maxIterations : this.mDimension * this.mDimension);\r\n    }\r\n\r\n    public solve(q: number[], M: number[][], w: number[], z: number[], result: Nullable<LCPResult>): boolean {\r\n\r\n        for (let r = 0; r < this.mDimension; ++r) {\r\n            this.mPoly[r] = this.getAugmentedIndex(r, this.mDimension + 1);\r\n            this.makeZero(this.mPoly[r]);\r\n            this.setAugmentedValueByIndex(this.mPoly[r], q[r]);\r\n            this.setAugmentedValueByIndex(this.mPoly[r] + r + 1, this.mOne);\r\n        }\r\n\r\n        this.copyAugmented(this.mPoly[0], this.mQMin);\r\n\r\n        let basic = 0;\r\n        for (let r = 1; r < this.mDimension; ++r) {\r\n            if (this.lessThanAugmented(this.mPoly[r], this.mQMin)) {\r\n                this.copyAugmented(this.mPoly[r], this.mQMin);\r\n                basic = r;\r\n            }\r\n        }\r\n\r\n        if (!this.lessThanZero(this.mQMin)) {\r\n            for (let r = 0; r < this.mDimension; ++r) {\r\n                w[r] = q[r];\r\n                z[r] = this.mZero;\r\n            }\r\n            if (result) {\r\n                result.result = LCPResultType.HAS_TRIVIAL_SOLUTION;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        for (let r = 0; r < this.mDimension; ++r) {\r\n            for (let c = 0; c < this.mDimension; ++c) {\r\n                this.setAugmentedValue(r, c, M[this.mDimension * r][c]);\r\n            }\r\n            this.setAugmentedValue(r, this.mDimension, this.mOne);\r\n        }\r\n\r\n        for (let i = 0; i <= this.mDimension; ++i) {\r\n            this.mVarBasic[i].name = 'w';\r\n            this.mVarBasic[i].index = i;\r\n            this.mVarBasic[i].complementary = i;\r\n            this.mVarBasic[i].tuple = w;\r\n            this.mVarNonbasic[i].name = 'z';\r\n            this.mVarNonbasic[i].index = i;\r\n            this.mVarNonbasic[i].complementary = i;\r\n            this.mVarNonbasic[i].tuple = z;\r\n        }\r\n\r\n        let driving = this.mDimension;\r\n        for (let r = 0; r < this.mDimension; ++r) {\r\n            if (r != basic) {\r\n                for (let c = 0; c < this.mNumCols; ++c) {\r\n                    if (c != this.mDimension) {\r\n                        const a = this.getAugmentedValue(r, c);\r\n                        const b = this.getAugmentedValue(basic, c);\r\n                        this.setAugmentedValue(r, c, a - b);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let c = 0; c < this.mNumCols; ++c) {\r\n            if (c != this.mDimension) {\r\n                this.setAugmentedValue(basic, c, -this.getAugmentedValue(basic, c));\r\n            }\r\n        }\r\n\r\n        this.mNumIterations = 0;\r\n        for (let i = 0; i < this.mMaxIterations; ++i, ++this.mNumIterations) {\r\n            let nextDriving = this.mVarBasic[basic].complementary;\r\n            this.mVarNonbasic[nextDriving].complementary = driving;\r\n\r\n            let t = this.mVarBasic[basic];\r\n            this.mVarBasic[basic] = this.mVarNonbasic[driving];\r\n            this.mVarNonbasic[driving] = t;\r\n\r\n            if (this.mVarNonbasic[driving].index == this.mDimension) {\r\n                for (let r = 0; r < this.mDimension; ++r) {\r\n                    this.mVarBasic[r].tuple[this.mVarBasic[r].index] = this.getAugmentedValueByIndex(r);\r\n                }\r\n\r\n                for (let c = 0; c <= this.mDimension; ++c) {\r\n                    let index = this.mVarNonbasic[c].index;\r\n                    if (index < this.mDimension) {\r\n                        this.mVarNonbasic[c].tuple[index] = this.mZero;\r\n                    }\r\n                }\r\n\r\n                if (result) {\r\n                    result.result = LCPResultType.HAS_NONTRIVIAL_SOLUTION;\r\n                }\r\n                return true;\r\n            }\r\n\r\n            driving = nextDriving;\r\n            basic = -1;\r\n            for (let r = 0; r < this.mDimension; ++r) {\r\n                if (this.getAugmentedValue(r, driving) < this.mZero) {\r\n                    let factor = -this.mOne / this.getAugmentedValue(r, driving);\r\n\r\n                    this.multiplyAugmented(this.mPoly[r], factor, this.mRatio);\r\n\r\n                    if (basic == -1 || this.lessThan(this.mRatio, this.mMinRatio)) {\r\n                        this.copy(this.mRatio, this.mMinRatio);\r\n                        basic = r;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (basic == -1) {\r\n                for (let r = 0; r < this.mDimension; ++r) {\r\n                    w[r] = this.mZero;\r\n                    z[r] = this.mZero;\r\n                }\r\n\r\n                if (result) {\r\n                    result.result = LCPResultType.NO_SOLUTION;\r\n                }\r\n                return false;\r\n            }\r\n\r\n            let invDenom = this.mOne / this.getAugmentedValue(basic, driving);\r\n            for (let r = 0; r < this.mDimension; ++r) {\r\n                if (r != basic && this.getAugmentedValue(r, driving) != this.mZero) {\r\n                    let multiplier = this.getAugmentedValue(r, driving) * invDenom;\r\n                    for (let c = 0; c < this.mNumCols; ++c) {\r\n                        if (c != driving) {\r\n                            let a = this.getAugmentedValue(r, c);\r\n                            let b = this.getAugmentedValue(basic, c) * multiplier;\r\n                            this.setAugmentedValue(r, c, a - b);\r\n                        }\r\n                        else {\r\n                            this.setAugmentedValue(r, driving, multiplier);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (let c = 0; c < this.mNumCols; ++c) {\r\n                if (c != driving) {\r\n                    this.setAugmentedValue(basic, c, -this.getAugmentedValue(basic, c) * invDenom);\r\n                }\r\n                else {\r\n                    this.setAugmentedValue(basic, driving, invDenom);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (result) {\r\n            result.result = LCPResultType.FAILED_TO_CONVERGE;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    protected getAugmentedIndex(row: int, col: int): number {\r\n        return col + this.mNumCols * row;\r\n    }\r\n\r\n    protected getAugmentedValue(row: int, col: int): number {\r\n        return this.mAugmented[col + this.mNumCols * row];\r\n    }\r\n    protected setAugmentedValue(row: int, col: int, value: number): void {\r\n        this.mAugmented[col + this.mNumCols * row] = value;\r\n    }\r\n\r\n    protected setAugmentedValueByIndex(index: int, value: number): void {\r\n        this.mAugmented[index] = value;\r\n    }\r\n    protected getAugmentedValueByIndex(index: int): number {\r\n        return this.mAugmented[index];\r\n    }\r\n\r\n    protected makeZero(poly: number): void {\r\n        for (let i = 0; i <= this.mDimension; ++i) {\r\n            this.mAugmented[poly + i] = this.mZero;\r\n        }\r\n    }\r\n    protected copyAugmented(poly0: number, poly1: number[]): void {\r\n        for (let i = 0; i <= this.mDimension; ++i) {\r\n            poly1[i] = this.mAugmented[poly0 + i];\r\n        }\r\n    }\r\n    protected copy(poly0: number[], poly1: number[]): void {\r\n        for (let i = 0; i <= this.mDimension; ++i) {\r\n            poly1[i] = poly0[i];\r\n        }\r\n    }\r\n    protected lessThanAugmented(poly0: number, poly1: number[]): boolean {\r\n        for (let i = 0; i <= this.mDimension; ++i) {\r\n            if (this.mAugmented[poly0 + i] < poly1[i]) {\r\n                return true;\r\n            }\r\n            if (this.mAugmented[poly0 + i] > poly1[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    protected lessThan(poly0: number[], poly1: number[]): boolean {\r\n        for (let i = 0; i <= this.mDimension; ++i) {\r\n            if (poly0[i] < poly1[i]) {\r\n                return true;\r\n            }\r\n            if (poly0[i] > poly1[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    protected lessThanZeroAugmented(poly: number): boolean {\r\n        for (let i = 0; i <= this.mDimension; ++i) {\r\n            if (this.mAugmented[poly + i] < this.mZero) {\r\n                return true;\r\n            }\r\n            if (this.mAugmented[poly + i] > this.mZero) {\r\n                return false;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    protected lessThanZero(poly: number[]): boolean {\r\n        for (let i = 0; i <= this.mDimension; ++i) {\r\n            if (poly[i] < this.mZero) {\r\n                return true;\r\n            }\r\n            if (poly[i] > this.mZero) {\r\n                return false;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    protected multiplyAugmented(poly: number, scalar: number, product: number[]): void {\r\n        for (let i = 0; i <= this.mDimension; ++i) {\r\n            product[i] = this.mAugmented[poly + i] * scalar;\r\n        }\r\n    }\r\n    protected multiply(poly: number[], scalar: number, product: number[]): void {\r\n        for (let i = 0; i <= this.mDimension; ++i) {\r\n            product[i] = poly[i] * scalar;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * LCP求解器\r\n * @category Math\r\n */\r\nexport class LCPSolver extends LCPSolverShared {\r\n    constructor(n: number) {\r\n        super(n);\r\n\r\n        if (n > 0) {\r\n            this.mVarBasic = new Array<LCPVariable>(n + 1);\r\n            this.mVarNonbasic = new Array<LCPVariable>(n + 1);\r\n\r\n            this.mNumCols = 2 * (n + 1);\r\n            this.mAugmented = new Array<number>(2 * (n + 1) * n);\r\n\r\n            this.mQMin = new Array<number>(n + 1);\r\n            this.mMinRatio = new Array<number>(n + 1);\r\n            this.mRatio = new Array<number>(n + 1);\r\n            this.mPoly = new Array<number>(n);\r\n        }\r\n    }\r\n\r\n    public solve(q: number[], M: number[][], w: number[], z: number[], result: Nullable<LCPResult> = null): boolean {\r\n\r\n        if (this.mDimension > q.length || this.mDimension * this.mDimension > M.length) {\r\n            if (result) {\r\n                result.result = LCPResultType.INVALID_INPUT;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        if (this.mDimension > w.length) {\r\n            if (result) {\r\n                result.result = LCPResultType.INVALID_INPUT;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        if (this.mDimension > z.length) {\r\n            if (result) {\r\n                result.result = LCPResultType.INVALID_INPUT;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        return super.solve(q, M, w, z, result);\r\n    }\r\n}\r\n",
        "import { ColorRGB } from \"./ColorRGB\";\r\nimport { DeepImmutable, FloatArray, int, Nullable } from \"../types\";\r\nimport { MathUtils } from \"./MathUtils\";\r\nimport { BinaryBuffer, BufferAttribute } from \"../Misc\";\r\n\r\ntype InColorRGBA = ColorRGBA | ColorRGB | DeepImmutable<ColorRGB>;\r\n\r\n/**\r\n * RGBA颜色\r\n * @category Math\r\n */\r\nexport class ColorRGBA extends ColorRGB{\r\n\r\n    /**\r\n     * 透明值\r\n     */\r\n    public a: number = 1.0;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param r\r\n     * @param g\r\n     * @param b\r\n     * @param a\r\n     */\r\n    constructor(r: null | number | string | InColorRGBA = null, g: Nullable<number> = null, b: Nullable<number> = null, a: Nullable<number> = null) {\r\n        super(r, g, b);\r\n\r\n        if (a) {\r\n            this.a = a;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建对象\r\n     */\r\n    public static Build() {\r\n        return new ColorRGBA();\r\n    }\r\n\r\n    /**\r\n     * 设置组件\r\n     * @param index\r\n     * @param value\r\n     */\r\n    public setComponent(index: int, value: number): ColorRGBA {\r\n        switch (index) {\r\n            case 0: this.r = value; break;\r\n            case 1: this.g = value; break;\r\n            case 2: this.b = value; break;\r\n            case 3: this.a = value; break;\r\n            default: throw new Error(`index is out of range: ${index}`);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取组件\r\n     * @param index\r\n     */\r\n    public getComponent(index: int): number {\r\n        switch (index) {\r\n            case 0: return this.r;\r\n            case 1: return this.g;\r\n            case 2: return this.b;\r\n            case 3: return this.a;\r\n            default: throw new Error(`index is out of range: ${index}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 组件最大值\r\n     */\r\n    public maximumComponent(): number {\r\n        return Math.max(Math.max(Math.max(this.r, this.g), this.b), this.a);\r\n    }\r\n\r\n    /**\r\n     * 组件最小值\r\n     */\r\n    public minimumComponent(): number {\r\n        return Math.min(Math.min(Math.min(this.r, this.g), this.b), this.a);\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): ColorRGBA {\r\n        return new ColorRGBA(this.r, this.g, this.b, this.a);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param color\r\n     */\r\n    public copy(color: InColorRGBA): ColorRGBA {\r\n        this.r = color.r;\r\n        this.g = color.g;\r\n        this.b = color.b;\r\n\r\n        if (color instanceof ColorRGBA) {\r\n            this.a = color.a;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置RGBA分量\r\n     * @param r\r\n     * @param g\r\n     * @param b\r\n     * @param a\r\n     */\r\n    public setRGBA(r: number, g: number, b: number, a: number): ColorRGBA {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n        this.a = a;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置CSS样式\r\n     * @param style\r\n     */\r\n    public setStyle(style: string): ColorRGBA {\r\n\r\n        let m;\r\n\r\n        if ((m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec(style))) {\r\n            // rgb / hsl\r\n\r\n            let color;\r\n            let name = m[1];\r\n            let components = m[2];\r\n\r\n            switch (name) {\r\n                case 'rgba':\r\n\r\n                    if ((color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components))) {\r\n\r\n                        this.r = Math.min(255, parseInt(color[1], 10)) / 255;\r\n                        this.g = Math.min(255, parseInt(color[2], 10)) / 255;\r\n                        this.b = Math.min(255, parseInt(color[3], 10)) / 255;\r\n                        this.a = Math.min(1.0, parseFloat(color[4]));\r\n\r\n                        return this;\r\n                    }\r\n\r\n                    if ((color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components))) {\r\n\r\n                        this.r = Math.min(100, parseInt(color[1], 10)) / 100;\r\n                        this.g = Math.min(100, parseInt(color[2], 10)) / 100;\r\n                        this.b = Math.min(100, parseInt(color[3], 10)) / 100;\r\n                        this.a = Math.min(1.0, parseFloat(color[4]));\r\n\r\n                        return this;\r\n                    }\r\n\r\n                    break;\r\n\r\n                case 'hsla':\r\n\r\n                    if ((color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components))) {\r\n\r\n                        const h = parseFloat(color[1]) / 360;\r\n                        const s = parseInt(color[2], 10) / 100;\r\n                        const l = parseInt(color[3], 10) / 100;\r\n\r\n                        this.a = Math.min(1.0, parseFloat(color[4]));\r\n\r\n                        this.setHSL(h, s, l);\r\n\r\n                        return this;\r\n                    }\r\n\r\n                    break;\r\n            }\r\n        }\r\n\r\n        super.setStyle(style);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取CSS样式\r\n     */\r\n    public getStyle(): string {\r\n        return `rgba(${(this.r * 255) | 0},${(this.g * 255) | 0},${(this.b * 255) | 0},${this.a})`;\r\n    }\r\n\r\n    /**\r\n     * 线性插值\r\n     * @param color\r\n     * @param alpha\r\n     */\r\n    public lerp(color: ColorRGBA, alpha: number): ColorRGBA {\r\n        this.r += (color.r - this.r) * alpha;\r\n        this.g += (color.g - this.g) * alpha;\r\n        this.b += (color.b - this.b) * alpha;\r\n        this.a += (color.a - this.a) * alpha;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 是否相等\r\n     * @param color\r\n     */\r\n    public equals(color: InColorRGBA): boolean {\r\n        if (color instanceof ColorRGBA) {\r\n            return (color.r == this.r) && (color.g == this.g) && (color.b == this.b) && (color.a == this.a);\r\n        }\r\n        return super.equals(color);\r\n    }\r\n\r\n    /**\r\n     * 是否近似相等\r\n     * @param right\r\n     * @param relativeEpsilon\r\n     * @param absoluteEpsilon\r\n     */\r\n    public equalsEpsilon(right: InColorRGBA, relativeEpsilon: number, absoluteEpsilon: Nullable<number> = null): boolean {\r\n        if (right instanceof ColorRGBA) {\r\n            return MathUtils.equalsEpsilon(this.r, right.r, relativeEpsilon, absoluteEpsilon) &&\r\n                MathUtils.equalsEpsilon(this.g, right.g, relativeEpsilon, absoluteEpsilon) &&\r\n                MathUtils.equalsEpsilon(this.b, right.b, relativeEpsilon, absoluteEpsilon) &&\r\n                MathUtils.equalsEpsilon(this.a, right.a, relativeEpsilon, absoluteEpsilon);\r\n        }\r\n        return super.equalsEpsilon(right, relativeEpsilon, absoluteEpsilon);\r\n    }\r\n\r\n    /**\r\n     * 复制Buffer属性\r\n     * @param attribute\r\n     * @param index\r\n     */\r\n    public fromBufferAttribute(attribute: BufferAttribute, index: int): ColorRGB {\r\n\r\n        this.r = attribute.getX(index);\r\n        this.g = attribute.getY(index);\r\n        this.b = attribute.getZ(index);\r\n        this.a = attribute.getW(index);\r\n\r\n        if (attribute.normalized) {\r\n            this.r /= 255;\r\n            this.g /= 255;\r\n            this.b /= 255;\r\n            this.a /= 255;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 生成数组\r\n     * @param array\r\n     * @param offset\r\n     */\r\n    public toArray(array: FloatArray = [], offset: number = 0): FloatArray {\r\n\r\n        array[offset] = this.r;\r\n        array[offset + 1] = this.g;\r\n        array[offset + 2] = this.b;\r\n        array[offset + 3] = this.a;\r\n\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * 复制数组\r\n     * @param array\r\n     * @param offset\r\n     */\r\n    public fromArray(array: FloatArray, offset: number = 0): ColorRGBA {\r\n\r\n        this.r = array[offset];\r\n        this.g = array[offset + 1];\r\n        this.b = array[offset + 2];\r\n        this.a = array[offset + 3];\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 复制二进制\r\n     * @param dataBuffer\r\n     */\r\n    public fromDataBuffer(dataBuffer: BinaryBuffer): ColorRGBA {\r\n        this.r = dataBuffer.readFloat32();\r\n        this.g = dataBuffer.readFloat32();\r\n        this.b = dataBuffer.readFloat32();\r\n        this.a = dataBuffer.readFloat32();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 生成二进制\r\n     * @param dataBuffer\r\n     */\r\n    public toDataBuffer(dataBuffer: BinaryBuffer): ColorRGBA {\r\n        dataBuffer.writeFloat32(this.r);\r\n        dataBuffer.writeFloat32(this.g);\r\n        dataBuffer.writeFloat32(this.b);\r\n        dataBuffer.writeFloat32(this.a);\r\n\r\n        return this;\r\n    }\r\n}\r\n",
        "import { InVector3, Vector3 } from \"./Vector3\";\r\nimport { PlanePolygonIntersectType } from \"../Enums/PlanePolygonIntersectType\";\r\nimport { Vector4 } from \"./Vector4\";\r\nimport { Sphere } from \"./Sphere\";\r\nimport { Matrix4 } from \"./Matrix4\";\r\nimport { Matrix3 } from \"./Matrix3\";\r\nimport { Nullable } from \"../types\";\r\nimport { Line3 } from \"./Line3\";\r\nimport { Triangle } from \"./Triangle\";\r\nimport { OBB } from \"./OBB\";\r\nimport {\r\n    PlanePlaneIntersect,\r\n    PlanePolygonIntersect,\r\n    PlaneSphereIntersect,\r\n    PlaneTriangleIntersect\r\n} from \"./InterfaceType/IntersectResult\";\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec1 = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec2 = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _normalMatrix = new Matrix3();\r\n\r\n/**\r\n * 平面\r\n * @category Math\r\n */\r\nexport class Plane {\r\n\r\n    /**\r\n     * 法线\r\n     */\r\n    public normal: Vector3 = new Vector3();\r\n    /**\r\n     * 常数\r\n     */\r\n    public constant: number = 0;\r\n\r\n    /**\r\n     * 常数\r\n     * @param normal\r\n     * @param constant\r\n     */\r\n    constructor(normal: InVector3 = Vector3.UNIT_X, constant = 0) {\r\n        this.normal.copy(normal);\r\n        this.constant = constant;\r\n    }\r\n\r\n    /**\r\n     * 设置平面参数\r\n     * @param normal\r\n     * @param constant\r\n     */\r\n    public set(normal: Vector3, constant: number): Plane {\r\n        this.normal.copy(normal);\r\n        this.constant = constant;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置XYZW\r\n     * @param x\r\n     * @param y\r\n     * @param z\r\n     * @param w\r\n     */\r\n    public setFromXYZW(x: number, y: number , z: number, w: number): Plane {\r\n        this.normal.set(x, y, z);\r\n        this.constant = w;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置Vector4\r\n     * @param vec4\r\n     */\r\n    public setFromVector4(vec4: Vector4): Plane {\r\n        return this.setFromXYZW(vec4.x, vec4.y, vec4.z, vec4.w);\r\n    }\r\n\r\n    /**\r\n     * 设置法线和一个平面上的点\r\n     * @param normal\r\n     * @param point\r\n     */\r\n    public setFromNormalAndCoplanarPoint(normal: Vector3, point: Vector3): Plane {\r\n        this.normal.copy(normal);\r\n        this.constant = point.dot(this.normal);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置平面上的3个点\r\n     * @param a\r\n     * @param b\r\n     * @param c\r\n     */\r\n    public setFromCoplanarPoints(a: Vector3, b: Vector3, c: Vector3): Plane {\r\n\r\n        const normal = _tempVec1.subVectors(c, b).cross(_tempVec2.subVectors(a, b)).normalize();\r\n        this.setFromNormalAndCoplanarPoint(normal, a);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): Plane {\r\n        return new Plane().copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param plane\r\n     */\r\n    public copy(plane: Plane): Plane {\r\n        this.normal.copy(plane.normal);\r\n        this.constant = plane.constant;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 归一化\r\n     */\r\n    public normalize(): Plane {\r\n\r\n        const inverseNormalLength = 1.0 / this.normal.length();\r\n        this.normal.multiplyScalar(inverseNormalLength);\r\n        this.constant *= inverseNormalLength;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 转反向平面\r\n     */\r\n    public negate(): Plane {\r\n        this.constant *= -1;\r\n        this.normal.negate();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 投影点到平面(最近点)\r\n     * @param point\r\n     * @param target\r\n     */\r\n    public projectPoint(point: Vector3, target: Vector3 = new Vector3()): Vector3 {\r\n        return target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);\r\n    }\r\n\r\n    /**\r\n     * 获取平面上的点\r\n     * @param target\r\n     */\r\n    public coplanarPoint(target = new Vector3()): Vector3 {\r\n        return target.copy(this.normal).multiplyScalar(this.constant);\r\n    }\r\n\r\n    /**\r\n     * 乘以Matrix4矩阵\r\n     * @param matrix\r\n     * @param normalMatrix\r\n     */\r\n    public applyMatrix4(matrix: Matrix4, normalMatrix: Nullable<Matrix3> = null): Plane {\r\n\r\n        normalMatrix = normalMatrix || _normalMatrix.getNormalMatrix(matrix);\r\n        const referencePoint = this.coplanarPoint(_tempVec1).applyMatrix4(matrix);\r\n        const normal = this.normal.applyMatrix3(normalMatrix).normalize();\r\n        this.constant = referencePoint.dot(normal);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 平移平面\r\n     * @param offset\r\n     */\r\n    public translate(offset: Vector3) {\r\n        this.constant += offset.dot(this.normal);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 点到平面的距离\r\n     * @param point\r\n     */\r\n    public distanceToPoint(point: Vector3): number {\r\n        return this.normal.dot(point) - this.constant;\r\n    }\r\n\r\n    /**\r\n     * 包围球到平面的距离\r\n     * @param sphere\r\n     */\r\n    public distanceToSphere(sphere: Sphere): number {\r\n        return this.distanceToPoint(sphere.center) - sphere.radius;\r\n    }\r\n\r\n    /**\r\n     * 是否与平面相交\r\n     * @param plane\r\n     */\r\n    public intersectsPlane(plane: Plane): boolean {\r\n\r\n        const plane0 = this;\r\n        const plane1 = plane;\r\n\r\n        const dot = plane0.normal.dot(plane1.normal);\r\n        if (Math.abs(dot) < 1) {\r\n            return true;\r\n        }\r\n\r\n        let cDiff;\r\n        if (dot >= 0) {\r\n            cDiff = plane0.constant - plane1.constant;\r\n        }\r\n        else {\r\n            cDiff = plane0.constant + plane1.constant;\r\n        }\r\n\r\n        return Math.abs(cDiff) == 0;\r\n    }\r\n\r\n    /**\r\n     * 与平面相交检测\r\n     * @param plane\r\n     */\r\n    public intersectPlane(plane: Plane): PlanePlaneIntersect {\r\n\r\n        const plane0 = this;\r\n        const plane1 = plane;\r\n\r\n        const result = {\r\n            intersect: false,\r\n            isLine: false,\r\n            line: new Line3(),\r\n            plane: new Plane()\r\n        };\r\n\r\n        const dot = plane0.normal.dot(plane1.normal);\r\n        if (Math.abs(dot) >= 1) {\r\n            let cDiff;\r\n            if (dot >= 0) {\r\n                cDiff = plane0.constant - plane1.constant;\r\n            }\r\n            else {\r\n                cDiff = plane0.constant + plane1.constant;\r\n            }\r\n\r\n            if (Math.abs(cDiff) == 0) {\r\n                // The planes are coplanar.\r\n                result.intersect = true;\r\n                result.isLine = false;\r\n                result.plane = plane0;\r\n                return result;\r\n            }\r\n\r\n            // The planes are parallel but distinct.\r\n            result.intersect = false;\r\n            return result;\r\n        }\r\n\r\n        const invDet = 1 / (1 - dot * dot);\r\n        const c0 = (plane0.constant - dot * plane1.constant) * invDet;\r\n        const c1 = (plane1.constant - dot * plane0.constant) * invDet;\r\n\r\n        result.intersect = true;\r\n        result.isLine = true;\r\n        result.line.origin.addVectors(_tempVec1.copy(plane0.normal).multiplyScalar(c0), _tempVec2.copy(plane1.normal).multiplyScalar(c1));\r\n        result.line.direction.crossVectors(plane0.normal, plane1.normal).normalize();\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 是否与多边形相交\r\n     * @param polygon\r\n     */\r\n    public intersectsPolygon(polygon: Vector3[]): boolean {\r\n\r\n        const numVertices = polygon.length;\r\n        if (numVertices < 3) {\r\n            return false;\r\n        }\r\n\r\n        let numPositive = 0, numNegative = 0, numZero = 0;\r\n        for (let i = 0; i < numVertices; ++i) {\r\n            const h = this.normal.dot(polygon[i]) - this.constant;\r\n            if (h > 0) {\r\n                ++numPositive;\r\n            }\r\n            else if (h < 0) {\r\n                ++numNegative;\r\n            }\r\n            else {\r\n                ++numZero;\r\n            }\r\n        }\r\n\r\n        if (numPositive > 0) {\r\n            if (numNegative > 0) {\r\n               return true;\r\n            }\r\n            else if (numZero == 0) {\r\n                return false;\r\n            }\r\n            else if (numZero == 1) {\r\n                return true;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n        else if (numNegative > 0) {\r\n            if (numZero == 0) {\r\n                return false;\r\n            }\r\n            else if (numZero == 1) {\r\n                return true;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 与多边形相交检测\r\n     * @param polygon\r\n     */\r\n    public intersectPolygon(polygon: Vector3[]): PlanePolygonIntersect {\r\n        const result = {\r\n            type: PlanePolygonIntersectType.INVALID_POLYGON,\r\n            intersection: new Array<Vector3>(),\r\n            positivePolygon: new Array<Vector3>(),\r\n            negativePolygon: new Array<Vector3>()\r\n        };\r\n\r\n        const numVertices = polygon.length;\r\n        if (numVertices < 3) {\r\n            return result;\r\n        }\r\n\r\n        const height = new Array<number>(numVertices);\r\n        const zeroHeightIndices = [];\r\n\r\n        let numPositive = 0, numNegative = 0;\r\n        let maxPosHeight = -Infinity;\r\n        let maxNegHeight = Infinity;\r\n        let maxPosIndex = Infinity;\r\n        let maxNegIndex = Infinity;\r\n\r\n        for (let i = 0; i < numVertices; ++i) {\r\n            height[i] = this.normal.dot(polygon[i]) - this.constant;\r\n            if (height[i] > 0) {\r\n                ++numPositive;\r\n                if (height[i] > maxPosHeight) {\r\n                    maxPosHeight = height[i];\r\n                    maxPosIndex = i;\r\n                }\r\n            }\r\n            else if (height[i] < 0) {\r\n                ++numNegative;\r\n                if (height[i] < maxNegHeight) {\r\n                    maxNegHeight = height[i];\r\n                    maxNegIndex = i;\r\n                }\r\n            }\r\n            else {\r\n                zeroHeightIndices.push(i);\r\n            }\r\n        }\r\n\r\n        if (numPositive > 0) {\r\n            if (numNegative > 0) {\r\n                result.type = PlanePolygonIntersectType.SPLIT;\r\n\r\n                const doSwap = (maxPosHeight < -maxNegHeight);\r\n                if (doSwap) {\r\n                    height.forEach((v, i) => {\r\n                        height[i] = -height[i];\r\n                    });\r\n\r\n                    let t = maxPosIndex;\r\n                    maxPosIndex = maxNegIndex;\r\n                    maxNegIndex = t ;\r\n                }\r\n\r\n                splitPolygon(polygon, height, maxPosIndex, result);\r\n\r\n                if (doSwap) {\r\n                    let t = result.positivePolygon;\r\n                    result.positivePolygon = result.negativePolygon;\r\n                    result.negativePolygon = t ;\r\n                }\r\n            }\r\n            else {\r\n                const numZero = zeroHeightIndices.length;\r\n                if (numZero == 0) {\r\n                    result.type = PlanePolygonIntersectType.POSITIVE_SIDE_STRICT;\r\n                }\r\n                else if (numZero == 1) {\r\n                    result.type = PlanePolygonIntersectType.POSITIVE_SIDE_VERTEX;\r\n                    result.intersection.push(polygon[zeroHeightIndices[0]]);\r\n                }\r\n                else {\r\n                    result.type = PlanePolygonIntersectType.POSITIVE_SIDE_EDGE;\r\n                    result.intersection.push(polygon[zeroHeightIndices[0]], polygon[zeroHeightIndices[1]]);\r\n                }\r\n                result.positivePolygon = polygon;\r\n            }\r\n        }\r\n        else if (numNegative > 0) {\r\n            const numZero = zeroHeightIndices.length;\r\n            if (numZero == 0) {\r\n                result.type = PlanePolygonIntersectType.NEGATIVE_SIDE_STRICT;\r\n            }\r\n            else if (numZero == 1) {\r\n                result.type = PlanePolygonIntersectType.NEGATIVE_SIDE_VERTEX;\r\n                result.intersection.push(\r\n                    polygon[zeroHeightIndices[0]]\r\n                );\r\n            }\r\n            else {\r\n                result.type = PlanePolygonIntersectType.NEGATIVE_SIDE_EDGE;\r\n                result.intersection.push(\r\n                    polygon[zeroHeightIndices[0]],\r\n                    polygon[zeroHeightIndices[1]]\r\n                );\r\n            }\r\n            result.negativePolygon = polygon;\r\n        }\r\n        else {\r\n            result.type = PlanePolygonIntersectType.CONTAINED;\r\n            result.intersection = polygon;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 是否与包围球相交\r\n     * @param sphere\r\n     */\r\n    public intersectsSphere(sphere: Sphere): boolean {\r\n        return Math.abs(this.distanceToPoint(sphere.center)) <= sphere.radius;\r\n    }\r\n\r\n    /**\r\n     * 与包围球相交检测\r\n     * @param sphere\r\n     */\r\n    public intersectSphere(sphere: Sphere): PlaneSphereIntersect {\r\n\r\n        const signedDistance = this.distanceToPoint(sphere.center);\r\n        const distance = Math.abs(signedDistance);\r\n        if (distance < sphere.radius) {\r\n\r\n            const sum = sphere.radius + distance;\r\n            const dif = sphere.radius - distance;\r\n            const arg = sum * dif;\r\n\r\n            const circle = new Sphere();\r\n            circle.center.subVectors(sphere.center, _tempVec1.copy(this.normal).multiplyScalar(signedDistance));\r\n            circle.radius = Math.sqrt(arg);\r\n\r\n            return {\r\n                intersect: true,\r\n                isCircle: true,\r\n                circle\r\n            };\r\n        }\r\n        else if (distance == sphere.radius) {\r\n            return {\r\n                intersect: true,\r\n                isCircle: false,\r\n                point: new Vector3().subVectors(sphere.center, _tempVec1.copy(this.normal).multiplyScalar(signedDistance))\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                intersect: false\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否与三角形相交\r\n     * @param triangle\r\n     */\r\n    public intersectsTriangle(triangle: Triangle): boolean {\r\n\r\n        const s = [];\r\n\r\n        let numPositive = 0, numNegative = 0, numZero = 0;\r\n        for (let i = 0; i < 3; ++i) {\r\n            s[i] = this.normal.dot(triangle.p[i]) - this.constant;\r\n            if (s[i] > 0) {\r\n                ++numPositive;\r\n            }\r\n            else if (s[i] < 0) {\r\n                ++numNegative;\r\n            }\r\n            else {\r\n                ++numZero;\r\n            }\r\n        }\r\n\r\n        if (numZero == 0 && numPositive > 0 && numNegative > 0) {\r\n            return true;\r\n        }\r\n\r\n        if (numZero > 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 与三角形相交检测\r\n     * @param triangle\r\n     */\r\n    public intersectTriangle(triangle: Triangle): PlaneTriangleIntersect {\r\n        const result = {\r\n            intersect: false,\r\n            numIntersections: 0,\r\n            isInterior: false,\r\n            points: new Array<Vector3>()\r\n        };\r\n\r\n        const s = [];\r\n\r\n        let numPositive = 0, numNegative = 0, numZero = 0;\r\n        for (let i = 0; i < 3; ++i) {\r\n            s[i] = this.normal.dot(triangle.p[i]) - this.constant;\r\n            if (s[i] > 0) {\r\n                ++numPositive;\r\n            }\r\n            else if (s[i] < 0) {\r\n                ++numNegative;\r\n            }\r\n            else {\r\n                ++numZero;\r\n            }\r\n        }\r\n\r\n        if (numZero == 0 && numPositive > 0 && numNegative > 0) {\r\n            result.intersect = true;\r\n            result.numIntersections = 2;\r\n            result.isInterior = true;\r\n\r\n            const sign = 3 - numPositive * 2;\r\n            for (let i0 = 0; i0 < 3; ++i0) {\r\n                if (sign * s[i0] > 0) {\r\n                    let i1 = (i0 + 1) % 3, i2 = (i0 + 2) % 3;\r\n                    let t1 = s[i1] / (s[i1] - s[i0]);\r\n                    let t2 = s[i2] / (s[i2] - s[i0]);\r\n                    result.points[0] = new Vector3().copy(triangle.p[i1]).add(_tempVec1.subVectors(triangle.p[i0], triangle.p[i1]).multiplyScalar(t1));\r\n                    result.points[1] = new Vector3().copy(triangle.p[i2]).add(_tempVec2.subVectors(triangle.p[i0], triangle.p[i2]).multiplyScalar(t2));\r\n                    break;\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n        if (numZero == 1) {\r\n            result.intersect = true;\r\n            for (let i0 = 0; i0 < 3; ++i0) {\r\n                if (s[i0] == 0) {\r\n                    let i1 = (i0 + 1) % 3, i2 = (i0 + 2) % 3;\r\n                    result.points[0] = new Vector3().copy(triangle.p[i0]);\r\n                    if (numPositive == 2 || numNegative == 2) {\r\n                        result.numIntersections = 1;\r\n                    }\r\n                    else {\r\n                        result.numIntersections = 2;\r\n                        result.isInterior = true;\r\n                        let t = s[i1] / (s[i1] - s[i2]);\r\n                        result.points[1] = new Vector3().copy(triangle.p[i1]).add(_tempVec1.subVectors(triangle.p[i2], triangle.p[i1]).multiplyScalar(t));\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n        if (numZero == 2) {\r\n            result.intersect = true;\r\n            result.numIntersections = 2;\r\n            result.isInterior = false;\r\n            for (let i0 = 0; i0 < 3; ++i0) {\r\n                if (s[i0] != 0) {\r\n                    let i1 = (i0 + 1) % 3, i2 = (i0 + 2) % 3;\r\n                    result.points[0] = new Vector3().copy(triangle.p[i1]);\r\n                    result.points[1] = new Vector3().copy(triangle.p[i2]);\r\n                    break;\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n        if (numZero == 3) {\r\n            result.intersect = true;\r\n            result.numIntersections = 3;\r\n            result.points[0] = new Vector3().copy(triangle.a);\r\n            result.points[1] = new Vector3().copy(triangle.b);\r\n            result.points[2] = new Vector3().copy(triangle.c);\r\n        }\r\n        else {\r\n            result.intersect = false;\r\n            result.numIntersections = 0;\r\n\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 是否与OBB相交\r\n     * @param box\r\n     */\r\n    public intersectsOBB(box: OBB): boolean {\r\n\r\n        const radius =\r\n            Math.abs(box.extent.x * this.normal.dot(box.axis[0])) +\r\n            Math.abs(box.extent.y * this.normal.dot(box.axis[1])) +\r\n            Math.abs(box.extent.z * this.normal.dot(box.axis[2]));\r\n\r\n        const distance = this.distanceToPoint(box.center);\r\n        return Math.abs(distance) <= radius;\r\n    }\r\n\r\n    /**\r\n     * 是否相等\r\n     * @param plane\r\n     */\r\n    public equals(plane: Plane): boolean {\r\n        return plane.normal.equals(this.normal) && (plane.constant == this.constant);\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction splitPolygon(polygon: Vector3[], height: number[], maxPosIndex: number, result: PlanePolygonIntersect): void {\r\n\r\n    const numVertices = polygon.length;\r\n    const positiveList = [];\r\n    positiveList.push(polygon[maxPosIndex]);\r\n    let end0 = maxPosIndex;\r\n    let end0prev = Infinity;\r\n    for (let i = 0; i < numVertices; ++i) {\r\n        end0prev = (end0 + numVertices - 1) % numVertices;\r\n        if (height[end0prev] >= 0) {\r\n            positiveList.splice(0, 0, polygon[end0prev]);\r\n            end0 = end0prev;\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    let end1 = maxPosIndex;\r\n    let end1next = Infinity;\r\n    for (let i = 0; i < numVertices; ++i) {\r\n        end1next = (end1 + 1) % numVertices;\r\n        if (height[end1next] >= 0) {\r\n            positiveList.push(polygon[end1next]);\r\n            end1 = end1next;\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    let index = end1next;\r\n    const negativeList = [];\r\n    for (let i = 0; i < numVertices; ++i) {\r\n        negativeList.push(polygon[index]);\r\n        index = (index + 1) % numVertices;\r\n        if (index == end0) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (height[end0] > 0) {\r\n        const t = -height[end0prev] / (height[end0] - height[end0prev]);\r\n        const omt = 1 - t;\r\n        const V = new Vector3().addVectors(_tempVec1.copy(polygon[end0prev]).multiplyScalar(omt), _tempVec2.copy(polygon[end0]).multiplyScalar(t));\r\n        positiveList.splice(0, 0, V);\r\n        negativeList.push(V);\r\n        result.intersection.push(V);\r\n    }\r\n    else {\r\n        negativeList.push(polygon[end0]);\r\n        result.intersection.push(polygon[end0]);\r\n    }\r\n\r\n    if (height[end1] > 0) {\r\n        const t = -height[end1next] / (height[end1] - height[end1next]);\r\n        const omt = 1 - t;\r\n        const V = new Vector3().addVectors(_tempVec1.copy(polygon[end1next]).multiplyScalar(omt), _tempVec2.copy(polygon[end1]).multiplyScalar(t));\r\n        positiveList.push(V);\r\n        negativeList.splice(0, 0, V);\r\n        result.intersection.push(V);\r\n    }\r\n    else {\r\n        negativeList.splice(0, 0, polygon[end1]);\r\n        result.intersection.push(polygon[end1]);\r\n    }\r\n\r\n    result.positivePolygon = positiveList;\r\n    result.negativePolygon = negativeList;\r\n}\r\n",
        "import {\r\n    Segment3Box3Distance, Segment3OBBDistance,\r\n    Segment3Point3Distance,\r\n    Segment3Segment3Distance,\r\n    Segment3TriangleDistance\r\n} from \"./InterfaceType/DistanceResult\";\r\nimport {\r\n    Segment3Box3Intersect, Segment3OBBIntersect,\r\n    Segment3PlaneIntersect,\r\n    Segment3SphereIntersect,\r\n    Segment3TriangleIntersect\r\n} from \"./InterfaceType/IntersectResult\";\r\nimport { Vector3 } from \"./Vector3\";\r\nimport { Nullable } from \"../types\";\r\nimport { MathUtils } from \"./MathUtils\";\r\nimport { Matrix4 } from \"./Matrix4\";\r\nimport { Triangle } from \"./Triangle\";\r\nimport { Line3 } from \"./Line3\";\r\nimport { Box3 } from \"./Box3\";\r\nimport { OBB } from \"./OBB\";\r\nimport { Sphere } from \"./Sphere\";\r\nimport { Intervals } from \"./Algorithm/Intervals\";\r\nimport { Plane } from \"./Plane\";\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec1 = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec2 = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec3 = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec4 = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec5 = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec6 = new Vector3();\r\n\r\n/**\r\n * @ignore\r\n */\r\nlet mA: number, mB: number, mC: number, mD: number, mE: number;\r\n\r\n/**\r\n * @ignore\r\n */\r\nlet mF00: number, mF10: number, mF01: number, mF11: number;\r\n\r\n/**\r\n * @ignore\r\n */\r\nlet mG00: number, mG10: number, mG01: number, mG11: number;\r\n\r\n/**\r\n * 3D线段\r\n * @category Math\r\n */\r\nexport class LineSegment3 {\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    private readonly _p: Vector3[];\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param start\r\n     * @param end\r\n     */\r\n    constructor(start: Nullable<Vector3> = null, end: Nullable<Vector3> = null) {\r\n        this._p = [new Vector3(), new Vector3()];\r\n\r\n        if (start) {\r\n            this._p[0].copy(start);\r\n        }\r\n        if (end) {\r\n            this._p[1].copy(end);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 内部元素数组\r\n     */\r\n    get p() {\r\n        return this._p;\r\n    }\r\n\r\n    /**\r\n     * 开始坐标\r\n     */\r\n    get start() {\r\n        return this._p[0];\r\n    }\r\n    set start(value) {\r\n        this._p[0].copy(value);\r\n    }\r\n\r\n    /**\r\n     * 结束坐标\r\n     */\r\n    get end() {\r\n        return this._p[1];\r\n    }\r\n    set end(value) {\r\n        this._p[1].copy(value);\r\n    }\r\n\r\n    /**\r\n     * 设置起点，终点坐标\r\n     * @param start\r\n     * @param end\r\n     */\r\n    public set(start: Vector3, end: Vector3): LineSegment3 {\r\n        this.start.copy(start);\r\n        this.end.copy(end);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): LineSegment3 {\r\n        return new LineSegment3().copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param line\r\n     */\r\n    public copy(line: LineSegment3): LineSegment3 {\r\n        this.start.copy(line.start);\r\n        this.end.copy(line.end);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 中心坐标\r\n     * @param target\r\n     */\r\n    public getCenter(target = new Vector3()): Vector3 {\r\n        return target.addVectors(this.start, this.end).multiplyScalar(0.5);\r\n    }\r\n\r\n    /**\r\n     * 相对长度\r\n     * @param target\r\n     */\r\n    public delta(target = new Vector3()): Vector3 {\r\n        return target.subVectors(this.end, this.start);\r\n    }\r\n\r\n    /**\r\n     * 长度SQ\r\n     */\r\n    public distanceSq(): number {\r\n        return this.start.distanceToSquared(this.end);\r\n    }\r\n\r\n    /**\r\n     * 长度\r\n     */\r\n    public distance(): number {\r\n        return this.start.distanceTo(this.end);\r\n    }\r\n\r\n    /**\r\n     * 线段上的点\r\n     * @param t\r\n     * @param target\r\n     */\r\n    public at(t: number, target = new Vector3()): Vector3 {\r\n        return this.delta(target).multiplyScalar(t).add(this.start);\r\n    }\r\n\r\n    /**\r\n     * 点到线段上最近点的系数\r\n     * @param point\r\n     * @param clampToLine\r\n     */\r\n    public closestPointToPointParameter(point: Vector3, clampToLine: boolean = false): number {\r\n\r\n        _tempVec1.subVectors(point, this.start);\r\n        _tempVec2.subVectors(this.end, this.start);\r\n\r\n        const startEnd2 = _tempVec2.dot(_tempVec2);\r\n        const startEnd_startP = _tempVec2.dot(_tempVec1);\r\n\r\n        let t = startEnd_startP / startEnd2;\r\n\r\n        if (clampToLine) {\r\n            t = MathUtils.clamp(t, 0, 1);\r\n        }\r\n        return t;\r\n    }\r\n\r\n    /**\r\n     * 点到线段上的最近点\r\n     * @param point\r\n     * @param clampToLine\r\n     * @param target\r\n     */\r\n    public closestPointToPoint(point: Vector3, clampToLine: boolean = false, target = new Vector3()): Vector3 {\r\n        const t = this.closestPointToPointParameter(point, clampToLine);\r\n        return this.delta(target).multiplyScalar(t).add(this.start);\r\n    }\r\n\r\n    /**\r\n     * 设置原点，方向，大小\r\n     * @param center\r\n     * @param direction\r\n     * @param extent\r\n     */\r\n    public setCenteredForm(center: Vector3, direction: Vector3, extent: number): LineSegment3 {\r\n        this._p[0].copy(direction).multiplyScalar(extent).subVectors(center, this._p[0]);\r\n        this._p[1].copy(direction).multiplyScalar(extent).add(center);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取原点，方向，大小\r\n     * @param center\r\n     * @param direction\r\n     */\r\n    public getCenteredForm(center: Vector3, direction: Vector3): number {\r\n        center.addVectors(this._p[0], this._p[1]).multiplyScalar(0.5);\r\n        direction.subVectors(this._p[1], this._p[0]);\r\n        const extent = direction.length() * 0.5;\r\n        direction.normalize();\r\n        return extent;\r\n    }\r\n\r\n    /**\r\n     * 到坐标点的SQ距离\r\n     * @param point\r\n     * @param closestPoint\r\n     * @param parameter\r\n     */\r\n    public distanceSqToPoint(point: Vector3, closestPoint: Nullable<Vector3> = null, parameter: Nullable<Segment3Point3Distance> = null): number {\r\n\r\n        const direction = _tempVec1.subVectors(this.p[1], this.p[0]);\r\n        const diff = _tempVec2.subVectors(point, this.p[1]);\r\n        let t = direction.dot(diff);\r\n\r\n        let segmentParameter = 0;\r\n        let segmentClosest;\r\n\r\n        if (t >= 0)\r\n        {\r\n            segmentParameter = 1;\r\n            segmentClosest = this.p[1];\r\n        }\r\n        else\r\n        {\r\n            diff.subVectors(point, this.p[0]);\r\n            t = direction.dot(diff);\r\n            if (t <= 0)\r\n            {\r\n                segmentParameter = 0;\r\n                segmentClosest = this.p[0];\r\n            }\r\n            else\r\n            {\r\n                const sqrLength = direction.dot(direction);\r\n                if (sqrLength > 0)\r\n                {\r\n                    t /= sqrLength;\r\n                    segmentParameter = t;\r\n                    segmentClosest = _tempVec3.copy(direction).multiplyScalar(t).add(this.p[0]);\r\n                }\r\n                else\r\n                {\r\n                    segmentParameter = 0;\r\n                    segmentClosest = this.p[0];\r\n                }\r\n            }\r\n        }\r\n\r\n        if (closestPoint) {\r\n            closestPoint.copy(segmentClosest);\r\n        }\r\n        if (parameter) {\r\n            parameter.segmentParameter = segmentParameter;\r\n        }\r\n\r\n        diff.subVectors(point, segmentClosest);\r\n        return diff.dot(diff);\r\n    }\r\n\r\n    /**\r\n     * 到坐标点的距离\r\n     * @param point\r\n     * @param segmentClosest\r\n     * @param parameter\r\n     */\r\n    public distanceToPoint(point: Vector3, segmentClosest: Nullable<Vector3> = null, parameter: Nullable<Segment3Point3Distance> = null): number {\r\n        return Math.sqrt(this.distanceSqToPoint(point, segmentClosest, parameter));\r\n    }\r\n\r\n    /**\r\n     * 与线段的SQ距离\r\n     * @param segment\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceSqToSegment(segment: LineSegment3, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Segment3Segment3Distance> = null): number {\r\n        const P0 = this.start;\r\n        const P1 = this.end;\r\n\r\n        const Q0 = segment.start;\r\n        const Q1 = segment.end;\r\n\r\n        const P1mP0 = _tempVec1.subVectors(P1, P0);\r\n        const Q1mQ0 = _tempVec2.subVectors(Q1, Q0);\r\n        const P0mQ0 = _tempVec3.subVectors(P0, Q0);\r\n        mA = P1mP0.dot(P1mP0);\r\n        mB = P1mP0.dot(Q1mQ0);\r\n        mC = Q1mQ0.dot(Q1mQ0);\r\n        mD = P1mP0.dot(P0mQ0);\r\n        mE = Q1mQ0.dot(P0mQ0);\r\n\r\n        mF00 = mD;\r\n        mF10 = mF00 + mA;\r\n        mF01 = mF00 - mB;\r\n        mF11 = mF10 - mB;\r\n\r\n        mG00 = -mE;\r\n        mG10 = mG00 - mB;\r\n        mG01 = mG00 + mC;\r\n        mG11 = mG10 + mC;\r\n\r\n        const ssparameter = [0, 0];\r\n\r\n        if (mA > 0 && mC > 0) {\r\n            // Compute the solutions to dR/ds(s0,0) = 0 and\r\n            // dR/ds(s1,1) = 0.  The location of sI on the s-axis is\r\n            // stored in classifyI (I = 0 or 1).  If sI <= 0, classifyI\r\n            // is -1.  If sI >= 1, classifyI is 1.  If 0 < sI < 1,\r\n            // classifyI is 0.  This information helps determine where to\r\n            // search for the minimum point (s,t).  The fij values are\r\n            // dR/ds(i,j) for i and j in {0,1}.\r\n\r\n            const sValue = [0, 0];\r\n            sValue[0] = getClampedRoot(mA, mF00, mF10);\r\n            sValue[1] = getClampedRoot(mA, mF01, mF11);\r\n\r\n            const classify = [0, 0];\r\n            for (let i = 0; i < 2; ++i) {\r\n                if (sValue[i] <= 0) {\r\n                    classify[i] = -1;\r\n                }\r\n                else if (sValue[i] >= 1) {\r\n                    classify[i] = +1;\r\n                }\r\n                else {\r\n                    classify[i] = 0;\r\n                }\r\n            }\r\n\r\n            if (classify[0] == -1 && classify[1] == -1) {\r\n                // The minimum must occur on s = 0 for 0 <= t <= 1.\r\n                ssparameter[0] = 0;\r\n                ssparameter[1] = getClampedRoot(mC, mG00, mG01);\r\n            }\r\n            else if (classify[0] == +1 && classify[1] == +1) {\r\n                // The minimum must occur on s = 1 for 0 <= t <= 1.\r\n                ssparameter[0] = 1;\r\n                ssparameter[1] = getClampedRoot(mC, mG10, mG11);\r\n            }\r\n            else {\r\n                // The line dR/ds = 0 intersects the domain [0,1]^2 in a\r\n                // nondegenerate segment.  Compute the endpoints of that\r\n                // segment, end[0] and end[1].  The edge[i] flag tells you\r\n                // on which domain edge end[i] lives: 0 (s=0), 1 (s=1),\r\n                // 2 (t=0), 3 (t=1).\r\n                const edge = [0, 0];\r\n                const end = [[0, 0], [0, 0]];\r\n\r\n                computeIntersection(sValue, classify, edge, end);\r\n\r\n                // The directional derivative of R along the segment of\r\n                // intersection is\r\n                //   H(z) = (end[1][1]-end[1][0]) *\r\n                //          dR/dt((1-z)*end[0] + z*end[1])\r\n                // for z in [0,1].  The formula uses the fact that\r\n                // dR/ds = 0 on the segment.  Compute the minimum of\r\n                // H on [0,1].\r\n                computeMinimumParameters(edge, end, ssparameter);\r\n            }\r\n        }\r\n        else {\r\n            if (mA > 0) {\r\n                // The Q-segment is degenerate (Q0 and Q1 are the same\r\n                // point) and the quadratic is R(s,0) = a*s^2 + 2*d*s + f\r\n                // and has (half) first derivative F(t) = a*s + d.  The\r\n                // closest P-point is interior to the P-segment when\r\n                // F(0) < 0 and F(1) > 0.\r\n                ssparameter[0] = getClampedRoot(mA, mF00, mF10);\r\n                ssparameter[1] = 0;\r\n            }\r\n            else if (mC > 0) {\r\n                // The P-segment is degenerate (P0 and P1 are the same\r\n                // point) and the quadratic is R(0,t) = c*t^2 - 2*e*t + f\r\n                // and has (half) first derivative G(t) = c*t - e.  The\r\n                // closest Q-point is interior to the Q-segment when\r\n                // G(0) < 0 and G(1) > 0.\r\n                ssparameter[0] = 0;\r\n                ssparameter[1] = getClampedRoot(mC, mG00, mG01);\r\n            }\r\n            else {\r\n                // P-segment and Q-segment are degenerate.\r\n                ssparameter[0] = 0;\r\n                ssparameter[1] = 0;\r\n            }\r\n        }\r\n\r\n        _tempVec4.addVectors(_tempVec1.copy(P0).multiplyScalar(1 - ssparameter[0]), _tempVec2.copy(P1).multiplyScalar(ssparameter[0]));\r\n        _tempVec5.addVectors(_tempVec1.copy(Q0).multiplyScalar(1 - ssparameter[1]), _tempVec2.copy(Q1).multiplyScalar(ssparameter[1]));\r\n\r\n        if (closestPoint0) {\r\n            closestPoint0.copy(_tempVec4);\r\n        }\r\n        if (closestPoint1) {\r\n            closestPoint1.copy(_tempVec5);\r\n        }\r\n        if (parameter) {\r\n            parameter.parameter = ssparameter;\r\n        }\r\n\r\n        const diff = _tempVec3.subVectors(_tempVec4, _tempVec5);\r\n        return diff.dot(diff);\r\n    }\r\n\r\n    /**\r\n     * 与线段的距离\r\n     * @param segment\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceToSegment(segment: LineSegment3, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Segment3Segment3Distance> = null): number {\r\n        return Math.sqrt(this.distanceSqToSegment(segment, closestPoint0, closestPoint1, parameter));\r\n    }\r\n\r\n    /**\r\n     * 线段到三角形的SQ距离\r\n     * @param triangle\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceSqToTriangle(triangle: Triangle, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Segment3TriangleDistance> = null): number {\r\n        const segCenter = _tempVec1;\r\n        const segDirection = _tempVec2;\r\n        const segExtent = this.getCenteredForm(segCenter, segDirection);\r\n\r\n        const ltResult = {\r\n            lineParameter: 0,\r\n            triangleParameter: []\r\n        };\r\n        const line = new Line3(segCenter, segDirection);\r\n        let sqrDistance = line.distanceSqToTriangle(triangle, closestPoint0, closestPoint1, ltResult);\r\n\r\n        if (ltResult.lineParameter >= -segExtent)\r\n        {\r\n            if (ltResult.lineParameter <= segExtent)\r\n            {\r\n                if (parameter) {\r\n                    parameter.segmentParameter = ltResult.lineParameter;\r\n                    parameter.triangleParameter = ltResult.triangleParameter;\r\n                }\r\n            }\r\n            else {\r\n                const point = _tempVec3.copy(segDirection).multiplyScalar(segExtent).add(segCenter);\r\n                sqrDistance = triangle.distanceSqToPoint(point, closestPoint1);\r\n                if (parameter) {\r\n                    parameter.segmentParameter = segExtent;\r\n                }\r\n                if (closestPoint0) {\r\n                    closestPoint0.copy(point);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            const point = _tempVec3.copy(segDirection).multiplyScalar(segExtent).subVectors(segCenter, _tempVec3);\r\n            sqrDistance = triangle.distanceSqToPoint(point, closestPoint1);\r\n            if (parameter) {\r\n                parameter.segmentParameter = segExtent;\r\n            }\r\n            if (closestPoint0) {\r\n                closestPoint0.copy(point);\r\n            }\r\n        }\r\n        return sqrDistance;\r\n    }\r\n\r\n    /**\r\n     * 线段到三角形的距离\r\n     * @param triangle\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceToTriangle(triangle: Triangle, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Segment3TriangleDistance> = null): number {\r\n        return Math.sqrt(this.distanceSqToTriangle(triangle, closestPoint0, closestPoint1, parameter));\r\n    }\r\n\r\n    /**\r\n     * 到包围盒的SQ距离\r\n     * @param box\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceSqToBox(box: Box3, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Segment3Box3Distance> = null): number {\r\n\r\n        const segCenter = _tempVec1;\r\n        const segDirection = _tempVec2;\r\n        const segExtent = this.getCenteredForm(segCenter, segDirection);\r\n\r\n        const lbResult = {\r\n            sqrDistance: 0,\r\n            lineParameter: 0\r\n        };\r\n        const line = new Line3(segCenter, segDirection);\r\n        let sqrDistance = line.distanceSqToBox(box, closestPoint0, closestPoint1, lbResult);\r\n        if (lbResult.lineParameter >= -segExtent) {\r\n\r\n            if (lbResult.lineParameter <= segExtent) {\r\n\r\n                if (parameter) {\r\n                    parameter.segmentParameter = lbResult.lineParameter;\r\n                }\r\n            }\r\n            else {\r\n                const point = _tempVec3.copy(segDirection).multiplyScalar(segExtent).add(segCenter);\r\n                sqrDistance = box.distanceSqToPoint(point, closestPoint1);\r\n                if (parameter) {\r\n                    parameter.segmentParameter = segExtent;\r\n                }\r\n                if (closestPoint0) {\r\n                    closestPoint0.copy(point);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            const point = _tempVec3.copy(segDirection).multiplyScalar(segExtent).subVectors(segCenter, _tempVec3);\r\n            sqrDistance = box.distanceSqToPoint(point, closestPoint1);\r\n            if (parameter) {\r\n                parameter.segmentParameter = segExtent;\r\n            }\r\n            if (closestPoint0) {\r\n                closestPoint0.copy(point);\r\n            }\r\n        }\r\n        return sqrDistance;\r\n    }\r\n\r\n    /**\r\n     * 到包围盒的距离\r\n     * @param box\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceToBox(box: Box3, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Segment3Box3Distance> = null): number {\r\n        return Math.sqrt(this.distanceSqToBox(box, closestPoint0, closestPoint1, parameter));\r\n    }\r\n\r\n    /**\r\n     * 到OBB的SQ距离\r\n     * @param box\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceSqToOBB(box: OBB, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Segment3OBBDistance> = null): number {\r\n\r\n        const segCenter = _tempVec1;\r\n        const segDirection = _tempVec2;\r\n        const segExtent = this.getCenteredForm(segCenter, segDirection);\r\n\r\n        const lbResult = {\r\n            sqrDistance: 0,\r\n            lineParameter: 0\r\n        };\r\n        const line = new Line3(segCenter, segDirection);\r\n        let sqrDistance = line.distanceSqToOBB(box, closestPoint0, closestPoint1, lbResult);\r\n        if (lbResult.lineParameter >= -segExtent) {\r\n\r\n            if (lbResult.lineParameter <= segExtent) {\r\n\r\n                if (parameter) {\r\n                    parameter.segmentParameter = lbResult.lineParameter;\r\n                }\r\n            }\r\n            else {\r\n                const point = _tempVec3.copy(segDirection).multiplyScalar(segExtent).add(segCenter);\r\n                sqrDistance = box.distanceSqToPoint(point, closestPoint1);\r\n                if (parameter) {\r\n                    parameter.segmentParameter = segExtent;\r\n                }\r\n                if (closestPoint0) {\r\n                    closestPoint0.copy(point);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            const point = _tempVec3.copy(segDirection).multiplyScalar(segExtent).subVectors(segCenter, _tempVec3);\r\n            sqrDistance = box.distanceSqToPoint(point, closestPoint1);\r\n            if (parameter) {\r\n                parameter.segmentParameter = segExtent;\r\n            }\r\n            if (closestPoint0) {\r\n                closestPoint0.copy(point);\r\n            }\r\n        }\r\n        return sqrDistance;\r\n    }\r\n\r\n    /**\r\n     * 到OBB的距离\r\n     * @param box\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceToOBB(box: OBB, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Segment3OBBDistance> = null): number {\r\n        return Math.sqrt(this.distanceSqToOBB(box, closestPoint0, closestPoint1, parameter));\r\n    }\r\n\r\n    /**\r\n     * 是否与三角形相交\r\n     * @param triangle\r\n     */\r\n    public intersectsTriangle(triangle: Triangle): boolean {\r\n\r\n        const segOrigin = _tempVec1;\r\n        const segDirection = _tempVec2;\r\n        const segExtent = this.getCenteredForm(segOrigin, segDirection);\r\n\r\n        const diff = _tempVec3.subVectors(segOrigin, triangle.p[0]);\r\n        const edge1 = _tempVec4.subVectors(triangle.p[1], triangle.p[0]);\r\n        const edge2 = _tempVec5.subVectors(triangle.p[2], triangle.p[0]);\r\n        const normal = _tempVec6.crossVectors(edge1, edge2);\r\n\r\n        let DdN = segDirection.dot(normal);\r\n        let sign;\r\n        if (DdN > 0) {\r\n            sign = 1;\r\n        }\r\n        else if (DdN < 0) {\r\n            sign = -1;\r\n            DdN = -DdN;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n\r\n        const DdQxE2 = sign * segDirection.dotCross(diff, edge2);\r\n        if (DdQxE2 >= 0) {\r\n            const DdE1xQ = sign * segDirection.dotCross(edge1, diff);\r\n            if (DdE1xQ >= 0) {\r\n                if (DdQxE2 + DdE1xQ <= DdN) {\r\n                    const QdN = -sign * diff.dot(normal);\r\n                    const extDdN = segExtent * DdN;\r\n                    if (-extDdN <= QdN && QdN <= extDdN) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 与三角形相交检测\r\n     * @param triangle\r\n     */\r\n    public intersectTriangle(triangle: Triangle): Segment3TriangleIntersect {\r\n\r\n        const segOrigin = _tempVec1;\r\n        const segDirection = _tempVec2;\r\n        const segExtent = this.getCenteredForm(segOrigin, segDirection);\r\n\r\n        const diff = _tempVec3.subVectors(segOrigin, triangle.p[0]);\r\n        const edge1 = _tempVec4.subVectors(triangle.p[1], triangle.p[0]);\r\n        const edge2 = _tempVec5.subVectors(triangle.p[2], triangle.p[0]);\r\n        const normal = _tempVec6.crossVectors(edge1, edge2);\r\n\r\n        let DdN = segDirection.dot(normal);\r\n        let sign;\r\n        if (DdN > 0) {\r\n            sign = 1;\r\n        }\r\n        else if (DdN < 0) {\r\n            sign = -1;\r\n            DdN = -DdN;\r\n        }\r\n        else {\r\n           return {\r\n               intersect: false\r\n           };\r\n        }\r\n\r\n        const DdQxE2 = sign * segDirection.dotCross(diff, edge2);\r\n        if (DdQxE2 >= 0)\r\n        {\r\n            const DdE1xQ = sign * segDirection.dotCross(edge1, diff);\r\n            if (DdE1xQ >= 0)\r\n            {\r\n                if (DdQxE2 + DdE1xQ <= DdN)\r\n                {\r\n                    const QdN = -sign * diff.dot(normal);\r\n                    const extDdN = segExtent * DdN;\r\n                    if (-extDdN <= QdN && QdN <= extDdN)\r\n                    {\r\n                        const inv = (1) / DdN;\r\n\r\n                        const result = {\r\n                            intersect: true,\r\n                            parameter: QdN * inv,\r\n                            triangleBary: new Array<number>(3),\r\n                            point: new Vector3()\r\n                        };\r\n\r\n                        result.triangleBary[1] = DdQxE2 * inv;\r\n                        result.triangleBary[2] = DdE1xQ * inv;\r\n                        result.triangleBary[0] = 1 - result.triangleBary[1] - result.triangleBary[2];\r\n                        result.point.copy(segDirection).multiplyScalar(result.parameter).add(segOrigin);\r\n                        return result;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            intersect: false\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 是否与包围球相交\r\n     * @param sphere\r\n     */\r\n    public intersectsSphere(sphere: Sphere): boolean {\r\n\r\n        const segOrigin = _tempVec1;\r\n        const segDirection = _tempVec2;\r\n        const segExtent = this.getCenteredForm(segOrigin, segDirection);\r\n\r\n        const diff = _tempVec3.subVectors(segOrigin, sphere.center);\r\n        const a0 = diff.dot(diff) - sphere.radius * sphere.radius;\r\n        const a1 = segDirection.dot(diff);\r\n        const discr = a1 * a1 - a0;\r\n        if (discr < 0) {\r\n            return false;\r\n        }\r\n\r\n        const tmp0 = segExtent * segExtent + a0;\r\n        const tmp1 = (2) * a1 * segExtent;\r\n        const qm = tmp0 - tmp1;\r\n        const qp = tmp0 + tmp1;\r\n        if (qm * qp <= 0) {\r\n           return true;\r\n        }\r\n\r\n        return (qm > 0 && Math.abs(a1) < segExtent);\r\n    }\r\n\r\n    /**\r\n     * 与包围球相交检测\r\n     * @param sphere\r\n     */\r\n    public intersectSphere(sphere: Sphere): Segment3SphereIntersect {\r\n\r\n        const segOrigin = _tempVec1;\r\n        const segDirection = _tempVec2;\r\n        const segExtent = this.getCenteredForm(segOrigin, segDirection);\r\n\r\n        const line = new Line3(segOrigin, segDirection);\r\n        const result = line.intersectSphere(sphere);\r\n        if (result.intersect) {\r\n            const segInterval = [ -segExtent, segExtent ];\r\n\r\n            const iiResult = Intervals.staticQuery(result.parameter, segInterval);\r\n            if (iiResult.intersect) {\r\n                result.numIntersections = iiResult.numIntersections;\r\n                result.parameter = iiResult.overlap;\r\n            }\r\n            else {\r\n                result.intersect = false;\r\n                result.numIntersections = 0;\r\n            }\r\n        }\r\n\r\n        result.point.length = 0;\r\n        for (let i = 0; i < result.numIntersections; ++i) {\r\n            result.point[i] = new Vector3().copy(segDirection).multiplyScalar(result.parameter[i]).add(segOrigin);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 是否与平面相交\r\n     * @param plane\r\n     */\r\n    public intersectsPlane(plane: Plane): boolean {\r\n\r\n        const sdistance0 = plane.distanceToPoint(this.p[0]);\r\n        if (sdistance0 == 0) {\r\n            return true;\r\n        }\r\n\r\n        const sdistance1 = plane.distanceToPoint(this.p[1]);\r\n        if (sdistance1 == 0) {\r\n            return true;\r\n        }\r\n\r\n        return (sdistance0 * sdistance1 < 0);\r\n    }\r\n\r\n    /**\r\n     * 与平面相交检测\r\n     * @param plane\r\n     */\r\n    public intersectPlane(plane: Plane): Segment3PlaneIntersect {\r\n\r\n        const segOrigin = _tempVec1;\r\n        const segDirection = _tempVec2;\r\n        const segExtent = this.getCenteredForm(segOrigin, segDirection);\r\n\r\n        const line = new Line3(segOrigin, segDirection);\r\n        const result = line.intersectPlane(plane);\r\n\r\n        if (result.intersect) {\r\n            if (Math.abs(result.parameter) > segExtent) {\r\n                result.intersect = false;\r\n                result.numIntersections = 0;\r\n            }\r\n            else {\r\n                result.point.copy(segDirection).multiplyScalar(result.parameter).add(segOrigin);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 是否与包围盒相交\r\n     * @param box\r\n     */\r\n    public intersectsBox3(box: Box3): boolean {\r\n\r\n        const boxCenter = box.getCenter(_tempVec1);\r\n        const boxExtent = box.getCenter(_tempVec2);\r\n\r\n        const transformedP0 = _tempVec3.subVectors(this.p[0], boxCenter);\r\n        const transformedP1 = _tempVec4.subVectors(this.p[1], boxCenter);\r\n\r\n        const  transformedSegment = new LineSegment3(transformedP0, transformedP1);\r\n\r\n        const segOrigin = _tempVec5;\r\n        const segDirection = _tempVec6;\r\n        const segExtent = transformedSegment.getCenteredForm(segOrigin, segDirection);\r\n\r\n        return LineSegment3.intersectsBox(segOrigin, segDirection, segExtent, boxExtent);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param segOrigin\r\n     * @param segDirection\r\n     * @param segExtent\r\n     * @param boxExtent\r\n     */\r\n    public static intersectsBox(segOrigin: Vector3, segDirection: Vector3, segExtent: number, boxExtent: Vector3): boolean {\r\n\r\n        for (let i = 0; i < 3; ++i) {\r\n            if (Math.abs(segOrigin.p[i]) > boxExtent.p[i] + segExtent * Math.abs(segDirection.p[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return Line3.intersectsBox(segOrigin, segDirection, boxExtent);\r\n    }\r\n\r\n    /**\r\n     * 与包围盒相交检测\r\n     * @param box\r\n     */\r\n    public intersectBox(box: Box3): Segment3Box3Intersect {\r\n\r\n        const boxCenter = box.getCenter(_tempVec1);\r\n        const boxExtent = box.getCenter(_tempVec2);\r\n\r\n        const transformedP0 = _tempVec3.subVectors(this.p[0], boxCenter);\r\n        const transformedP1 = _tempVec4.subVectors(this.p[1], boxCenter);\r\n\r\n        const  transformedSegment = new LineSegment3(transformedP0, transformedP1);\r\n\r\n        const segOrigin = _tempVec5;\r\n        const segDirection = _tempVec6;\r\n        const segExtent = transformedSegment.getCenteredForm(segOrigin, segDirection);\r\n\r\n        const result = {\r\n            intersect: false,\r\n            numPoints: 0,\r\n            lineParameter: new Array<number>(2),\r\n            point: new Array<Vector3>(2)\r\n        };\r\n\r\n        LineSegment3.intersectBox(segOrigin, segDirection, segExtent, boxExtent, result);\r\n\r\n        segOrigin.add(boxCenter);\r\n        for (let i = 0; i < result.numPoints; ++i) {\r\n            result.point[i] = new Vector3().copy(segDirection).multiplyScalar(result.lineParameter[i]).add(segOrigin);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param segOrigin\r\n     * @param segDirection\r\n     * @param segExtent\r\n     * @param boxExtent\r\n     * @param result\r\n     */\r\n    public static intersectBox(segOrigin: Vector3, segDirection: Vector3, segExtent: number, boxExtent: Vector3, result: Segment3Box3Intersect): void {\r\n\r\n        Line3.intersectBox(segOrigin, segDirection, boxExtent, result);\r\n\r\n        if (result.intersect) {\r\n            const interval0 = [result.lineParameter[0], result.lineParameter[1]];\r\n            const interval1 = [-segExtent, segExtent];\r\n\r\n            const iiResult = Intervals.staticQuery(interval0, interval1);\r\n            if (iiResult.numIntersections > 0) {\r\n                result.numPoints = iiResult.numIntersections;\r\n                for (let i = 0; i < result.numPoints; ++i) {\r\n                    result.lineParameter[i] = iiResult.overlap[i];\r\n                }\r\n            }\r\n            else {\r\n                result.intersect = false;\r\n                result.numPoints = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否与OBB相交\r\n     * @param box\r\n     */\r\n    public intersectsOBB(box: OBB): boolean {\r\n\r\n        const tmpOrigin = _tempVec1;\r\n        const tmpDirection = _tempVec2;\r\n        const segExtent = this.getCenteredForm(tmpOrigin, tmpDirection);\r\n\r\n        const diff = _tempVec3.subVectors(tmpOrigin, box.center);\r\n        const segOrigin = _tempVec4.set(diff.dot(box.axis[0]), diff.dot(box.axis[1]), diff.dot(box.axis[2]));\r\n        const segDirection = _tempVec5.set(tmpDirection.dot(box.axis[0]), tmpDirection.dot(box.axis[1]), tmpDirection.dot(box.axis[2]));\r\n\r\n        return LineSegment3.intersectsBox(segOrigin, segDirection, segExtent, box.extent);\r\n    }\r\n\r\n    /**\r\n     * 与OBB相交检测\r\n     * @param box\r\n     */\r\n    public intersectOBB(box: OBB): Segment3OBBIntersect {\r\n\r\n        const tmpOrigin = _tempVec1;\r\n        const tmpDirection = _tempVec2;\r\n        const segExtent = this.getCenteredForm(tmpOrigin, tmpDirection);\r\n\r\n        const diff = _tempVec3.subVectors(tmpOrigin, box.center);\r\n        const segOrigin = _tempVec4.set(diff.dot(box.axis[0]), diff.dot(box.axis[1]), diff.dot(box.axis[2]));\r\n        const segDirection = _tempVec5.set(tmpDirection.dot(box.axis[0]), tmpDirection.dot(box.axis[1]), tmpDirection.dot(box.axis[2]));\r\n\r\n        const result = {\r\n            intersect: false,\r\n            numPoints: 0,\r\n            lineParameter: new Array<number>(2),\r\n            point: new Array<Vector3>(2)\r\n        };\r\n\r\n        LineSegment3.intersectBox(segOrigin, segDirection, segExtent, box.extent, result);\r\n\r\n        for (let i = 0; i < result.numPoints; ++i) {\r\n\r\n            const y = _tempVec1.copy(segDirection).multiplyScalar(result.lineParameter[i]).add(segOrigin);\r\n            result.point[i].copy(box.center);\r\n\r\n            for (let j = 0; j < 3; ++j) {\r\n                result.point[i].add(_tempVec2.copy(box.axis[j]).multiplyScalar(y.p[j]));\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 乘以Matrix4矩阵\r\n     * @param matrix\r\n     */\r\n    public applyMatrix4(matrix: Matrix4): LineSegment3 {\r\n        this.start.applyMatrix4(matrix);\r\n        this.end.applyMatrix4(matrix);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 是否相等\r\n     * @param line\r\n     */\r\n    public equals(line: LineSegment3): boolean {\r\n        return line.start.equals(this.start) && line.end.equals(this.end);\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @param slope\r\n * @param h0\r\n * @param h1\r\n */\r\nfunction getClampedRoot(slope: number, h0: number, h1: number): number {\r\n    let r;\r\n    if (h0 < 0) {\r\n        if (h1 > 0) {\r\n            r = -h0 / slope;\r\n            if (r > 1) {\r\n                r = 0.5;\r\n            }\r\n        }\r\n        else {\r\n            r = 1;\r\n        }\r\n    }\r\n    else {\r\n        r = 0;\r\n    }\r\n    return r;\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @param sValue\r\n * @param classify\r\n * @param edge\r\n * @param end\r\n */\r\nfunction computeIntersection(sValue: number[], classify: number[], edge: number[], end: number[][]) {\r\n\r\n    if (classify[0] < 0)\r\n    {\r\n        edge[0] = 0;\r\n        end[0][0] = 0;\r\n        end[0][1] = mF00 / mB;\r\n        if (end[0][1] < 0 || end[0][1] > 1)\r\n        {\r\n            end[0][1] = 0.5;\r\n        }\r\n\r\n        if (classify[1] == 0)\r\n        {\r\n            edge[1] = 3;\r\n            end[1][0] = sValue[1];\r\n            end[1][1] = 1;\r\n        }\r\n        else  // classify[1] > 0\r\n        {\r\n            edge[1] = 1;\r\n            end[1][0] = 1;\r\n            end[1][1] = mF10 / mB;\r\n            if (end[1][1] < 0 || end[1][1] > 1)\r\n            {\r\n                end[1][1] = 0.5;\r\n            }\r\n        }\r\n    }\r\n    else if (classify[0] == 0)\r\n    {\r\n        edge[0] = 2;\r\n        end[0][0] = sValue[0];\r\n        end[0][1] = 0;\r\n\r\n        if (classify[1] < 0)\r\n        {\r\n            edge[1] = 0;\r\n            end[1][0] = 0;\r\n            end[1][1] = mF00 / mB;\r\n            if (end[1][1] < 0 || end[1][1] > 1)\r\n            {\r\n                end[1][1] = 0.5;\r\n            }\r\n        }\r\n        else if (classify[1] == 0)\r\n        {\r\n            edge[1] = 3;\r\n            end[1][0] = sValue[1];\r\n            end[1][1] = 1;\r\n        }\r\n        else\r\n        {\r\n            edge[1] = 1;\r\n            end[1][0] = 1;\r\n            end[1][1] = mF10 / mB;\r\n            if (end[1][1] < 0 || end[1][1] > 1)\r\n            {\r\n                end[1][1] = 0.5;\r\n            }\r\n        }\r\n    }\r\n    else  // classify[0] > 0\r\n    {\r\n        edge[0] = 1;\r\n        end[0][0] = 1;\r\n        end[0][1] = mF10 / mB;\r\n        if (end[0][1] < 0 || end[0][1] > 1)\r\n        {\r\n            end[0][1] = 0.5;\r\n        }\r\n\r\n        if (classify[1] == 0)\r\n        {\r\n            edge[1] = 3;\r\n            end[1][0] = sValue[1];\r\n            end[1][1] = 1;\r\n        }\r\n        else\r\n        {\r\n            edge[1] = 0;\r\n            end[1][0] = 0;\r\n            end[1][1] = mF00 / mB;\r\n            if (end[1][1] < 0 || end[1][1] > 1)\r\n            {\r\n                end[1][1] = 0.5;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @param edge\r\n * @param end\r\n * @param parameter\r\n */\r\nfunction computeMinimumParameters(edge: number[], end: number[][], parameter: number[]) {\r\n\r\n    const delta = end[1][1] - end[0][1];\r\n    const h0 = delta * (-mB * end[0][0] + mC * end[0][1] - mE);\r\n    if (h0 >= 0)\r\n    {\r\n        if (edge[0] == 0)\r\n        {\r\n            parameter[0] = 0;\r\n            parameter[1] = getClampedRoot(mC, mG00, mG01);\r\n        }\r\n        else if (edge[0] == 1)\r\n        {\r\n            parameter[0] = 1;\r\n            parameter[1] = getClampedRoot(mC, mG10, mG11);\r\n        }\r\n        else\r\n        {\r\n            parameter[0] = end[0][0];\r\n            parameter[1] = end[0][1];\r\n        }\r\n    }\r\n    else\r\n    {\r\n        const h1 = delta * (-mB * end[1][0] + mC * end[1][1] - mE);\r\n        if (h1 <= 0)\r\n        {\r\n            if (edge[1] == 0)\r\n            {\r\n                parameter[0] = 0;\r\n                parameter[1] = getClampedRoot(mC, mG00, mG01);\r\n            }\r\n            else if (edge[1] == 1)\r\n            {\r\n                parameter[0] = 1;\r\n                parameter[1] = getClampedRoot(mC, mG10, mG11);\r\n            }\r\n            else\r\n            {\r\n                parameter[0] = end[1][0];\r\n                parameter[1] = end[1][1];\r\n            }\r\n        }\r\n        else  // h0 < 0 and h1 > 0\r\n        {\r\n            const z = Math.min(Math.max(h0 / (h0 - h1), 0), 1);\r\n            const omz = 1 - z;\r\n            parameter[0] = omz * end[0][0] + z * end[1][0];\r\n            parameter[1] = omz * end[0][1] + z * end[1][1];\r\n        }\r\n    }\r\n}\r\n",
        "import { Vector2 } from \"./Vector2\";\r\nimport { Nullable } from \"../types\";\r\nimport { Line2Line2Distance, Line2Ray2Distance, Line2Segment2Distance } from \"./InterfaceType/DistanceResult\";\r\nimport {\r\n    Line2Box2Intersect,\r\n    Line2Line2Intersect,\r\n    Line2Ray2Intersect,\r\n    Line2Segment2Intersect\r\n} from \"./InterfaceType/IntersectResult\";\r\nimport { LineSegment2 } from \"./LineSegment2\";\r\nimport { Ray2 } from \"./Ray2\";\r\nimport { Box2 } from \"./Box2\";\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec1 = new Vector2();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec2 = new Vector2();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec3 = new Vector2();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec4 = new Vector2();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec5 = new Vector2();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec6 = new Vector2();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec7 = new Vector2();\r\n\r\n/**\r\n * 2D直线\r\n * @category Math\r\n */\r\nexport class Line2 {\r\n\r\n    /**\r\n     * 原点\r\n     */\r\n    public origin: Vector2;\r\n    /**\r\n     * 方向\r\n     */\r\n    public direction: Vector2;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param origin\r\n     * @param direction\r\n     */\r\n    constructor(origin: Nullable<Vector2> = null, direction: Nullable<Vector2> = null) {\r\n        this.origin = new Vector2();\r\n        this.direction = new Vector2(-1, 0);\r\n\r\n        if (origin) {\r\n            this.origin.copy(origin);\r\n        }\r\n        if (direction) {\r\n            this.direction.copy(direction);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置原点和方向\r\n     * @param origin\r\n     * @param direction\r\n     */\r\n    public set(origin: Vector2, direction: Vector2): Line2 {\r\n        this.origin.copy(origin);\r\n        this.direction.copy(direction);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): Line2 {\r\n        return new Line2().copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param ray\r\n     */\r\n    public copy(ray: Line2): Line2 {\r\n        this.origin.copy(ray.origin);\r\n        this.direction.copy(ray.direction);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 点到直线的最近点\r\n     * @param point\r\n     * @param target\r\n     */\r\n    public closestPointToPoint(point: Vector2, target = new Vector2()): Vector2 {\r\n        target.subVectors(point, this.origin);\r\n\r\n        const directionDistance = target.dot(this.direction);\r\n        return target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\r\n    }\r\n\r\n    /**\r\n     * 到坐标点的SQ距离\r\n     * @param point\r\n     * @param lineClosest\r\n     */\r\n    public distanceSqToPoint(point: Vector2, lineClosest: Nullable<Vector2> = null): number {\r\n\r\n        const diff = _tempVec1.subVectors(point, this.origin);\r\n        const lineParameter = this.direction.dot(diff);\r\n        _tempVec2.copy(this.direction).multiplyScalar(lineParameter).add(this.origin);\r\n\r\n        if (lineClosest) {\r\n            lineClosest.copy(_tempVec2);\r\n        }\r\n\r\n        diff.subVectors(point, _tempVec2);\r\n        return diff.dot(diff);\r\n    }\r\n\r\n    /**\r\n     * 到坐标点的距离\r\n     * @param point\r\n     * @param lineClosest\r\n     */\r\n    public distanceToPoint(point: Vector2, lineClosest: Nullable<Vector2> = null): number {\r\n        return Math.sqrt(this.distanceSqToPoint(point, lineClosest));\r\n    }\r\n\r\n    /**\r\n     * 到射线的SQ距离\r\n     * @param ray\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceSqToRay(ray: Ray2, closestPoint0: Nullable<Vector2> = null, closestPoint1: Nullable<Vector2> = null, parameter: Nullable<Line2Ray2Distance> = null): number {\r\n\r\n        const diff = _tempVec1.subVectors(this.origin, ray.origin);\r\n        let a01 = -this.direction.dot(ray.direction);\r\n        let b0 = diff.dot(this.direction);\r\n        let s0, s1;\r\n\r\n        if (Math.abs(a01) < 1) {\r\n            const b1 = -diff.dot(ray.direction);\r\n            s1 = a01 * b0 - b1;\r\n\r\n            if (s1 >= 0) {\r\n                // Two interior points are closest, one on line and one\r\n                // on ray.\r\n                const det = 1 - a01 * a01;\r\n                s0 = (a01 * b1 - b0) / det;\r\n                s1 /= det;\r\n            }\r\n            else {\r\n                // Origin of ray and interior point of line are closest.\r\n                s0 = -b0;\r\n                s1 = 0;\r\n            }\r\n        }\r\n        else {\r\n            // Lines are parallel, closest pair with one point at ray\r\n            // origin.\r\n            s0 = -b0;\r\n            s1 = 0;\r\n        }\r\n\r\n        _tempVec2.copy(this.direction).multiplyScalar(s0).add(this.origin);\r\n        _tempVec3.copy(ray.direction).multiplyScalar(s1).add(ray.origin);\r\n\r\n        if (closestPoint0) {\r\n            closestPoint0.copy(_tempVec2);\r\n        }\r\n        if (closestPoint1) {\r\n            closestPoint1.copy(_tempVec3);\r\n        }\r\n        if (parameter) {\r\n            parameter.parameter = [s0, s1];\r\n        }\r\n        diff.subVectors(_tempVec2, _tempVec3);\r\n        return diff.dot(diff);\r\n    }\r\n\r\n    /**\r\n     * 到射线的距离\r\n     * @param ray\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceToRay(ray: Ray2, closestPoint0: Nullable<Vector2> = null, closestPoint1: Nullable<Vector2> = null, parameter: Nullable<Line2Ray2Distance> = null): number {\r\n        return Math.sqrt(this.distanceSqToRay(ray, closestPoint0, closestPoint1, parameter));\r\n    }\r\n\r\n    /**\r\n     * 到线段的SQ距离\r\n     * @param segment\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceSqToSegment(segment: LineSegment2, closestPoint0: Nullable<Vector2> = null, closestPoint1: Nullable<Vector2> = null, parameter: Nullable<Line2Segment2Distance> = null): number {\r\n\r\n        const segCenter = _tempVec1;\r\n        const segDirection = _tempVec2;\r\n        const segExtent = segment.getCenteredForm(segCenter, segDirection);\r\n\r\n        const diff = _tempVec3.subVectors(this.origin, segCenter);\r\n        let a01 = -this.direction.dot(segDirection);\r\n        let b0 = diff.dot(this.direction);\r\n        let s0, s1;\r\n\r\n        if (Math.abs(a01) < 1) {\r\n            // The line and segment are not parallel.\r\n            const det = 1 - a01 * a01;\r\n            const extDet = segExtent * det;\r\n            const b1 = -diff.dot(segDirection);\r\n            s1 = a01 * b0 - b1;\r\n\r\n            if (s1 >= -extDet) {\r\n                if (s1 <= extDet) {\r\n                    // Two interior points are closest, one on the line\r\n                    // and one on the segment.\r\n                    s0 = (a01 * b1 - b0) / det;\r\n                    s1 /= det;\r\n                }\r\n                else {\r\n                    // The endpoint e1 of the segment and an interior\r\n                    // point of the line are closest.\r\n                    s1 = segExtent;\r\n                    s0 = -(a01 * s1 + b0);\r\n                }\r\n            }\r\n            else {\r\n                // The endpoint e0 of the segment and an interior point\r\n                // of the line are closest.\r\n                s1 = -segExtent;\r\n                s0 = -(a01 * s1 + b0);\r\n            }\r\n        }\r\n        else {\r\n            // The line and segment are parallel.  Choose the closest pair\r\n            // so that one point is at segment origin.\r\n            s1 = 0;\r\n            s0 = -b0;\r\n        }\r\n\r\n        _tempVec4.copy(this.direction).multiplyScalar(s0).add(this.origin);\r\n        _tempVec5.copy(segDirection).multiplyScalar(s1).add(segCenter);\r\n\r\n        if (closestPoint0) {\r\n            closestPoint0.copy(_tempVec4);\r\n        }\r\n        if (closestPoint1) {\r\n            closestPoint1.copy(_tempVec5);\r\n        }\r\n\r\n        if (parameter) {\r\n            parameter.parameter = [s0, s1];\r\n        }\r\n\r\n        diff.subVectors(_tempVec4, _tempVec5);\r\n        return diff.dot(diff);\r\n    }\r\n\r\n    /**\r\n     * 到线段的距离\r\n     * @param segment\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceToSegment(segment: LineSegment2, closestPoint0: Nullable<Vector2> = null, closestPoint1: Nullable<Vector2> = null, parameter: Nullable<Line2Segment2Distance> = null): number {\r\n        return Math.sqrt(this.distanceSqToSegment(segment, closestPoint0, closestPoint1, parameter));\r\n    }\r\n\r\n    /**\r\n     * 到直线的SQ距离\r\n     * @param line\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceSqToLine(line: Line2, closestPoint0: Nullable<Vector2> = null, closestPoint1: Nullable<Vector2> = null, parameter: Nullable<Line2Line2Distance> = null): number {\r\n\r\n        const line0 = this;\r\n        const line1 = line;\r\n\r\n        const diff = _tempVec1.subVectors(line0.origin, line1.origin);\r\n        let a01 = -line0.direction.dot(line1.direction);\r\n        let b0 = diff.dot(line0.direction);\r\n        let s0, s1;\r\n\r\n        if (Math.abs(a01) < 1) {\r\n            // Lines are not parallel.\r\n            const det = 1 - a01 * a01;\r\n            const b1 = -diff.dot(line1.direction);\r\n            s0 = (a01 * b1 - b0) / det;\r\n            s1 = (a01 * b0 - b1) / det;\r\n        }\r\n        else {\r\n            // Lines are parallel, select any pair of closest points.\r\n            s0 = -b0;\r\n            s1 = 0;\r\n        }\r\n\r\n        _tempVec4.copy(line0.direction).multiplyScalar(s0).add(line0.origin);\r\n        _tempVec5.copy(line1.direction).multiplyScalar(s1).add(line1.origin);\r\n\r\n        if (closestPoint0) {\r\n            closestPoint0.copy(_tempVec4);\r\n        }\r\n        if (closestPoint1) {\r\n            closestPoint1.copy(_tempVec5);\r\n        }\r\n        if (parameter) {\r\n            parameter.parameter = [s0, s1];\r\n        }\r\n\r\n        diff.subVectors(_tempVec4, _tempVec5);\r\n        return diff.dot(diff);\r\n    }\r\n\r\n    /**\r\n     * 到直线的距离\r\n     * @param line\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceToLine(line: Line2, closestPoint0: Nullable<Vector2> = null, closestPoint1: Nullable<Vector2> = null, parameter: Nullable<Line2Line2Distance> = null): number {\r\n        return Math.sqrt(this.distanceSqToLine(line, closestPoint0, closestPoint1, parameter));\r\n    }\r\n\r\n    /**\r\n     * 是否与包围盒相交\r\n     * @param box\r\n     */\r\n    public intersectsBox(box: Box2): boolean {\r\n\r\n        const boxCenter = box.getCenter(_tempVec1);\r\n        const boxExtent = box.getExtent(_tempVec2);\r\n\r\n        const lineOrigin = _tempVec3.subVectors(this.origin, boxCenter);\r\n        return Line2.intersectsBox(lineOrigin, this.direction, boxExtent);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param lineOrigin\r\n     * @param lineDirection\r\n     * @param boxExtent\r\n     */\r\n    public static intersectsBox(lineOrigin: Vector2, lineDirection: Vector2, boxExtent: Vector2): boolean {\r\n\r\n        const LHS = Math.abs(lineDirection.dotPerp(lineOrigin));\r\n        const RHS = boxExtent.p[0] * Math.abs(lineDirection.p[1]) + boxExtent.p[1] * Math.abs(lineDirection.p[0]);\r\n        return (LHS <= RHS);\r\n    }\r\n\r\n    /**\r\n     * 与包围盒相交检测\r\n     * @param box\r\n     */\r\n    public intersectBox(box: Box2): Line2Box2Intersect {\r\n\r\n        const boxCenter = box.getCenter(_tempVec1);\r\n        const boxExtent = box.getExtent(_tempVec2);\r\n\r\n        const lineOrigin = _tempVec3.subVectors(this.origin, boxCenter);\r\n\r\n        const result = {\r\n            intersect: false,\r\n            numIntersections: 0,\r\n            parameter: new Array<number>(2),\r\n            point: new Array<Vector2>(2)\r\n        };\r\n\r\n        Line2.intersectBox(lineOrigin, this.direction, boxExtent, result);\r\n\r\n        for (let i = 0; i < result.numIntersections; ++i) {\r\n            result.point[i] = new Vector2().copy(this.direction).multiplyScalar(result.parameter[i]).add(this.origin);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param lineOrigin\r\n     * @param lineDirection\r\n     * @param boxExtent\r\n     * @param result\r\n     */\r\n    public static intersectBox(lineOrigin: Vector2, lineDirection: Vector2, boxExtent: Vector2, result: Line2Box2Intersect): void {\r\n\r\n        const clip = (denom: number, numer: number, t: number[]): boolean => {\r\n\r\n            if (denom > 0) {\r\n                if (numer > denom * t[1]) {\r\n                    return false;\r\n                }\r\n                if (numer > denom * t[0]) {\r\n                    t[0] = numer / denom;\r\n                }\r\n                return true;\r\n            }\r\n            else if (denom < 0) {\r\n                if (numer > denom * t[0]) {\r\n                    return false;\r\n                }\r\n                if (numer > denom * t[1]) {\r\n                    t[1] = numer / denom;\r\n                }\r\n                return true;\r\n            }\r\n            else {\r\n                return numer <= 0;\r\n            }\r\n        };\r\n\r\n        const t = [-Infinity, Infinity];\r\n\r\n        if (clip(+lineDirection.p[0], -lineOrigin.p[0] - boxExtent.p[0], t) &&\r\n            clip(-lineDirection.p[0], +lineOrigin.p[0] - boxExtent.p[0], t) &&\r\n            clip(+lineDirection.p[1], -lineOrigin.p[1] - boxExtent.p[1], t) &&\r\n            clip(-lineDirection.p[1], +lineOrigin.p[1] - boxExtent.p[1], t))\r\n        {\r\n            result.intersect = true;\r\n            if (t[1] > t[0])\r\n            {\r\n                result.numIntersections = 2;\r\n                result.parameter[0] = t[0];\r\n                result.parameter[1] = t[1];\r\n            }\r\n            else\r\n            {\r\n                result.numIntersections = 1;\r\n                result.parameter[0] = t[0];\r\n                result.parameter[1] = t[0];  // Used by derived classes.\r\n            }\r\n            return;\r\n        }\r\n\r\n        result.intersect = false;\r\n        result.numIntersections = 0;\r\n    }\r\n\r\n    /**\r\n     * 是否与直线相交\r\n     * @param line\r\n     */\r\n    public intersectsLine(line: Line2): boolean {\r\n\r\n        const line0 = this;\r\n        const line1 = line;\r\n\r\n        const diff = _tempVec1.subVectors(line1.origin, line0.origin);\r\n        const D0DotPerpD1 = line0.direction.dotPerp(line1.direction);\r\n\r\n        if (D0DotPerpD1 != 0) {\r\n            return true;\r\n        }\r\n        else {\r\n            diff.normalize();\r\n            const diffNDotPerpD1 = diff.dotPerp(line1.direction);\r\n            if (diffNDotPerpD1 != 0) {\r\n                return false;\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 与直线相交检测\r\n     * @param line\r\n     */\r\n    public intersectLine(line: Line2): Line2Line2Intersect {\r\n\r\n        const line0 = this;\r\n        const line1 = line;\r\n\r\n        const diff = _tempVec1.subVectors(line1.origin, line0.origin);\r\n        const D0DotPerpD1 = line0.direction.dotPerp(line1.direction);\r\n\r\n        const result = {\r\n            intersect: false,\r\n            numIntersections: 0,\r\n            line0Parameter: new Array<number>(2),\r\n            line1Parameter: new Array<number>(2),\r\n            point: new Vector2()\r\n        };\r\n\r\n        if (D0DotPerpD1 != 0)\r\n        {\r\n            // The lines are not parallel.\r\n            result.intersect = true;\r\n            result.numIntersections = 1;\r\n\r\n            const invD0DotPerpD1 = 1 / D0DotPerpD1;\r\n            const diffDotPerpD0 = diff.dotPerp(line0.direction);\r\n            const diffDotPerpD1 = diff.dotPerp(line1.direction);\r\n            const s0 = diffDotPerpD1 * invD0DotPerpD1;\r\n            const s1 = diffDotPerpD0 * invD0DotPerpD1;\r\n            result.line0Parameter[0] = s0;\r\n            result.line1Parameter[0] = s1;\r\n            result.point.copy(line0.direction).multiplyScalar(s0).add(line0.origin);\r\n        }\r\n        else\r\n        {\r\n            // The lines are parallel.\r\n            diff.normalize();\r\n            const diffNDotPerpD1 = diff.dotPerp(line1.direction);\r\n            if (Math.abs(diffNDotPerpD1) != 0)\r\n            {\r\n                // The lines are parallel but distinct.\r\n                result.intersect = false;\r\n                result.numIntersections = 0;\r\n            }\r\n            else\r\n            {\r\n                // The lines are the same.\r\n                result.intersect = true;\r\n                result.numIntersections = Infinity;\r\n\r\n                const maxReal = Infinity;\r\n                result.line0Parameter[0] = -maxReal;\r\n                result.line0Parameter[1] = +maxReal;\r\n                result.line1Parameter[0] = -maxReal;\r\n                result.line1Parameter[1] = +maxReal;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 是否与线段相交\r\n     * @param segment\r\n     */\r\n    public intersectsSegment(segment: LineSegment2): boolean {\r\n\r\n        const segOrigin = _tempVec1;\r\n        const segDirection = _tempVec2;\r\n        const segExtent = segment.getCenteredForm(segOrigin, segDirection);\r\n\r\n        const llResult = this.intersectLine(new Line2(segOrigin, segDirection));\r\n        if (llResult.numIntersections == 1) {\r\n            if (Math.abs(llResult.line1Parameter[0]) <= segExtent) {\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            return llResult.intersect;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 与线段相交检测\r\n     * @param segment\r\n     */\r\n    public intersectSegment(segment: LineSegment2): Line2Segment2Intersect {\r\n\r\n        const segOrigin = _tempVec1;\r\n        const segDirection = _tempVec2;\r\n        const segExtent = segment.getCenteredForm(segOrigin, segDirection);\r\n\r\n        const result = {\r\n            intersect: false,\r\n            numIntersections: 0,\r\n            lineParameter: new Array<number>(2),\r\n            segmentParameter: new Array<number>(2),\r\n            point: new Vector2()\r\n        };\r\n        const llResult = this.intersectLine(new Line2(segOrigin, segDirection));\r\n\r\n        if (llResult.numIntersections == 1)\r\n        {\r\n            // Test whether the line-line intersection is on the ray.\r\n            if (Math.abs(llResult.line1Parameter[0]) <= segExtent)\r\n            {\r\n                result.intersect = true;\r\n                result.numIntersections = 1;\r\n                result.lineParameter[0] = llResult.line0Parameter[0];\r\n                result.segmentParameter[0] = llResult.line1Parameter[0];\r\n                result.point = llResult.point;\r\n            }\r\n            else\r\n            {\r\n                result.intersect = false;\r\n                result.numIntersections = 0;\r\n            }\r\n        }\r\n        else if (llResult.numIntersections == Infinity)\r\n        {\r\n            result.intersect = true;\r\n            result.numIntersections = Infinity;\r\n\r\n            const maxReal = Infinity;\r\n            result.lineParameter[0] = -maxReal;\r\n            result.lineParameter[1] = +maxReal;\r\n            result.segmentParameter[0] = -segExtent;\r\n            result.segmentParameter[1] = +segExtent;\r\n        }\r\n        else\r\n        {\r\n            result.intersect = false;\r\n            result.numIntersections = 0;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 是否与射线相交\r\n     * @param ray\r\n     */\r\n    public intersectsRay(ray: Ray2): boolean {\r\n\r\n        const llResult = this.intersectLine(new Line2(ray.origin, ray.direction));\r\n        if (llResult.numIntersections == 1) {\r\n            // Test whether the line-line intersection is on the ray.\r\n            if (llResult.line1Parameter[0] >= 0) {\r\n               return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            return llResult.intersect;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 与射线相交检测\r\n     * @param ray\r\n     */\r\n    public intersectRay(ray: Ray2): Line2Ray2Intersect {\r\n\r\n        const result = {\r\n            intersect: false,\r\n            numIntersections: 0,\r\n            lineParameter: new Array<number>(2),\r\n            rayParameter: new Array<number>(2),\r\n            point: new Vector2()\r\n        };\r\n        const llResult = this.intersectLine(new Line2(ray.origin, ray.direction));\r\n\r\n        if (llResult.numIntersections == 1)\r\n        {\r\n            // Test whether the line-line intersection is on the ray.\r\n            if (llResult.line1Parameter[0] >= 0)\r\n            {\r\n                result.intersect = true;\r\n                result.numIntersections = 1;\r\n                result.lineParameter[0] = llResult.line0Parameter[0];\r\n                result.rayParameter[0] = llResult.line1Parameter[0];\r\n                result.point = llResult.point;\r\n            }\r\n            else\r\n            {\r\n                result.intersect = false;\r\n                result.numIntersections = 0;\r\n            }\r\n        }\r\n        else if (llResult.numIntersections == Infinity)\r\n        {\r\n            result.intersect = true;\r\n            result.numIntersections = Infinity;\r\n\r\n            const maxReal = Infinity;\r\n            result.lineParameter[0] = -maxReal;\r\n            result.lineParameter[1] = +maxReal;\r\n            result.rayParameter[0] = 0;\r\n            result.rayParameter[1] = +maxReal;\r\n        }\r\n        else\r\n        {\r\n            result.intersect = false;\r\n            result.numIntersections = 0;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 是否相等\r\n     * @param line\r\n     */\r\n    public equals(line: Line2): boolean {\r\n        return line.origin.equals(this.origin) && line.direction.equals(this.direction);\r\n    }\r\n}\r\n",
        "import { Curve } from \"./Curve\";\r\nimport { Vector2 } from \"../Vector2\";\r\nimport { Nullable } from \"../../types\";\r\nimport { BezierCurveFunc } from \"./BezierCurveFunc\";\r\nimport { BinaryBuffer } from \"../../Misc\";\r\n\r\n/**\r\n * 2D三次贝塞尔曲线\r\n * @category Curve\r\n */\r\nexport class CubicBezierCurve extends Curve<Vector2> {\r\n\r\n    public v0: Vector2 = new Vector2();\r\n    public v1: Vector2 = new Vector2();\r\n    public v2: Vector2 = new Vector2();\r\n    public v3: Vector2 = new Vector2();\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param v0\r\n     * @param v1\r\n     * @param v2\r\n     * @param v3\r\n     */\r\n    constructor(v0: Nullable<Vector2> = null, v1: Nullable<Vector2> = null, v2: Nullable<Vector2> = null, v3: Nullable<Vector2> = null) {\r\n        super();\r\n\r\n        this.type = 'CubicBezierCurve';\r\n\r\n        if (v0) { this.v0.copy(v0); }\r\n        if (v1) { this.v1.copy(v1); }\r\n        if (v2) { this.v2.copy(v2); }\r\n        if (v3) { this.v3.copy(v3); }\r\n    }\r\n\r\n    /**\r\n     * 获取点\r\n     * @param t\r\n     * @param optionalTarget\r\n     */\r\n    public getPoint(t: number, optionalTarget: Nullable<Vector2> = null): Vector2 {\r\n        const point = optionalTarget ?? new Vector2();\r\n\r\n        const v0 = this.v0;\r\n        const v1 = this.v1;\r\n        const v2 = this.v2;\r\n        const v3 = this.v3;\r\n\r\n        point.set(\r\n            BezierCurveFunc.CubicBezier(t, v0.x, v1.x, v2.x, v3.x),\r\n            BezierCurveFunc.CubicBezier(t, v0.y, v1.y, v2.y, v3.y),\r\n        );\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): CubicBezierCurve {\r\n        return new CubicBezierCurve().copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: CubicBezierCurve): CubicBezierCurve {\r\n        super.copy(source);\r\n\r\n        this.v0.copy(source.v0);\r\n        this.v1.copy(source.v1);\r\n        this.v2.copy(source.v2);\r\n        this.v3.copy(source.v3);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 序列化JSON\r\n     */\r\n    public toJSON(): any {\r\n        const data = super.toJSON();\r\n\r\n        data.v0 = this.v0.toArray();\r\n        data.v1 = this.v1.toArray();\r\n        data.v2 = this.v2.toArray();\r\n        data.v3 = this.v3.toArray();\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * 反序列化JSON\r\n     * @param json\r\n     */\r\n    public fromJSON(json: any): CubicBezierCurve {\r\n        super.fromJSON(json);\r\n\r\n        this.v0.fromArray(json.v0);\r\n        this.v1.fromArray(json.v1);\r\n        this.v2.fromArray(json.v2);\r\n        this.v3.fromArray(json.v3);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public toDataBuffer(dataBuffer: BinaryBuffer): CubicBezierCurve {\r\n        super.toDataBuffer(dataBuffer);\r\n\r\n        this.v0.toDataBuffer(dataBuffer);\r\n        this.v1.toDataBuffer(dataBuffer);\r\n        this.v2.toDataBuffer(dataBuffer);\r\n        this.v3.toDataBuffer(dataBuffer);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 反序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public fromDataBuffer(dataBuffer: BinaryBuffer): CubicBezierCurve {\r\n        super.fromDataBuffer(dataBuffer);\r\n\r\n        this.v0.fromDataBuffer(dataBuffer);\r\n        this.v1.fromDataBuffer(dataBuffer);\r\n        this.v2.fromDataBuffer(dataBuffer);\r\n        this.v3.fromDataBuffer(dataBuffer);\r\n\r\n        return this;\r\n    }\r\n}\r\n",
        "import { Curve } from \"./Curve\";\r\nimport { Vector3 } from \"../Vector3\";\r\nimport { Nullable } from \"../../types\";\r\nimport { BinaryBuffer } from \"../../Misc/BinaryBuffer\";\r\n\r\n/**\r\n * 3D直线路径\r\n * @category Curve\r\n */\r\nexport class LineCurve3 extends Curve<Vector3> {\r\n\r\n    public v1: Vector3 = new Vector3();\r\n    public v2: Vector3 = new Vector3();\r\n\r\n    /**\r\n     *\r\n     * @param v1\r\n     * @param v2\r\n     */\r\n    constructor(v1: Nullable<Vector3> = null, v2: Nullable<Vector3> = null) {\r\n        super();\r\n\r\n        this.type = 'LineCurve3';\r\n        this.arcLengthDivisions = 10;\r\n\r\n        if (v1) { this.v1.copy(v1); }\r\n        if (v2) { this.v2.copy(v2); }\r\n    }\r\n\r\n    /**\r\n     * 获取点\r\n     * @param t\r\n     * @param optionalTarget\r\n     */\r\n    public getPoint(t: number, optionalTarget: Nullable<Vector3> = null): Vector3 {\r\n        const point = optionalTarget ?? new Vector3();\r\n\r\n        if (t == 1) {\r\n            point.copy(this.v2);\r\n        } else {\r\n            point.copy(this.v2).sub(this.v1);\r\n            point.multiplyScalar(t).add(this.v1);\r\n        }\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * 获取点\r\n     * @param u\r\n     * @param optionalTarget\r\n     */\r\n    public getPointAt(u: number, optionalTarget: Nullable<Vector3> = null): Vector3 {\r\n        return this.getPoint(u, optionalTarget);\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): LineCurve3 {\r\n        return new LineCurve3().copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: LineCurve3): LineCurve3 {\r\n        super.copy(source);\r\n\r\n        this.v1.copy(source.v1);\r\n        this.v2.copy(source.v2);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 序列化JSON\r\n     */\r\n    public toJSON(): any {\r\n        const data = super.toJSON();\r\n        data.v1 = this.v1.toArray();\r\n        data.v2 = this.v2.toArray();\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * 反序列化JSON\r\n     * @param json\r\n     */\r\n    public fromJSON(json: any): LineCurve3 {\r\n        super.fromJSON(json);\r\n\r\n        this.v1.fromArray(json.v1);\r\n        this.v2.fromArray(json.v2);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public toDataBuffer(dataBuffer: BinaryBuffer): LineCurve3 {\r\n        super.toDataBuffer(dataBuffer);\r\n\r\n        this.v1.toDataBuffer(dataBuffer);\r\n        this.v2.toDataBuffer(dataBuffer);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 反序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public fromDataBuffer(dataBuffer: BinaryBuffer): LineCurve3 {\r\n        super.fromDataBuffer(dataBuffer);\r\n\r\n        this.v1.fromDataBuffer(dataBuffer);\r\n        this.v2.fromDataBuffer(dataBuffer);\r\n        return this;\r\n    }\r\n}\r\n",
        "import { Curve } from \"./Curve\";\r\nimport { Vector2 } from \"../Vector2\";\r\nimport { Nullable } from \"../../types\";\r\nimport { BezierCurveFunc } from \"./BezierCurveFunc\";\r\nimport { BinaryBuffer } from \"../../Misc\";\r\n\r\n/**\r\n * 2D二次贝塞尔曲线\r\n * @category Curve\r\n */\r\nexport class QuadraticBezierCurve extends Curve<Vector2> {\r\n\r\n    public v0: Vector2 = new Vector2();\r\n    public v1: Vector2 = new Vector2();\r\n    public v2: Vector2 = new Vector2();\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param v0\r\n     * @param v1\r\n     * @param v2\r\n     */\r\n    constructor(v0: Nullable<Vector2> = null, v1: Nullable<Vector2> = null, v2: Nullable<Vector2> = null) {\r\n        super();\r\n\r\n        this.type = 'QuadraticBezierCurve';\r\n\r\n        if (v0) { this.v0.copy(v0); }\r\n        if (v1) { this.v1.copy(v1); }\r\n        if (v2) { this.v2.copy(v2); }\r\n    }\r\n\r\n    /**\r\n     * 获取点\r\n     * @param t\r\n     * @param optionalTarget\r\n     */\r\n    public getPoint(t: number, optionalTarget: Nullable<Vector2> = null): Vector2 {\r\n        const point = optionalTarget ?? new Vector2();\r\n\r\n        const v0 = this.v0;\r\n        const v1 = this.v1;\r\n        const v2 = this.v2;\r\n\r\n        point.set(\r\n            BezierCurveFunc.QuadraticBezier(t, v0.x, v1.x, v2.x),\r\n            BezierCurveFunc.QuadraticBezier(t, v0.y, v1.y, v2.y),\r\n        );\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): QuadraticBezierCurve {\r\n        return new QuadraticBezierCurve().copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: QuadraticBezierCurve): QuadraticBezierCurve {\r\n        super.copy(source);\r\n\r\n        this.v0.copy(source.v0);\r\n        this.v1.copy(source.v1);\r\n        this.v2.copy(source.v2);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 序列化JSON\r\n     */\r\n    public toJSON(): any {\r\n        const data = super.toJSON();\r\n\r\n        data.v0 = this.v0.toArray();\r\n        data.v1 = this.v1.toArray();\r\n        data.v2 = this.v2.toArray();\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * 反序列化JSON\r\n     * @param json\r\n     */\r\n    public fromJSON(json: any): QuadraticBezierCurve {\r\n        super.fromJSON(json);\r\n\r\n        this.v0.fromArray(json.v0);\r\n        this.v1.fromArray(json.v1);\r\n        this.v2.fromArray(json.v2);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public toDataBuffer(dataBuffer: BinaryBuffer): QuadraticBezierCurve {\r\n        super.toDataBuffer(dataBuffer);\r\n\r\n        this.v0.toDataBuffer(dataBuffer);\r\n        this.v1.toDataBuffer(dataBuffer);\r\n        this.v2.toDataBuffer(dataBuffer);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 反序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public fromDataBuffer(dataBuffer: BinaryBuffer): QuadraticBezierCurve {\r\n        super.fromDataBuffer(dataBuffer);\r\n\r\n        this.v0.fromDataBuffer(dataBuffer);\r\n        this.v1.fromDataBuffer(dataBuffer);\r\n        this.v2.fromDataBuffer(dataBuffer);\r\n\r\n        return this;\r\n    }\r\n}\r\n",
        "import { MathTmp } from \"../MathTmp\";\r\nimport { Vector2 } from \"../Vector2\";\r\nimport { Nullable } from \"../../types\";\r\nimport { CurvePath } from \"../Curves/CurvePath\";\r\nimport { LineCurve } from \"../Curves/LineCurve\";\r\nimport { QuadraticBezierCurve } from \"../Curves/QuadraticBezierCurve\";\r\nimport { CubicBezierCurve } from \"../Curves/CubicBezierCurve\";\r\nimport { SplineCurve } from \"../Curves/SplineCurve\";\r\nimport { EllipseCurve } from \"../Curves/EllipseCurve\";\r\nimport { BinaryBuffer } from \"../../Misc/BinaryBuffer\";\r\n\r\n/**\r\n * 2D路径\r\n * @category Shape\r\n */\r\nexport class Path extends CurvePath<Vector2> {\r\n\r\n    public currentPoint: Vector2;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param points\r\n     */\r\n    constructor(points: Nullable<Vector2[]> = null) {\r\n        super();\r\n\r\n        this.type = 'Path';\r\n        this.currentPoint = new Vector2();\r\n\r\n        if (points) { this.setFromPoints(points); }\r\n    }\r\n\r\n    /**\r\n     * 设置路径上的点\r\n     * @param points\r\n     */\r\n    public setFromPoints(points: Vector2[]): Path {\r\n        this.moveTo(points[0].x, points[0].y);\r\n\r\n        for (let i = 1, l = points.length; i < l; i++) {\r\n            this.lineTo(points[i].x, points[i].y);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 移动到\r\n     * @param x\r\n     * @param y\r\n     */\r\n    public moveTo(x: number, y: number): Path {\r\n        this.currentPoint.set(x, y);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 插入直线\r\n     * @param x\r\n     * @param y\r\n     */\r\n    public lineTo(x: number, y: number): Path {\r\n        const curve = new LineCurve(this.currentPoint, MathTmp.Vector2[0].set(x, y));\r\n        this.curves.push(curve);\r\n        this.currentPoint.set(x, y);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 插入二次贝塞尔曲线\r\n     * @param aCPx\r\n     * @param aCPy\r\n     * @param aX\r\n     * @param aY\r\n     */\r\n    public quadraticCurveTo(aCPx: number, aCPy: number, aX: number, aY: number): Path {\r\n        const curve = new QuadraticBezierCurve(\r\n            this.currentPoint,\r\n            MathTmp.Vector2[0].set(aCPx, aCPy),\r\n            MathTmp.Vector2[1].set(aX, aY),\r\n        );\r\n\r\n        this.curves.push(curve);\r\n        this.currentPoint.set(aX, aY);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 插入三次贝塞尔曲线\r\n     * @param aCP1x\r\n     * @param aCP1y\r\n     * @param aCP2x\r\n     * @param aCP2y\r\n     * @param aX\r\n     * @param aY\r\n     */\r\n    public bezierCurveTo(aCP1x: number, aCP1y: number, aCP2x: number, aCP2y: number, aX: number, aY: number): Path {\r\n        const curve = new CubicBezierCurve(\r\n            this.currentPoint.clone(),\r\n            new Vector2(aCP1x, aCP1y),\r\n            new Vector2(aCP2x, aCP2y),\r\n            new Vector2(aX, aY),\r\n        );\r\n\r\n        this.curves.push(curve);\r\n        this.currentPoint.set(aX, aY);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 插入自定义样条\r\n     * @param pts\r\n     */\r\n    public splineThru(pts: Vector2[]): Path {\r\n        const npts = [this.currentPoint.clone()].concat(pts);\r\n\r\n        const curve = new SplineCurve(npts);\r\n        this.curves.push(curve);\r\n        this.currentPoint.copy(pts[pts.length - 1]);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 插入圆弧\r\n     * @param aX\r\n     * @param aY\r\n     * @param aRadius\r\n     * @param aStartAngle\r\n     * @param aEndAngle\r\n     * @param aClockwise\r\n     */\r\n    public arc(aX: number, aY: number, aRadius: number, aStartAngle: number, aEndAngle: number, aClockwise: boolean): Path {\r\n        const x0 = this.currentPoint.x;\r\n        const y0 = this.currentPoint.y;\r\n\r\n        this.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 绝对位置插入圆弧\r\n     * @param aX\r\n     * @param aY\r\n     * @param aRadius\r\n     * @param aStartAngle\r\n     * @param aEndAngle\r\n     * @param aClockwise\r\n     */\r\n    public absarc(aX: number, aY: number, aRadius: number, aStartAngle: number, aEndAngle: number, aClockwise: boolean): Path {\r\n        this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 插入椭圆\r\n     * @param aX\r\n     * @param aY\r\n     * @param xRadius\r\n     * @param yRadius\r\n     * @param aStartAngle\r\n     * @param aEndAngle\r\n     * @param aClockwise\r\n     * @param aRotation\r\n     */\r\n    public ellipse(aX: number, aY: number, xRadius: number, yRadius: number, aStartAngle: number, aEndAngle: number, aClockwise: boolean, aRotation: number = 0): Path {\r\n        const x0 = this.currentPoint.x;\r\n        const y0 = this.currentPoint.y;\r\n\r\n        this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 绝对位置插入椭圆\r\n     * @param aX\r\n     * @param aY\r\n     * @param xRadius\r\n     * @param yRadius\r\n     * @param aStartAngle\r\n     * @param aEndAngle\r\n     * @param aClockwise\r\n     * @param aRotation\r\n     */\r\n    public absellipse(aX: number, aY: number, xRadius: number, yRadius: number, aStartAngle: number, aEndAngle: number, aClockwise: boolean, aRotation: number = 0): Path {\r\n        const curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\r\n\r\n        if (this.curves.length > 0) {\r\n\r\n            const firstPoint = curve.getPoint(0);\r\n            if (!firstPoint.equals(this.currentPoint)) {\r\n                this.lineTo(firstPoint.x, firstPoint.y);\r\n            }\r\n        }\r\n\r\n        this.curves.push(curve);\r\n\r\n        const lastPoint = curve.getPoint(1);\r\n        this.currentPoint.copy(lastPoint);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: Path): Path {\r\n        super.copy(source);\r\n\r\n        this.currentPoint.copy(source.currentPoint);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): Path {\r\n        return new Path().copy(this);\r\n    }\r\n\r\n    /**\r\n     * 序列化JSON\r\n     */\r\n    public toJSON(): any {\r\n        const data = super.toJSON();\r\n\r\n        data.currentPoint = this.currentPoint.toArray();\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * 反序列化JSON\r\n     * @param json\r\n     */\r\n    public fromJSON(json: any): Path {\r\n        super.fromJSON(json);\r\n\r\n        this.currentPoint.fromArray(json.currentPoint);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public toDataBuffer(dataBuffer: BinaryBuffer): Path {\r\n        super.toDataBuffer(dataBuffer);\r\n\r\n        this.currentPoint.toDataBuffer(dataBuffer);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 反序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public fromDataBuffer(dataBuffer: BinaryBuffer): Path {\r\n        super.fromDataBuffer(dataBuffer);\r\n\r\n        this.currentPoint.fromDataBuffer(dataBuffer);\r\n        return this;\r\n    }\r\n}\r\n",
        "export * from \"./IOBuffer\";\r\nexport * from \"./Earcut\";\r\nexport * from \"./Utf8\";\r\n",
        "/**\r\n * @ignore\r\n */\r\nconst stringFromCharCode = String.fromCharCode;\r\n\r\n/**\r\n * @ignore\r\n */\r\nlet byteArray: number[];\r\n/**\r\n * @ignore\r\n */\r\nlet byteCount: number;\r\n/**\r\n * @ignore\r\n */\r\nlet byteIndex: number;\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction ucs2decode(string: string): number[] {\r\n    let output = [];\r\n    let counter = 0;\r\n    let length = string.length;\r\n\r\n    let value;\r\n    let extra;\r\n    while (counter < length) {\r\n        if (typeof (string) == 'string') {\r\n            value = string.charCodeAt(counter++);\r\n        }\r\n        else {\r\n            value = string[counter++];\r\n        }\r\n        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\r\n            // high surrogate, and there is a next character\r\n            if (typeof (string) == 'string') {\r\n                extra = string.charCodeAt(counter++);\r\n            }\r\n            else {\r\n                extra = string[counter++];\r\n            }\r\n            if ((extra & 0xFC00) == 0xDC00) { // low surrogate\r\n                output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\r\n            } else {\r\n                // unmatched surrogate; only append this code unit, in case the next\r\n                // code unit is the high surrogate of a surrogate pair\r\n                output.push(value);\r\n                counter--;\r\n            }\r\n        } else {\r\n            output.push(value);\r\n        }\r\n    }\r\n    return output;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction ucs2encode(array: number[]): string {\r\n    let length = array.length;\r\n    let index = -1;\r\n    let value;\r\n    let output = '';\r\n    while (++index < length) {\r\n        value = array[index];\r\n        if (value > 0xFFFF) {\r\n            value -= 0x10000;\r\n            output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\r\n            value = 0xDC00 | value & 0x3FF;\r\n        }\r\n        output += stringFromCharCode(value);\r\n    }\r\n    return output;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction checkScalarValue(codePoint: number): void {\r\n    if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {\r\n        throw Error(\r\n            'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +\r\n            ' is not a scalar value'\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction createByte(codePoint: number, shift: number): string {\r\n    return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction encodeCodePoint(codePoint: number): string {\r\n    if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence\r\n        return stringFromCharCode(codePoint);\r\n    }\r\n    let symbol = '';\r\n    if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence\r\n        symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);\r\n    }\r\n    else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence\r\n        checkScalarValue(codePoint);\r\n        symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);\r\n        symbol += createByte(codePoint, 6);\r\n    }\r\n    else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence\r\n        symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);\r\n        symbol += createByte(codePoint, 12);\r\n        symbol += createByte(codePoint, 6);\r\n    }\r\n    symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);\r\n    return symbol;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction utf8encode(string: string): string {\r\n    let codePoints = ucs2decode(string);\r\n    let length = codePoints.length;\r\n    let index = -1;\r\n    let codePoint;\r\n    let byteString = '';\r\n    while (++index < length) {\r\n        codePoint = codePoints[index];\r\n        byteString += encodeCodePoint(codePoint);\r\n    }\r\n    return byteString;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction readContinuationByte(): number {\r\n    if (byteIndex >= byteCount) {\r\n        throw Error('Invalid byte index');\r\n    }\r\n\r\n    let continuationByte = byteArray[byteIndex] & 0xFF;\r\n    byteIndex++;\r\n\r\n    if ((continuationByte & 0xC0) == 0x80) {\r\n        return continuationByte & 0x3F;\r\n    }\r\n\r\n    // If we end up here, it’s not a continuation byte\r\n    throw Error('Invalid continuation byte');\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction decodeSymbol(): number | boolean {\r\n    let byte1;\r\n    let byte2;\r\n    let byte3;\r\n    let byte4;\r\n    let codePoint;\r\n\r\n    if (byteIndex > byteCount) {\r\n        throw Error('Invalid byte index');\r\n    }\r\n\r\n    if (byteIndex == byteCount) {\r\n        return false;\r\n    }\r\n\r\n    // Read first byte\r\n    byte1 = byteArray[byteIndex] & 0xFF;\r\n    byteIndex++;\r\n\r\n    // 1-byte sequence (no continuation bytes)\r\n    if ((byte1 & 0x80) == 0) {\r\n        return byte1;\r\n    }\r\n\r\n    // 2-byte sequence\r\n    if ((byte1 & 0xE0) == 0xC0) {\r\n        byte2 = readContinuationByte();\r\n        codePoint = ((byte1 & 0x1F) << 6) | byte2;\r\n        if (codePoint >= 0x80) {\r\n            return codePoint;\r\n        } else {\r\n            throw Error('Invalid continuation byte');\r\n        }\r\n    }\r\n\r\n    // 3-byte sequence (may include unpaired surrogates)\r\n    if ((byte1 & 0xF0) == 0xE0) {\r\n        byte2 = readContinuationByte();\r\n        byte3 = readContinuationByte();\r\n        codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;\r\n        if (codePoint >= 0x0800) {\r\n            checkScalarValue(codePoint);\r\n            return codePoint;\r\n        } else {\r\n            throw Error('Invalid continuation byte');\r\n        }\r\n    }\r\n\r\n    // 4-byte sequence\r\n    if ((byte1 & 0xF8) == 0xF0) {\r\n        byte2 = readContinuationByte();\r\n        byte3 = readContinuationByte();\r\n        byte4 = readContinuationByte();\r\n        codePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) | (byte3 << 0x06) | byte4;\r\n        if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {\r\n            return codePoint;\r\n        }\r\n    }\r\n\r\n    throw Error('Invalid UTF-8 detected');\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction utf8decode(byteString: string): string {\r\n    byteArray = ucs2decode(byteString);\r\n    byteCount = byteArray.length;\r\n    byteIndex = 0;\r\n\r\n    let codePoints: number[] = [];\r\n    let tmp;\r\n    while ((tmp = decodeSymbol()) != false) {\r\n        codePoints.push(Number(tmp));\r\n    }\r\n    return ucs2encode(codePoints);\r\n}\r\n\r\n/*--------------------------------------------------------------------------*/\r\n/**\r\n * @ignore\r\n */\r\nlet encode = utf8encode;\r\n\r\n/**\r\n * @ignore\r\n */\r\nlet decode = utf8decode;\r\n\r\nexport { encode, decode };\r\n",
        "import { int } from \"../types\";\r\n\r\n/**\r\n * 可见层\r\n */\r\nexport class VisibleLayers {\r\n\r\n    public mask: int;\r\n\r\n    /**\r\n     * 构造函数\r\n     */\r\n    constructor() {\r\n        this.mask = 1 | 0;\r\n    }\r\n\r\n    /**\r\n     * 设置通道\r\n     * @param channel\r\n     */\r\n    public set(channel: int) {\r\n        this.mask = 1 << channel | 0;\r\n    }\r\n\r\n    /**\r\n     * 打开通道\r\n     * @param channel\r\n     */\r\n    public enable(channel: int) {\r\n        this.mask |= 1 << channel | 0;\r\n    }\r\n\r\n    /**\r\n     * 打开全部通道\r\n     */\r\n    public enableAll() {\r\n        this.mask = 0xffffffff | 0;\r\n    }\r\n\r\n    /**\r\n     * 切换通道可见性\r\n     * @param channel\r\n     */\r\n    public toggle(channel: int) {\r\n        this.mask ^= 1 << channel | 0;\r\n    }\r\n\r\n    /**\r\n     * 关闭通道\r\n     * @param channel\r\n     */\r\n    public disable(channel: int) {\r\n        this.mask &= ~(1 << channel | 0);\r\n    }\r\n\r\n    /**\r\n     * 关闭所有通道\r\n     */\r\n    public disableAll() {\r\n        this.mask = 0;\r\n    }\r\n\r\n    /**\r\n     * 测试通道可见性\r\n     * @param layers\r\n     */\r\n    public test(layers: VisibleLayers) {\r\n        return (this.mask & layers.mask) != 0;\r\n    }\r\n\r\n}\r\n",
        "import {CSG} from './CSG';\r\nimport {CSGVector2D} from './CSGVector2D';\r\n\r\n/**\r\n * CAG顶点\r\n */\r\nexport class CAGVertex {\r\n    /**\r\n     * 位置\r\n     */\r\n    public pos: CSGVector2D;\r\n\r\n    /**\r\n     * 分类符\r\n     */\r\n    public tag: number;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param pos\r\n     */\r\n    constructor(pos: CSGVector2D) {\r\n        this.pos = pos;\r\n    }\r\n\r\n    /**\r\n     * 转为字符串\r\n     */\r\n    public toString(): string {\r\n        return `(${this.pos.x.toFixed(2)},${this.pos.y.toFixed(2)})`;\r\n    }\r\n\r\n    /**\r\n     * 获取分类符\r\n     */\r\n    public getTag(): number {\r\n        let result = this.tag;\r\n        if (!result) {\r\n            result = CSG.getTag();\r\n            this.tag = result;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n",
        "import {CAGVertex} from './CAGVertex';\r\nimport {CSGVector2D} from './CSGVector2D';\r\nimport {CSGVertex} from './CSGVertex';\r\nimport {CSGPolygon} from './CSGPolygon';\r\nimport {CSG} from './CSG';\r\nimport {CSGMatrix4x4} from './CSGMatrix4x4';\r\nimport {CSGPlane} from './CSGPlane';\r\nimport {CSGVector3D} from './CSGVector3D';\r\nimport {InterfaceCSGVector3D} from './InterfaceCSG';\r\n\r\n/**\r\n * CSG边类\r\n */\r\nexport class CAGSide {\r\n    /**\r\n     * 顶点0\r\n     */\r\n    public vertex0: CAGVertex;\r\n\r\n    /**\r\n     * 顶点1\r\n     */\r\n    public vertex1: CAGVertex;\r\n\r\n    /**\r\n     * 分类符\r\n     */\r\n    public tag: any;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param vertex0\r\n     * @param vertex1\r\n     */\r\n    constructor(vertex0: CAGVertex, vertex1: CAGVertex) {\r\n        if (!(vertex0 instanceof CAGVertex)) {\r\n            throw new Error('Assertion failed');\r\n        }\r\n        if (!(vertex1 instanceof CAGVertex)) {\r\n            throw new Error('Assertion failed');\r\n        }\r\n        this.vertex0 = vertex0;\r\n        this.vertex1 = vertex1;\r\n    }\r\n\r\n    /**\r\n     * 从模拟多边形创建\r\n     * @param polygon\r\n     * @private\r\n     */\r\n    static _fromFakePolygon(polygon: CSGPolygon): CAGSide | null {\r\n        polygon.vertices.forEach((v: any) => {\r\n            if (!((v.pos.z >= -1.001) && (v.pos.z < -0.999)) && !((v.pos.z >= 0.999) && (v.pos.z < 1.001))) {\r\n                throw ('Assertion failed: _fromFakePolygon expects abs z values of 1');\r\n            }\r\n        });\r\n        // this can happen based on union, seems to be residuals -\r\n        // return null and handle in caller\r\n        if (polygon.vertices.length < 4) {\r\n            return null;\r\n        }\r\n        let reverse = false;\r\n        let vert1Indices: any[] = [];\r\n        let pts2d = polygon.vertices.filter((v: any, i: any): boolean | void => {\r\n            if (v.pos.z > 0) {\r\n                vert1Indices.push(i);\r\n                return true;\r\n            }\r\n        })\r\n            .map((v: any) => new CSGVector2D(v.pos.x, v.pos.y));\r\n        if (pts2d.length!= 2) {\r\n            throw ('Assertion failed: _fromFakePolygon: not enough points found');\r\n        }\r\n        let d = vert1Indices[1] - vert1Indices[0];\r\n        if (d == 1 || d == 3) {\r\n            if (d == 1) {\r\n                pts2d.reverse();\r\n            }\r\n        } else {\r\n            throw ('Assertion failed: _fromFakePolygon: unknown index ordering');\r\n        }\r\n        let result = new CAGSide(new CAGVertex(pts2d[0]), new CAGVertex(pts2d[1]));\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 转为字符串\r\n     */\r\n    public toString(): string {\r\n        return `${this.vertex0} -> ${this.vertex1}`;\r\n    }\r\n\r\n    /**\r\n     * 转为三维多边形\r\n     * @param z0\r\n     * @param z1\r\n     */\r\n    public toPolygon3D(z0: number, z1: number) {\r\n        let vertices = [\r\n            new CSGVertex(this.vertex0.pos.toVector3D(z0)),\r\n            new CSGVertex(this.vertex1.pos.toVector3D(z0)),\r\n            new CSGVertex(this.vertex1.pos.toVector3D(z1)),\r\n            new CSGVertex(this.vertex0.pos.toVector3D(z1)),\r\n        ];\r\n        return new CSGPolygon(vertices);\r\n    }\r\n\r\n    /**\r\n     * 转化\r\n     * @param matrix4x4\r\n     */\r\n    public transform(matrix4x4: CSGMatrix4x4): CAGSide {\r\n        let newp1 = this.vertex0.pos.transform(matrix4x4);\r\n        let newp2 = this.vertex1.pos.transform(matrix4x4);\r\n        return new CAGSide(new CAGVertex(newp1), new CAGVertex(newp2));\r\n    }\r\n\r\n    /**\r\n     * 获取新对象\r\n     */\r\n    public flipped(): CAGSide {\r\n        return new CAGSide(this.vertex1, this.vertex0);\r\n    }\r\n\r\n    /**\r\n     * 获取方向\r\n     */\r\n    public direction(): CSGVector2D {\r\n        return this.vertex1.pos.minus(this.vertex0.pos);\r\n    }\r\n\r\n    /**\r\n     * 获取分类符\r\n     */\r\n    public getTag(): number {\r\n        let result = this.tag;\r\n        if (!result) {\r\n            result = CSG.getTag();\r\n            this.tag = result;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 获取长度平方\r\n     */\r\n    public lengthSquared(): number {\r\n        let x = this.vertex1.pos.x - this.vertex0.pos.x;\r\n        let y = this.vertex1.pos.y - this.vertex0.pos.y;\r\n        return x * x + y * y;\r\n    }\r\n\r\n    /**\r\n     * 长度\r\n     */\r\n    public length(): number {\r\n        return Math.sqrt(this.lengthSquared());\r\n    }\r\n\r\n    /**\r\n     * 镜像\r\n     * @param plane\r\n     */\r\n    public mirrored(plane: CSGPlane): CAGSide {\r\n        return this.transform(CSGMatrix4x4.mirroring(plane));\r\n    }\r\n\r\n    /**\r\n     * X轴镜像\r\n     */\r\n    public mirroredX(): CAGSide {\r\n        let plane = new CSGPlane(CSGVector3D.Create(1, 0, 0), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * Y轴镜像\r\n     */\r\n    public mirroredY(): CAGSide {\r\n        let plane = new CSGPlane(CSGVector3D.Create(0, 1, 0), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * Z轴镜像\r\n     */\r\n    public mirroredZ(): CAGSide {\r\n        let plane = new CSGPlane(CSGVector3D.Create(0, 0, 1), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * 转化\r\n     * @param v\r\n     */\r\n    public translate(v: InterfaceCSGVector3D): CAGSide {\r\n        return this.transform(CSGMatrix4x4.translation(v));\r\n    }\r\n\r\n    /**\r\n     * 缩放\r\n     * @param f\r\n     */\r\n    public scale(f: InterfaceCSGVector3D): CAGSide  {\r\n        return this.transform(CSGMatrix4x4.scaling(f));\r\n    }\r\n\r\n    /**\r\n     * X轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateX(deg: number): CAGSide  {\r\n        return this.transform(CSGMatrix4x4.rotationX(deg));\r\n    }\r\n\r\n    /**\r\n     * Y轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateY(deg: number): CAGSide  {\r\n        return this.transform(CSGMatrix4x4.rotationY(deg));\r\n    }\r\n\r\n    /**\r\n     * Z轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateZ(deg: number): CAGSide {\r\n        return this.transform(CSGMatrix4x4.rotationZ(deg));\r\n    }\r\n\r\n    /**\r\n     * 旋转\r\n     * @param rotationCenter\r\n     * @param rotationAxis\r\n     * @param degrees\r\n     */\r\n    public rotate(rotationCenter: CSGVector3D, rotationAxis: CSGVector3D, degrees: number) {\r\n        return this.transform(CSGMatrix4x4.rotation(rotationCenter, rotationAxis, degrees));\r\n    }\r\n\r\n    /**\r\n     * 旋转欧拉角\r\n     * @param alpha\r\n     * @param beta\r\n     * @param gamma\r\n     * @param position\r\n     */\r\n    public rotateEulerAngles(alpha: number, beta: number, gamma: number, position: CSGVector3D) {\r\n        position = position || [0, 0, 0];\r\n        let Rz1 = CSGMatrix4x4.rotationZ(alpha);\r\n        let Rx = CSGMatrix4x4.rotationX(beta);\r\n        let Rz2 = CSGMatrix4x4.rotationZ(gamma);\r\n        let T = CSGMatrix4x4.translation(new CSGVector3D(position));\r\n        return this.transform(Rz2.multiply(Rx).multiply(Rz1).multiply(T));\r\n    }\r\n}\r\n\r\n",
        "import {CSGVector3D} from './CSGVector3D';\r\nimport {CSG} from './CSG';\r\nimport {CSGMatrix4x4} from './CSGMatrix4x4';\r\nimport {CSGPlane} from './CSGPlane';\r\nimport {InterfaceCSGVector3D} from \"./InterfaceCSG\";\r\n\r\n/**\r\n * 3D线段类\r\n */\r\nexport class CSGLine3D {\r\n    /**\r\n     * 起点\r\n     */\r\n    public point: CSGVector3D;\r\n\r\n    /**\r\n     * 方向\r\n     */\r\n    public direction: CSGVector3D;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param point\r\n     * @param direction\r\n     */\r\n    constructor(point: CSGVector3D, direction: CSGVector3D) {\r\n        let _point: any = new CSGVector3D(point);\r\n        direction = new CSGVector3D(direction);\r\n        this.point = _point;\r\n        this.direction = direction.unit();\r\n    }\r\n\r\n    /**\r\n     * 从点创建\r\n     * @param p1\r\n     * @param p2\r\n     */\r\n    static fromPoints(p1: CSGVector3D, p2: CSGVector3D): CSGLine3D {\r\n        const _p1 = new CSGVector3D(p1);\r\n        const _p2 = new CSGVector3D(p2);\r\n        let direction = p2.minus(p1);\r\n        return new CSGLine3D(p1, direction);\r\n    }\r\n\r\n    /**\r\n     * 从面创建\r\n     * @param p1\r\n     * @param p2\r\n     */\r\n    static fromPlanes(p1: CSGPlane, p2: CSGPlane): CSGLine3D {\r\n        let direction = p1.normal.cross(p2.normal);\r\n        let l = direction.length();\r\n        if (l < 1e-10) {\r\n            throw new Error('Parallel planes');\r\n        }\r\n        direction = direction.times(1.0 / l);\r\n        let mabsx = Math.abs(direction.x);\r\n        let mabsy = Math.abs(direction.y);\r\n        let mabsz = Math.abs(direction.z);\r\n        let origin;\r\n        if ((mabsx >= mabsy) && (mabsx >= mabsz)) {\r\n            // direction vector is mostly pointing towards x\r\n            // find a point p for which x is zero:\r\n            let r = CSG.solve2Linear(p1.normal.y, p1.normal.z, p2.normal.y, p2.normal.z, p1.w, p2.w);\r\n            origin = new CSGVector3D(0, r[0], r[1]);\r\n        } else if ((mabsy >= mabsx) && (mabsy >= mabsz)) {\r\n            // find a point p for which y is zero:\r\n            let r = CSG.solve2Linear(p1.normal.x, p1.normal.z, p2.normal.x, p2.normal.z, p1.w, p2.w);\r\n            origin = new CSGVector3D(r[0], 0, r[1]);\r\n        } else {\r\n            // find a point p for which z is zero:\r\n            let r = CSG.solve2Linear(p1.normal.x, p1.normal.y, p2.normal.x, p2.normal.y, p1.w, p2.w);\r\n            origin = new CSGVector3D(r[0], r[1], 0);\r\n        }\r\n        return new CSGLine3D(origin, direction);\r\n    }\r\n\r\n    /**\r\n     * 截面相交\r\n     * @param plane\r\n     */\r\n    public intersectWithPlane(plane: CSGPlane): CSGVector3D {\r\n        // plane: plane.normal * p = plane.w\r\n        // line: p=line.point + labda * line.direction\r\n        let labda = (plane.w - plane.normal.dot(this.point)) / plane.normal.dot(this.direction);\r\n        let point = this.point.plus(this.direction.times(labda));\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     * @param line\r\n     */\r\n    public clone(line: CSGLine3D): CSGLine3D {\r\n        return new CSGLine3D(this.point.clone(), this.direction.clone());\r\n    }\r\n\r\n    /**\r\n     * 递归\r\n     */\r\n    public reverse(): CSGLine3D {\r\n        return new CSGLine3D(this.point.clone(), this.direction.negated());\r\n    }\r\n\r\n    /**\r\n     * 转换\r\n     * @param matrix4x4\r\n     */\r\n    public transform(matrix4x4: CSGMatrix4x4): CSGLine3D {\r\n        let newpoint = this.point.multiply4x4(matrix4x4);\r\n        let pointPlusDirection = this.point.plus(this.direction);\r\n        let newPointPlusDirection = pointPlusDirection.multiply4x4(matrix4x4);\r\n        let newdirection = newPointPlusDirection.minus(newpoint);\r\n        return new CSGLine3D(newpoint, newdirection);\r\n    }\r\n\r\n    /**\r\n     * 垂直交点\r\n     * @param point\r\n     */\r\n    public closestPointOnLine(point: CSGVector3D): CSGVector3D {\r\n        point = new CSGVector3D(point);\r\n        let t = point.minus(this.point).dot(this.direction) / this.direction.dot(this.direction);\r\n        let closestpoint = this.point.plus(this.direction.times(t));\r\n        return closestpoint;\r\n    }\r\n\r\n    /**\r\n     * 垂线长度\r\n     * @param point\r\n     */\r\n    public distanceToPoint(point: CSGVector3D): number {\r\n        point = new CSGVector3D(point);\r\n        let closestpoint = this.closestPointOnLine(point);\r\n        let distancevector = point.minus(closestpoint);\r\n        let distance = distancevector.length();\r\n        return distance;\r\n    }\r\n\r\n    /**\r\n     * 判断相等\r\n     * @param line3d\r\n     */\r\n    public equals(line3d: CSGLine3D): boolean {\r\n        if (!this.direction.equals(line3d.direction)) {\r\n            return false;\r\n        }\r\n        let distance = this.distanceToPoint(line3d.point);\r\n        if (distance > 1e-8) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 镜像平面\r\n     * @param plane\r\n     */\r\n    public mirrored(plane: CSGPlane): CSGLine3D {\r\n        return this.transform(CSGMatrix4x4.mirroring(plane));\r\n    }\r\n\r\n    /**\r\n     * X轴镜像\r\n     */\r\n    public mirroredX(): CSGLine3D {\r\n        let plane = new CSGPlane(CSGVector3D.Create(1, 0, 0), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * Y轴镜像\r\n     */\r\n    public mirroredY(): CSGLine3D {\r\n        let plane = new CSGPlane(CSGVector3D.Create(0, 1, 0), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * Z轴镜像\r\n     */\r\n    public mirroredZ(): CSGLine3D {\r\n        let plane = new CSGPlane(CSGVector3D.Create(0, 0, 1), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * 转化\r\n     * @param v\r\n     */\r\n    public translate(v: InterfaceCSGVector3D): CSGLine3D {\r\n        return this.transform(CSGMatrix4x4.translation(v));\r\n    }\r\n\r\n    /**\r\n     * 缩放\r\n     * @param f\r\n     */\r\n    public scale(f: InterfaceCSGVector3D): CSGLine3D {\r\n        return this.transform(CSGMatrix4x4.scaling(f));\r\n    }\r\n\r\n    /**\r\n     * X轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateX(deg: number): CSGLine3D {\r\n        return this.transform(CSGMatrix4x4.rotationX(deg));\r\n    }\r\n\r\n    /**\r\n     * Y轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateY(deg: number): CSGLine3D {\r\n        return this.transform(CSGMatrix4x4.rotationY(deg));\r\n    }\r\n\r\n    /**\r\n     * Z轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateZ(deg: number): CSGLine3D {\r\n        return this.transform(CSGMatrix4x4.rotationZ(deg));\r\n    }\r\n\r\n    /**\r\n     * 旋转\r\n     * @param rotationCenter\r\n     * @param rotationAxis\r\n     * @param degrees\r\n     */\r\n    public rotate(rotationCenter: CSGVector3D, rotationAxis: CSGVector3D, degrees: number): CSGLine3D {\r\n        return this.transform(CSGMatrix4x4.rotation(rotationCenter, rotationAxis, degrees));\r\n    }\r\n\r\n    /**\r\n     * 旋转欧拉角\r\n     * @param alpha\r\n     * @param beta\r\n     * @param gamma\r\n     * @param position\r\n     */\r\n    public rotateEulerAngles(alpha: number, beta: number, gamma: number, position: InterfaceCSGVector3D) {\r\n        position = position || [0, 0, 0];\r\n        let Rz1 = CSGMatrix4x4.rotationZ(alpha);\r\n        let Rx = CSGMatrix4x4.rotationX(beta);\r\n        let Rz2 = CSGMatrix4x4.rotationZ(gamma);\r\n        let T = CSGMatrix4x4.translation(new CSGVector3D(position));\r\n        return this.transform(Rz2.multiply(Rx).multiply(Rz1).multiply(T));\r\n    }\r\n}\r\n\r\n",
        "import { Texture } from \"./Texture\";\r\nimport { Constants } from \"../Constants\";\r\nimport { Nullable } from \"../../types\";\r\n\r\n/**\r\n * Mipmap数据纹理\r\n */\r\nexport interface MipmapRawBuffer {\r\n    buffer: ArrayBuffer | ArrayBufferView;\r\n    width: number;\r\n    height: number;\r\n    depth?: number;\r\n}\r\n\r\n/**\r\n * 数据纹理\r\n */\r\nexport class TextureRaw extends Texture {\r\n\r\n    public buffer: Nullable<ArrayBuffer | ArrayBufferView>;\r\n    public deleteBuffer: boolean;\r\n    public mipmaps: MipmapRawBuffer[];\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param data\r\n     * @param width\r\n     * @param height\r\n     * @param deleteBuffer\r\n     * @param generateMipmaps\r\n     * @param format\r\n     * @param type\r\n     * @param flipY\r\n     */\r\n    constructor(data: Nullable<ArrayBuffer | ArrayBufferView>, width: number, height: number, deleteBuffer: boolean = false,\r\n                generateMipmaps: boolean = true, format: number = Constants.RGBAFormat, type: number = Constants.UnsignedByteType,\r\n                flipY: boolean = false) {\r\n        super();\r\n\r\n        this.buffer = data;\r\n        this.deleteBuffer = deleteBuffer;\r\n\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        this.unpackAlignment = (this.width % 4 != 0) ? 1 : 4;\r\n        this.generateMipmaps = generateMipmaps;\r\n        this.format = format;\r\n        this.type = type;\r\n\r\n        this._flipY = flipY;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): TextureRaw {\r\n        return new TextureRaw(this.buffer, this.width, this.height, this.deleteBuffer).copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: TextureRaw): TextureRaw {\r\n        super.copy(source);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 释放\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        if (this.deleteBuffer) {\r\n            delete this.buffer;\r\n        }\r\n    }\r\n}\r\n",
        "import { BufferAttribute } from \"./BufferAttribute\";\r\n\r\nexport class Int8BufferAttribute extends BufferAttribute {\r\n    constructor(array: number[], itemSize: number, normalized: boolean = false) {\r\n        super(new Int8Array(array), itemSize, normalized);\r\n    }\r\n}\r\n\r\nexport class UInt8BufferAttribute extends BufferAttribute {\r\n    constructor(array: number[], itemSize: number, normalized: boolean = false) {\r\n        super(new Uint8Array(array), itemSize, normalized);\r\n    }\r\n}\r\n\r\nexport class UInt8ClampedBufferAttribute extends BufferAttribute {\r\n    constructor(array: number[], itemSize: number, normalized: boolean = false) {\r\n        super(new Uint8ClampedArray(array), itemSize, normalized);\r\n    }\r\n}\r\n\r\nexport class Int16BufferAttribute extends BufferAttribute {\r\n    constructor(array: number[], itemSize: number, normalized: boolean = false) {\r\n        super(new Int16Array(array), itemSize, normalized);\r\n    }\r\n}\r\n\r\nexport class UInt16BufferAttribute extends BufferAttribute {\r\n    constructor(array: number[], itemSize: number, normalized: boolean = false) {\r\n        super(new Uint16Array(array), itemSize, normalized);\r\n    }\r\n}\r\n\r\nexport class Int32BufferAttribute extends BufferAttribute {\r\n    constructor(array: number[], itemSize: number, normalized: boolean = false) {\r\n        super(new Int32Array(array), itemSize, normalized);\r\n    }\r\n}\r\n\r\nexport class UInt32BufferAttribute extends BufferAttribute {\r\n    constructor(array: number[], itemSize: number, normalized: boolean = false) {\r\n        super(new Uint32Array(array), itemSize, normalized);\r\n    }\r\n}\r\n\r\nexport class Float32BufferAttribute extends BufferAttribute {\r\n    constructor(array: number[], itemSize: number, normalized: boolean = false) {\r\n        super(new Float32Array(array), itemSize, normalized);\r\n    }\r\n}\r\n\r\nexport class Float64BufferAttribute extends BufferAttribute {\r\n    constructor(array: number[], itemSize: number, normalized: boolean = false) {\r\n        super(new Float64Array(array), itemSize, normalized);\r\n    }\r\n}\r\n",
        "export abstract class BufferAttributeKind {\r\n    /**\r\n     * Indices\r\n     */\r\n    public static readonly IndicesKind = \"indices\";\r\n    /**\r\n     * Positions\r\n     */\r\n    public static readonly PositionKind = \"position\";\r\n    /**\r\n     * Normals\r\n     */\r\n    public static readonly NormalKind = \"normal\";\r\n    /**\r\n     * Tangents\r\n     */\r\n    public static readonly TangentKind = \"tangent\";\r\n    /**\r\n     * Texture coordinates\r\n     */\r\n    public static readonly UVKind = \"uv\";\r\n    /**\r\n     * Texture coordinates 2\r\n     */\r\n    public static readonly UV2Kind = \"uv2\";\r\n    /**\r\n     * Texture coordinates 3\r\n     */\r\n    public static readonly UV3Kind = \"uv3\";\r\n    /**\r\n     * Texture coordinates 4\r\n     */\r\n    public static readonly UV4Kind = \"uv4\";\r\n    /**\r\n     * Texture coordinates 5\r\n     */\r\n    public static readonly UV5Kind = \"uv5\";\r\n    /**\r\n     * Texture coordinates 6\r\n     */\r\n    public static readonly UV6Kind = \"uv6\";\r\n    /**\r\n     * Colors\r\n     */\r\n    public static readonly ColorKind = \"color\";\r\n}\r\n",
        "export * from \"./BinaryBuffer\";\r\nexport * from \"../Scene/Geometries/BufferAttribute\";\r\nexport * from \"./DataTypeFormat\";\r\nexport * from \"./PixelFormat\";\r\nexport * from \"./DefaultValue\";\r\n",
        "import { Nullable } from \"../types\";\r\n\r\n/**\r\n * 定义默认值\r\n * @param curValue\r\n * @param defaultValue\r\n * @category Misc\r\n */\r\nexport function defaultValue<T>(curValue: Nullable<T>, defaultValue: T): T {\r\n    if (curValue == null) {\r\n        return defaultValue;\r\n    }\r\n    return curValue;\r\n}\r\n",
        "/**\r\n * 欧拉角顺序\r\n * @category Math\r\n */\r\nexport enum EulerOrder {\r\n    XYZ,\r\n    YZX,\r\n    ZXY,\r\n    XZY,\r\n    YXZ,\r\n    ZYX\r\n}\r\n",
        "/**\r\n * CatmullRom曲线类型\r\n * @category Curve\r\n */\r\nexport enum CatmullRomType {\r\n    Centripetal,\r\n    Chordal,\r\n    Catmullrom\r\n}\r\n",
        "/**\r\n * 包围球与包围球相交类型\r\n * @category Math\r\n */\r\nexport enum SphereSphereIntersectType {\r\n    /**\r\n     * 球是不相交和分离的\r\n     */\r\n    NONE,\r\n    /**\r\n     * 球体在一点上接触，每个球体都在另一个球体的外面\r\n     */\r\n    POINT,\r\n    /**\r\n     * 球面相交成一个圆\r\n     */\r\n    SPHERE,\r\n    /**\r\n     * sphere0严格包含在sphere1中\r\n     */\r\n    SPHERE0_IN_SPHERE1,\r\n    /**\r\n     * sphere0包含在sphere1中，共有点\r\n     */\r\n    SPHERE0_IN_SPHERE1_POINT,\r\n    /**\r\n     * sphere1严格包含在sphere0中\r\n     */\r\n    SPHERE1_IN_SPHERE0,\r\n    /**\r\n     * sphere1包含在sphere0中，共有点\r\n     */\r\n    SPHERE1_IN_SPHERE0_POINT,\r\n}\r\n",
        "import { EllipseCurve } from \"./EllipseCurve\";\r\n\r\n/**\r\n * 弧线路径\r\n * @category Curve\r\n */\r\nexport class ArcCurve extends EllipseCurve {\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param aX\r\n     * @param aY\r\n     * @param aRadius\r\n     * @param aStartAngle\r\n     * @param aEndAngle\r\n     * @param aClockwise\r\n     */\r\n    constructor(aX: number = 0, aY: number = 0, aRadius: number = 1,\r\n                aStartAngle: number = 0, aEndAngle: number = 2 * Math.PI,\r\n                aClockwise: boolean = false) {\r\n        super(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\r\n\r\n        this.type = 'ArcCurve';\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): ArcCurve {\r\n        return new ArcCurve().copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: ArcCurve): ArcCurve {\r\n        return super.copy(source);\r\n    }\r\n}\r\n",
        "import { Curve } from \"./Curve\";\r\nimport { Vector2 } from \"../Vector2\";\r\nimport { Nullable } from \"../../types\";\r\nimport { MathTmp } from \"../MathTmp\";\r\nimport { BinaryBuffer } from \"../../Misc\";\r\nimport { CatmullRomType } from \"../../Enums\";\r\n\r\n/**\r\n * @ignore\r\n */\r\nclass CubicPoly {\r\n    private c0 = 0;\r\n    private c1 = 0;\r\n    private c2 = 0;\r\n    private c3 = 0;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    private init(x0: number, x1: number, t0: number, t1: number) {\r\n        this.c0 = x0;\r\n        this.c1 = t0;\r\n        this.c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;\r\n        this.c3 = 2 * x0 - 2 * x1 + t0 + t1;\r\n    }\r\n\r\n    public initCatmullRom(x0: number, x1: number, x2: number, x3: number, tension: number) {\r\n        this.init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));\r\n    }\r\n\r\n    public initNonuniformCatmullRom(x0: number, x1: number, x2: number, x3: number, dt0: number, dt1: number, dt2: number) {\r\n        // compute tangents when parameterized in [t1,t2]\r\n        let t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;\r\n        let t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2;\r\n\r\n        // rescale tangents for parametrization in [0,1]\r\n        t1 *= dt1;\r\n        t2 *= dt1;\r\n\r\n        this.init(x1, x2, t1, t2);\r\n    }\r\n\r\n    public calc(t: number) {\r\n        let t2 = t * t;\r\n        let t3 = t2 * t;\r\n        return this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst px = new CubicPoly();\r\n/**\r\n * @ignore\r\n */\r\nconst py = new CubicPoly();\r\n\r\n/**\r\n * CatmullRom2D曲线\r\n * @category Curve\r\n */\r\nexport class CatmullRomCurve extends Curve<Vector2> {\r\n\r\n    public points: Vector2[];\r\n    public closed: boolean;\r\n    public curveType: CatmullRomType;\r\n    public tension: number;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param points\r\n     * @param closed\r\n     * @param curveType\r\n     * @param tension\r\n     */\r\n    constructor(points: Vector2[] = [], closed: boolean = false, curveType: CatmullRomType = CatmullRomType.Centripetal, tension: number = 0.5) {\r\n        super();\r\n\r\n        this.type = 'CatmullRomCurve';\r\n\r\n        this.points = points;\r\n        this.closed = closed;\r\n        this.curveType = curveType;\r\n        this.tension = tension;\r\n    }\r\n\r\n    /**\r\n     * 获取点\r\n     * @param t\r\n     * @param optionalTarget\r\n     */\r\n    public getPoint(t: number, optionalTarget: Nullable<Vector2> = null): Vector2 {\r\n\r\n        let tmp = MathTmp.Vector2[0];\r\n\r\n        let point = optionalTarget ?? new Vector2();\r\n\r\n        let points = this.points;\r\n        let l = points.length;\r\n\r\n        let p = (l - (this.closed ? 0 : 1)) * t;\r\n        let intPoint = Math.floor(p);\r\n        let weight = p - intPoint;\r\n\r\n        if (this.closed) {\r\n            intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;\r\n        } else if (weight == 0 && intPoint == l - 1) {\r\n            intPoint = l - 2;\r\n            weight = 1;\r\n        }\r\n\r\n        let p0; let p1; let p2; let p3; // 4 points\r\n\r\n        if (this.closed || intPoint > 0) {\r\n            p0 = points[(intPoint - 1) % l];\r\n        } else {\r\n            // extrapolate first point\r\n            tmp.subVectors(points[0], points[1]).add(points[0]);\r\n            p0 = tmp;\r\n        }\r\n\r\n        p1 = points[intPoint % l];\r\n        p2 = points[(intPoint + 1) % l];\r\n\r\n        if (this.closed || intPoint + 2 < l) {\r\n            p3 = points[(intPoint + 2) % l];\r\n        } else {\r\n            // extrapolate last point\r\n            tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);\r\n            p3 = tmp;\r\n        }\r\n\r\n        if (this.curveType == CatmullRomType.Centripetal || this.curveType == CatmullRomType.Chordal) {\r\n\r\n            // init Centripetal / Chordal Catmull-Rom\r\n            let pow = this.curveType == CatmullRomType.Chordal ? 0.5 : 0.25;\r\n            let dt0 = Math.pow(p0.distanceToSquared(p1), pow);\r\n            let dt1 = Math.pow(p1.distanceToSquared(p2), pow);\r\n            let dt2 = Math.pow(p2.distanceToSquared(p3), pow);\r\n\r\n            // safety check for repeated points\r\n            if (dt1 < 1e-4) { dt1 = 1.0; }\r\n            if (dt0 < 1e-4) { dt0 = dt1; }\r\n            if (dt2 < 1e-4) { dt2 = dt1; }\r\n\r\n            px.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);\r\n            py.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);\r\n\r\n        } else if (this.curveType == CatmullRomType.Catmullrom) {\r\n\r\n            px.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);\r\n            py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);\r\n        }\r\n\r\n        point.set(\r\n            px.calc(weight),\r\n            py.calc(weight)\r\n        );\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): CatmullRomCurve {\r\n        return new CatmullRomCurve().copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: CatmullRomCurve): CatmullRomCurve {\r\n        super.copy(source);\r\n\r\n        this.points = [];\r\n\r\n        for (let i = 0, l = source.points.length; i < l; i++) {\r\n            let point = source.points[i];\r\n            this.points.push(point.clone());\r\n        }\r\n\r\n        this.closed = source.closed;\r\n        this.curveType = source.curveType;\r\n        this.tension = source.tension;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 序列化JSON\r\n     */\r\n    public toJSON(): any {\r\n        const data = super.toJSON();\r\n\r\n        data.points = [];\r\n\r\n        for (let i = 0, l = this.points.length; i < l; i++) {\r\n            let point = this.points[i];\r\n            data.points.push(point.toArray());\r\n        }\r\n\r\n        data.closed = this.closed;\r\n        data.curveType = this.curveType;\r\n        data.tension = this.tension;\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * 反序列化JSON\r\n     * @param json\r\n     */\r\n    public fromJSON(json: any): CatmullRomCurve {\r\n        super.fromJSON(json);\r\n\r\n        this.points = [];\r\n\r\n        for (let i = 0, l = json.points.length; i < l; i++) {\r\n            let point = json.points[i];\r\n            this.points.push(new Vector2().fromArray(point));\r\n        }\r\n\r\n        this.closed = json.closed;\r\n        this.curveType = json.curveType;\r\n        this.tension = json.tension;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public toDataBuffer(dataBuffer: BinaryBuffer): CatmullRomCurve {\r\n        super.toDataBuffer(dataBuffer);\r\n\r\n        dataBuffer.writeBoolean(this.closed);\r\n        dataBuffer.writeInt8(this.curveType);\r\n        dataBuffer.writeFloat32(this.tension);\r\n\r\n        dataBuffer.writeUint16(this.points.length);\r\n        this.points.forEach((point) => point.toDataBuffer(dataBuffer));\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 反序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public fromDataBuffer(dataBuffer: BinaryBuffer): CatmullRomCurve {\r\n        super.fromDataBuffer(dataBuffer);\r\n\r\n        this.closed = dataBuffer.readBoolean();\r\n        this.curveType = dataBuffer.readUint8();\r\n        this.tension = dataBuffer.readFloat32();\r\n\r\n        const count = dataBuffer.readUint16();\r\n        for (let i = 0; i < count; ++i) {\r\n            this.points.push(new Vector2().fromDataBuffer(dataBuffer));\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n",
        "import { Curve } from \"./Curve\";\r\nimport { Vector3 } from \"../Vector3\";\r\nimport { Nullable } from \"../../types\";\r\nimport { MathTmp } from \"../MathTmp\";\r\nimport { BinaryBuffer } from \"../../Misc\";\r\nimport { CatmullRomType } from \"../../Enums/CatmullRomType\";\r\n\r\n/**\r\n * @ignore\r\n */\r\nclass CubicPoly {\r\n    private c0 = 0;\r\n    private c1 = 0;\r\n    private c2 = 0;\r\n    private c3 = 0;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    private init(x0: number, x1: number, t0: number, t1: number) {\r\n        this.c0 = x0;\r\n        this.c1 = t0;\r\n        this.c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;\r\n        this.c3 = 2 * x0 - 2 * x1 + t0 + t1;\r\n    }\r\n\r\n    public initCatmullRom(x0: number, x1: number, x2: number, x3: number, tension: number) {\r\n        this.init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));\r\n    }\r\n\r\n    public initNonuniformCatmullRom(x0: number, x1: number, x2: number, x3: number, dt0: number, dt1: number, dt2: number) {\r\n        // compute tangents when parameterized in [t1,t2]\r\n        let t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;\r\n        let t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2;\r\n\r\n        // rescale tangents for parametrization in [0,1]\r\n        t1 *= dt1;\r\n        t2 *= dt1;\r\n\r\n        this.init(x1, x2, t1, t2);\r\n    }\r\n\r\n    public calc(t: number) {\r\n        let t2 = t * t;\r\n        let t3 = t2 * t;\r\n        return this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst px = new CubicPoly();\r\n/**\r\n * @ignore\r\n */\r\nconst py = new CubicPoly();\r\n/**\r\n * @ignore\r\n */\r\nconst pz = new CubicPoly();\r\n\r\n/**\r\n * CatmullRom3D曲线\r\n * @category Curve\r\n */\r\nexport class CatmullRomCurve3 extends Curve<Vector3> {\r\n\r\n    public points: Vector3[];\r\n    public closed: boolean;\r\n    public curveType: CatmullRomType;\r\n    public tension: number;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param points\r\n     * @param closed\r\n     * @param curveType\r\n     * @param tension\r\n     */\r\n    constructor(points: Vector3[] = [], closed: boolean = false, curveType: CatmullRomType = CatmullRomType.Centripetal, tension: number = 0.5) {\r\n        super();\r\n\r\n        this.type = 'CatmullRomCurve3';\r\n\r\n        this.points = points;\r\n        this.closed = closed;\r\n        this.curveType = curveType;\r\n        this.tension = tension;\r\n    }\r\n\r\n    /**\r\n     * 获取点\r\n     * @param t\r\n     * @param optionalTarget\r\n     */\r\n    public getPoint(t: number, optionalTarget: Nullable<Vector3> = null): Vector3 {\r\n\r\n        let tmp = MathTmp.Vector3[0];\r\n\r\n        let point = optionalTarget ?? new Vector3();\r\n\r\n        let points = this.points;\r\n        let l = points.length;\r\n\r\n        let p = (l - (this.closed ? 0 : 1)) * t;\r\n        let intPoint = Math.floor(p);\r\n        let weight = p - intPoint;\r\n\r\n        if (this.closed) {\r\n            intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;\r\n        } else if (weight == 0 && intPoint == l - 1) {\r\n            intPoint = l - 2;\r\n            weight = 1;\r\n        }\r\n\r\n        let p0; let p1; let p2; let p3; // 4 points\r\n\r\n        if (this.closed || intPoint > 0) {\r\n            p0 = points[(intPoint - 1) % l];\r\n        } else {\r\n            // extrapolate first point\r\n            tmp.subVectors(points[0], points[1]).add(points[0]);\r\n            p0 = tmp;\r\n        }\r\n\r\n        p1 = points[intPoint % l];\r\n        p2 = points[(intPoint + 1) % l];\r\n\r\n        if (this.closed || intPoint + 2 < l) {\r\n            p3 = points[(intPoint + 2) % l];\r\n        } else {\r\n            // extrapolate last point\r\n            tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);\r\n            p3 = tmp;\r\n        }\r\n\r\n        if (this.curveType == CatmullRomType.Centripetal || this.curveType == CatmullRomType.Chordal) {\r\n\r\n            // init Centripetal / Chordal Catmull-Rom\r\n            let pow = this.curveType == CatmullRomType.Chordal ? 0.5 : 0.25;\r\n            let dt0 = Math.pow(p0.distanceToSquared(p1), pow);\r\n            let dt1 = Math.pow(p1.distanceToSquared(p2), pow);\r\n            let dt2 = Math.pow(p2.distanceToSquared(p3), pow);\r\n\r\n            // safety check for repeated points\r\n            if (dt1 < 1e-4) { dt1 = 1.0; }\r\n            if (dt0 < 1e-4) { dt0 = dt1; }\r\n            if (dt2 < 1e-4) { dt2 = dt1; }\r\n\r\n            px.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);\r\n            py.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);\r\n            pz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);\r\n\r\n        } else if (this.curveType == CatmullRomType.Catmullrom) {\r\n\r\n            px.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);\r\n            py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);\r\n            pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);\r\n        }\r\n\r\n        point.set(\r\n            px.calc(weight),\r\n            py.calc(weight),\r\n            pz.calc(weight),\r\n        );\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): CatmullRomCurve3 {\r\n        return new CatmullRomCurve3().copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: CatmullRomCurve3): CatmullRomCurve3 {\r\n        super.copy(source);\r\n\r\n        this.points = [];\r\n\r\n        for (let i = 0, l = source.points.length; i < l; i++) {\r\n            let point = source.points[i];\r\n            this.points.push(point.clone());\r\n        }\r\n\r\n        this.closed = source.closed;\r\n        this.curveType = source.curveType;\r\n        this.tension = source.tension;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 序列化JSON\r\n     */\r\n    public toJSON(): any {\r\n        const data = super.toJSON();\r\n\r\n        data.points = [];\r\n\r\n        for (let i = 0, l = this.points.length; i < l; i++) {\r\n            let point = this.points[i];\r\n            data.points.push(point.toArray());\r\n        }\r\n\r\n        data.closed = this.closed;\r\n        data.curveType = this.curveType;\r\n        data.tension = this.tension;\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * 反序列化JSON\r\n     * @param json\r\n     */\r\n    public fromJSON(json: any): CatmullRomCurve3 {\r\n        super.fromJSON(json);\r\n\r\n        this.points = [];\r\n\r\n        for (let i = 0, l = json.points.length; i < l; i++) {\r\n            let point = json.points[i];\r\n            this.points.push(new Vector3().fromArray(point));\r\n        }\r\n\r\n        this.closed = json.closed;\r\n        this.curveType = json.curveType;\r\n        this.tension = json.tension;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public toDataBuffer(dataBuffer: BinaryBuffer): CatmullRomCurve3 {\r\n        super.toDataBuffer(dataBuffer);\r\n\r\n        dataBuffer.writeBoolean(this.closed);\r\n        dataBuffer.writeInt8(this.curveType);\r\n        dataBuffer.writeFloat32(this.tension);\r\n\r\n        dataBuffer.writeUint16(this.points.length);\r\n        this.points.forEach((point) => point.toDataBuffer(dataBuffer));\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 反序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public fromDataBuffer(dataBuffer: BinaryBuffer): CatmullRomCurve3 {\r\n        super.fromDataBuffer(dataBuffer);\r\n\r\n        this.closed = dataBuffer.readBoolean();\r\n        this.curveType = dataBuffer.readUint8();\r\n        this.tension = dataBuffer.readFloat32();\r\n\r\n        const count = dataBuffer.readUint16();\r\n        for (let i = 0; i < count; ++i) {\r\n            this.points.push(new Vector3().fromDataBuffer(dataBuffer));\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n",
        "import { Curve } from \"./Curve\";\r\nimport { Vector3 } from \"../Vector3\";\r\nimport { Nullable } from \"../../types\";\r\nimport { BezierCurveFunc } from \"./BezierCurveFunc\";\r\nimport { BinaryBuffer } from \"../../Misc\";\r\n\r\n/**\r\n * 3D三次贝塞尔曲线\r\n * @category Curve\r\n */\r\nexport class CubicBezierCurve3 extends Curve<Vector3> {\r\n\r\n    public v0: Vector3 = new Vector3();\r\n    public v1: Vector3 = new Vector3();\r\n    public v2: Vector3 = new Vector3();\r\n    public v3: Vector3 = new Vector3();\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param v0\r\n     * @param v1\r\n     * @param v2\r\n     * @param v3\r\n     */\r\n    constructor(v0: Nullable<Vector3> = null, v1: Nullable<Vector3> = null, v2: Nullable<Vector3> = null, v3: Nullable<Vector3> = null) {\r\n        super();\r\n\r\n        this.type = \"CubicBezierCurve3\";\r\n\r\n        if (v0) { this.v0.copy(v0); }\r\n        if (v1) { this.v1.copy(v1); }\r\n        if (v2) { this.v2.copy(v2); }\r\n        if (v3) { this.v3.copy(v3); }\r\n    }\r\n\r\n    /**\r\n     * 获取点\r\n     * @param t\r\n     * @param optionalTarget\r\n     */\r\n    public getPoint(t: number, optionalTarget: Nullable<Vector3> = null): Vector3 {\r\n        const point = optionalTarget ?? new Vector3();\r\n\r\n        const v0 = this.v0;\r\n        const v1 = this.v1;\r\n        const v2 = this.v2;\r\n        const v3 = this.v3;\r\n\r\n        point.set(\r\n            BezierCurveFunc.CubicBezier(t, v0.x, v1.x, v2.x, v3.x),\r\n            BezierCurveFunc.CubicBezier(t, v0.y, v1.y, v2.y, v3.y),\r\n            BezierCurveFunc.CubicBezier(t, v0.z, v1.z, v2.z, v3.z),\r\n        );\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): CubicBezierCurve3 {\r\n        return new CubicBezierCurve3().copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: CubicBezierCurve3): CubicBezierCurve3 {\r\n        super.copy(source);\r\n\r\n        this.v0.copy(source.v0);\r\n        this.v1.copy(source.v1);\r\n        this.v2.copy(source.v2);\r\n        this.v3.copy(source.v3);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 序列化JSON\r\n     */\r\n    public toJSON(): any {\r\n        const data = super.toJSON();\r\n\r\n        data.v0 = this.v0.toArray();\r\n        data.v1 = this.v1.toArray();\r\n        data.v2 = this.v2.toArray();\r\n        data.v3 = this.v3.toArray();\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * 反序列化JSON\r\n     * @param json\r\n     */\r\n    public fromJSON(json: any): CubicBezierCurve3 {\r\n        super.fromJSON(json);\r\n\r\n        this.v0.fromArray(json.v0);\r\n        this.v1.fromArray(json.v1);\r\n        this.v2.fromArray(json.v2);\r\n        this.v3.fromArray(json.v3);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public toDataBuffer(dataBuffer: BinaryBuffer): CubicBezierCurve3 {\r\n        super.toDataBuffer(dataBuffer);\r\n\r\n        this.v0.toDataBuffer(dataBuffer);\r\n        this.v1.toDataBuffer(dataBuffer);\r\n        this.v2.toDataBuffer(dataBuffer);\r\n        this.v3.toDataBuffer(dataBuffer);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 反序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public fromDataBuffer(dataBuffer: BinaryBuffer): CubicBezierCurve3 {\r\n        super.fromDataBuffer(dataBuffer);\r\n\r\n        this.v0.fromDataBuffer(dataBuffer);\r\n        this.v1.fromDataBuffer(dataBuffer);\r\n        this.v2.fromDataBuffer(dataBuffer);\r\n        this.v3.fromDataBuffer(dataBuffer);\r\n\r\n        return this;\r\n    }\r\n}\r\n",
        "import { Curve } from \"./Curve\";\r\nimport { Vector2 } from \"../Vector2\";\r\nimport { Vector3 } from \"../Vector3\";\r\nimport { EllipseCurve } from \"./EllipseCurve\";\r\nimport { BinaryBuffer } from \"../../Misc/BinaryBuffer\";\r\nimport { LineCurve } from \"./LineCurve\";\r\nimport { SplineCurve } from \"./SplineCurve\";\r\nimport { LineCurve3 } from \"./LineCurve3\";\r\nimport { createCurve } from \"./Curves\";\r\n\r\n/**\r\n * 曲线路径\r\n * @category Curve\r\n */\r\nexport class CurvePath<T = Vector2 | Vector3> extends Curve<T> {\r\n\r\n    public curves: Curve<T>[];\r\n    public autoClose: boolean;\r\n    protected cacheLengths: number[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.type = 'CurvePath';\r\n        this.curves = [];\r\n        this.autoClose = false;\r\n    }\r\n\r\n    public isEmpty(): boolean {\r\n        return this.curves.length <= 0;\r\n    }\r\n\r\n    /**\r\n     * 添加曲线\r\n     * @param curve\r\n     */\r\n    public add(curve: Curve<T>): CurvePath<T> {\r\n        this.curves.push(curve);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 闭合路径\r\n     */\r\n    public closePath(): CurvePath<T> {\r\n\r\n        const startPoint = this.curves[0].getPoint(0);\r\n        const endPoint = this.curves[this.curves.length - 1].getPoint(1);\r\n\r\n        if (!(startPoint as any).equals(endPoint)) {\r\n\r\n            if (startPoint instanceof Vector2 && endPoint instanceof Vector2) {\r\n                this.curves.push(new LineCurve(endPoint, startPoint) as any);\r\n            }\r\n            else if (startPoint instanceof Vector3 && endPoint instanceof Vector3) {\r\n                this.curves.push(new LineCurve3(endPoint, startPoint) as any);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取长度\r\n     */\r\n    public getLength(): number {\r\n        const lens = this.getCurveLengths();\r\n        return lens[lens.length - 1];\r\n    }\r\n\r\n    /**\r\n     * 更新长度\r\n     */\r\n    public updateArcLengths(): number[] {\r\n        this.needsUpdate = true;\r\n        this.cacheLengths.length = 0;\r\n        return this.getCurveLengths();\r\n    }\r\n\r\n    /**\r\n     * 所有曲线长度\r\n     */\r\n    public getCurveLengths(): number[] {\r\n        // We use cache values if curves and cache array are same length\r\n\r\n        if (this.cacheLengths && this.cacheLengths.length == this.curves.length) {\r\n            return this.cacheLengths;\r\n        }\r\n\r\n        // Get length of sub-curve\r\n        // Push sums into cached array\r\n\r\n        let lengths = [];\r\n        let sums = 0;\r\n\r\n        for (let i = 0, l = this.curves.length; i < l; i++) {\r\n            sums += this.curves[i].getLength();\r\n            lengths.push(sums);\r\n        }\r\n\r\n        this.cacheLengths = lengths;\r\n\r\n        return lengths;\r\n    }\r\n\r\n    /**\r\n     * 获取路径上的点\r\n     * @param divisions\r\n     */\r\n    public getSpacedPoints(divisions: number = 40): T[] {\r\n\r\n        let points = [];\r\n        for (let i = 0; i <= divisions; i++) {\r\n            points.push(this.getPoint(i / divisions));\r\n        }\r\n\r\n        if (this.autoClose) {\r\n            points.push(points[0]);\r\n        }\r\n\r\n        return points;\r\n    }\r\n\r\n    /**\r\n     * 获取路径上的点\r\n     * @param divisions\r\n     */\r\n    public getPoints(divisions: number = 12): T[] {\r\n\r\n        let points = [];\r\n        let last;\r\n\r\n        for (let i = 0, curves = this.curves; i < curves.length; i++) {\r\n            let curve = curves[i];\r\n            let resolution = (curve instanceof EllipseCurve) ? divisions * 2\r\n                : (curve && (curve instanceof LineCurve || curve instanceof LineCurve3)) ? 1\r\n                    : (curve && curve instanceof SplineCurve) ? divisions * curve.points.length\r\n                        : divisions;\r\n\r\n            let pts = curve.getPoints(resolution);\r\n\r\n            for (let j = 0; j < pts.length; j++) {\r\n                let point = pts[j];\r\n\r\n                if (last && (last as any).equals(point)) { continue; } // ensures no consecutive points are duplicates\r\n\r\n                points.push(point);\r\n                last = point;\r\n            }\r\n        }\r\n\r\n        if (this.autoClose && points.length > 1 && !((points[points.length - 1] as any).equals(points[0]))) {\r\n            points.push(points[0]);\r\n        }\r\n\r\n        return points;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): CurvePath<T> {\r\n        return new CurvePath<T>().copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: CurvePath<T>): CurvePath<T> {\r\n        super.copy(source);\r\n\r\n        this.curves = [];\r\n\r\n        for (let i = 0, l = source.curves.length; i < l; i++) {\r\n            let curve = source.curves[i];\r\n            this.curves.push(curve.clone());\r\n        }\r\n\r\n        this.autoClose = source.autoClose;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 序列化JSON\r\n     */\r\n    public toJSON(): any {\r\n        const data = super.toJSON();\r\n        data.autoClose = this.autoClose;\r\n        data.curves = [];\r\n\r\n        for (let i = 0, l = this.curves.length; i < l; i++) {\r\n            let curve = this.curves[i];\r\n            data.curves.push(curve.toJSON());\r\n        }\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * 反序列化JSON\r\n     * @param json\r\n     */\r\n    public fromJSON(json: any): CurvePath<T> {\r\n        super.fromJSON(json);\r\n\r\n        this.autoClose = json.autoClose;\r\n        this.curves = [];\r\n\r\n        for (let i = 0, l = json.curves.length; i < l; i++) {\r\n            let curve = json.curves[i];\r\n            let obj = createCurve(curve.type);\r\n            this.curves.push(obj.fromJSON(curve));\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public toDataBuffer(dataBuffer: BinaryBuffer): CurvePath<T> {\r\n        super.toDataBuffer(dataBuffer);\r\n\r\n        dataBuffer.writeBoolean(this.autoClose);\r\n\r\n        dataBuffer.writeUint16(this.curves.length);\r\n\r\n        for (let i = 0, l = this.curves.length; i < l; i++) {\r\n            const curve = this.curves[i];\r\n            curve.toDataBuffer(dataBuffer);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 反序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public fromDataBuffer(dataBuffer: BinaryBuffer): CurvePath<T> {\r\n        super.fromDataBuffer(dataBuffer);\r\n\r\n        this.autoClose = dataBuffer.readBoolean();\r\n\r\n        const count = dataBuffer.readUint16();\r\n        for (let i = 0; i < count; ++i) {\r\n            const type = dataBuffer.readString();\r\n            let obj = createCurve(type);\r\n            this.curves.push(obj.fromDataBuffer(dataBuffer));\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n",
        "import { Curve } from \"./Curve\";\r\nimport { Vector3 } from \"../Vector3\";\r\nimport { Nullable } from \"../../types\";\r\nimport { BezierCurveFunc } from \"./BezierCurveFunc\";\r\nimport { BinaryBuffer } from \"../../Misc\";\r\n\r\n/**\r\n * 2D二次贝塞尔曲线\r\n * @category Curve\r\n */\r\nexport class QuadraticBezierCurve3 extends Curve<Vector3> {\r\n\r\n    public v0: Vector3 = new Vector3();\r\n    public v1: Vector3 = new Vector3();\r\n    public v2: Vector3 = new Vector3();\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param v0\r\n     * @param v1\r\n     * @param v2\r\n     */\r\n    constructor(v0: Nullable<Vector3> = null, v1: Nullable<Vector3> = null, v2: Nullable<Vector3> = null) {\r\n        super();\r\n\r\n        this.type = 'QuadraticBezierCurve3';\r\n\r\n        if (v0) { this.v0.copy(v0); }\r\n        if (v1) { this.v1.copy(v1); }\r\n        if (v2) { this.v2.copy(v2); }\r\n    }\r\n\r\n    /**\r\n     * 获取点\r\n     * @param t\r\n     * @param optionalTarget\r\n     */\r\n    public getPoint(t: number, optionalTarget: Nullable<Vector3> = null): Vector3 {\r\n        const point = optionalTarget ?? new Vector3();\r\n\r\n        const v0 = this.v0;\r\n        const v1 = this.v1;\r\n        const v2 = this.v2;\r\n\r\n        point.set(\r\n            BezierCurveFunc.QuadraticBezier(t, v0.x, v1.x, v2.x),\r\n            BezierCurveFunc.QuadraticBezier(t, v0.y, v1.y, v2.y),\r\n            BezierCurveFunc.QuadraticBezier(t, v0.z, v1.z, v2.z)\r\n        );\r\n\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): QuadraticBezierCurve3 {\r\n        return new QuadraticBezierCurve3().copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: QuadraticBezierCurve3): QuadraticBezierCurve3 {\r\n        super.copy(source);\r\n\r\n        this.v0.copy(source.v0);\r\n        this.v1.copy(source.v1);\r\n        this.v2.copy(source.v2);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 序列化JSON\r\n     */\r\n    public toJSON(): any {\r\n        const data = super.toJSON();\r\n\r\n        data.v0 = this.v0.toArray();\r\n        data.v1 = this.v1.toArray();\r\n        data.v2 = this.v2.toArray();\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * 反序列化JSON\r\n     * @param json\r\n     */\r\n    public fromJSON(json: any): QuadraticBezierCurve3 {\r\n        super.fromJSON(json);\r\n\r\n        this.v0.fromArray(json.v0);\r\n        this.v1.fromArray(json.v1);\r\n        this.v2.fromArray(json.v2);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public toDataBuffer(dataBuffer: BinaryBuffer): QuadraticBezierCurve3 {\r\n        super.toDataBuffer(dataBuffer);\r\n\r\n        this.v0.toDataBuffer(dataBuffer);\r\n        this.v1.toDataBuffer(dataBuffer);\r\n        this.v2.toDataBuffer(dataBuffer);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 反序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public fromDataBuffer(dataBuffer: BinaryBuffer): QuadraticBezierCurve3 {\r\n        super.fromDataBuffer(dataBuffer);\r\n\r\n        this.v0.fromDataBuffer(dataBuffer);\r\n        this.v1.fromDataBuffer(dataBuffer);\r\n        this.v2.fromDataBuffer(dataBuffer);\r\n\r\n        return this;\r\n    }\r\n}\r\n",
        "import { Path } from \"./Path\";\r\nimport { Vector2 } from \"../Vector2\";\r\nimport { Nullable } from \"../../types\";\r\nimport { BinaryBuffer } from \"../../Misc\";\r\nimport { MathUtils } from \"../MathUtils\";\r\n\r\n/**\r\n * 2D形状\r\n * @category Shape\r\n */\r\nexport class Shape extends Path {\r\n\r\n    public uuid: string;\r\n    public holes: Path[];\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param points\r\n     */\r\n    constructor(points: Nullable<Vector2[]> = null) {\r\n        super(points);\r\n\r\n        this.uuid = MathUtils.generateUUID();\r\n        this.type = 'Shape';\r\n        this.holes = [];\r\n    }\r\n\r\n    /**\r\n     * 获取每个孔上的点列表\r\n     * @param divisions\r\n     */\r\n    public getPointsHoles(divisions: number): Vector2[][] {\r\n        const holesPts = [];\r\n        for (let i = 0, l = this.holes.length; i < l; i++) {\r\n            holesPts[i] = this.holes[i].getPoints(divisions);\r\n        }\r\n        return holesPts;\r\n    }\r\n\r\n    /**\r\n     * 获取点列表和孔上的点列表\r\n     * @param divisions\r\n     */\r\n    public extractPoints(divisions: number) {\r\n        return {\r\n            shape: this.getPoints(divisions),\r\n            holes: this.getPointsHoles(divisions),\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): Shape {\r\n        return new Shape().copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: Shape): Shape {\r\n        super.copy(source);\r\n\r\n        this.holes = [];\r\n\r\n        for (let i = 0, l = source.holes.length; i < l; i++) {\r\n            let hole = source.holes[i];\r\n            this.holes.push(hole.clone());\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 序列化JSON\r\n     */\r\n    public toJSON(): any {\r\n        const data = super.toJSON();\r\n        data.uuid = this.uuid;\r\n        data.holes = [];\r\n\r\n        for (let i = 0, l = this.holes.length; i < l; i++) {\r\n            let hole = this.holes[i];\r\n            data.holes.push(hole.toJSON());\r\n        }\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * 反序列化JSON\r\n     * @param json\r\n     */\r\n    public fromJSON(json: any): Shape {\r\n        super.fromJSON(json);\r\n\r\n        this.uuid = json.uuid;\r\n        this.holes = [];\r\n\r\n        for (let i = 0, l = json.holes.length; i < l; i++) {\r\n            let hole = json.holes[i];\r\n            this.holes.push(new Path().fromJSON(hole));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public toDataBuffer(dataBuffer: BinaryBuffer): Shape {\r\n        super.toDataBuffer(dataBuffer);\r\n\r\n        dataBuffer.writeUint16(this.holes.length);\r\n\r\n        this.holes.forEach((path) => {\r\n            path.toDataBuffer(dataBuffer);\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 反序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public fromDataBuffer(dataBuffer: BinaryBuffer): Shape {\r\n        super.fromDataBuffer(dataBuffer);\r\n\r\n        const count = dataBuffer.readUint16();\r\n        for (let i = 0; i < count; ++i) {\r\n            const path = new Path().fromDataBuffer(dataBuffer);\r\n            this.holes.push(path);\r\n        }\r\n        return this;\r\n    }\r\n}\r\n",
        "import { Vector2 } from \"../Vector2\";\r\nimport { Nullable } from \"../../types\";\r\nimport { Earcut } from \"../../Libs\";\r\n\r\n/**\r\n * 2D形状扩展工具\r\n * @category Shape\r\n */\r\nexport abstract class ShapeUtils {\r\n\r\n    /**\r\n     * 多边形面积\r\n     * @param contour\r\n     */\r\n    public static area(contour: Vector2[]): number {\r\n        let n = contour.length;\r\n        let a = 0.0;\r\n        for (let p = n - 1, q = 0; q < n; p = q++) {\r\n            a += contour[p].x * contour[q].y - contour[q].x * contour[p].y;\r\n        }\r\n        return a * 0.5;\r\n    }\r\n\r\n    /**\r\n     * 点是否在多边形内\r\n     * @param poly\r\n     * @param pt\r\n     * @returns {boolean}\r\n     */\r\n    public static isContainsPoint(poly: Vector2[], pt: Vector2) {\r\n        let  c = false;\r\n        for (let i = 0, j = poly.length - 1; i < poly.length; j = i++) {\r\n            if ((((poly[i].y <= pt.y) && (pt.y < poly[j].y)) ||\r\n                ((poly[j].y <= pt.y) && (pt.y < poly[i].y)))\r\n                && (pt.x < (poly[j].x - poly[i].x) * (pt.y - poly[i].y) / (poly[j].y - poly[i].y) + poly[i].x)) {\r\n                c = !c;\r\n            }\r\n        }\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * 是否顺时针方向\r\n     * @param pts\r\n     */\r\n    public static isClockWise(pts: Vector2[]): boolean {\r\n        return ShapeUtils.area(pts) < 0;\r\n    }\r\n\r\n    /**\r\n     * 多边形三角形化后的面积\r\n     * @param contour\r\n     * @param holes\r\n     */\r\n    public static triangulateArea(contour: Vector2[], holes: Nullable<Vector2[][]> = null): number {\r\n        let vertices = new Array<number>(); // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\r\n        let holeIndices = []; // array of hole indices\r\n        let faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\r\n\r\n        removeDupEndPts(contour);\r\n        addContour(vertices, contour);\r\n\r\n        if (holes) {\r\n            let holeIndex = contour.length;\r\n            holes.forEach(removeDupEndPts);\r\n\r\n            for (let i = 0; i < holes.length; i++) {\r\n                holeIndices.push(holeIndex);\r\n                holeIndex += holes[i].length;\r\n                addContour(vertices, holes[i]);\r\n            }\r\n        }\r\n\r\n        const triangles = Earcut.earcut(vertices, holeIndices, 2);\r\n        return Earcut.trianglesArea(vertices, triangles, 2);\r\n    }\r\n\r\n    /**\r\n     * 多边形三角形化\r\n     * @param contour\r\n     * @param holes\r\n     */\r\n    public static triangulateShape(contour: Vector2[], holes: Nullable<Vector2[][]> = null): number[][] {\r\n        let vertices = new Array<number>(); // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\r\n        let holeIndices = []; // array of hole indices\r\n        let faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\r\n\r\n        removeDupEndPts(contour);\r\n        addContour(vertices, contour);\r\n\r\n        if (holes) {\r\n            let holeIndex = contour.length;\r\n            holes.forEach(removeDupEndPts);\r\n\r\n            for (let i = 0; i < holes.length; i++) {\r\n                holeIndices.push(holeIndex);\r\n                holeIndex += holes[i].length;\r\n                addContour(vertices, holes[i]);\r\n            }\r\n        }\r\n\r\n        const triangles = Earcut.earcut(vertices, holeIndices, 2);\r\n        for (let i = 0; i < triangles.length; i += 3) {\r\n            faces.push(triangles.slice(i, i + 3));\r\n        }\r\n        return faces;\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @param points\r\n */\r\nfunction removeDupEndPts(points: Vector2[]) {\r\n    let l = points.length;\r\n    if (l > 2 && points[l - 1].equals(points[0])) {\r\n        points.pop();\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @param vertices\r\n * @param contour\r\n */\r\nfunction addContour(vertices: number[], contour: Vector2[]) {\r\n    for (let i = 0; i < contour.length; i++) {\r\n        vertices.push(contour[i].x);\r\n        vertices.push(contour[i].y);\r\n    }\r\n}\r\n",
        "import { MathUtils } from \"../Math/MathUtils\";\r\nimport { Nullable } from \"../types\";\r\nimport { EventDispatcher, Event } from \"../Events\";\r\nimport { Scene } from \"./Scene\";\r\nimport { VisibleLayers } from \"../Misc/VisibleLayers\";\r\n\r\n/**\r\n * @ignore\r\n */\r\nlet objectPoolId = 0;\r\n\r\n/**\r\n * 基础3D对象\r\n */\r\nexport abstract class AbstractObject extends EventDispatcher {\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    [key: string]: any;\r\n\r\n    /**\r\n     * 对象临时id\r\n     */\r\n    public id: number;\r\n    /**\r\n     * 对象uuid\r\n     */\r\n    public uuid: string;\r\n    /**\r\n     * 祖先临时id\r\n     */\r\n    public ancestorId: string;\r\n    /**\r\n     * 名称\r\n     */\r\n    public name: string;\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _scene: Scene;\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _parent: Nullable<AbstractObject> = null;\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _children: AbstractObject[] = [];\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _visible: boolean = true;\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _visibleLayers: VisibleLayers = new VisibleLayers();\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _sceneRootNodesIndex: number = -1;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @protected\r\n     */\r\n    protected constructor(scene: Scene, parent: Nullable<AbstractObject> = null, name: string = '') {\r\n        super();\r\n\r\n        this.id = objectPoolId++;\r\n        this.name = name;\r\n        this.uuid = MathUtils.generateUUID();\r\n\r\n        this._scene = scene;\r\n        this._parent = parent;\r\n        this._parent?.add(this);\r\n    }\r\n\r\n    /**\r\n     * 是否在场景里面\r\n     */\r\n    get isInScene(): boolean {\r\n        return this._scene != null;\r\n    }\r\n\r\n    /**\r\n     * 场景\r\n     */\r\n    get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * 子节点\r\n     */\r\n    get children(): AbstractObject[] {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * 父节点\r\n     */\r\n    get parent(): Nullable<AbstractObject> {\r\n        return this._parent;\r\n    }\r\n\r\n    /**\r\n     * 可见层\r\n     */\r\n    get visibleLayers() {\r\n        return this._visibleLayers;\r\n    }\r\n\r\n    /**\r\n     * 是否可见\r\n     */\r\n    get visible() {\r\n        return this._visible;\r\n    }\r\n    set visible(value) {\r\n        if (this._visible != value) {\r\n            const tempVisible = this._visible;\r\n            this._visible = value;\r\n            this.onVisibleChanged(tempVisible, this._visible);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 释放\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this.dispatchEvent(new Event('dispose'));\r\n    }\r\n\r\n    /**\r\n     * 可见改变\r\n     * @param oldValue\r\n     * @param newValue\r\n     * @ignore\r\n     */\r\n    protected onVisibleChanged(oldValue: boolean, newValue: boolean): void {\r\n\r\n    }\r\n\r\n    /**\r\n     * 添加子节点\r\n     * @param object\r\n     */\r\n    public add(object: AbstractObject): AbstractObject {\r\n\r\n        this._children.push(object);\r\n\r\n        object.onAddSelf();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 删除子节点\r\n     * @param object\r\n     */\r\n    public remove(object: AbstractObject): AbstractObject {\r\n\r\n        const index = this._children.indexOf(object);\r\n\r\n        if (index != -1) {\r\n\r\n            object.onRemoveSelf();\r\n\r\n            object._parent = null;\r\n\r\n            this._children.splice(index, 1);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 从父节点移除自己\r\n     */\r\n    public removeFromParent() {\r\n        if (this._parent) {\r\n            this._parent.remove(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 添加到父节点\r\n     * @ignore\r\n     */\r\n    protected onAddSelf(): void {\r\n    }\r\n\r\n    /**\r\n     * 从父节点删除\r\n     * @ignore\r\n     */\r\n    protected onRemoveSelf(): void {\r\n    }\r\n\r\n    /**\r\n     * 添加到场景\r\n     * @ignore\r\n     */\r\n    public onAddScene(): void {\r\n    }\r\n\r\n    /**\r\n     * 从场景删除\r\n     * @ignore\r\n     */\r\n    public onRemoveScene(): void {\r\n    }\r\n\r\n    /**\r\n     * 从Id查找子节点\r\n     * @param id\r\n     */\r\n    public getObjectById(id: number): Nullable<AbstractObject> {\r\n        return this.getObjectByProperty('id', id);\r\n    }\r\n\r\n    /**\r\n     * 从uuid查找子节点\r\n     * @param uuid\r\n     */\r\n    public getObjectByUUID(uuid: string): Nullable<AbstractObject> {\r\n        return this.getObjectByProperty('uuid', uuid);\r\n    }\r\n\r\n    /**\r\n     * 从名称查找子节点\r\n     * @param name\r\n     */\r\n    public getObjectByName(name: string): Nullable<AbstractObject> {\r\n        return this.getObjectByProperty('name', name);\r\n    }\r\n\r\n    /**\r\n     * 从对象属性查找子节点\r\n     * @param name\r\n     * @param value\r\n     */\r\n    public getObjectByProperty<T>(name: string, value: T): Nullable<AbstractObject> {\r\n        if (this[name] == value) { return this; }\r\n\r\n        for (let i = 0, l = this.children.length; i < l; i++) {\r\n            let child = this.children[i];\r\n            let object = child.getObjectByProperty<T>(name, value);\r\n            if (object) {\r\n                return object;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 遍历所有节点\r\n     * @param func\r\n     */\r\n    public traverse(func: (obj: AbstractObject) => void): AbstractObject {\r\n\r\n        func(this);\r\n\r\n        const children = this.children;\r\n        for (let i = 0, l = children.length; i < l; i++) {\r\n            children[i].traverse(func);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 遍历可见节点\r\n     * @param func\r\n     */\r\n    public traverseVisible(func: (obj: AbstractObject) => void): AbstractObject {\r\n\r\n        if (!this._visible) {\r\n            return this;\r\n        }\r\n\r\n        func(this);\r\n\r\n        const children = this.children;\r\n        for (let i = 0, l = children.length; i < l; i++) {\r\n            children[i].traverseVisible(func);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 遍历父节点和祖先节点\r\n     * @param func\r\n     */\r\n    public traverseAncestors(func: (obj: AbstractObject) => void): AbstractObject {\r\n\r\n        const parent = this._parent;\r\n        if (parent != null) {\r\n            func(parent);\r\n\r\n            parent.traverseAncestors(func);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public _addToSceneRootNodes(): void {\r\n        if (this._sceneRootNodesIndex == -1) {\r\n            this._sceneRootNodesIndex = this._scene.rootNodes.length;\r\n            this._scene.rootNodes.push(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public _removeFromSceneRootNodes(): void {\r\n        if (this._sceneRootNodesIndex != -1) {\r\n            const rootNodes = this._scene.rootNodes;\r\n            const lastIdx = rootNodes.length - 1;\r\n            rootNodes[this._sceneRootNodesIndex] = rootNodes[lastIdx];\r\n            rootNodes[this._sceneRootNodesIndex]._sceneRootNodesIndex = this._sceneRootNodesIndex;\r\n            this._scene.rootNodes.pop();\r\n            this._sceneRootNodesIndex = -1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public abstract clone(): AbstractObject;\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: AbstractObject): AbstractObject {\r\n        return this;\r\n    }\r\n}\r\n",
        "import { CSGVector3D } from './CSGVector3D';\r\nimport { CSGPlane } from './CSGPlane';\r\nimport { CSGLine3D } from './CSGLine3D';\r\nimport { CSGOrthoNormalBasis } from './CSGOrthoNormalBasis';\r\nimport { CSGMatrix4x4 } from './CSGMatrix4x4';\r\nimport { CSG } from './CSG';\r\nimport { InterfaceCSGVector3D } from './InterfaceCSG';\r\n\r\n/**\r\n * CSG连接点类\r\n */\r\nexport class CSGConnector {\r\n    /**\r\n     * 链接点\r\n     */\r\n    public point : CSGVector3D;\r\n\r\n    /**\r\n     * 坐标轴向量\r\n     */\r\n    public axisvector : CSGVector3D;\r\n\r\n    /**\r\n     * 法线向量\r\n     */\r\n    public normalvector : CSGVector3D;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param point\r\n     * @param axisvector\r\n     * @param normalvector\r\n     */\r\n    constructor(point: InterfaceCSGVector3D | number[], axisvector: InterfaceCSGVector3D | number[], normalvector: InterfaceCSGVector3D | number[]) {\r\n        this.point = new CSGVector3D(point);\r\n        this.axisvector = new CSGVector3D(axisvector).unit();\r\n        this.normalvector = new CSGVector3D(normalvector).unit();\r\n    }\r\n\r\n    /**\r\n     * 标准化\r\n     */\r\n    public normalized(): CSGConnector {\r\n        let axisvector = this.axisvector.unit();\r\n        // make the normal vector truly normal:\r\n        let n = this.normalvector.cross(axisvector).unit();\r\n        let normalvector = axisvector.cross(n);\r\n        return new CSGConnector(this.point, axisvector, normalvector);\r\n    }\r\n\r\n    /**\r\n     * 转化\r\n     * @param matrix4x4\r\n     */\r\n    public transform(matrix4x4: CSGMatrix4x4): CSGConnector {\r\n        let point = this.point.multiply4x4(matrix4x4);\r\n        let axisvector = this.point.plus(this.axisvector).multiply4x4(matrix4x4).minus(point);\r\n        let normalvector = this.point.plus(this.normalvector).multiply4x4(matrix4x4).minus(point);\r\n        return new CSGConnector(point, axisvector, normalvector);\r\n    }\r\n\r\n    // Get the transformation matrix to connect this Connector to another connector\r\n    //   other: a CSG.Connector to which this connector should be connected\r\n    //   mirror: false: the 'axis' vectors of the connectors should point in the same direction\r\n    //           true: the 'axis' vectors of the connectors should point in opposite direction\r\n    //   normalrotation: degrees of rotation between the 'normal' vectors of the two\r\n    //                   connectors\r\n    /**\r\n     * 获取转换矩阵以将此连接器连接到另一个连接器\r\n     * @param other\r\n     * @param mirror\r\n     * @param normalrotation\r\n     */\r\n    public getTransformationTo(other: CSGConnector, mirror: boolean, normalrotation: number): CSGMatrix4x4 {\r\n        mirror = !!mirror;\r\n        normalrotation = normalrotation ? Number(normalrotation) : 0;\r\n        let us = this.normalized();\r\n        other = other.normalized();\r\n        // shift to the origin:\r\n        let transformation = CSGMatrix4x4.translation(this.point.negated());\r\n        // construct the plane crossing through the origin and the two axes:\r\n        let axesplane = CSGPlane.anyPlaneFromVector3Ds(\r\n            new CSGVector3D(0, 0, 0), us.axisvector, other.axisvector);\r\n        let axesbasis = new CSGOrthoNormalBasis(axesplane);\r\n        let angle1 = axesbasis.to2D(us.axisvector).angle();\r\n        let angle2 = axesbasis.to2D(other.axisvector).angle();\r\n        let rotation = 180.0 * (angle2 - angle1) / Math.PI;\r\n        if (mirror) { rotation += 180.0; }\r\n        transformation = transformation.multiply(axesbasis.getProjectionMatrix());\r\n        transformation = transformation.multiply(CSG.Matrix4x4.rotationZ(rotation));\r\n        transformation = transformation.multiply(axesbasis.getInverseProjectionMatrix());\r\n        let usAxesAligned = us.transform(transformation);\r\n        // Now we have done the transformation for aligning the axes.\r\n        // We still need to align the normals:\r\n        let normalsplane = CSGPlane.fromNormalAndPoint(other.axisvector, new CSGVector3D(0, 0, 0));\r\n        let normalsbasis = new CSGOrthoNormalBasis(normalsplane);\r\n        angle1 = normalsbasis.to2D(usAxesAligned.normalvector).angle();\r\n        angle2 = normalsbasis.to2D(other.normalvector).angle();\r\n        rotation = 180.0 * (angle2 - angle1) / Math.PI;\r\n        rotation += normalrotation;\r\n        transformation = transformation.multiply(normalsbasis.getProjectionMatrix());\r\n        transformation = transformation.multiply(CSGMatrix4x4.rotationZ(rotation));\r\n        transformation = transformation.multiply(normalsbasis.getInverseProjectionMatrix());\r\n        // and translate to the destination point:\r\n        transformation = transformation.multiply(CSGMatrix4x4.translation(other.point));\r\n        // let usAligned = us.transform(transformation);\r\n        return transformation;\r\n    }\r\n\r\n    /**\r\n     * 获取坐标轴线\r\n     */\r\n    public axisLine(): CSGLine3D {\r\n        return new CSGLine3D(this.point, this.axisvector);\r\n    }\r\n\r\n    // creates a new Connector, with the connection point moved in the direction of the axisvector\r\n    /**\r\n     * 创建一个连接器\r\n     * @param distance\r\n     */\r\n    public extend(distance: number): CSGConnector {\r\n        let newpoint = this.point.plus(this.axisvector.unit().times(distance));\r\n        return new CSGConnector(newpoint, this.axisvector, this.normalvector);\r\n    }\r\n\r\n    /**\r\n     * 镜像\r\n     * @param plane\r\n     */\r\n    public mirrored(plane: CSGPlane): CSGConnector {\r\n        return this.transform(CSGMatrix4x4.mirroring(plane));\r\n    }\r\n\r\n    /**\r\n     * X轴镜像\r\n     */\r\n    public mirroredX(): CSGConnector {\r\n        let plane = new CSGPlane(CSGVector3D.Create(1, 0, 0), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * Y轴镜像\r\n     */\r\n    public mirroredY(): CSGConnector {\r\n        let plane = new CSGPlane(CSGVector3D.Create(0, 1, 0), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * Z轴镜像\r\n     */\r\n    public mirroredZ(): CSGConnector {\r\n        let plane = new CSGPlane(CSGVector3D.Create(0, 0, 1), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * 转化\r\n     * @param v\r\n     */\r\n    public translate(v: InterfaceCSGVector3D): CSGConnector {\r\n        return this.transform(CSGMatrix4x4.translation(v));\r\n    }\r\n\r\n    /**\r\n     * 缩放\r\n     * @param f\r\n     */\r\n    public scale(f: InterfaceCSGVector3D): CSGConnector {\r\n        return this.transform(CSGMatrix4x4.scaling(f));\r\n    }\r\n\r\n    /**\r\n     * X轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateX(deg: number): CSGConnector {\r\n        return this.transform(CSGMatrix4x4.rotationX(deg));\r\n    }\r\n\r\n    /**\r\n     * Y轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateY(deg: number): CSGConnector {\r\n        return this.transform(CSGMatrix4x4.rotationY(deg));\r\n    }\r\n\r\n    /**\r\n     * Z轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateZ(deg: number): CSGConnector {\r\n        return this.transform(CSGMatrix4x4.rotationZ(deg));\r\n    }\r\n\r\n    /**\r\n     * 旋转\r\n     * @param deg\r\n     */\r\n    public rotate(rotationCenter: CSGVector3D, rotationAxis: CSGVector3D, degrees: number): CSGConnector {\r\n        return this.transform(CSGMatrix4x4.rotation(rotationCenter, rotationAxis, degrees));\r\n    }\r\n\r\n    /**\r\n     * 旋转欧拉角\r\n     * @param alpha\r\n     * @param beta\r\n     * @param gamma\r\n     * @param position\r\n     */\r\n    public rotateEulerAngles(alpha: number, beta: number, gamma: number, position: CSGVector3D): CSGConnector {\r\n        position = position || [0, 0, 0];\r\n        let Rz1 = CSGMatrix4x4.rotationZ(alpha);\r\n        let Rx = CSGMatrix4x4.rotationX(beta);\r\n        let Rz2 = CSGMatrix4x4.rotationZ(gamma);\r\n        let T = CSGMatrix4x4.translation(new CSGVector3D(position));\r\n        return this.transform(Rz2.multiply(Rx).multiply(Rz1).multiply(T));\r\n    }\r\n}\r\n",
        "import { CSGVector2D } from './CSGVector2D';\r\nimport { CSG } from './CSG';\r\nimport { CSGMatrix4x4 } from './CSGMatrix4x4';\r\nimport { CSGPlane } from './CSGPlane';\r\nimport { CSGVector3D } from './CSGVector3D';\r\nimport {InterfaceCSGVector2D, InterfaceCSGVector3D} from './InterfaceCSG';\r\n\r\n/**\r\n * 2D线段类\r\n */\r\nexport class CSGLine2D {\r\n    /**\r\n     * 向量\r\n     */\r\n    public normal : CSGVector2D;\r\n\r\n    /**\r\n     * 暂无\r\n     */\r\n    public w : number;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param normal\r\n     * @param w\r\n     */\r\n    constructor(normal: CSGVector2D, w: number) {\r\n        const _w = w.toString();\r\n        normal = new CSGVector2D(normal);\r\n        w = parseFloat(_w);\r\n        let l = normal.length();\r\n        // normalize:\r\n        w *= l;\r\n        normal = normal.times(1.0 / l);\r\n        this.normal = normal;\r\n        this.w = w;\r\n    }\r\n\r\n    /**\r\n     * 从点创建\r\n     * @param p1\r\n     * @param p2\r\n     */\r\n    static fromPoints(p1: InterfaceCSGVector2D, p2: InterfaceCSGVector2D) {\r\n        let _p1 = new CSGVector2D(p1);\r\n        let _p2 = new CSGVector2D(p2);\r\n        let direction = _p2.minus(_p1);\r\n        let normal = direction.normal().negated().unit();\r\n        let w = _p1.dot(normal);\r\n        return new CSGLine2D(normal, w);\r\n    }\r\n\r\n    /**\r\n     * 反转\r\n     */\r\n    public reverse(): CSGLine2D {\r\n        return new CSGLine2D(this.normal.negated(), -this.w);\r\n    }\r\n\r\n    /**\r\n     * 判断相等\r\n     * @param l\r\n     */\r\n    public equals(l: CSGLine2D): boolean {\r\n        return (l.normal.equals(this.normal) && (l.w == this.w));\r\n    }\r\n\r\n    /**\r\n     * 原点\r\n     */\r\n    public origin(): CSGVector2D {\r\n        return this.normal.times(this.w);\r\n    }\r\n\r\n    /**\r\n     * 方向\r\n     */\r\n    public direction(): CSGVector2D {\r\n        return this.normal.normal();\r\n    }\r\n\r\n    /**\r\n     * y点x坐标\r\n     * @param y\r\n     */\r\n    public xAtY(y: number): number {\r\n        // (py == y) && (normal * p == w)\r\n        // -> px = (w - normal._y * y) / normal.x\r\n        let x = (this.w - this.normal._y * y) / this.normal.x;\r\n        return x;\r\n    }\r\n\r\n    /**\r\n     * 到点的绝对距离\r\n     * @param point\r\n     */\r\n    public absDistanceToPoint(point: CSGVector2D): number {\r\n        point = new CSGVector2D(point);\r\n        let point_projected = point.dot(this.normal);\r\n        let distance = Math.abs(point_projected - this.w);\r\n        return distance;\r\n    }\r\n\r\n    // intersection between two lines, returns point as Vector2D\r\n    /**\r\n     * 通过两线交点产生二维向量\r\n     * @param line2d\r\n     */\r\n    public intersectWithLine(line2d: CSGLine2D): CSGVector2D {\r\n        let point = CSG.solve2Linear(this.normal.x, this.normal.y, line2d.normal.x, line2d.normal.y, this.w, line2d.w);\r\n        const _point = new CSGVector2D(point); // make  vector2d\r\n        return _point;\r\n    }\r\n\r\n    /**\r\n     * 根据矩阵转换\r\n     * @param matrix4x4\r\n     */\r\n    public transform(matrix4x4: CSGMatrix4x4): CSGLine2D {\r\n        let origin = new CSGVector2D(0, 0);\r\n        let pointOnPlane = this.normal.times(this.w);\r\n        let neworigin = origin.multiply4x4(matrix4x4);\r\n        let neworiginPlusNormal = this.normal.multiply4x4(matrix4x4);\r\n        let newnormal = neworiginPlusNormal.minus(neworigin);\r\n        let newpointOnPlane = pointOnPlane.multiply4x4(matrix4x4);\r\n        let neww = newnormal.dot(newpointOnPlane);\r\n        return new CSGLine2D(newnormal, neww);\r\n    }\r\n\r\n    /**\r\n     * 镜像\r\n     * @param plane\r\n     */\r\n    public mirrored(plane: CSGPlane): CSGLine2D {\r\n        return this.transform(CSGMatrix4x4.mirroring(plane));\r\n    }\r\n\r\n    /**\r\n     * X轴镜像\r\n     */\r\n    public mirroredX(): CSGLine2D {\r\n        let plane = new CSGPlane(CSGVector3D.Create(1, 0, 0), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * Y轴镜像\r\n     */\r\n    public mirroredY(): CSGLine2D {\r\n        let plane = new CSGPlane(CSGVector3D.Create(0, 1, 0), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * Z轴镜像\r\n     */\r\n    public mirroredZ(): CSGLine2D {\r\n        let plane = new CSGPlane(CSGVector3D.Create(0, 0, 1), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * 转化\r\n     * @param v\r\n     */\r\n    public translate(v: InterfaceCSGVector3D): CSGLine2D {\r\n        return this.transform(CSGMatrix4x4.translation(v));\r\n    }\r\n\r\n    /**\r\n     * 缩放\r\n     * @param f\r\n     */\r\n    public scale(f: InterfaceCSGVector3D): CSGLine2D {\r\n        return this.transform(CSGMatrix4x4.scaling(f));\r\n    }\r\n\r\n    /**\r\n     * X轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateX(deg: number): CSGLine2D {\r\n        return this.transform(CSGMatrix4x4.rotationX(deg));\r\n    }\r\n\r\n    /**\r\n     * Y轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateY(deg: number): CSGLine2D {\r\n        return this.transform(CSGMatrix4x4.rotationY(deg));\r\n    }\r\n\r\n    /**\r\n     * Z轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateZ(deg: number): CSGLine2D {\r\n        return this.transform(CSGMatrix4x4.rotationZ(deg));\r\n    }\r\n\r\n    /**\r\n     * 旋转\r\n     * @param rotationCenter\r\n     * @param rotationAxis\r\n     * @param degrees\r\n     */\r\n    public rotate(rotationCenter: CSGVector3D, rotationAxis: CSGVector3D, degrees: number): CSGLine2D {\r\n        return this.transform(CSGMatrix4x4.rotation(rotationCenter, rotationAxis, degrees));\r\n    }\r\n\r\n    /**\r\n     * 旋转欧拉角\r\n     * @param alpha\r\n     * @param beta\r\n     * @param gamma\r\n     * @param position\r\n     */\r\n    public rotateEulerAngles(alpha: number, beta: number, gamma: number, position: InterfaceCSGVector3D): CSGLine2D {\r\n        position = position || [0, 0, 0];\r\n        let Rz1 = CSGMatrix4x4.rotationZ(alpha);\r\n        let Rx = CSGMatrix4x4.rotationX(beta);\r\n        let Rz2 = CSGMatrix4x4.rotationZ(gamma);\r\n        let T = CSGMatrix4x4.translation(new CSGVector3D(position));\r\n        return this.transform(Rz2.multiply(Rx).multiply(Rz1).multiply(T));\r\n    }\r\n\r\n}\r\n",
        "/**\r\n * CSG模糊处理工厂\r\n */\r\nexport class CSGFuzzyFactory {\r\n    /**\r\n     * 数据表 {}\r\n     */\r\n    public lookuptable : any;\r\n\r\n    /**\r\n     * 乘数\r\n     */\r\n    public multiplier : number;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param numdimensions\r\n     * @param tolerance\r\n     */\r\n    constructor(numdimensions: number, tolerance: number) {\r\n        this.lookuptable = {};\r\n        this.multiplier = 1.0 / tolerance;\r\n    }\r\n\r\n    /**\r\n     * 查找或创建\r\n     * @param els\r\n     * @param creatorCallback\r\n     */\r\n    public lookupOrCreate(els: any[], creatorCallback: any): any {\r\n        let hash = '';\r\n        let multiplier = this.multiplier;\r\n        els.forEach((el) => {\r\n            let valueQuantized = Math.round(el * multiplier);\r\n            hash += `${valueQuantized}/`;\r\n        });\r\n        if (hash in this.lookuptable) {\r\n            return this.lookuptable[hash];\r\n        } else {\r\n            let object = creatorCallback(els);\r\n            let hashparts = els.map((el) => {\r\n                let q0 = Math.floor(el * multiplier);\r\n                let q1 = q0 + 1;\r\n                return [`${q0}/`, `${q1}/`];\r\n            });\r\n            let numelements = els.length;\r\n            let numhashes = 1 << numelements;\r\n            for (let hashmask = 0; hashmask < numhashes; ++hashmask) {\r\n                let hashmask_shifted = hashmask;\r\n                hash = '';\r\n                hashparts.forEach((hashpart) => {\r\n                    hash += hashpart[hashmask_shifted & 1];\r\n                    hashmask_shifted >>= 1;\r\n                });\r\n                this.lookuptable[hash] = object;\r\n            }\r\n            return object;\r\n        }\r\n    }\r\n}\r\n\r\n",
        "import { CSG } from './CSG';\r\n\r\n/**\r\n * CSG共享多边形\r\n */\r\nexport class CSGPolygonShared {\r\n    /**\r\n     * 颜色\r\n     */\r\n    public color: any;\r\n\r\n    /**\r\n     * 分类符\r\n     */\r\n    public tag: any;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param color\r\n     */\r\n    constructor(color: any) {\r\n        if (color != null) {\r\n            if (color.length != 4) {\r\n                throw new Error('Expecting 4 element array');\r\n            }\r\n        }\r\n        this.color = color;\r\n    }\r\n\r\n    // Create CSG.Polygon.Shared from a color, can be called as follows:\r\n    // let s = CSG.Polygon.Shared.fromColor(r,g,b [,a])\r\n    // let s = CSG.Polygon.Shared.fromColor([r,g,b [,a]])\r\n    /**\r\n     * 从颜色创建\r\n     * @param args\r\n     */\r\n    static fromColor(args: any) {\r\n        let color;\r\n        if (arguments.length == 1) {\r\n            color = arguments[0].slice(); // make deep copy\r\n        } else {\r\n            color = [];\r\n            for (let i = 0; i < arguments.length; i++) {\r\n                color.push(arguments[i]);\r\n            }\r\n        }\r\n        if (color.length == 3) {\r\n            color.push(1);\r\n        } else if (color.length != 4) {\r\n            throw new Error('setColor expects either an array with 3 or 4 elements, or 3 or 4 parameters.');\r\n        }\r\n        return new CSGPolygonShared(color);\r\n    }\r\n\r\n    /**\r\n     * 从对象创建\r\n     * @param obj\r\n     */\r\n    static fromObject(obj: any): CSGPolygonShared {\r\n        return new CSGPolygonShared(obj.color);\r\n    }\r\n\r\n    /**\r\n     * 获取分类符\r\n     */\r\n    public getTag() {\r\n        let result = this.tag;\r\n        if (!result) {\r\n            result = CSG.getTag();\r\n            this.tag = result;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // get a string uniquely identifying this object\r\n    /**\r\n     * 获取唯一标识此对象的字符串\r\n     */\r\n    public getHash() {\r\n        if (!this.color) { return 'null'; }\r\n        return this.color.join('/');\r\n    }\r\n\r\n}\r\n",
        "import { Texture } from \"./Texture\";\r\nimport { Nullable } from \"../../types\";\r\n\r\n/**\r\n * 立方体纹理\r\n */\r\nexport class TextureCube extends Texture {\r\n\r\n    public buffers: HTMLImageElement[] | ImageBitmap[] = [];\r\n    public deleteBuffer: boolean = false;\r\n    public width: number;\r\n    public height: number;\r\n    public mipmaps: HTMLImageElement[][] | ImageBitmap[][];\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param buffers\r\n     * @param deleteBuffer\r\n     * @param generateMipmaps\r\n     * @param flipY\r\n     * @param format\r\n     * @param wrapU\r\n     * @param wrapV\r\n     */\r\n    constructor(buffers: Nullable<HTMLImageElement[] | ImageBitmap[]> = null, deleteBuffer: boolean = false, generateMipmaps: boolean = false, flipY: boolean = true,\r\n                format?: number, wrapU?: number, wrapV?: number) {\r\n        super();\r\n\r\n        this.deleteBuffer = deleteBuffer;\r\n        this.generateMipmaps = generateMipmaps;\r\n\r\n        if (format) {\r\n            this.format = format;\r\n        }\r\n\r\n        this._flipY = flipY;\r\n\r\n        if (wrapU) {\r\n            this._wrapU = wrapU;\r\n        }\r\n        if (wrapV) {\r\n            this._wrapV = wrapV;\r\n        }\r\n\r\n        if (buffers && buffers.length > 0) {\r\n            this.buffers = buffers;\r\n            this.width = buffers[0].width;\r\n            this.height = buffers[0].height;\r\n            this.unpackAlignment = (this.width % 4 != 0) ? 1 : 4;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否准备好\r\n     */\r\n    public get isReady(): boolean {\r\n        return this.buffers.length > 0 && this.buffers[0].width > 0 && this.buffers[0].height > 0;\r\n    }\r\n\r\n    /**\r\n     * 更新Buffer\r\n     */\r\n    public updateBuffer(buffers: HTMLImageElement[] | ImageBitmap[]): void {\r\n        this.buffers = buffers;\r\n        this.width = buffers[0].width;\r\n        this.height = buffers[0].height;\r\n        this.unpackAlignment = (this.width % 4 != 0) ? 1 : 4;\r\n        this.needsUpdate = true;\r\n    }\r\n\r\n    /**\r\n     * 更新Mipmaps\r\n     */\r\n    public updateMipmaps(buffers: HTMLImageElement[][] | ImageBitmap[][]): void {\r\n        this.mipmaps = buffers;\r\n        this.needsUpdate = true;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): TextureCube {\r\n        return new TextureCube(this.buffers, this.deleteBuffer).copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: TextureCube): TextureCube {\r\n        super.copy(source);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 释放\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        if (this.deleteBuffer) {\r\n            this.buffers.forEach((buffer: any, index: number) => {\r\n                delete this.buffers[index];\r\n            });\r\n            this.buffers.length = 0;\r\n        }\r\n    }\r\n}\r\n",
        "import { BufferArray, BufferArrayInterface, DataArray, Nullable } from \"../types\";\r\nimport { Constants, GLConstants } from \"../Engines\";\r\n\r\n/**\r\n * 数据类型工具\r\n * @category Misc\r\n */\r\nexport abstract class DataTypeFormat {\r\n\r\n    /**\r\n     * 类型化数组的数据类型\r\n     * @param arrayOrType\r\n     */\r\n    public static dataTypeFromTypedArray(arrayOrType: DataArray | BufferArray): number {\r\n        const type = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;\r\n        switch (type) {\r\n            case Float64Array:\r\n                return Constants.DoubleType;\r\n            case Float32Array:\r\n                return Constants.FloatType;\r\n            case Uint16Array:\r\n                return Constants.UnsignedShortType;\r\n            case Uint32Array:\r\n                return Constants.UnsignedIntType;\r\n            case Uint8Array:\r\n                return Constants.UnsignedByteType;\r\n            case Uint8ClampedArray:\r\n                return Constants.UnsignedByteType;\r\n            case Int8Array:\r\n                return Constants.ByteType;\r\n            case Int16Array:\r\n                return Constants.ShortType;\r\n            case Int32Array:\r\n                return Constants.IntType;\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 从数据类型返回类型化的数组\r\n     * @param dataType\r\n     */\r\n    public static typedArrayFromDataType(dataType: number): Nullable<BufferArrayInterface> {\r\n        switch (dataType) {\r\n            case Constants.DoubleType:\r\n                return Float64Array;\r\n            case Constants.FloatType:\r\n                return Float32Array;\r\n            case Constants.UnsignedShortType:\r\n            case Constants.UnsignedShort565Type:\r\n            case Constants.UnsignedShort4444Type:\r\n            case Constants.UnsignedShort5551Type:\r\n                return Uint16Array;\r\n            case Constants.UnsignedIntType:\r\n                return Uint32Array;\r\n            case Constants.UnsignedByteType:\r\n                return Uint8Array;\r\n            case Constants.ByteType:\r\n                return Int8Array;\r\n            case Constants.ShortType:\r\n                return Int16Array;\r\n            case Constants.IntType:\r\n                return Int32Array;\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 从数据类型创建类型化数组\r\n     * @param dataType\r\n     * @param length\r\n     */\r\n    public static createTypedArrayFromDataType(dataType: number, length: number): Nullable<BufferArray> {\r\n        switch (dataType) {\r\n            case GLConstants.BYTE:\r\n                return new Int8Array(length);\r\n            case GLConstants.UNSIGNED_BYTE:\r\n                return new Uint8Array(length);\r\n            case GLConstants.SHORT:\r\n                return new Int16Array(length);\r\n            case GLConstants.UNSIGNED_SHORT:\r\n                return new Uint16Array(length);\r\n            case GLConstants.INT:\r\n                return new Int32Array(length);\r\n            case GLConstants.UNSIGNED_INT:\r\n                return new Uint32Array(length);\r\n            case GLConstants.FLOAT:\r\n                return new Float32Array(length);\r\n            case GLConstants.DOUBLE:\r\n                return new Float64Array(length);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 从数据类型创建类型化数组\r\n     * @param dataType\r\n     * @param values\r\n     */\r\n    public static createTypedArrayFromDataTypeValues(dataType: number, values: ArrayLike<number> | ArrayBufferLike): Nullable<BufferArray> {\r\n        switch (dataType) {\r\n            case GLConstants.BYTE:\r\n                return new Int8Array(values);\r\n            case GLConstants.UNSIGNED_BYTE:\r\n                return new Uint8Array(values);\r\n            case GLConstants.SHORT:\r\n                return new Int16Array(values);\r\n            case GLConstants.UNSIGNED_SHORT:\r\n                return new Uint16Array(values);\r\n            case GLConstants.INT:\r\n                return new Int32Array(values);\r\n            case GLConstants.UNSIGNED_INT:\r\n                return new Uint32Array(values);\r\n            case GLConstants.FLOAT:\r\n                return new Float32Array(values);\r\n            case GLConstants.DOUBLE:\r\n                return new Float64Array(values);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 从数据类型名称返回GL数据类型\r\n     * @param name\r\n     */\r\n    public static glDataTypeFromName(name: string): number {\r\n\r\n        switch (name) {\r\n            case 'BYTE':\r\n                return GLConstants.BYTE;\r\n            case 'UNSIGNED_BYTE':\r\n                return GLConstants.UNSIGNED_BYTE;\r\n            case 'SHORT':\r\n                return GLConstants.SHORT;\r\n            case 'UNSIGNED_SHORT':\r\n                return GLConstants.UNSIGNED_SHORT;\r\n            case 'INT':\r\n                return GLConstants.INT;\r\n            case 'UNSIGNED_INT':\r\n                return GLConstants.UNSIGNED_INT;\r\n            case 'FLOAT':\r\n                return GLConstants.FLOAT;\r\n            case 'DOUBLE':\r\n                return GLConstants.DOUBLE;\r\n            default:\r\n                throw 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 从GL数据类型返回数据类型字节大小\r\n     * @param dataType\r\n     */\r\n    public static glDataTypeInBytes(dataType: number): number {\r\n\r\n        switch (dataType) {\r\n            case GLConstants.BYTE:\r\n                return Int8Array.BYTES_PER_ELEMENT;\r\n            case GLConstants.UNSIGNED_BYTE:\r\n                return Uint8Array.BYTES_PER_ELEMENT;\r\n            case GLConstants.SHORT:\r\n                return Int16Array.BYTES_PER_ELEMENT;\r\n            case GLConstants.UNSIGNED_SHORT:\r\n                return Uint16Array.BYTES_PER_ELEMENT;\r\n            case GLConstants.INT:\r\n                return Int32Array.BYTES_PER_ELEMENT;\r\n            case GLConstants.UNSIGNED_INT:\r\n                return Uint32Array.BYTES_PER_ELEMENT;\r\n            case GLConstants.FLOAT:\r\n                return Float32Array.BYTES_PER_ELEMENT;\r\n            case GLConstants.DOUBLE:\r\n                return Float64Array.BYTES_PER_ELEMENT;\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 验证是否有效的GL数据类型\r\n     * @param dataType\r\n     */\r\n    public static validateGLDataType(dataType: number): boolean {\r\n        return (dataType == GLConstants.BYTE ||\r\n            dataType == GLConstants.UNSIGNED_BYTE ||\r\n            dataType == GLConstants.SHORT ||\r\n            dataType == GLConstants.UNSIGNED_SHORT ||\r\n            dataType == GLConstants.INT ||\r\n            dataType == GLConstants.UNSIGNED_INT ||\r\n            dataType == GLConstants.FLOAT ||\r\n            dataType == GLConstants.DOUBLE);\r\n    }\r\n\r\n    /**\r\n     * 从GL数据类型创建类型化数组\r\n     * @param dataType\r\n     * @param length\r\n     */\r\n    public static createTypedArrayFromGLDataType(dataType: number, length: number): Nullable<BufferArray> {\r\n        switch (dataType) {\r\n            case GLConstants.BYTE:\r\n                return new Int8Array(length);\r\n            case GLConstants.UNSIGNED_BYTE:\r\n                return new Uint8Array(length);\r\n            case GLConstants.SHORT:\r\n                return new Int16Array(length);\r\n            case GLConstants.UNSIGNED_SHORT:\r\n                return new Uint16Array(length);\r\n            case GLConstants.INT:\r\n                return new Int32Array(length);\r\n            case GLConstants.UNSIGNED_INT:\r\n                return new Uint32Array(length);\r\n            case GLConstants.FLOAT:\r\n                return new Float32Array(length);\r\n            case GLConstants.DOUBLE:\r\n                return new Float64Array(length);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 从GL数据类型创建类型化数组\r\n     * @param dataType\r\n     * @param buffer\r\n     * @param byteOffset\r\n     * @param length\r\n     */\r\n    public static createArrayBufferFromGLDataType(dataType: number, buffer: ArrayBuffer, byteOffset: Nullable<number> = null, length: Nullable<number> = null): Nullable<BufferArray> {\r\n\r\n        if (byteOffset == null) {\r\n            byteOffset = 0;\r\n        }\r\n        if (length == null) {\r\n            length = (buffer.byteLength - byteOffset) / DataTypeFormat.glDataTypeInBytes(dataType);\r\n        }\r\n\r\n        switch (dataType) {\r\n            case GLConstants.BYTE:\r\n                return new Int8Array(buffer, byteOffset, length);\r\n            case GLConstants.UNSIGNED_BYTE:\r\n                return new Uint8Array(buffer, byteOffset, length);\r\n            case GLConstants.SHORT:\r\n                return new Int16Array(buffer, byteOffset, length);\r\n            case GLConstants.UNSIGNED_SHORT:\r\n                return new Uint16Array(buffer, byteOffset, length);\r\n            case GLConstants.INT:\r\n                return new Int32Array(buffer, byteOffset, length);\r\n            case GLConstants.UNSIGNED_INT:\r\n                return new Uint32Array(buffer, byteOffset, length);\r\n            case GLConstants.FLOAT:\r\n                return new Float32Array(buffer, byteOffset, length);\r\n            case GLConstants.DOUBLE:\r\n                return new Float64Array(buffer, byteOffset, length);\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n}\r\n",
        "import { MathUtils } from \"../../Math\";\r\nimport { BufferAttrUpdate } from \"./BufferAttrUpdate\";\r\nimport { Constants } from \"../../Engines\";\r\nimport { BufferArray, int, Nullable } from \"../../types\";\r\nimport { DataTypeFormat } from \"../../Misc\";\r\nimport { InterleavedBufferClone } from \"./InterleavedBufferClone\";\r\nimport { IDisposable } from \"../../Misc/IDisposable\";\r\nimport { GLDataBuffer } from \"../../Engines/GLDataBuffer\";\r\n\r\n/**\r\n * 交叉Buffer\r\n */\r\nexport class InterleavedBuffer implements IDisposable {\r\n\r\n    public uuid: string;\r\n    public array: BufferArray;\r\n    public type: number;\r\n    public stride: number;\r\n    public count: number;\r\n    public usage: number;\r\n    public target: number;\r\n    public updateRange: BufferAttrUpdate;\r\n\r\n    protected _version: number;\r\n    protected _reference: number;\r\n    protected _glBuffer: Nullable<GLDataBuffer>;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param array\r\n     * @param stride\r\n     */\r\n    constructor(array: BufferArray, stride: number) {\r\n\r\n        this.uuid = MathUtils.generateUUID();\r\n\r\n        this.array = array;\r\n        this.stride = stride;\r\n        this.count = array.length / stride;\r\n        this.type = DataTypeFormat.dataTypeFromTypedArray(array);\r\n        this.target = Constants.ArrayBufferTarget;\r\n        this.usage = Constants.StaticDrawUsage;\r\n        this.updateRange = {offset: 0, count: -1};\r\n\r\n        this._version = 0;\r\n        this._reference = 0;\r\n        this._glBuffer = null;\r\n    }\r\n\r\n    public get glBuffer() {\r\n        return this._glBuffer;\r\n    }\r\n    public set glBuffer(value) {\r\n        if (this._glBuffer != value) {\r\n            if (this._glBuffer) {\r\n                this._glBuffer.dispose();\r\n            }\r\n            this._glBuffer = value;\r\n            if (this._glBuffer) {\r\n                this._glBuffer.addReference();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 版本\r\n     */\r\n    public get version() {\r\n        return this._version;\r\n    }\r\n\r\n    /**\r\n     * 引用\r\n     */\r\n    public get reference() {\r\n        return this._reference;\r\n    }\r\n\r\n    /**\r\n     * 更新版本\r\n     */\r\n    public set needsUpdate(value: boolean) {\r\n        if (value) {\r\n            this._version++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 释放\r\n     */\r\n    public dispose(): void {\r\n        this._reference--;\r\n        if (this._reference == 0) {\r\n            if (this._glBuffer) {\r\n                this._glBuffer.dispose();\r\n                this._glBuffer = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 增加引用\r\n     */\r\n    public addReference(): void {\r\n        this._reference++;\r\n    }\r\n\r\n    /**\r\n     * 设置数据\r\n     * @param array\r\n     */\r\n    public setArray(array: BufferArray): InterleavedBuffer {\r\n        this.array = array;\r\n        this.count = this.array.length / this.stride;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置标志\r\n     * @param value\r\n     */\r\n    public setUsage(value: number): InterleavedBuffer {\r\n        this.usage = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(cache: InterleavedBufferClone): InterleavedBuffer {\r\n\r\n        let uuid = cache.cacheKey.get(this.array);\r\n        if (!uuid) {\r\n            uuid = MathUtils.generateUUID();\r\n            cache.cacheKey.set(this.array, uuid);\r\n        }\r\n\r\n        let cloneArray = cache.arrayBuffers[uuid];\r\n        if (!cloneArray) {\r\n            cloneArray = this.array.slice(0).buffer;\r\n            cache.arrayBuffers[uuid] = cloneArray;\r\n        }\r\n\r\n        const array = DataTypeFormat.createTypedArrayFromDataTypeValues(this.type, cloneArray)!;\r\n\r\n        const ib = new InterleavedBuffer(array, this.stride);\r\n        ib.setUsage(this.usage);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: InterleavedBuffer): InterleavedBuffer {\r\n        this.usage = source.usage;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 指定位置复制\r\n     * @param index1\r\n     * @param attribute\r\n     * @param index2\r\n     */\r\n    public copyAt(index1: int, attribute: InterleavedBuffer, index2: int): InterleavedBuffer {\r\n        index1 *= this.stride;\r\n        index2 *= attribute.stride;\r\n\r\n        for (let i = 0, l = this.stride; i < l; i++) {\r\n            this.array[index1 + i] = attribute.array[index2 + i];\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 指定位置设置值\r\n     * @param value\r\n     * @param offset\r\n     */\r\n    public set(value: number[], offset: int = 0) {\r\n        this.array.set(value, offset);\r\n        return this;\r\n    }\r\n}\r\n",
        "import { InterleavedBuffer } from \"./InterleavedBuffer\";\r\nimport { int } from \"../../types\";\r\nimport { Matrix3, Matrix4, Vector2, Vector3 } from \"../../Math\";\r\nimport { InterleavedBufferClone } from \"./InterleavedBufferClone\";\r\nimport { IDisposable } from \"../../Misc/IDisposable\";\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst _vector3 = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _vector2 = new Vector2();\r\n\r\n/**\r\n * 交叉Buffer属性\r\n */\r\nexport class InterleavedBufferAttribute implements IDisposable {\r\n\r\n    public buffer: InterleavedBuffer;\r\n    public itemSize: int;\r\n    public offset: int;\r\n    public normalized: boolean;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param interleavedBuffer\r\n     * @param itemSize\r\n     * @param offset\r\n     * @param normalized\r\n     */\r\n    constructor(interleavedBuffer: InterleavedBuffer, itemSize: int, offset: int, normalized: boolean = false) {\r\n\r\n        this.buffer = interleavedBuffer;\r\n        this.itemSize = itemSize;\r\n        this.offset = offset;\r\n        this.normalized = normalized;\r\n    }\r\n\r\n    public get glBuffer() {\r\n        return this.buffer.glBuffer;\r\n    }\r\n    public set glBuffer(value) {\r\n        this.buffer.glBuffer = value;\r\n    }\r\n\r\n    public get target() {\r\n        return this.buffer.target;\r\n    }\r\n\r\n    public get usage() {\r\n        return this.buffer.usage;\r\n    }\r\n\r\n    public get updateRange() {\r\n        return this.buffer.updateRange;\r\n    }\r\n\r\n    /**\r\n     * 版本\r\n     */\r\n    public get version() {\r\n        return this.buffer.version;\r\n    }\r\n\r\n    /**\r\n     * 数量\r\n     */\r\n    public get count() {\r\n        return this.buffer.count;\r\n    }\r\n\r\n    /**\r\n     * 内部数组\r\n     */\r\n    public get array() {\r\n        return this.buffer.array;\r\n    }\r\n\r\n    /**\r\n     * 设置更新\r\n     * @param value\r\n     */\r\n    public set needsUpdate(value: boolean) {\r\n        if (value) {\r\n            this.buffer.needsUpdate = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 释放\r\n     */\r\n    public dispose() {\r\n        this.buffer.dispose();\r\n    }\r\n\r\n    /**\r\n     * 增加引用\r\n     */\r\n    public addReference() {\r\n        this.buffer.addReference();\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     * @param cache\r\n     */\r\n    public clone(cache: InterleavedBufferClone): InterleavedBufferAttribute {\r\n\r\n        let cloneBuffer = cache.interleavedBuffers[this.buffer.uuid];\r\n        if (!cloneBuffer) {\r\n            cloneBuffer = this.buffer.clone(cache);\r\n            cache.interleavedBuffers[this.buffer.uuid] = cloneBuffer;\r\n        }\r\n\r\n        return new InterleavedBufferAttribute(cloneBuffer, this.itemSize, this.offset, this.normalized);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: InterleavedBufferAttribute): InterleavedBufferAttribute {\r\n        this.buffer = source.buffer;\r\n        this.itemSize = source.itemSize;\r\n        this.offset = source.offset;\r\n        this.normalized = source.normalized;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 乘以Matrix3矩阵\r\n     * @param matrix3\r\n     */\r\n    public applyMatrix3(matrix3: Matrix3): InterleavedBufferAttribute {\r\n\r\n        if (this.itemSize == 2) {\r\n\r\n            for (let i = 0, l = this.count; i < l; i++) {\r\n                _vector2.fromBufferAttribute(this, i);\r\n                _vector2.applyMatrix3(matrix3);\r\n                this.setXY(i, _vector2.x, _vector2.y);\r\n            }\r\n\r\n        } else if (this.itemSize == 3) {\r\n\r\n            for (let i = 0, l = this.count; i < l; i++) {\r\n                _vector3.fromBufferAttribute(this, i);\r\n                _vector3.applyMatrix3(matrix3);\r\n                this.setXYZ(i, _vector3.x, _vector3.y, _vector3.z);\r\n            }\r\n\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 乘以Matrix4矩阵\r\n     * @param matrix4\r\n     */\r\n    public applyMatrix4(matrix4: Matrix4): InterleavedBufferAttribute {\r\n\r\n        if (this.itemSize == 3) {\r\n            for (let i = 0, l = this.count; i < l; i++) {\r\n                _vector3.fromBufferAttribute(this, i);\r\n                _vector3.applyMatrix4(matrix4);\r\n                this.setXYZ(i, _vector3.x, _vector3.y, _vector3.z);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 乘以法线矩阵\r\n     * @param matrix3\r\n     */\r\n    public applyNormalMatrix(matrix3: Matrix3): InterleavedBufferAttribute {\r\n\r\n        if (this.itemSize == 3) {\r\n            for (let i = 0, l = this.count; i < l; i++) {\r\n                _vector3.fromBufferAttribute(this, i);\r\n                _vector3.applyNormalMatrix(matrix3);\r\n                this.setXYZ(i, _vector3.x, _vector3.y, _vector3.z);\r\n            }\r\n        }\r\n        return this;\r\n\r\n    }\r\n\r\n    /**\r\n     * 变换向量\r\n     * @param matrix4\r\n     */\r\n    public transformDirection(matrix4: Matrix4): InterleavedBufferAttribute {\r\n\r\n        if (this.itemSize == 3) {\r\n            for (let i = 0, l = this.count; i < l; i++) {\r\n                _vector3.fromBufferAttribute(this, i);\r\n                matrix4.transformVector3(_vector3, _vector3);\r\n                this.setXYZ(i, _vector3.x, _vector3.y, _vector3.z);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 变换坐标\r\n     * @param matrix4\r\n     */\r\n    public transformPoint(matrix4: Matrix4): InterleavedBufferAttribute {\r\n\r\n        if (this.itemSize == 3) {\r\n            for (let i = 0, l = this.count; i < l; i++) {\r\n                _vector3.fromBufferAttribute(this, i);\r\n                matrix4.transformPoint(_vector3, _vector3);\r\n                this.setXYZ(i, _vector3.x, _vector3.y, _vector3.z);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 指定位置获取Value\r\n     * @param offset\r\n     */\r\n    public get(offset: number): number {\r\n        return this.array[offset];\r\n    }\r\n\r\n    /**\r\n     * 指定位置设置Value\r\n     * @param value\r\n     * @param offset\r\n     */\r\n    public set(value: number[], offset: int = 0): InterleavedBufferAttribute {\r\n        this.array.set(value, offset);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 根据itemSize指定位置获取X\r\n     * @param index\r\n     */\r\n    public getX(index: int): number {\r\n        return this.array[index * this.itemSize];\r\n    }\r\n\r\n    /**\r\n     * 根据itemSize指定位置设置X\r\n     * @param index\r\n     * @param x\r\n     */\r\n    public setX(index: int, x: number): InterleavedBufferAttribute {\r\n        this.array[index * this.itemSize] = x;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 根据itemSize指定位置获取Y\r\n     * @param index\r\n     */\r\n    public getY(index: int): number {\r\n        return this.array[index * this.itemSize + 1];\r\n    }\r\n\r\n    /**\r\n     * 根据itemSize指定位置设置Y\r\n     * @param index\r\n     * @param y\r\n     */\r\n    public setY(index: int, y: number): InterleavedBufferAttribute {\r\n        this.array[index * this.itemSize + 1] = y;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 根据itemSize指定位置获取Z\r\n     * @param index\r\n     */\r\n    public getZ(index: int): number {\r\n        return this.array[index * this.itemSize + 2];\r\n    }\r\n\r\n    /**\r\n     * 根据itemSize指定位置设置Z\r\n     * @param index\r\n     * @param z\r\n     */\r\n    public setZ(index: int, z: number): InterleavedBufferAttribute {\r\n        this.array[index * this.itemSize + 2] = z;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 根据itemSize指定位置获取W\r\n     * @param index\r\n     */\r\n    public getW(index: int): number {\r\n        return this.array[index * this.itemSize + 3];\r\n    }\r\n\r\n    /**\r\n     * 根据itemSize指定位置设置W\r\n     * @param index\r\n     * @param W\r\n     */\r\n    public setW(index: int, W: number): InterleavedBufferAttribute {\r\n        this.array[index * this.itemSize + 3] = W;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 根据itemSize指定位置设置XY\r\n     * @param index\r\n     * @param x\r\n     * @param y\r\n     */\r\n    public setXY(index: int, x: number, y: number): InterleavedBufferAttribute {\r\n        index *= this.itemSize;\r\n        this.array[index + 0] = x;\r\n        this.array[index + 1] = y;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 根据itemSize指定位置设置XYZ\r\n     * @param index\r\n     * @param x\r\n     * @param y\r\n     * @param z\r\n     */\r\n    public setXYZ(index: int, x: number, y: number, z: number): InterleavedBufferAttribute {\r\n        index *= this.itemSize;\r\n        this.array[index + 0] = x;\r\n        this.array[index + 1] = y;\r\n        this.array[index + 2] = z;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 根据itemSize指定位置设置XYZW\r\n     * @param index\r\n     * @param x\r\n     * @param y\r\n     * @param z\r\n     * @param w\r\n     */\r\n    public setXYZW(index: int, x: number, y: number, z: number, w: number): InterleavedBufferAttribute {\r\n        index *= this.itemSize;\r\n        this.array[index + 0] = x;\r\n        this.array[index + 1] = y;\r\n        this.array[index + 2] = z;\r\n        this.array[index + 3] = w;\r\n        return this;\r\n    }\r\n}\r\n",
        "import { Material } from \"./Material\";\r\nimport { ColorRGB } from \"../Math\";\r\nimport { Nullable } from \"../types\";\r\nimport { Constants, Texture } from \"../Engines\";\r\n\r\n/**\r\n * 基本材质\r\n */\r\nexport class MeshBasicMaterial extends Material {\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _color: ColorRGB = new ColorRGB();\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _map: Nullable<Texture> = null;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _lightMap: Nullable<Texture> = null;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _lightMapIntensity: number = 1.0;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _aoMap: Nullable<Texture> = null;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _aoMapIntensity: number = 1.0;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _specularMap: Nullable<Texture> = null;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _alphaMap: Nullable<Texture> = null;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _envMap: Nullable<Texture> = null;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _combine: number = Constants.MultiplyOperation;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _reflectivity: number = 1;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _refractionRatio: number = 0.98;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _wireframe: boolean = false;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _wireframeLineWidth: number = 1;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _wireframeLineCap: string = 'round';\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _wireframeLineJoin: string = 'round';\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _skinning: boolean = false;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _morphTargets: boolean = false;\r\n\r\n    /**\r\n     * 构造函数\r\n     */\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * 漫反射颜色\r\n     */\r\n    public get color() {\r\n        return this._color;\r\n    }\r\n    public set color(value) {\r\n        if (!this._color.equals(value)) {\r\n            this._color.copy(value);\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 漫反射贴图\r\n     */\r\n    public get map() {\r\n        return this._map;\r\n    }\r\n    public set map(value) {\r\n        if (this._map != value) {\r\n            if (this._map) {\r\n                this._map.dispose();\r\n            }\r\n            this._map = value;\r\n            if (this._map) {\r\n                this._map.addReference();\r\n            }\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 光照贴图\r\n     */\r\n    public get lightMap() {\r\n        return this._lightMap;\r\n    }\r\n    public set lightMap(value) {\r\n        if (this._lightMap != value) {\r\n            if (this._lightMap) {\r\n                this._lightMap.dispose();\r\n            }\r\n            this._lightMap = value;\r\n            if (this._lightMap) {\r\n                this._lightMap.addReference();\r\n            }\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 光照贴图强度\r\n     */\r\n    public get lightMapIntensity() {\r\n        return this._lightMapIntensity;\r\n    }\r\n    public set lightMapIntensity(value) {\r\n        if (this._lightMapIntensity != value) {\r\n            this._lightMapIntensity = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 环境遮挡贴图\r\n     */\r\n    public get aoMap() {\r\n        return this._aoMap;\r\n    }\r\n    public set aoMap(value) {\r\n        if (this._aoMap != value) {\r\n            if (this._aoMap) {\r\n                this._aoMap.dispose();\r\n            }\r\n            this._aoMap = value;\r\n            if (this._aoMap) {\r\n                this._aoMap.addReference();\r\n            }\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 环境遮挡贴图强度\r\n     */\r\n    public get aoMapIntensity() {\r\n        return this._aoMapIntensity;\r\n    }\r\n    public set aoMapIntensity(value) {\r\n        if (this._aoMapIntensity != value) {\r\n            this._aoMapIntensity = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 高光贴图\r\n     */\r\n    public get specularMap() {\r\n        return this._specularMap;\r\n    }\r\n    public set specularMap(value) {\r\n        if (this._specularMap != value) {\r\n            if (this._specularMap) {\r\n                this._specularMap.dispose();\r\n            }\r\n            this._specularMap = value;\r\n            if (this._specularMap) {\r\n                this._specularMap.addReference();\r\n            }\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Alpha贴图\r\n     */\r\n    public get alphaMap() {\r\n        return this._alphaMap;\r\n    }\r\n    public set alphaMap(value) {\r\n        if (this._alphaMap != value) {\r\n            if (this._alphaMap) {\r\n                this._alphaMap.dispose();\r\n            }\r\n            this._alphaMap = value;\r\n            if (this._alphaMap) {\r\n                this._alphaMap.addReference();\r\n            }\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 环境贴图\r\n     */\r\n    public get envMap() {\r\n        return this._envMap;\r\n    }\r\n    public set envMap(value) {\r\n        if (this._envMap != value) {\r\n            if (this._envMap) {\r\n                this._envMap.dispose();\r\n            }\r\n            this._envMap = value;\r\n            if (this._envMap) {\r\n                this._envMap.addReference();\r\n            }\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 环境贴图混合方式\r\n     */\r\n    public get combine() {\r\n        return this._combine;\r\n    }\r\n    public set combine(value) {\r\n        if (this._combine != value) {\r\n            this._combine = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 反射率\r\n     */\r\n    public get reflectivity() {\r\n        return this._reflectivity;\r\n    }\r\n    public set reflectivity(value) {\r\n        if (this._reflectivity != value) {\r\n            this._reflectivity = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 折射率\r\n     */\r\n    public get refractionRatio() {\r\n        return this._refractionRatio;\r\n    }\r\n    public set refractionRatio(value) {\r\n        if (this._refractionRatio != value) {\r\n            this._refractionRatio = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 线框模式\r\n     */\r\n    public get wireframe() {\r\n        return this._wireframe;\r\n    }\r\n    public set wireframe(value) {\r\n        if (this._wireframe != value) {\r\n            this._wireframe = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 线框宽度\r\n     */\r\n    public get wireframeLineWidth() {\r\n        return this._wireframeLineWidth;\r\n    }\r\n    public set wireframeLineWidth(value) {\r\n        if (this._wireframeLineWidth != value) {\r\n            this._wireframeLineWidth = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 线框LineCap\r\n     */\r\n    public get wireframeLineCap() {\r\n        return this._wireframeLineCap;\r\n    }\r\n    public set wireframeLineCap(value) {\r\n        if (this._wireframeLineCap != value) {\r\n            this._wireframeLineCap = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 线框LineJoin\r\n     */\r\n    public get wireframeLineJoin() {\r\n        return this._wireframeLineJoin;\r\n    }\r\n    public set wireframeLineJoin(value) {\r\n        if (this._wireframeLineJoin != value) {\r\n            this._wireframeLineJoin = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否使用蒙皮\r\n     */\r\n    public get skinning() {\r\n        return this._skinning;\r\n    }\r\n    public set skinning(value) {\r\n        if (this._skinning != value) {\r\n            this._skinning = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否使用morphTargets\r\n     */\r\n    public get morphTargets() {\r\n        return this._morphTargets;\r\n    }\r\n    public set morphTargets(value) {\r\n        if (this._morphTargets != value) {\r\n            this._morphTargets = value;\r\n            this.needsUpdate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): MeshBasicMaterial {\r\n        return new MeshBasicMaterial().copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: MeshBasicMaterial): MeshBasicMaterial {\r\n        super.copy(source);\r\n\r\n        this._color.copy(source.color);\r\n\r\n        this._map = source.map;\r\n\r\n        this._lightMap = source.lightMap;\r\n        this._lightMapIntensity = source.lightMapIntensity;\r\n\r\n        this._aoMap = source.aoMap;\r\n        this._aoMapIntensity = source.aoMapIntensity;\r\n\r\n        this._specularMap = source.specularMap;\r\n        this._alphaMap = source.alphaMap;\r\n\r\n        this._envMap = source.envMap;\r\n        this._combine = source.combine;\r\n        this._reflectivity = source.reflectivity;\r\n        this._refractionRatio = source.refractionRatio;\r\n\r\n        this._wireframe = source.wireframe;\r\n        this._wireframeLineWidth = source.wireframeLineWidth;\r\n        this._wireframeLineCap = source.wireframeLineCap;\r\n        this._wireframeLineJoin = source.wireframeLineJoin;\r\n\r\n        this._skinning = source.skinning;\r\n        this._morphTargets = source.morphTargets;\r\n\r\n        return this;\r\n    }\r\n}\r\n",
        "import { TransformObject } from \"./TransformObject\";\r\nimport { int, Nullable } from \"../types\";\r\nimport { VisibleLayers } from \"../Misc/VisibleLayers\";\r\nimport { Scene } from \"./Scene\";\r\nimport { AbstractObject } from \"./AbstractObject\";\r\nimport { Light } from \"../Lights\";\r\nimport { RenderingGroup } from \"./Rendering/RenderingGroup\";\r\n\r\n/**\r\n * 可渲染对象\r\n */\r\nexport abstract class Renderable extends TransformObject {\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public _classifyID: int = 0;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public _castShadow: boolean = false;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public _receiveShadow: boolean = false;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public _frustumCulled: boolean = true;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public _renderOrder: int = 0;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public _pickable: boolean = true;\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _lightLayers: VisibleLayers = new VisibleLayers();\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public _lightSources: Light[] = new Array<Light>();\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public _renderingGroup: Nullable<RenderingGroup> = null;\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public _distanceToCamera: number = 0;\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public _renderingGroupId: number = 0;\r\n\r\n    /**\r\n     * 构造函数\r\n     */\r\n    protected constructor(scene: Scene, parent: Nullable<AbstractObject> = null, name: string = '') {\r\n        super(scene, parent, name, false);\r\n    }\r\n\r\n    /**\r\n     * 灯光掩码层\r\n     */\r\n    public get lightLayers() {\r\n        return this._lightLayers;\r\n    }\r\n\r\n    /**\r\n     * 光源\r\n     */\r\n    public get lightSources() {\r\n        return this._lightSources;\r\n    }\r\n\r\n    /**\r\n     * 渲染组\r\n     */\r\n    public get renderingGroupId() {\r\n        return this._renderingGroupId;\r\n    }\r\n    public set renderingGroupId(value) {\r\n        this._renderingGroupId = value;\r\n    }\r\n\r\n    /**\r\n     * 分类ID\r\n     */\r\n    public get classifyID() {\r\n        return this._classifyID;\r\n    }\r\n    public set classifyID(value) {\r\n        if (this._classifyID != value) {\r\n            const oldValue = this._classifyID;\r\n            this._classifyID = value;\r\n            this.onClassifyIDChanged(oldValue, this._classifyID);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 投射阴影\r\n     */\r\n    public get castShadow() {\r\n        return this._castShadow;\r\n    }\r\n    public set castShadow(value) {\r\n        if (this._castShadow != value) {\r\n            const oldValue = this._castShadow;\r\n            this._castShadow = value;\r\n            this.onCastShadowChanged(oldValue, this._castShadow);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 接收阴影\r\n     */\r\n    public get receiveShadow() {\r\n        return this._receiveShadow;\r\n    }\r\n    public set receiveShadow(value) {\r\n        if (this._receiveShadow != value) {\r\n            const oldValue = this._receiveShadow;\r\n            this._receiveShadow = value;\r\n            this.onReceiveShadowChanged(oldValue, this._receiveShadow);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 视锥裁剪\r\n     */\r\n    public get frustumCulled() {\r\n        return this._frustumCulled;\r\n    }\r\n    public set frustumCulled(value) {\r\n        if (this._frustumCulled != value) {\r\n            const oldValue = this._frustumCulled;\r\n            this._frustumCulled = value;\r\n            this.onFrustumCulledChanged(oldValue, this._frustumCulled);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 渲染顺序\r\n     */\r\n    public get renderOrder() {\r\n        return this._renderOrder;\r\n    }\r\n    public set renderOrder(value) {\r\n        if (this._renderOrder != value) {\r\n            const oldValue = this._renderOrder;\r\n            this._renderOrder = value;\r\n            this.onRenderOrderChanged(oldValue, this._renderOrder);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否可拾取\r\n     */\r\n    public get pickable() {\r\n        return this._pickable;\r\n    }\r\n    public set pickable(value) {\r\n        if (this._pickable != value) {\r\n            const oldValue = this._pickable;\r\n            this._pickable = value;\r\n            this.onPickableChanged(oldValue, this._pickable);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param oldValue\r\n     * @param newValue\r\n     */\r\n    protected onClassifyIDChanged(oldValue: int, newValue: int): void {\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param oldValue\r\n     * @param newValue\r\n     */\r\n    protected onCastShadowChanged(oldValue: boolean, newValue: boolean): void {\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param oldValue\r\n     * @param newValue\r\n     */\r\n    protected onReceiveShadowChanged(oldValue: boolean, newValue: boolean): void {\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param oldValue\r\n     * @param newValue\r\n     */\r\n    protected onFrustumCulledChanged(oldValue: boolean, newValue: boolean): void {\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param oldValue\r\n     * @param newValue\r\n     */\r\n    protected onRenderOrderChanged(oldValue: int, newValue: int): void {\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param oldValue\r\n     * @param newValue\r\n     */\r\n    protected onPickableChanged(oldValue: boolean, newValue: boolean): void {\r\n    }\r\n\r\n    /**\r\n     * 同步所有光源\r\n     * @ignore\r\n     */\r\n    public _resyncLightSources(): void {\r\n\r\n        this._lightSources.length = 0;\r\n\r\n        for (const light of this.getScene().lights) {\r\n            if (!light.visible) {\r\n                continue;\r\n            }\r\n\r\n            if (light.canAffectMesh(this)) {\r\n                this._lightSources.push(light);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 同步光源\r\n     * @param light\r\n     * @ignore\r\n     */\r\n    public _resyncLightSource(light: Light): void {\r\n\r\n        const isIn = light.visible && light.canAffectMesh(this);\r\n\r\n        const index = this._lightSources.indexOf(light);\r\n        let removed = false;\r\n        if (index == -1) {\r\n            if (!isIn) {\r\n                return;\r\n            }\r\n            this._lightSources.push(light);\r\n        } else {\r\n            if (isIn) {\r\n                return;\r\n            }\r\n            removed = true;\r\n            this._lightSources.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 删除光源\r\n     * @ignore\r\n     */\r\n    public _removeLightSource(light: Light, dispose: boolean): void {\r\n\r\n        const index = this._lightSources.indexOf(light);\r\n        if (index == -1) {\r\n            return;\r\n        }\r\n\r\n        this._lightSources.splice(index, 1);\r\n    }\r\n\r\n    /**\r\n     * 渲染\r\n     * @param enableAlphaMode\r\n     */\r\n    public render(enableAlphaMode: boolean): Renderable {\r\n        return this;\r\n    }\r\n}\r\n",
        "import { Renderable } from \"./Renderable\";\r\nimport { Geometry } from \"./Geometries/Geometry\";\r\nimport { Material } from \"../Materials/Material\";\r\nimport { MeshBasicMaterial } from \"../Materials/MeshBasicMaterial\";\r\nimport { Scene } from \"./Scene\";\r\nimport { Nullable } from \"../types\";\r\nimport { AbstractObject } from \"./AbstractObject\";\r\nimport { Box3, Sphere } from \"../Math\";\r\n\r\n/**\r\n * 网格对象\r\n */\r\nexport class Mesh extends Renderable {\r\n\r\n    public _geometry: Geometry;\r\n    public _material: Material;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param scene\r\n     * @param parent\r\n     * @param name\r\n     * @param geometry\r\n     * @param material\r\n     */\r\n    constructor(scene: Scene, parent: Nullable<AbstractObject> = null, name: string = '', geometry: Geometry = new Geometry(), material: Material = new MeshBasicMaterial()) {\r\n        super(scene, parent, name);\r\n\r\n        this.geometry = geometry;\r\n        this.material = material;\r\n\r\n        this.scene.addMesh(this);\r\n    }\r\n\r\n    /**\r\n     * 释放\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this._geometry.dispose();\r\n        this._material.dispose();\r\n    }\r\n\r\n    /**\r\n     * 材质\r\n     */\r\n    public get material() {\r\n        return this._material;\r\n    }\r\n    public set material(value) {\r\n        if (this._material != value) {\r\n            this._material.dispose();\r\n            this._material = value;\r\n            this._material.addReference();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 数据\r\n     */\r\n    public get geometry() {\r\n        return this._geometry;\r\n    }\r\n    public set geometry(value) {\r\n        if (this._geometry != value) {\r\n            this._geometry.dispose();\r\n            this._geometry = value;\r\n            this._geometry.addReference();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 包围球\r\n     */\r\n    public get boundingSphere(): Sphere {\r\n        if (!this._geometry.boundingSphere) {\r\n            this._geometry.computeBoundingSphere();\r\n        }\r\n        return this._geometry.boundingSphere!;\r\n    }\r\n\r\n    /**\r\n     * 包围盒\r\n     */\r\n    public get boundingBox(): Box3 {\r\n        if (!this._geometry.boundingBox) {\r\n            this._geometry.computeBoundingBox();\r\n        }\r\n        return this._geometry.boundingBox!;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): Mesh {\r\n        return new Mesh(this._scene, this._parent).copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: Mesh): Mesh {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 渲染\r\n     * @param enableAlphaMode\r\n     */\r\n    public render(enableAlphaMode: boolean): Mesh {\r\n        return this;\r\n    }\r\n}\r\n",
        "export interface ISmartArrayLike<T> {\r\n\r\n    data: Array<T>;\r\n\r\n    length: number;\r\n}\r\n\r\nexport class SmartArray<T> implements ISmartArrayLike<T> {\r\n\r\n    public data: Array<T>;\r\n\r\n    public length: number = 0;\r\n\r\n    protected _id: number;\r\n\r\n    constructor(capacity: number) {\r\n        this.data = new Array(capacity);\r\n        this._id = SmartArray._GlobalId++;\r\n    }\r\n\r\n    public push(value: T): void {\r\n        this.data[this.length++] = value;\r\n\r\n        if (this.length > this.data.length) {\r\n            this.data.length *= 2;\r\n        }\r\n    }\r\n\r\n    public forEach(func: (content: T) => void): void {\r\n        for (let index = 0; index < this.length; index++) {\r\n            func(this.data[index]);\r\n        }\r\n    }\r\n\r\n    public sort(compareFn: (a: T, b: T) => number): void {\r\n        this.data.sort(compareFn);\r\n    }\r\n\r\n    public reset(): void {\r\n        this.length = 0;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.reset();\r\n\r\n        if (this.data) {\r\n            this.data.length = 0;\r\n            this.data = [];\r\n        }\r\n    }\r\n\r\n    public concat(array: any): void {\r\n        if (array.length == 0) {\r\n            return;\r\n        }\r\n        if (this.length + array.length > this.data.length) {\r\n            this.data.length = (this.length + array.length) * 2;\r\n        }\r\n\r\n        for (let index = 0; index < array.length; index++) {\r\n            this.data[this.length++] = (array.data || array)[index];\r\n        }\r\n    }\r\n\r\n    public indexOf(value: T): number {\r\n        let position = this.data.indexOf(value);\r\n\r\n        if (position >= this.length) {\r\n            return -1;\r\n        }\r\n\r\n        return position;\r\n    }\r\n\r\n    public contains(value: T): boolean {\r\n        return this.indexOf(value) != -1;\r\n    }\r\n\r\n    // Statics\r\n    private static _GlobalId = 0;\r\n}\r\n\r\nexport class SmartArrayNoDuplicate<T> extends SmartArray<T> {\r\n    private _duplicateId = 0;\r\n\r\n    public push(value: T): void {\r\n        super.push(value);\r\n\r\n        if (!(<any>value).__smartArrayFlags) {\r\n            (<any>value).__smartArrayFlags = {};\r\n        }\r\n\r\n        (<any>value).__smartArrayFlags[this._id] = this._duplicateId;\r\n    }\r\n\r\n    public pushNoDuplicate(value: T): boolean {\r\n        if ((<any>value).__smartArrayFlags && (<any>value).__smartArrayFlags[this._id] == this._duplicateId) {\r\n            return false;\r\n        }\r\n        this.push(value);\r\n        return true;\r\n    }\r\n\r\n    public reset(): void {\r\n        super.reset();\r\n        this._duplicateId++;\r\n    }\r\n\r\n    public concatWithNoDuplicate(array: any): void {\r\n        if (array.length == 0) {\r\n            return;\r\n        }\r\n        if (this.length + array.length > this.data.length) {\r\n            this.data.length = (this.length + array.length) * 2;\r\n        }\r\n\r\n        for (let index = 0; index < array.length; index++) {\r\n            let item = (array.data || array)[index];\r\n            this.pushNoDuplicate(item);\r\n        }\r\n    }\r\n}\r\n",
        "export * from \"./types\";\r\nexport * from \"./Animation/index\";\r\n//export * from \"./Audio/index\";\r\n//export * from \"./BimApplication/index\";\r\n//export * from \"./Blueprint/index\";\r\nexport * from \"./Cameras/index\";\r\n//export * from \"./CanvasApplication/index\";\r\nexport * from \"./Csg/index\";\r\nexport * from \"./Engines/index\";\r\nexport * from \"./Enums/index\";\r\nexport * from \"./Events/index\";\r\nexport * from \"./Scene/Geometries/index\";\r\n//export * from \"./Helpers/index\";\r\nexport * from \"./Libs/index\";\r\nexport * from \"./Lights/index\";\r\nexport * from \"./Materials/index\";\r\nexport * from \"./Math/index\";\r\nexport * from \"./Misc/index\";\r\n// export * from \"./Navigation/index\";\r\nexport * from \"./Scene/index\";\r\n// export * from \"./Particle/index\";\r\n// export * from \"./Physics/index\";\r\n// export * from \"./PostProcessing/index\";\r\n// export * from \"./ShaderNode/index\";\r\n// export * from \"./Shaders/index\";\r\n",
        "export * from \"./AnimationBlendMode\";\r\nexport * from \"./AnimationLoopMode\";\r\n",
        "/**\r\n * 动画混合模式\r\n * @category Animation\r\n */\r\nexport abstract class AnimationBlendMode {\r\n    public static readonly NormalAnimationBlendMode = 2500;\r\n    public static readonly AdditiveAnimationBlendMode = 2501;\r\n}\r\n",
        "/**\r\n * 动画循环模式\r\n * @category Animation\r\n */\r\nexport abstract class AnimationLoopMode {\r\n    public static readonly LoopOnce = 2200;\r\n    public static readonly LoopRepeat = 2201;\r\n    public static readonly LoopPingPong = 2202;\r\n}\r\n",
        "export * from \"./Camera\";\r\nexport * from \"./OrthographicCamera\";\r\nexport * from \"./PerspectiveCamera\";\r\n",
        "import { Vector3 } from \"./Vector3\";\r\n\r\n/**\r\n * 圆柱\r\n * @category Math\r\n */\r\nexport class Cylindrical {\r\n\r\n    /**\r\n     * 半径\r\n     */\r\n    public radius: number;\r\n    /**\r\n     * 从正z轴开始，用弧度测量x-z平面上的逆时针角度\r\n     */\r\n    public theta: number;\r\n    /**\r\n     * 在x-z平面上的高度\r\n     */\r\n    public y: number;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param radius\r\n     * @param theta\r\n     * @param y\r\n     */\r\n    constructor(radius: number = 1, theta: number = 0, y: number = 0) {\r\n        this.radius = radius;\r\n        this.theta = theta;\r\n        this.y = y;\r\n    }\r\n\r\n    /**\r\n     * 设置椭球的参数\r\n     * @param radius\r\n     * @param theta\r\n     * @param y\r\n     */\r\n    public set(radius: number, theta: number, y: number): Cylindrical {\r\n        this.radius = radius;\r\n        this.theta = theta;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置三个轴的参数\r\n     * @param x\r\n     * @param y\r\n     * @param z\r\n     */\r\n    public setFromCartesianCoords(x: number, y: number, z: number): Cylindrical {\r\n        this.radius = Math.sqrt(x * x + z * z);\r\n        this.theta = Math.atan2(x, z);\r\n        this.y = y;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置三个轴的参数\r\n     * @param vec\r\n     */\r\n    public setFromVector3(vec: Vector3): Cylindrical {\r\n        return this.setFromCartesianCoords(vec.x, vec.y, vec.z);\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): Cylindrical {\r\n        return new Cylindrical().copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param other\r\n     */\r\n    public copy(other: Cylindrical): Cylindrical {\r\n        this.radius = other.radius;\r\n        this.theta = other.theta;\r\n        this.y = other.y;\r\n        return this;\r\n    }\r\n}\r\n",
        "/**\r\n * @category Math\r\n */\r\nexport class Ellipsoid {\r\n    constructor() {\r\n    }\r\n}\r\n",
        "import { Plane } from \"./Plane\";\r\nimport { Nullable } from \"../types\";\r\nimport { Matrix4 } from \"./Matrix4\";\r\nimport { Sphere } from \"./Sphere\";\r\nimport { Vector3 } from \"./Vector3\";\r\nimport { FrustumIntersect } from \"./InterfaceType/IntersectResult\";\r\nimport { Box3 } from \"./Box3\";\r\nimport { Mesh } from \"../Scene\";\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempSphere = new Sphere();\r\n\r\n/**\r\n * 平截头体\r\n * @category Math\r\n */\r\nexport class Frustum {\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    private readonly _p: Plane[];\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    private readonly _planeData: number[];\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param p0\r\n     * @param p1\r\n     * @param p2\r\n     * @param p3\r\n     * @param p4\r\n     * @param p5\r\n     */\r\n    constructor(p0: Nullable<Plane> = null, p1: Nullable<Plane> = null, p2: Nullable<Plane> = null, p3: Nullable<Plane> = null, p4: Nullable<Plane> = null, p5: Nullable<Plane> = null) {\r\n        this._p = [new Plane(), new Plane(), new Plane(), new Plane(), new Plane(), new Plane()];\r\n        this._planeData = [];\r\n        if (p0) { this._p[0].copy(p0); }\r\n        if (p1) { this._p[1].copy(p1); }\r\n        if (p2) { this._p[2].copy(p2); }\r\n        if (p3) { this._p[3].copy(p3); }\r\n        if (p4) { this._p[4].copy(p4); }\r\n        if (p5) { this._p[5].copy(p5); }\r\n        this._updateArrayPlaneData();\r\n    }\r\n\r\n    /**\r\n     * 平面数组\r\n     */\r\n    public get planes() {\r\n        return this._p;\r\n    }\r\n\r\n    /**\r\n     * 平面数据数组\r\n     */\r\n    public get planeData() {\r\n        return this._planeData;\r\n    }\r\n\r\n    /**\r\n     * 设置6个平面\r\n     * @param p0\r\n     * @param p1\r\n     * @param p2\r\n     * @param p3\r\n     * @param p4\r\n     * @param p5\r\n     */\r\n    public set(p0: Plane, p1: Plane, p2: Plane, p3: Plane, p4: Plane, p5: Plane): Frustum {\r\n        this._p[0].copy(p0);\r\n        this._p[1].copy(p1);\r\n        this._p[2].copy(p2);\r\n        this._p[3].copy(p3);\r\n        this._p[4].copy(p4);\r\n        this._p[5].copy(p5);\r\n        this._updateArrayPlaneData();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置投影矩阵\r\n     * @param matrix\r\n     */\r\n    public setFromProjectionMatrix(matrix: Matrix4): Frustum {\r\n        const planes = this.planes;\r\n        const me = matrix.elements;\r\n        const me0 = me[0]; const me1 = me[1]; const me2 = me[2]; const me3 = me[3];\r\n        const me4 = me[4]; const me5 = me[5]; const me6 = me[6]; const me7 = me[7];\r\n        const me8 = me[8]; const me9 = me[9]; const me10 = me[10]; const me11 = me[11];\r\n        const me12 = me[12]; const me13 = me[13]; const me14 = me[14]; const me15 = me[15];\r\n\r\n        planes[0].setFromXYZW(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();\r\n        planes[1].setFromXYZW(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();\r\n        planes[2].setFromXYZW(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();\r\n        planes[3].setFromXYZW(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();\r\n        planes[4].setFromXYZW(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();\r\n        planes[5].setFromXYZW(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();\r\n\r\n        this._updateArrayPlaneData();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): Frustum {\r\n        return new Frustum().copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param frustum\r\n     */\r\n    public copy(frustum: Frustum): Frustum {\r\n        const planes = this.planes;\r\n        for (let i = 0; i < 6; i++) {\r\n            planes[i].copy(frustum.planes[i]);\r\n        }\r\n        this._updateArrayPlaneData();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 和对象包围球相交检测\r\n     */\r\n    public intersectsObject(mesh: Mesh): boolean {\r\n        _tempSphere.copy(mesh.boundingSphere).applyMatrix4(mesh.matrixWorld);\r\n        return this.intersectsSphere(_tempSphere);\r\n    }\r\n\r\n    /**\r\n     * 和包围球相交检测\r\n     * @param sphere\r\n     * @param result\r\n     */\r\n    public intersectsSphere(sphere: Sphere, result: Nullable<FrustumIntersect> = null): boolean {\r\n\r\n        const planes = this.planes;\r\n        const center = sphere.center;\r\n        const negRadius = -sphere.radius;\r\n\r\n        let fullVisible = 0;\r\n\r\n        for (let i = 0; i < 6; i++) {\r\n            const distance = planes[i].distanceToPoint(center);\r\n            if (distance < negRadius) {\r\n                return false;\r\n            }\r\n\r\n            if (result) {\r\n                result.planes.push({\r\n                    index: i,\r\n                    distance,\r\n                });\r\n\r\n                if (distance >= sphere.radius) {\r\n                    fullVisible++;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (result) {\r\n            result.fullVisible = fullVisible == 6;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 和包围盒相交检测\r\n     * @param box\r\n     * @param result\r\n     */\r\n    public intersectsBox(box: Box3, result: Nullable<FrustumIntersect> = null): boolean {\r\n\r\n        box.getBoundingSphere(_tempSphere);\r\n\r\n        const planes = this.planes;\r\n\r\n        let fullVisible = 0;\r\n\r\n        for (let i = 0; i < 6; i++) {\r\n\r\n            const plane = planes[i];\r\n\r\n            _tempVec.x = plane.normal.x > 0 ? box.max.x : box.min.x;\r\n            _tempVec.y = plane.normal.y > 0 ? box.max.y : box.min.y;\r\n            _tempVec.z = plane.normal.z > 0 ? box.max.z : box.min.z;\r\n\r\n            const distance = plane.distanceToPoint(_tempVec);\r\n            if (distance < 0) {\r\n                return false;\r\n            }\r\n\r\n            if (result) {\r\n                result.planes.push({\r\n                    index: i,\r\n                    distance,\r\n                });\r\n\r\n                if (distance >= _tempSphere.radius) {\r\n                    fullVisible++;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (result) {\r\n            result.fullVisible = fullVisible == 6;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _updateArrayPlaneData() {\r\n\r\n        this._planeData.length = 0;\r\n\r\n        const planes = this.planes;\r\n        for (let i = 0; i < 6; i++) {\r\n            this._planeData.push(planes[i].normal.x, planes[i].normal.x, planes[i].normal.x, planes[i].constant);\r\n        }\r\n    }\r\n}\r\n",
        "import { MathUtils } from \"./MathUtils\";\r\nimport { Nullable } from \"../types\";\r\n\r\n/**\r\n * HeadingPitchRang\r\n * @category Math\r\n */\r\nexport class HeadingPitchRang {\r\n\r\n    public heading: number;\r\n    public pitch: number;\r\n    public range: number;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param heading\r\n     * @param pitch\r\n     * @param range\r\n     */\r\n    constructor(heading: number = 0, pitch: number = 0, range: number = 0) {\r\n        this.heading = heading;\r\n        this.pitch = pitch;\r\n        this.range = range;\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: HeadingPitchRang): HeadingPitchRang {\r\n        this.heading = source.heading;\r\n        this.pitch = source.pitch;\r\n        this.range = source.range;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): HeadingPitchRang {\r\n        return new HeadingPitchRang(this.heading, this.pitch, this.range);\r\n    }\r\n\r\n    /**\r\n     * 是否相等\r\n     * @param right\r\n     */\r\n    public equals(right: HeadingPitchRang): boolean {\r\n        return (this.heading == right.heading) && (this.pitch == right.pitch) && (this.range == right.range);\r\n    }\r\n\r\n    /**\r\n     * 近似相等\r\n     * @param right\r\n     * @param relativeEpsilon\r\n     * @param absoluteEpsilon\r\n     */\r\n    public equalsEpsilon(right: HeadingPitchRang, relativeEpsilon: number, absoluteEpsilon: Nullable<number>) {\r\n        return MathUtils.equalsEpsilon(this.heading, right.heading, relativeEpsilon, absoluteEpsilon) &&\r\n            MathUtils.equalsEpsilon(this.pitch, right.pitch, relativeEpsilon, absoluteEpsilon) &&\r\n            MathUtils.equalsEpsilon(this.range, right.range, relativeEpsilon, absoluteEpsilon);\r\n    }\r\n}\r\n",
        "import { Quaternion } from \"./Quaternion\";\r\nimport { MathUtils } from \"./MathUtils\";\r\nimport { Nullable } from \"../types\";\r\n\r\n/**\r\n * HeadingPitchRoll\r\n * @category Math\r\n */\r\nexport class HeadingPitchRoll {\r\n\r\n    public heading: number;\r\n    public pitch: number;\r\n    public roll: number;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param heading\r\n     * @param pitch\r\n     * @param roll\r\n     */\r\n    constructor(heading: number = 0, pitch: number = 0, roll: number = 0) {\r\n        this.heading = heading;\r\n        this.pitch = pitch;\r\n        this.roll = roll;\r\n    }\r\n\r\n    /**\r\n     * 设置角度\r\n     * @param heading\r\n     * @param pitch\r\n     * @param roll\r\n     */\r\n    public setFromDegrees(heading: number, pitch: number, roll: number): HeadingPitchRoll {\r\n        this.heading = MathUtils.degToRad(heading);\r\n        this.pitch = MathUtils.degToRad(pitch);\r\n        this.roll = MathUtils.degToRad(roll);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置四元数\r\n     * @param quaternion\r\n     */\r\n    public setFromQuaternion(quaternion: Quaternion): HeadingPitchRoll {\r\n        const test = 2 * (quaternion.w * quaternion.z - quaternion.y * quaternion.x);\r\n        const denominatorRoll = 1 - 2 * (quaternion.x * quaternion.x + quaternion.z * quaternion.z);\r\n        const numeratorRoll = 2 * (quaternion.w * quaternion.x + quaternion.z * quaternion.y);\r\n        const denominatorHeading = 1 - 2 * (quaternion.z * quaternion.z + quaternion.y * quaternion.y);\r\n        const numeratorHeading = 2 * (quaternion.w * quaternion.y + quaternion.x * quaternion.z);\r\n        this.heading = -Math.atan2(numeratorHeading, denominatorHeading);\r\n        this.roll = Math.atan2(numeratorRoll, denominatorRoll);\r\n        this.pitch = -MathUtils.asinClamped(test);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: HeadingPitchRoll): HeadingPitchRoll {\r\n        this.heading = source.heading;\r\n        this.pitch = source.pitch;\r\n        this.roll = source.roll;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): HeadingPitchRoll {\r\n        return new HeadingPitchRoll(this.heading, this.pitch, this.roll);\r\n    }\r\n\r\n    /**\r\n     * 是否相等\r\n     * @param right\r\n     */\r\n    public equals(right: HeadingPitchRoll): boolean {\r\n        return (this.heading == right.heading) && (this.pitch == right.pitch) && (this.roll == right.roll);\r\n    }\r\n\r\n    /**\r\n     * 近似相等\r\n     * @param right\r\n     * @param relativeEpsilon\r\n     * @param absoluteEpsilon\r\n     */\r\n    public equalsEpsilon(right: HeadingPitchRoll, relativeEpsilon: number, absoluteEpsilon: Nullable<number>) {\r\n        return MathUtils.equalsEpsilon(this.heading, right.heading, relativeEpsilon, absoluteEpsilon) &&\r\n            MathUtils.equalsEpsilon(this.pitch, right.pitch, relativeEpsilon, absoluteEpsilon) &&\r\n            MathUtils.equalsEpsilon(this.roll, right.roll, relativeEpsilon, absoluteEpsilon);\r\n    }\r\n}\r\n",
        "import { Nullable } from \"../types\";\r\nimport { MathUtils } from \"./MathUtils\";\r\nimport { Segment2Point2Distance, Segment2Segment2Distance } from \"./InterfaceType/DistanceResult\";\r\nimport { Vector2 } from \"./Vector2\";\r\nimport { Box2 } from \"./Box2\";\r\nimport { Segment2Box2Intersect, Segment2Segment2Intersect } from \"./InterfaceType/IntersectResult\";\r\nimport { Line2 } from \"./Line2\";\r\nimport { Intervals } from \"./Algorithm/Intervals\";\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec1 = new Vector2();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec2 = new Vector2();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec3 = new Vector2();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec4 = new Vector2();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec5 = new Vector2();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec6 = new Vector2();\r\n/**\r\n * @ignore\r\n */\r\nlet mA: number, mB: number, mC: number, mD: number, mE: number;\r\n\r\n/**\r\n * @ignore\r\n */\r\nlet mF00: number, mF10: number, mF01: number, mF11: number;\r\n\r\n/**\r\n * @ignore\r\n */\r\nlet mG00: number, mG10: number, mG01: number, mG11: number;\r\n\r\n/**\r\n * 2D线段\r\n * @category Math\r\n */\r\nexport class LineSegment2 {\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    private readonly _p: Vector2[];\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param start\r\n     * @param end\r\n     */\r\n    constructor(start: Nullable<Vector2> = null, end: Nullable<Vector2> = null) {\r\n        this._p = [new Vector2(), new Vector2()];\r\n\r\n        if (start) {\r\n            this._p[0].copy(start);\r\n        }\r\n        if (end) {\r\n            this._p[1].copy(end);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 内部元素数组\r\n     */\r\n    get p() {\r\n        return this._p;\r\n    }\r\n\r\n    /**\r\n     * 开始坐标\r\n     */\r\n    get start() {\r\n        return this._p[0];\r\n    }\r\n    set start(value) {\r\n        this._p[0].copy(value);\r\n    }\r\n\r\n    /**\r\n     * 结束坐标\r\n     */\r\n    get end() {\r\n        return this._p[1];\r\n    }\r\n    set end(value) {\r\n        this._p[1].copy(value);\r\n    }\r\n\r\n    /**\r\n     * 设置起点，终点坐标\r\n     * @param start\r\n     * @param end\r\n     */\r\n    public set(start: Vector2, end: Vector2): LineSegment2 {\r\n        this.start.copy(start);\r\n        this.end.copy(end);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): LineSegment2 {\r\n        return new LineSegment2().copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param line\r\n     */\r\n    public copy(line: LineSegment2): LineSegment2 {\r\n        this.start.copy(line.start);\r\n        this.end.copy(line.end);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 中心坐标\r\n     * @param target\r\n     */\r\n    public getCenter(target = new Vector2()): Vector2 {\r\n        return target.addVectors(this.start, this.end).multiplyScalar(0.5);\r\n    }\r\n\r\n    /**\r\n     * 相对长度\r\n     * @param target\r\n     */\r\n    public delta(target = new Vector2()): Vector2 {\r\n        return target.subVectors(this.end, this.start);\r\n    }\r\n\r\n    /**\r\n     * 长度SQ\r\n     */\r\n    public distanceSq(): number {\r\n        return this.start.distanceToSquared(this.end);\r\n    }\r\n\r\n    /**\r\n     * 长度\r\n     */\r\n    public distance(): number {\r\n        return this.start.distanceTo(this.end);\r\n    }\r\n\r\n    /**\r\n     * 线段上的点\r\n     * @param t\r\n     * @param target\r\n     */\r\n    public at(t: number, target = new Vector2()): Vector2 {\r\n        return this.delta(target).multiplyScalar(t).add(this.start);\r\n    }\r\n\r\n    /**\r\n     * 点到线段上最近点的系数\r\n     * @param point\r\n     * @param clampToLine\r\n     */\r\n    public closestPointToPointParameter(point: Vector2, clampToLine: boolean = false): number {\r\n\r\n        _tempVec1.subVectors(point, this.start);\r\n        _tempVec2.subVectors(this.end, this.start);\r\n\r\n        const startEnd2 = _tempVec2.dot(_tempVec2);\r\n        const startEnd_startP = _tempVec2.dot(_tempVec1);\r\n\r\n        let t = startEnd_startP / startEnd2;\r\n\r\n        if (clampToLine) {\r\n            t = MathUtils.clamp(t, 0, 1);\r\n        }\r\n        return t;\r\n    }\r\n\r\n    /**\r\n     * 点到线段上的最近点\r\n     * @param point\r\n     * @param clampToLine\r\n     * @param target\r\n     */\r\n    public closestPointToPoint(point: Vector2, clampToLine: boolean = false, target = new Vector2()): Vector2 {\r\n        const t = this.closestPointToPointParameter(point, clampToLine);\r\n        return this.delta(target).multiplyScalar(t).add(this.start);\r\n    }\r\n\r\n    /**\r\n     * 设置原点，方向，大小\r\n     * @param center\r\n     * @param direction\r\n     * @param extent\r\n     */\r\n    public setCenteredForm(center: Vector2, direction: Vector2, extent: number): LineSegment2 {\r\n        this._p[0].copy(direction).multiplyScalar(extent).subVectors(center, this._p[0]);\r\n        this._p[1].copy(direction).multiplyScalar(extent).add(center);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取原点，方向，大小\r\n     * @param center\r\n     * @param direction\r\n     */\r\n    public getCenteredForm(center: Vector2, direction: Vector2): number {\r\n        center.addVectors(this._p[0], this._p[1]).multiplyScalar(0.5);\r\n        direction.subVectors(this._p[1], this._p[0]);\r\n        const extent = direction.length() * 0.5;\r\n        direction.normalize();\r\n        return extent;\r\n    }\r\n\r\n    /**\r\n     * 到坐标点的SQ距离\r\n     * @param point\r\n     * @param closestPoint\r\n     * @param parameter\r\n     */\r\n    public distanceSqToPoint(point: Vector2, closestPoint: Nullable<Vector2> = null, parameter: Nullable<Segment2Point2Distance> = null): number {\r\n\r\n        const direction = _tempVec1.subVectors(this.p[1], this.p[0]);\r\n        const diff = _tempVec2.subVectors(point, this.p[1]);\r\n        let t = direction.dot(diff);\r\n\r\n        let segmentParameter = 0;\r\n        let segmentClosest;\r\n\r\n        if (t >= 0)\r\n        {\r\n            segmentParameter = 1;\r\n            segmentClosest = this.p[1];\r\n        }\r\n        else\r\n        {\r\n            diff.subVectors(point, this.p[0]);\r\n            t = direction.dot(diff);\r\n            if (t <= 0)\r\n            {\r\n                segmentParameter = 0;\r\n                segmentClosest = this.p[0];\r\n            }\r\n            else\r\n            {\r\n                const sqrLength = direction.dot(direction);\r\n                if (sqrLength > 0)\r\n                {\r\n                    t /= sqrLength;\r\n                    segmentParameter = t;\r\n                    segmentClosest = _tempVec3.copy(direction).multiplyScalar(t).add(this.p[0]);\r\n                }\r\n                else\r\n                {\r\n                    segmentParameter = 0;\r\n                    segmentClosest = this.p[0];\r\n                }\r\n            }\r\n        }\r\n\r\n        if (closestPoint) {\r\n            closestPoint.copy(segmentClosest);\r\n        }\r\n        if (parameter) {\r\n            parameter.segmentParameter = segmentParameter;\r\n        }\r\n\r\n        diff.subVectors(point, segmentClosest);\r\n        return diff.dot(diff);\r\n    }\r\n\r\n    /**\r\n     * 到坐标点的距离\r\n     * @param point\r\n     * @param segmentClosest\r\n     * @param parameter\r\n     */\r\n    public distanceToPoint(point: Vector2, segmentClosest: Nullable<Vector2> = null, parameter: Nullable<Segment2Point2Distance> = null): number {\r\n        return Math.sqrt(this.distanceSqToPoint(point, segmentClosest, parameter));\r\n    }\r\n\r\n    /**\r\n     * 与线段的SQ距离\r\n     * @param segment\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceSqToSegment(segment: LineSegment2, closestPoint0: Nullable<Vector2> = null, closestPoint1: Nullable<Vector2> = null, parameter: Nullable<Segment2Segment2Distance> = null): number {\r\n        const P0 = this.start;\r\n        const P1 = this.end;\r\n\r\n        const Q0 = segment.start;\r\n        const Q1 = segment.end;\r\n\r\n        const P1mP0 = _tempVec1.subVectors(P1, P0);\r\n        const Q1mQ0 = _tempVec2.subVectors(Q1, Q0);\r\n        const P0mQ0 = _tempVec3.subVectors(P0, Q0);\r\n        mA = P1mP0.dot(P1mP0);\r\n        mB = P1mP0.dot(Q1mQ0);\r\n        mC = Q1mQ0.dot(Q1mQ0);\r\n        mD = P1mP0.dot(P0mQ0);\r\n        mE = Q1mQ0.dot(P0mQ0);\r\n\r\n        mF00 = mD;\r\n        mF10 = mF00 + mA;\r\n        mF01 = mF00 - mB;\r\n        mF11 = mF10 - mB;\r\n\r\n        mG00 = -mE;\r\n        mG10 = mG00 - mB;\r\n        mG01 = mG00 + mC;\r\n        mG11 = mG10 + mC;\r\n\r\n        const ssparameter = [0, 0];\r\n\r\n        if (mA > 0 && mC > 0) {\r\n            // Compute the solutions to dR/ds(s0,0) = 0 and\r\n            // dR/ds(s1,1) = 0.  The location of sI on the s-axis is\r\n            // stored in classifyI (I = 0 or 1).  If sI <= 0, classifyI\r\n            // is -1.  If sI >= 1, classifyI is 1.  If 0 < sI < 1,\r\n            // classifyI is 0.  This information helps determine where to\r\n            // search for the minimum point (s,t).  The fij values are\r\n            // dR/ds(i,j) for i and j in {0,1}.\r\n\r\n            const sValue = [0, 0];\r\n            sValue[0] = getClampedRoot(mA, mF00, mF10);\r\n            sValue[1] = getClampedRoot(mA, mF01, mF11);\r\n\r\n            const classify = [0, 0];\r\n            for (let i = 0; i < 2; ++i) {\r\n                if (sValue[i] <= 0) {\r\n                    classify[i] = -1;\r\n                }\r\n                else if (sValue[i] >= 1) {\r\n                    classify[i] = +1;\r\n                }\r\n                else {\r\n                    classify[i] = 0;\r\n                }\r\n            }\r\n\r\n            if (classify[0] == -1 && classify[1] == -1) {\r\n                // The minimum must occur on s = 0 for 0 <= t <= 1.\r\n                ssparameter[0] = 0;\r\n                ssparameter[1] = getClampedRoot(mC, mG00, mG01);\r\n            }\r\n            else if (classify[0] == +1 && classify[1] == +1) {\r\n                // The minimum must occur on s = 1 for 0 <= t <= 1.\r\n                ssparameter[0] = 1;\r\n                ssparameter[1] = getClampedRoot(mC, mG10, mG11);\r\n            }\r\n            else {\r\n                // The line dR/ds = 0 intersects the domain [0,1]^2 in a\r\n                // nondegenerate segment.  Compute the endpoints of that\r\n                // segment, end[0] and end[1].  The edge[i] flag tells you\r\n                // on which domain edge end[i] lives: 0 (s=0), 1 (s=1),\r\n                // 2 (t=0), 3 (t=1).\r\n                const edge = [0, 0];\r\n                const end = [[0, 0], [0, 0]];\r\n\r\n                computeIntersection(sValue, classify, edge, end);\r\n\r\n                // The directional derivative of R along the segment of\r\n                // intersection is\r\n                //   H(z) = (end[1][1]-end[1][0]) *\r\n                //          dR/dt((1-z)*end[0] + z*end[1])\r\n                // for z in [0,1].  The formula uses the fact that\r\n                // dR/ds = 0 on the segment.  Compute the minimum of\r\n                // H on [0,1].\r\n                computeMinimumParameters(edge, end, ssparameter);\r\n            }\r\n        }\r\n        else {\r\n            if (mA > 0) {\r\n                // The Q-segment is degenerate (Q0 and Q1 are the same\r\n                // point) and the quadratic is R(s,0) = a*s^2 + 2*d*s + f\r\n                // and has (half) first derivative F(t) = a*s + d.  The\r\n                // closest P-point is interior to the P-segment when\r\n                // F(0) < 0 and F(1) > 0.\r\n                ssparameter[0] = getClampedRoot(mA, mF00, mF10);\r\n                ssparameter[1] = 0;\r\n            }\r\n            else if (mC > 0) {\r\n                // The P-segment is degenerate (P0 and P1 are the same\r\n                // point) and the quadratic is R(0,t) = c*t^2 - 2*e*t + f\r\n                // and has (half) first derivative G(t) = c*t - e.  The\r\n                // closest Q-point is interior to the Q-segment when\r\n                // G(0) < 0 and G(1) > 0.\r\n                ssparameter[0] = 0;\r\n                ssparameter[1] = getClampedRoot(mC, mG00, mG01);\r\n            }\r\n            else {\r\n                // P-segment and Q-segment are degenerate.\r\n                ssparameter[0] = 0;\r\n                ssparameter[1] = 0;\r\n            }\r\n        }\r\n\r\n        _tempVec4.addVectors(_tempVec1.copy(P0).multiplyScalar(1 - ssparameter[0]), _tempVec2.copy(P1).multiplyScalar(ssparameter[0]));\r\n        _tempVec5.addVectors(_tempVec1.copy(Q0).multiplyScalar(1 - ssparameter[1]), _tempVec2.copy(Q1).multiplyScalar(ssparameter[1]));\r\n\r\n        if (closestPoint0) {\r\n            closestPoint0.copy(_tempVec4);\r\n        }\r\n        if (closestPoint1) {\r\n            closestPoint1.copy(_tempVec5);\r\n        }\r\n        if (parameter) {\r\n            parameter.parameter = ssparameter;\r\n        }\r\n\r\n        const diff = _tempVec3.subVectors(_tempVec4, _tempVec5);\r\n        return diff.dot(diff);\r\n    }\r\n\r\n    /**\r\n     * 与线段的距离\r\n     * @param segment\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceToSegment(segment: LineSegment2, closestPoint0: Nullable<Vector2> = null, closestPoint1: Nullable<Vector2> = null, parameter: Nullable<Segment2Segment2Distance> = null): number {\r\n        return Math.sqrt(this.distanceSqToSegment(segment, closestPoint0, closestPoint1, parameter));\r\n    }\r\n\r\n    /**\r\n     * 是否与包围盒相交\r\n     * @param box\r\n     */\r\n    public intersectsBox(box: Box2): boolean {\r\n\r\n        const boxCenter = _tempVec1;\r\n        const boxExtent = _tempVec2;\r\n        box.getCenter(boxCenter);\r\n        box.getExtent(boxExtent);\r\n\r\n        const transformedP0 = _tempVec3.subVectors(this.p[0], boxCenter);\r\n        const transformedP1 = _tempVec4.subVectors(this.p[1], boxCenter);\r\n        const transformedSegment = new LineSegment2(transformedP0, transformedP1);\r\n\r\n        const segOrigin = _tempVec3;\r\n        const segDirection = _tempVec4;\r\n        const segExtent = transformedSegment.getCenteredForm(segOrigin, segDirection);\r\n\r\n        return LineSegment2.intersectsBox(segOrigin, segDirection, segExtent, boxExtent);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param segOrigin\r\n     * @param segDirection\r\n     * @param segExtent\r\n     * @param boxExtent\r\n     */\r\n    public static intersectsBox(segOrigin: Vector2, segDirection: Vector2, segExtent: number, boxExtent: Vector2): boolean {\r\n\r\n        for (let i = 0; i < 2; ++i) {\r\n            const lhs = Math.abs(segOrigin.p[i]);\r\n            const rhs = boxExtent.p[i] + segExtent * Math.abs(segDirection.p[i]);\r\n            if (lhs > rhs) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return Line2.intersectsBox(segOrigin, segDirection, boxExtent);\r\n    }\r\n\r\n    /**\r\n     * 与包围盒相交检测\r\n     * @param box\r\n     */\r\n    public intersectBox(box: Box2): Segment2Box2Intersect {\r\n\r\n        const boxCenter = _tempVec1;\r\n        const boxExtent = _tempVec2;\r\n        box.getCenter(boxCenter);\r\n        box.getExtent(boxExtent);\r\n\r\n        const transformedP0 = _tempVec3.subVectors(this.p[0], boxCenter);\r\n        const transformedP1 = _tempVec4.subVectors(this.p[1], boxCenter);\r\n        const transformedSegment = new LineSegment2(transformedP0, transformedP1);\r\n\r\n        const segOrigin = _tempVec3;\r\n        const segDirection = _tempVec4;\r\n        const segExtent = transformedSegment.getCenteredForm(segOrigin, segDirection);\r\n\r\n        const result = {\r\n            intersect: false,\r\n            numIntersections: 0,\r\n            parameter: new Array<number>(2),\r\n            point: new Array<Vector2>(2),\r\n            cdeParameter: new Array<number>(2),\r\n        };\r\n\r\n        LineSegment2.intersectBox(segOrigin, segDirection, segExtent, boxExtent, result);\r\n\r\n        for (let i = 0; i < result.numIntersections; ++i)\r\n        {\r\n            // Compute the segment in the aligned-box coordinate system\r\n            // and then translate it back to the original coordinates\r\n            // using the box cener.\r\n            result.point[i] = new Vector2().copy(segDirection).multiplyScalar(result.parameter[i]).add(segOrigin).add(boxCenter);\r\n            result.cdeParameter[i] = result.parameter[i];\r\n\r\n            // Convert the parameters from the centered form to the\r\n            // endpoint form.\r\n            result.parameter[i] = (result.parameter[i] / segExtent + 1) * 0.5;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param segOrigin\r\n     * @param segDirection\r\n     * @param segExtent\r\n     * @param boxExtent\r\n     * @param result\r\n     */\r\n    public static intersectBox(segOrigin: Vector2, segDirection: Vector2, segExtent: number, boxExtent: Vector2, result: Segment2Box2Intersect) {\r\n\r\n        Line2.intersectBox(segOrigin, segDirection, boxExtent, result);\r\n\r\n        if (result.intersect)\r\n        {\r\n            // The line containing the segment intersects the box; the\r\n            // t-interval is [t0,t1].  The segment intersects the box as\r\n            // long as [t0,t1] overlaps the segment t-interval\r\n            // [-segExtent,+segExtent].\r\n            const segInterval = [ -segExtent, segExtent ];\r\n\r\n            const iiResult = Intervals.staticQuery(result.parameter, segInterval);\r\n            result.intersect = iiResult.intersect;\r\n            result.numIntersections = iiResult.numIntersections;\r\n            result.parameter = iiResult.overlap;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否与线段相交\r\n     * @param segment\r\n     */\r\n    public intersectsSegment(segment: LineSegment2): boolean {\r\n\r\n        const segment0 = this;\r\n        const segment1 = segment;\r\n\r\n        const seg0Origin = _tempVec1;\r\n        const seg0Direction = _tempVec2;\r\n        const seg1Origin = _tempVec3;\r\n        const seg1Direction = _tempVec4;\r\n\r\n        const seg0Extent = segment0.getCenteredForm(seg0Origin, seg0Direction);\r\n        const seg1Extent = segment1.getCenteredForm(seg1Origin, seg1Direction);\r\n\r\n        const line0 = new Line2(seg0Origin, seg0Direction);\r\n        const line1 = new Line2(seg1Origin, seg1Direction);\r\n\r\n        const llResult = line0.intersectLine(line1);\r\n        if (llResult.numIntersections == 1)\r\n        {\r\n            // Test whether the line-line intersection is on the segments.\r\n            if (Math.abs(llResult.line0Parameter[0]) <= seg0Extent && Math.abs(llResult.line1Parameter[0]) <= seg1Extent) {\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        else if (llResult.numIntersections == Infinity)\r\n        {\r\n            // Compute the location of segment1 endpoints relative to\r\n            // segment0.\r\n            const diff = _tempVec5.subVectors(seg1Origin, seg0Origin);\r\n            const t = seg0Direction.dot(diff);\r\n\r\n            // Get the parameter intervals of the segments relative to\r\n            // segment0.\r\n            const interval0 = [ -seg0Extent, seg0Extent ];\r\n            const interval1 = [ t - seg1Extent, t + seg1Extent ];\r\n\r\n            // Compute the intersection of the intervals.\r\n            const iiResult = Intervals.staticQuery(interval0, interval1);\r\n            return iiResult.intersect;\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 与线段相交检测\r\n     * @param segment\r\n     */\r\n    public intersectSegment(segment: LineSegment2): Segment2Segment2Intersect {\r\n\r\n        const result = {\r\n            intersect: false,\r\n            numIntersections: 0,\r\n            segment0Parameter: new Array<number>(2),\r\n            segment1Parameter: new Array<number>(2),\r\n            point: new Array<Vector2>(2),\r\n        };\r\n\r\n        const segment0 = this;\r\n        const segment1 = segment;\r\n\r\n        const seg0Origin = _tempVec1;\r\n        const seg0Direction = _tempVec2;\r\n        const seg1Origin = _tempVec3;\r\n        const seg1Direction = _tempVec4;\r\n\r\n        const seg0Extent = segment0.getCenteredForm(seg0Origin, seg0Direction);\r\n        const seg1Extent = segment1.getCenteredForm(seg1Origin, seg1Direction);\r\n\r\n        const line0 = new Line2(seg0Origin, seg0Direction);\r\n        const line1 = new Line2(seg1Origin, seg1Direction);\r\n\r\n        const llResult = line0.intersectLine(line1);\r\n\r\n        if (llResult.numIntersections == 1)\r\n        {\r\n            // Test whether the line-line intersection is on the segments.\r\n            if (Math.abs(llResult.line0Parameter[0]) <= seg0Extent && Math.abs(llResult.line1Parameter[0]) <= seg1Extent)\r\n            {\r\n                result.intersect = true;\r\n                result.numIntersections = 1;\r\n                result.segment0Parameter[0] = llResult.line0Parameter[0];\r\n                result.segment1Parameter[0] = llResult.line1Parameter[0];\r\n                result.point[0] = llResult.point;\r\n            }\r\n            else\r\n            {\r\n                result.intersect = false;\r\n                result.numIntersections = 0;\r\n            }\r\n        }\r\n        else if (llResult.numIntersections == Infinity)\r\n        {\r\n            // Compute the location of segment1 endpoints relative to\r\n            // segment0.\r\n            const diff = _tempVec5.subVectors(seg1Origin, seg0Origin);\r\n            const t = seg0Direction.dot(diff);\r\n\r\n            // Get the parameter intervals of the segments relative to\r\n            // segment0.\r\n            const interval0 = [ -seg0Extent, seg0Extent ];\r\n            const interval1 = [ t - seg1Extent, t + seg1Extent ];\r\n\r\n            // Compute the intersection of the intervals.\r\n            const iiResult = Intervals.staticQuery(interval0, interval1);\r\n            if (iiResult.intersect)\r\n            {\r\n                result.intersect = true;\r\n                result.numIntersections = iiResult.numIntersections;\r\n                for (let i = 0; i < iiResult.numIntersections; ++i)\r\n                {\r\n                    result.segment0Parameter[i] = iiResult.overlap[i];\r\n                    result.segment1Parameter[i] = iiResult.overlap[i] - t;\r\n                    result.point[i] = new Vector2().copy(seg0Direction).multiplyScalar(result.segment0Parameter[i]).add(seg0Origin);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                result.intersect = false;\r\n                result.numIntersections = 0;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            result.intersect = false;\r\n            result.numIntersections = 0;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 是否相等\r\n     * @param segment\r\n     */\r\n    public equals(segment: LineSegment2): boolean {\r\n        return segment.start.equals(this.start) && segment.end.equals(this.end);\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @param slope\r\n * @param h0\r\n * @param h1\r\n */\r\nfunction getClampedRoot(slope: number, h0: number, h1: number): number {\r\n    let r;\r\n    if (h0 < 0) {\r\n        if (h1 > 0) {\r\n            r = -h0 / slope;\r\n            if (r > 1) {\r\n                r = 0.5;\r\n            }\r\n        }\r\n        else {\r\n            r = 1;\r\n        }\r\n    }\r\n    else {\r\n        r = 0;\r\n    }\r\n    return r;\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @param sValue\r\n * @param classify\r\n * @param edge\r\n * @param end\r\n */\r\nfunction computeIntersection(sValue: number[], classify: number[], edge: number[], end: number[][]) {\r\n\r\n    if (classify[0] < 0)\r\n    {\r\n        edge[0] = 0;\r\n        end[0][0] = 0;\r\n        end[0][1] = mF00 / mB;\r\n        if (end[0][1] < 0 || end[0][1] > 1)\r\n        {\r\n            end[0][1] = 0.5;\r\n        }\r\n\r\n        if (classify[1] == 0)\r\n        {\r\n            edge[1] = 3;\r\n            end[1][0] = sValue[1];\r\n            end[1][1] = 1;\r\n        }\r\n        else  // classify[1] > 0\r\n        {\r\n            edge[1] = 1;\r\n            end[1][0] = 1;\r\n            end[1][1] = mF10 / mB;\r\n            if (end[1][1] < 0 || end[1][1] > 1)\r\n            {\r\n                end[1][1] = 0.5;\r\n            }\r\n        }\r\n    }\r\n    else if (classify[0] == 0)\r\n    {\r\n        edge[0] = 2;\r\n        end[0][0] = sValue[0];\r\n        end[0][1] = 0;\r\n\r\n        if (classify[1] < 0)\r\n        {\r\n            edge[1] = 0;\r\n            end[1][0] = 0;\r\n            end[1][1] = mF00 / mB;\r\n            if (end[1][1] < 0 || end[1][1] > 1)\r\n            {\r\n                end[1][1] = 0.5;\r\n            }\r\n        }\r\n        else if (classify[1] == 0)\r\n        {\r\n            edge[1] = 3;\r\n            end[1][0] = sValue[1];\r\n            end[1][1] = 1;\r\n        }\r\n        else\r\n        {\r\n            edge[1] = 1;\r\n            end[1][0] = 1;\r\n            end[1][1] = mF10 / mB;\r\n            if (end[1][1] < 0 || end[1][1] > 1)\r\n            {\r\n                end[1][1] = 0.5;\r\n            }\r\n        }\r\n    }\r\n    else  // classify[0] > 0\r\n    {\r\n        edge[0] = 1;\r\n        end[0][0] = 1;\r\n        end[0][1] = mF10 / mB;\r\n        if (end[0][1] < 0 || end[0][1] > 1)\r\n        {\r\n            end[0][1] = 0.5;\r\n        }\r\n\r\n        if (classify[1] == 0)\r\n        {\r\n            edge[1] = 3;\r\n            end[1][0] = sValue[1];\r\n            end[1][1] = 1;\r\n        }\r\n        else\r\n        {\r\n            edge[1] = 0;\r\n            end[1][0] = 0;\r\n            end[1][1] = mF00 / mB;\r\n            if (end[1][1] < 0 || end[1][1] > 1)\r\n            {\r\n                end[1][1] = 0.5;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @param edge\r\n * @param end\r\n * @param parameter\r\n */\r\nfunction computeMinimumParameters(edge: number[], end: number[][], parameter: number[]) {\r\n\r\n    const delta = end[1][1] - end[0][1];\r\n    const h0 = delta * (-mB * end[0][0] + mC * end[0][1] - mE);\r\n    if (h0 >= 0)\r\n    {\r\n        if (edge[0] == 0)\r\n        {\r\n            parameter[0] = 0;\r\n            parameter[1] = getClampedRoot(mC, mG00, mG01);\r\n        }\r\n        else if (edge[0] == 1)\r\n        {\r\n            parameter[0] = 1;\r\n            parameter[1] = getClampedRoot(mC, mG10, mG11);\r\n        }\r\n        else\r\n        {\r\n            parameter[0] = end[0][0];\r\n            parameter[1] = end[0][1];\r\n        }\r\n    }\r\n    else\r\n    {\r\n        const h1 = delta * (-mB * end[1][0] + mC * end[1][1] - mE);\r\n        if (h1 <= 0)\r\n        {\r\n            if (edge[1] == 0)\r\n            {\r\n                parameter[0] = 0;\r\n                parameter[1] = getClampedRoot(mC, mG00, mG01);\r\n            }\r\n            else if (edge[1] == 1)\r\n            {\r\n                parameter[0] = 1;\r\n                parameter[1] = getClampedRoot(mC, mG10, mG11);\r\n            }\r\n            else\r\n            {\r\n                parameter[0] = end[1][0];\r\n                parameter[1] = end[1][1];\r\n            }\r\n        }\r\n        else  // h0 < 0 and h1 > 0\r\n        {\r\n            const z = Math.min(Math.max(h0 / (h0 - h1), 0), 1);\r\n            const omz = 1 - z;\r\n            parameter[0] = omz * end[0][0] + z * end[1][0];\r\n            parameter[1] = omz * end[0][1] + z * end[1][1];\r\n        }\r\n    }\r\n}\r\n",
        "import { DeepImmutable, FloatArray, int, Nullable } from \"../types\";\r\nimport { MathUtils } from \"./MathUtils\";\r\nimport { Vector2 } from \"./Vector2\";\r\n\r\ntype InMatrix2D = Matrix2D | DeepImmutable<Matrix2D>;\r\n\r\n/**\r\n * 2D矩阵分解结构\r\n * @category Math\r\n */\r\nexport interface Matrix2DDecompose {\r\n    x: number;\r\n    y: number;\r\n    scaleX: number;\r\n    scaleY: number;\r\n    skewX: number;\r\n    skewY: number;\r\n    rotation: number;\r\n}\r\n\r\n/**\r\n * 2D矩阵\r\n * @category Math\r\n */\r\nexport class Matrix2D {\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    private static _identityReadOnly = new Matrix2D() as DeepImmutable<Matrix2D>;\r\n\r\n    public a: number = 1;\r\n    public b: number = 0;\r\n    public c: number = 0;\r\n    public d: number = 1;\r\n    public tx: number = 0;\r\n    public ty: number = 0;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param elements\r\n     */\r\n    constructor(elements: FloatArray = []) {\r\n        if (elements.length > 0) {\r\n            this.fromArray(elements);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 单位矩阵\r\n     */\r\n    public static get identity(): DeepImmutable<Matrix2D> {\r\n        return Matrix2D._identityReadOnly;\r\n    }\r\n\r\n    /**\r\n     * 单位矩阵\r\n     */\r\n    public static get IDENTITY(): DeepImmutable<Matrix2D> {\r\n        return Matrix2D._identityReadOnly;\r\n    }\r\n\r\n    /**\r\n     * 设置矩阵参数\r\n     * @param a\r\n     * @param b\r\n     * @param c\r\n     * @param d\r\n     * @param tx\r\n     * @param ty\r\n     */\r\n    public setValues(a: Nullable<number>, b: number, c: number, d: Nullable<number>, tx: number, ty: number): Matrix2D {\r\n        this.a = (a == null) ? 1 : a;\r\n        this.b = b || 0;\r\n        this.c = c || 0;\r\n        this.d = (d == null) ? 1 : d;\r\n        this.tx = tx || 0;\r\n        this.ty = ty || 0;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 乘以矩阵分量\r\n     * @param a\r\n     * @param b\r\n     * @param c\r\n     * @param d\r\n     * @param tx\r\n     * @param ty\r\n     */\r\n    public append(a: number, b: number, c: number, d: number, tx: number, ty: number): Matrix2D {\r\n        const a1 = this.a;\r\n        const b1 = this.b;\r\n        const c1 = this.c;\r\n        const d1 = this.d;\r\n        if (a != 1 || b != 0 || c != 0 || d != 1) {\r\n            this.a = a1 * a + c1 * b;\r\n            this.b = b1 * a + d1 * b;\r\n            this.c = a1 * c + c1 * d;\r\n            this.d = b1 * c + d1 * d;\r\n        }\r\n        this.tx = a1 * tx + c1 * ty + this.tx;\r\n        this.ty = b1 * tx + d1 * ty + this.ty;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 被矩阵分量相乘\r\n     * @param a\r\n     * @param b\r\n     * @param c\r\n     * @param d\r\n     * @param tx\r\n     * @param ty\r\n     */\r\n    public prepend(a: number, b: number, c: number, d: number, tx: number, ty: number): Matrix2D {\r\n        const a1 = this.a;\r\n        const c1 = this.c;\r\n        const tx1 = this.tx;\r\n\r\n        this.a = a * a1 + c * this.b;\r\n        this.b = b * a1 + d * this.b;\r\n        this.c = a * c1 + c * this.d;\r\n        this.d = b * c1 + d * this.d;\r\n        this.tx = a * tx1 + c * this.ty + tx;\r\n        this.ty = b * tx1 + d * this.ty + ty;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取组件值\r\n     * @param index\r\n     */\r\n    public getComponent(index: int): number {\r\n        switch (index) {\r\n            case 0: return this.a;\r\n            case 1: return this.b;\r\n            case 2: return this.c;\r\n            case 3: return this.d;\r\n            case 4: return this.tx;\r\n            case 5: return this.ty;\r\n            default: return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置组件值\r\n     * @param index\r\n     * @param value\r\n     */\r\n    public setComponent(index: int, value: number): Matrix2D {\r\n        switch (index) {\r\n            case 0: this.a = value; break;\r\n            case 1: this.b = value; break;\r\n            case 2: this.c = value; break;\r\n            case 3: this.d = value; break;\r\n            case 4: this.tx = value; break;\r\n            case 5: this.ty = value; break;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 乘以矩阵\r\n     * @param matrix\r\n     */\r\n    public appendMatrix(matrix: InMatrix2D): Matrix2D {\r\n        return this.append(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\r\n    }\r\n\r\n    /**\r\n     * 被矩阵相乘\r\n     * @param matrix\r\n     */\r\n    public prependMatrix(matrix: InMatrix2D): Matrix2D {\r\n        return this.prepend(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\r\n    }\r\n\r\n    /**\r\n     * 附加变换\r\n     * @param x\r\n     * @param y\r\n     * @param scaleX\r\n     * @param scaleY\r\n     * @param rotation\r\n     * @param skewX\r\n     * @param skewY\r\n     * @param regX\r\n     * @param regY\r\n     */\r\n    public appendTransform(x: number, y: number, scaleX: number, scaleY: number, rotation: number, skewX: number, skewY: number, regX: number, regY: number): Matrix2D {\r\n\r\n        let cos;\r\n        let sin;\r\n\r\n        if (rotation % 360) {\r\n            const r = rotation * MathUtils.DEG2RAD;\r\n            cos = Math.cos(r);\r\n            sin = Math.sin(r);\r\n        } else {\r\n            cos = 1;\r\n            sin = 0;\r\n        }\r\n\r\n        if (skewX || skewY) {\r\n            skewX *= MathUtils.DEG2RAD;\r\n            skewY *= MathUtils.DEG2RAD;\r\n            this.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\r\n            this.append(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, 0, 0);\r\n        } else {\r\n            this.append(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, x, y);\r\n        }\r\n\r\n        if (regX || regY) {\r\n            this.tx -= regX * this.a + regY * this.c;\r\n            this.ty -= regX * this.b + regY * this.d;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 预先变换\r\n     * @param x\r\n     * @param y\r\n     * @param scaleX\r\n     * @param scaleY\r\n     * @param rotation\r\n     * @param skewX\r\n     * @param skewY\r\n     * @param regX\r\n     * @param regY\r\n     */\r\n    public prependTransform(x: number, y: number, scaleX: number, scaleY: number, rotation: number, skewX: number, skewY: number, regX: number, regY: number): Matrix2D {\r\n\r\n        let cos;\r\n        let sin;\r\n\r\n        if (rotation % 360) {\r\n            const r = rotation * MathUtils.DEG2RAD;\r\n            cos = Math.cos(r);\r\n            sin = Math.sin(r);\r\n        } else {\r\n            cos = 1;\r\n            sin = 0;\r\n        }\r\n\r\n        if (regX || regY) {\r\n            this.tx -= regX; this.ty -= regY;\r\n        }\r\n        if (skewX || skewY) {\r\n            skewX *= MathUtils.DEG2RAD;\r\n            skewY *= MathUtils.DEG2RAD;\r\n            this.prepend(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, 0, 0);\r\n            this.prepend(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\r\n        } else {\r\n            this.prepend(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, x, y);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 旋转\r\n     * @param angle\r\n     */\r\n    public rotate(angle: number): Matrix2D {\r\n        angle = angle * MathUtils.DEG2RAD;\r\n        const cos = Math.cos(angle);\r\n        const sin = Math.sin(angle);\r\n\r\n        const a1 = this.a;\r\n        const b1 = this.b;\r\n\r\n        this.a = a1 * cos + this.c * sin;\r\n        this.b = b1 * cos + this.d * sin;\r\n        this.c = -a1 * sin + this.c * cos;\r\n        this.d = -b1 * sin + this.d * cos;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 挫切\r\n     * @param skewX\r\n     * @param skewY\r\n     */\r\n    public skew(skewX: number, skewY: number): Matrix2D {\r\n        skewX = skewX * MathUtils.DEG2RAD;\r\n        skewY = skewY * MathUtils.DEG2RAD;\r\n        this.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), 0, 0);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 缩放\r\n     * @param x\r\n     * @param y\r\n     */\r\n    public scale(x: number, y: number): Matrix2D {\r\n        this.a *= x;\r\n        this.b *= x;\r\n        this.c *= y;\r\n        this.d *= y;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 平移\r\n     * @param x\r\n     * @param y\r\n     */\r\n    public translate(x: number, y: number): Matrix2D {\r\n        this.tx += this.a * x + this.c * y;\r\n        this.ty += this.b * x + this.d * y;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 单位矩阵\r\n     */\r\n    public identity(): Matrix2D {\r\n        this.a = this.d = 1;\r\n        this.b = this.c = this.tx = this.ty = 0;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 逆矩阵\r\n     */\r\n    public invert(): Matrix2D {\r\n        const a1 = this.a;\r\n        const b1 = this.b;\r\n        const c1 = this.c;\r\n        const d1 = this.d;\r\n        const tx1 = this.tx;\r\n        const n = a1 * d1 - b1 * c1;\r\n\r\n        this.a = d1 / n;\r\n        this.b = -b1 / n;\r\n        this.c = -c1 / n;\r\n        this.d = a1 / n;\r\n        this.tx = (c1 * this.ty - d1 * tx1) / n;\r\n        this.ty = -(a1 * this.ty - b1 * tx1) / n;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 是否单位矩阵\r\n     */\r\n    public isIdentity(): boolean {\r\n        return this.tx == 0 && this.ty == 0 && this.a == 1 && this.b == 0 && this.c == 0 && this.d == 1;\r\n    }\r\n\r\n    /**\r\n     * 变换坐标XY\r\n     * @param x\r\n     * @param y\r\n     * @param newPos\r\n     */\r\n    public applyXY(x: number, y: number, newPos = new Vector2()): Vector2 {\r\n        newPos.x = (this.a * x) + (this.c * y) + this.tx;\r\n        newPos.y = (this.b * x) + (this.d * y) + this.ty;\r\n        return newPos;\r\n    }\r\n\r\n    /**\r\n     * 变换坐标Vector2\r\n     * @param pos\r\n     * @param newPos\r\n     */\r\n    public apply(pos: Vector2, newPos = new Vector2()): Vector2 {\r\n        const x = pos.x;\r\n        const y = pos.y;\r\n        newPos.x = (this.a * x) + (this.c * y) + this.tx;\r\n        newPos.y = (this.b * x) + (this.d * y) + this.ty;\r\n        return newPos;\r\n    }\r\n\r\n    /**\r\n     * 反向变换坐标XY\r\n     * @param x\r\n     * @param y\r\n     * @param newPos\r\n     */\r\n    public applyInverseXY(x: number, y: number, newPos = new Vector2()): Vector2 {\r\n\r\n        const id = 1 / ((this.a * this.d) + (this.c * -this.b));\r\n\r\n        newPos.x = (this.d * id * x) + (-this.c * id * y) + (((this.ty * this.c) - (this.tx * this.d)) * id);\r\n        newPos.y = (this.a * id * y) + (-this.b * id * x) + (((-this.ty * this.a) + (this.tx * this.b)) * id);\r\n\r\n        return newPos;\r\n    }\r\n\r\n    /**\r\n     * 反向变换坐标Vector2\r\n     * @param pos\r\n     * @param newPos\r\n     */\r\n    public applyInverse(pos: Vector2, newPos = new Vector2()): Vector2 {\r\n\r\n        const id = 1 / ((this.a * this.d) + (this.c * -this.b));\r\n\r\n        const x = pos.x;\r\n        const y = pos.y;\r\n        newPos.x = (this.d * id * x) + (-this.c * id * y) + (((this.ty * this.c) - (this.tx * this.d)) * id);\r\n        newPos.y = (this.a * id * y) + (-this.b * id * x) + (((-this.ty * this.a) + (this.tx * this.b)) * id);\r\n\r\n        return newPos;\r\n    }\r\n\r\n    /**\r\n     * 是否相等\r\n     * @param matrix\r\n     */\r\n    public equals(matrix: InMatrix2D): boolean {\r\n        return this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c && this.d == matrix.d;\r\n    }\r\n\r\n    /**\r\n     * 分解矩阵\r\n     * @param target\r\n     */\r\n    public decompose(target: Matrix2DDecompose = {\r\n        x: 0,\r\n        y: 0,\r\n        scaleX: 0,\r\n        scaleY: 0,\r\n        skewX: 0,\r\n        skewY: 0,\r\n        rotation: 0\r\n    }): Matrix2DDecompose {\r\n\r\n        target.x = this.tx;\r\n        target.y = this.ty;\r\n        target.scaleX = Math.sqrt(this.a * this.a + this.b * this.b);\r\n        target.scaleY = Math.sqrt(this.c * this.c + this.d * this.d);\r\n        target.rotation = 0;\r\n\r\n        const skewX = Math.atan2(-this.c, this.d);\r\n        const skewY = Math.atan2(this.b, this.a);\r\n\r\n        const delta = Math.abs(1 - skewX / skewY);\r\n        if (delta < 0.00001) { // effectively identical, can use rotation:\r\n            target.rotation = skewY / MathUtils.DEG2RAD;\r\n            if (this.a < 0 && this.d >= 0) {\r\n                target.rotation += (target.rotation <= 0) ? 180 : -180;\r\n            }\r\n            target.skewX = target.skewY = 0;\r\n        } else {\r\n            target.skewX = skewX / MathUtils.DEG2RAD;\r\n            target.skewY = skewY / MathUtils.DEG2RAD;\r\n        }\r\n        return target;\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param matrix\r\n     */\r\n    public copy(matrix: InMatrix2D): Matrix2D {\r\n        return this.setValues(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): Matrix2D {\r\n        return new Matrix2D([this.a, this.b, this.c, this.d, this.tx, this.ty]);\r\n    }\r\n\r\n    /**\r\n     * 从数组复制\r\n     * @param array\r\n     * @param offset\r\n     */\r\n    public fromArray(array: FloatArray, offset: number = 0): Matrix2D {\r\n\r\n        this.a = array[offset];\r\n        this.b = array[1 + offset];\r\n        this.c = array[2 + offset];\r\n        this.d = array[3 + offset];\r\n\r\n        this.tx = array[4 + offset];\r\n        this.ty = array[5 + offset];\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 复制到数据\r\n     * @param array\r\n     * @param offset\r\n     */\r\n    public toArray(array: FloatArray = [], offset: number = 0): FloatArray {\r\n\r\n        array[offset] = this.a;\r\n        array[offset + 1] = this.b;\r\n        array[offset + 2] = this.c;\r\n        array[offset + 3] = this.d;\r\n\r\n        array[offset + 4] = this.tx;\r\n        array[offset + 5] = this.ty;\r\n\r\n        return array;\r\n    }\r\n}\r\n",
        "import { Matrix3 } from \"./Matrix3\";\r\nimport { Vector3 } from \"./Vector3\";\r\nimport { Vector2 } from \"./Vector2\";\r\nimport { Nullable } from \"../types\";\r\nimport { Sphere } from \"./Sphere\";\r\nimport { Box3 } from \"./Box3\";\r\nimport { Quaternion } from \"./Quaternion\";\r\nimport { LCPSolver } from \"./Algorithm/LCPSolver\";\r\nimport { OBBOBBDistance } from \"./InterfaceType/DistanceResult\";\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec1 = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec2 = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec3 = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec4 = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec5 = new Vector3();\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst _tempQuat1 = new Quaternion();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempQuat2 = new Quaternion();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempQuat3 = new Quaternion();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempMat3 = new Matrix3();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempArray1 = new Array<number>(3);\r\n/**\r\n * @ignore\r\n */\r\nconst _tempArray2 = new Array<number>(3);\r\n\r\n/**\r\n * OBB包围盒\r\n * @category Math\r\n */\r\nexport class OBB {\r\n    public matrix3: Matrix3;\r\n    public center: Vector3;\r\n    public extent: Vector3;\r\n    public axis: Vector3[];\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param center\r\n     * @param matrix3\r\n     * @param extent\r\n     */\r\n    constructor(center: Nullable<Vector3> = null, matrix3: Nullable<Matrix3> = null, extent: Nullable<Vector3> = null) {\r\n        this.matrix3 = new Matrix3();\r\n        this.center = new Vector3();\r\n        this.extent = new Vector3();\r\n\r\n        if (center) {\r\n            this.center.copy(center);\r\n        }\r\n        if (matrix3) {\r\n            this.matrix3.copy(matrix3);\r\n        }\r\n\r\n        const x = this.matrix3.getX();\r\n        const y = this.matrix3.getY();\r\n        const z = this.matrix3.getZ();\r\n\r\n        if (extent) {\r\n            this.extent.copy(extent);\r\n        }\r\n        else {\r\n            this.extent.set(x.length(), y.length(), z.length());\r\n        }\r\n\r\n        this.axis = [x.normalize(), y.normalize(), z.normalize()];\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): OBB {\r\n        return new OBB().copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param box\r\n     */\r\n    public copy(box: OBB): OBB {\r\n        this.matrix3.copy(box.matrix3);\r\n        this.center.copy(box.center);\r\n        this.extent.copy(box.extent);\r\n        this.axis[0].copy(box.axis[0]);\r\n        this.axis[1].copy(box.axis[1]);\r\n        this.axis[2].copy(box.axis[2]);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置OBB\r\n     * @param center\r\n     * @param matrix3\r\n     * @param extent\r\n     */\r\n    public set(center: Vector3, matrix3: Matrix3, extent: Nullable<Vector3>): OBB {\r\n        this.matrix3.copy(matrix3);\r\n        this.center.copy(center);\r\n\r\n        const x = this.matrix3.getX();\r\n        const y = this.matrix3.getY();\r\n        const z = this.matrix3.getZ();\r\n\r\n        if (extent) {\r\n            this.extent.copy(extent);\r\n        }\r\n        else {\r\n            this.extent.set(x.length(), y.length(), z.length());\r\n        }\r\n\r\n        this.axis = [x.normalize(), y.normalize(), z.normalize()];\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 重置为空\r\n     */\r\n    public makeEmpty(): OBB {\r\n        this.matrix3.identity();\r\n        this.center.set(0, 0, 0);\r\n        this.extent.set(0, 0, 0);\r\n        this.axis.forEach((vec) => vec.set(0, 0, 0));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取中点\r\n     * @param target\r\n     */\r\n    public getCenter(target = new Vector3()): Vector3 {\r\n\r\n        target.copy(this.center);\r\n\r\n        return target;\r\n    }\r\n\r\n    /**\r\n     * 获取尺寸\r\n     * @param target\r\n     */\r\n    public getExtent(target = new Vector3()): Vector3 {\r\n\r\n        target.copy(this.extent);\r\n\r\n        return target;\r\n    }\r\n\r\n    /**\r\n     * 获取包围球\r\n     * @param result\r\n     */\r\n    public getBoundingSphere(result = new Sphere()): Sphere {\r\n\r\n        const halfAxes = this.matrix3;\r\n        const u = halfAxes.getColumn(0);\r\n        const v = halfAxes.getColumn(1);\r\n        const w = halfAxes.getColumn(2);\r\n\r\n        u.add(v);\r\n        u.add(w);\r\n\r\n        result.center = this.center.clone();\r\n        result.radius = u.length();\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 获取Box3\r\n     * @param box\r\n     */\r\n    public getBoundingBox(box = new Box3()): Box3 {\r\n        return box.setFromCenterAndSize(this.center, this.extent);\r\n    }\r\n\r\n    /**\r\n     * 坐标轴投影到OBB\r\n     * @param axis\r\n     * @param minmax\r\n     */\r\n    public axisProjectionMinMax(axis: Vector3, minmax: Vector2 = new Vector2()): Vector2 {\r\n\r\n        const origin = axis.dot(this.center);\r\n        const maximumExtent =\r\n            Math.abs(this.extent.x * axis.dot(this.axis[0])) +\r\n            Math.abs(this.extent.y * axis.dot(this.axis[1])) +\r\n            Math.abs(this.extent.z * axis.dot(this.axis[2]));\r\n\r\n        minmax.x = origin - maximumExtent;\r\n        minmax.y = origin + maximumExtent;\r\n        return minmax;\r\n    }\r\n\r\n    /**\r\n     * 合并OBB\r\n     * @param obb\r\n     */\r\n    public union(obb: OBB): OBB {\r\n        let center = _tempVec1.copy(this.center).add(obb.center).multiplyScalar(0.5);\r\n        let axis = [];\r\n        let extent = [];\r\n\r\n        let rot0 = new Matrix3();\r\n        let rot1 = new Matrix3();\r\n\r\n        rot0.setColumn(0, this.axis[0]);\r\n        rot0.setColumn(1, this.axis[1]);\r\n        rot0.setColumn(2, this.axis[2]);\r\n\r\n        rot1.setColumn(0, obb.axis[0]);\r\n        rot1.setColumn(1, obb.axis[1]);\r\n        rot1.setColumn(2, obb.axis[2]);\r\n\r\n        let q0 = _tempQuat1.setFromRotationMatrix(rot0);\r\n        let q1 = _tempQuat2.setFromRotationMatrix(rot1);\r\n        if (q0.dot(q1) < 0) {\r\n            q1.inverse();\r\n        }\r\n\r\n        let q = _tempQuat3.addQuaternions(q0, q1);\r\n        q.normalize();\r\n\r\n        let rot = _tempMat3.makeRotationFromQuaternion(q);\r\n        for (let j = 0; j < 3; ++j) {\r\n            axis[j] = rot.getColumn(j);\r\n        }\r\n\r\n        let points: Vector3[] = [];\r\n        let pmin = [0, 0, 0];\r\n        let pmax = [0, 0, 0];\r\n\r\n        this._getPoints(points);\r\n        for (let i = 0; i < 8; ++i) {\r\n            let diff = _tempVec2.subVectors(points[i], center);\r\n            for (let j = 0; j < 3; ++j) {\r\n                let dot = diff.dot(axis[j]);\r\n                if (dot > pmax[j]) {\r\n                    pmax[j] = dot;\r\n                }\r\n                else if (dot < pmin[j]) {\r\n                    pmin[j] = dot;\r\n                }\r\n            }\r\n        }\r\n\r\n        obb._getPoints(points);\r\n        for (let i = 0; i < 8; ++i) {\r\n            let diff = new Vector3().subVectors(points[i], center);\r\n            for (let j = 0; j < 3; ++j) {\r\n                let dot = diff.dot(axis[j]);\r\n                if (dot > pmax[j]) {\r\n                    pmax[j] = dot;\r\n                }\r\n                else if (dot < pmin[j]) {\r\n                    pmin[j] = dot;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = 0; j < 3; ++j) {\r\n            center.add(_tempVec3.copy(axis[j]).multiplyScalar(0.5 * (pmax[j] + pmin[j])));\r\n            extent[j] = 0.5 * (pmax[j] - pmin[j]);\r\n        }\r\n\r\n        this.axis = axis;\r\n        this.center.copy(center);\r\n        this.extent.set(extent[0], extent[1], extent[2]);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 是否包含点\r\n     * @param point\r\n     */\r\n    public containsPoint(point: Vector3): boolean {\r\n        const diff = _tempVec1.copy(point).sub(this.center);\r\n        for (let i = 0; i < 3; ++i) {\r\n            let coeff = diff.dot(this.axis[i]);\r\n            if (Math.abs(coeff) > this.extent.p[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 到坐标点的SQ距离\r\n     * @param point\r\n     * @param closestPoint\r\n     */\r\n    public distanceSqToPoint(point: Vector3, closestPoint: Nullable<Vector3> = null): number {\r\n\r\n        const boxExtent = this.extent;\r\n        const diff = _tempVec1.subVectors(point, this.center);\r\n        const closest = _tempVec2;\r\n        for (let i = 0; i < 3; ++i) {\r\n            closest.p[i] =  diff.dot(this.axis[i]);\r\n        }\r\n\r\n        let sqDistance = 0;\r\n\r\n        for (let i = 0; i < 3; ++i) {\r\n            if (closest.p[i] < -boxExtent.p[i]) {\r\n                const delta = closest.p[i] + boxExtent.p[i];\r\n                sqDistance += delta * delta;\r\n                closest.p[i] =  -boxExtent.p[i];\r\n            }\r\n            else if (closest.p[i] > boxExtent.p[i]) {\r\n                const delta = closest.p[i] - boxExtent.p[i];\r\n                sqDistance += delta * delta;\r\n                closest.p[i] =  boxExtent.p[i];\r\n            }\r\n        }\r\n\r\n        if (closestPoint) {\r\n            closestPoint.copy(this.center);\r\n\r\n            for (let i = 0; i < 3; ++i) {\r\n                closestPoint.add(_tempVec3.copy(this.axis[i]).multiplyScalar(closest.p[i]));\r\n            }\r\n        }\r\n\r\n        return sqDistance;\r\n    }\r\n\r\n    /**\r\n     * 到坐标点的距离\r\n     * @param point\r\n     * @param closestPoint\r\n     */\r\n    public distanceToPoint(point: Vector3, closestPoint: Nullable<Vector3> = null): number {\r\n        return Math.sqrt(this.distanceSqToPoint(point, closestPoint));\r\n    }\r\n\r\n    /**\r\n     * 到OBB的SQ距离\r\n     * @param box\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceSqToOBB(box: OBB, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<OBBOBBDistance> = null): number {\r\n\r\n        const box0 = this;\r\n        const box1 = box;\r\n\r\n        let delta = _tempVec1.subVectors(box1.center, box0.center);\r\n        for (let i = 0; i < 3; ++i) {\r\n            delta.add(_tempVec2.copy(box0.axis[i]).multiplyScalar(box0.extent.p[i]));\r\n            delta.sub(_tempVec3.copy(box1.axis[i]).multiplyScalar(box1.extent.p[i]));\r\n        }\r\n\r\n        const R0Delta = _tempVec2;\r\n        const R1Delta = _tempVec3;\r\n        for (let i = 0; i < 3; ++i) {\r\n            R0Delta.p[i] =  box0.axis[i].dot(delta);\r\n            R1Delta.p[i] =  box1.axis[i].dot(delta);\r\n        }\r\n\r\n        const R0TR1: number[][] = [[], [], []];\r\n        for (let r = 0; r < 3; ++r) {\r\n            for (let c = 0; c < 3; ++c) {\r\n                R0TR1[r][c] = box0.axis[r].dot(box1.axis[c]);\r\n            }\r\n        }\r\n\r\n        const twoExtent0 = _tempVec4.copy(box0.extent).multiplyScalar(2);\r\n        const twoExtent1 = _tempVec5.copy(box1.extent).multiplyScalar(2);\r\n\r\n        const q = [\r\n            -R0Delta.x, -R0Delta.y, -R0Delta.z,\r\n            R1Delta.x, R1Delta.y, R1Delta.z,\r\n            twoExtent0.x, twoExtent0.y, twoExtent0.z,\r\n            twoExtent1.x, twoExtent1.y, twoExtent1.z\r\n        ];\r\n\r\n        const z = 0;\r\n        const p = 1;\r\n        const m = -1;\r\n        const M = [\r\n            [p, z, z, -R0TR1[0][0], -R0TR1[0][1], -R0TR1[0][2], p, z, z, z, z, z],\r\n            [z, p, z, -R0TR1[1][0], -R0TR1[1][1], -R0TR1[1][2], z, p, z, z, z, z],\r\n            [z, z, p, -R0TR1[2][0], -R0TR1[2][1], -R0TR1[2][2], z, z, p, z, z, z],\r\n            [-R0TR1[0][0], -R0TR1[1][0], -R0TR1[2][0], p, z, z, z, z, z, p, z, z],\r\n            [-R0TR1[0][1], -R0TR1[1][1], -R0TR1[2][1], z, p, z, z, z, z, z, p, z],\r\n            [-R0TR1[0][2], -R0TR1[1][2], -R0TR1[2][2], z, z, p, z, z, z, z, z, p],\r\n            [m, z, z, z, z, z, z, z, z, z, z, z],\r\n            [z, m, z, z, z, z, z, z, z, z, z, z],\r\n            [z, z, m, z, z, z, z, z, z, z, z, z],\r\n            [z, z, z, m, z, z, z, z, z, z, z, z],\r\n            [z, z, z, z, m, z, z, z, z, z, z, z],\r\n            [z, z, z, z, z, m, z, z, z, z, z, z],\r\n        ];\r\n\r\n        const w = new Array<number>(12);\r\n        const zz = new Array<number>(12);\r\n\r\n        const mLCP = new LCPSolver(12);\r\n        if (mLCP.solve(q, M, w, zz)) {\r\n\r\n            if (parameter) {\r\n                parameter.queryIsSuccessful = true;\r\n                parameter.numLCPIterations = mLCP.getNumIterations();\r\n            }\r\n\r\n            _tempVec1.copy(box0.center);\r\n            for (let i = 0; i < 3; ++i) {\r\n                const boxParameter = zz[i] - box0.extent.p[i];\r\n                if (parameter) {\r\n                    parameter.box0Parameter[i] = boxParameter;\r\n                }\r\n                _tempVec1.add(_tempVec3.copy(box0.axis[i]).multiplyScalar(boxParameter));\r\n            }\r\n\r\n            _tempVec2.copy(box1.center);\r\n            for (let i = 0, j = 3; i < 3; ++i, ++j) {\r\n                const boxParameter = zz[j] - box1.extent.p[i];\r\n                if (parameter) {\r\n                    parameter.box1Parameter[i] = boxParameter;\r\n                }\r\n                _tempVec2.add(_tempVec3.copy(box1.axis[i]).multiplyScalar(boxParameter));\r\n            }\r\n\r\n            if (closestPoint0) {\r\n                closestPoint0.copy(_tempVec1);\r\n            }\r\n            if (closestPoint1) {\r\n                closestPoint1.copy(_tempVec2);\r\n            }\r\n\r\n            const diff = _tempVec3.subVectors(_tempVec2, _tempVec1);\r\n            return diff.dot(diff);\r\n\r\n        }\r\n        else {\r\n            if (parameter) {\r\n                parameter.queryIsSuccessful = false;\r\n                parameter.numLCPIterations = 0;\r\n            }\r\n        }\r\n\r\n        return NaN;\r\n    }\r\n\r\n    /**\r\n     * 到OBB的距离\r\n     * @param box\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceToOBB(box: OBB, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<OBBOBBDistance> = null): number {\r\n        return Math.sqrt(this.distanceSqToOBB(box, closestPoint0, closestPoint1, parameter));\r\n    }\r\n\r\n    /**\r\n     * 是否与OBB相交\r\n     * @param box\r\n     */\r\n    public intersectsOBB(box: OBB): boolean {\r\n\r\n        let C0 = this.center;\r\n        let A0 = this.axis;\r\n        let E0 = this.extent.toArray(_tempArray1);\r\n\r\n        let C1 = box.center;\r\n        let A1 = box.axis;\r\n        let E1 = box.extent.toArray(_tempArray2);\r\n\r\n        let cutoff = 1;\r\n        let existsParallelPair = false;\r\n\r\n        // Compute difference of box centers.\r\n        let D = _tempVec1.subVectors(C1, C0);\r\n\r\n        let dot01: number[][] = [[], [], []];       // dot01[i][j] = Dot(A0[i],A1[j]) = A1[j][i]\r\n        let absDot01: number[][] = [[], [], []];    // |dot01[i][j]|\r\n        let dotDA0 = [];                            // Dot(D, A0[i])\r\n        let r0; let r1; let r;                      // interval radii and distance between centers\r\n        let r01;                                    // r0 + r1\r\n\r\n        // Test for separation on the axis C0 + t*A0[0].\r\n        for (let i = 0; i < 3; ++i) {\r\n            dot01[0][i] = A0[0].dot(A1[i]);\r\n            absDot01[0][i] = Math.abs(dot01[0][i]);\r\n            if (absDot01[0][i] > cutoff) {\r\n                existsParallelPair = true;\r\n            }\r\n        }\r\n        dotDA0[0] = D.dot(A0[0]);\r\n        r = Math.abs(dotDA0[0]);\r\n        r1 = E1[0] * absDot01[0][0] + E1[1] * absDot01[0][1] + E1[2] * absDot01[0][2];\r\n        r01 = E0[0] + r1;\r\n        if (r > r01) {\r\n            return false;\r\n        }\r\n\r\n        // Test for separation on the axis C0 + t*A0[1].\r\n        for (let i = 0; i < 3; ++i) {\r\n            dot01[1][i] = A0[1].dot(A1[i]);\r\n            absDot01[1][i] = Math.abs(dot01[1][i]);\r\n            if (absDot01[1][i] > cutoff) {\r\n                existsParallelPair = true;\r\n            }\r\n        }\r\n        dotDA0[1] = D.dot(A0[1]);\r\n        r = Math.abs(dotDA0[1]);\r\n        r1 = E1[0] * absDot01[1][0] + E1[1] * absDot01[1][1] + E1[2] * absDot01[1][2];\r\n        r01 = E0[1] + r1;\r\n        if (r > r01) {\r\n            return false;\r\n        }\r\n\r\n        // Test for separation on the axis C0 + t*A0[2].\r\n        for (let i = 0; i < 3; ++i) {\r\n            dot01[2][i] = A0[2].dot(A1[i]);\r\n            absDot01[2][i] = Math.abs(dot01[2][i]);\r\n            if (absDot01[2][i] > cutoff) {\r\n                existsParallelPair = true;\r\n            }\r\n        }\r\n        dotDA0[2] = D.dot(A0[2]);\r\n        r = Math.abs(dotDA0[2]);\r\n        r1 = E1[0] * absDot01[2][0] + E1[1] * absDot01[2][1] + E1[2] * absDot01[2][2];\r\n        r01 = E0[2] + r1;\r\n        if (r > r01) {\r\n            return false;\r\n        }\r\n\r\n        // Test for separation on the axis C0 + t*A1[0].\r\n        r = Math.abs(D.dot(A1[0]));\r\n        r0 = E0[0] * absDot01[0][0] + E0[1] * absDot01[1][0] + E0[2] * absDot01[2][0];\r\n        r01 = r0 + E1[0];\r\n        if (r > r01) {\r\n            return false;\r\n        }\r\n\r\n        // Test for separation on the axis C0 + t*A1[1].\r\n        r = Math.abs(D.dot(A1[1]));\r\n        r0 = E0[0] * absDot01[0][1] + E0[1] * absDot01[1][1] + E0[2] * absDot01[2][1];\r\n        r01 = r0 + E1[1];\r\n        if (r > r01) {\r\n            return false;\r\n        }\r\n\r\n        // Test for separation on the axis C0 + t*A1[2].\r\n        r = Math.abs(D.dot(A1[2]));\r\n        r0 = E0[0] * absDot01[0][2] + E0[1] * absDot01[1][2] + E0[2] * absDot01[2][2];\r\n        r01 = r0 + E1[2];\r\n        if (r > r01) {\r\n            return false;\r\n        }\r\n\r\n        // At least one pair of box axes was parallel, so the separation is\r\n        // effectively in 2D.  The edge-edge axes do not need to be tested.\r\n        if (existsParallelPair) {\r\n            return true;\r\n        }\r\n\r\n        // Test for separation on the axis C0 + t*A0[0]xA1[0].\r\n        r = Math.abs(dotDA0[2] * dot01[1][0] - dotDA0[1] * dot01[2][0]);\r\n        r0 = E0[1] * absDot01[2][0] + E0[2] * absDot01[1][0];\r\n        r1 = E1[1] * absDot01[0][2] + E1[2] * absDot01[0][1];\r\n        r01 = r0 + r1;\r\n        if (r > r01) {\r\n            return false;\r\n        }\r\n\r\n        // Test for separation on the axis C0 + t*A0[0]xA1[1].\r\n        r = Math.abs(dotDA0[2] * dot01[1][1] - dotDA0[1] * dot01[2][1]);\r\n        r0 = E0[1] * absDot01[2][1] + E0[2] * absDot01[1][1];\r\n        r1 = E1[0] * absDot01[0][2] + E1[2] * absDot01[0][0];\r\n        r01 = r0 + r1;\r\n        if (r > r01) {\r\n            return false;\r\n        }\r\n\r\n        // Test for separation on the axis C0 + t*A0[0]xA1[2].\r\n        r = Math.abs(dotDA0[2] * dot01[1][2] - dotDA0[1] * dot01[2][2]);\r\n        r0 = E0[1] * absDot01[2][2] + E0[2] * absDot01[1][2];\r\n        r1 = E1[0] * absDot01[0][1] + E1[1] * absDot01[0][0];\r\n        r01 = r0 + r1;\r\n        if (r > r01) {\r\n            return false;\r\n        }\r\n\r\n        // Test for separation on the axis C0 + t*A0[1]xA1[0].\r\n        r = Math.abs(dotDA0[0] * dot01[2][0] - dotDA0[2] * dot01[0][0]);\r\n        r0 = E0[0] * absDot01[2][0] + E0[2] * absDot01[0][0];\r\n        r1 = E1[1] * absDot01[1][2] + E1[2] * absDot01[1][1];\r\n        r01 = r0 + r1;\r\n        if (r > r01) {\r\n            return false;\r\n        }\r\n\r\n        // Test for separation on the axis C0 + t*A0[1]xA1[1].\r\n        r = Math.abs(dotDA0[0] * dot01[2][1] - dotDA0[2] * dot01[0][1]);\r\n        r0 = E0[0] * absDot01[2][1] + E0[2] * absDot01[0][1];\r\n        r1 = E1[0] * absDot01[1][2] + E1[2] * absDot01[1][0];\r\n        r01 = r0 + r1;\r\n        if (r > r01) {\r\n            return false;\r\n        }\r\n\r\n        // Test for separation on the axis C0 + t*A0[1]xA1[2].\r\n        r = Math.abs(dotDA0[0] * dot01[2][2] - dotDA0[2] * dot01[0][2]);\r\n        r0 = E0[0] * absDot01[2][2] + E0[2] * absDot01[0][2];\r\n        r1 = E1[0] * absDot01[1][1] + E1[1] * absDot01[1][0];\r\n        r01 = r0 + r1;\r\n        if (r > r01) {\r\n            return false;\r\n        }\r\n\r\n        // Test for separation on the axis C0 + t*A0[2]xA1[0].\r\n        r = Math.abs(dotDA0[1] * dot01[0][0] - dotDA0[0] * dot01[1][0]);\r\n        r0 = E0[0] * absDot01[1][0] + E0[1] * absDot01[0][0];\r\n        r1 = E1[1] * absDot01[2][2] + E1[2] * absDot01[2][1];\r\n        r01 = r0 + r1;\r\n        if (r > r01) {\r\n            return false;\r\n        }\r\n\r\n        // Test for separation on the axis C0 + t*A0[2]xA1[1].\r\n        r = Math.abs(dotDA0[1] * dot01[0][1] - dotDA0[0] * dot01[1][1]);\r\n        r0 = E0[0] * absDot01[1][1] + E0[1] * absDot01[0][1];\r\n        r1 = E1[0] * absDot01[2][2] + E1[2] * absDot01[2][0];\r\n        r01 = r0 + r1;\r\n        if (r > r01) {\r\n            return false;\r\n        }\r\n\r\n        // Test for separation on the axis C0 + t*A0[2]xA1[2].\r\n        r = Math.abs(dotDA0[1] * dot01[0][2] - dotDA0[0] * dot01[1][2]);\r\n        r0 = E0[0] * absDot01[1][2] + E0[1] * absDot01[0][2];\r\n        r1 = E1[0] * absDot01[2][1] + E1[1] * absDot01[2][0];\r\n        r01 = r0 + r1;\r\n        if (r > r01) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 是否与包围球相交\r\n     * @param sphere\r\n     */\r\n    public intersectsSphere(sphere: Sphere): boolean {\r\n        const distance = this.distanceToPoint(sphere.center);\r\n        return distance <= sphere.radius;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @private\r\n     */\r\n    private _getPoints(points: Vector3[] = []): Vector3[] {\r\n        const product = [\r\n            _tempVec1,\r\n            _tempVec2,\r\n            _tempVec3\r\n        ];\r\n\r\n        for (let d = 0; d < 3; ++d) {\r\n            product[d].copy(this.axis[d]).multiplyScalar(this.extent.p[d]);\r\n        }\r\n\r\n        const imax = 1 << 3;\r\n        for (let i = 0; i < imax; ++i) {\r\n            points[i] = this.center.clone();\r\n            for (let d = 0, mask = 1; d < 3; ++d, mask <<= 1) {\r\n                const sign = (i & mask ? 1 : -1);\r\n                points[i].add(_tempVec4.copy(product[d]).multiplyScalar(sign));\r\n            }\r\n        }\r\n        return points;\r\n    }\r\n\r\n    /**\r\n     * 是否相等\r\n     * @param obb\r\n     */\r\n    public equals(obb: OBB): boolean {\r\n        let eq = true;\r\n        for (let i = 0; i < 3; ++i) {\r\n            if (!this.axis[i].equals(obb.axis[i])) {\r\n                eq = false;\r\n            }\r\n        }\r\n        return eq && this.center.equals(obb.center)  && this.extent.equals(obb.extent);\r\n    }\r\n}\r\n",
        "import { Nullable } from \"../types\";\r\nimport { Vector2 } from \"./Vector2\";\r\nimport { Box2 } from \"./Box2\";\r\n\r\n/**\r\n * 多边形\r\n * @category Math\r\n */\r\nexport class Polygon {\r\n\r\n    public polygon: number[];\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param points\r\n     */\r\n    constructor(points: Nullable<number[]> = null) {\r\n        if (points) {\r\n            this.polygon = points.slice(0);\r\n        }\r\n        else {\r\n            this.polygon = [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置多边形点坐标数组\r\n     * @param points\r\n     */\r\n    public set(points: number[]): Polygon {\r\n        this.polygon = points.slice(0);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置多边形Vector2数组\r\n     * @param polygon\r\n     */\r\n    public setFromVector2(polygon: Vector2[]): Polygon {\r\n        this.polygon = [];\r\n        for (let i = 0; i < polygon.length; ++i) {\r\n            this.polygon.push(polygon[i].x, polygon[i].y);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 增加一个点\r\n     * @param x\r\n     * @param y\r\n     */\r\n    public add(x: number, y: number): Polygon {\r\n        this.polygon.push(x, y);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 增加一个Vector2\r\n     * @param vec2\r\n     */\r\n    public addFromVector2(vec2: Vector2): Polygon {\r\n        this.polygon.push(vec2.x, vec2.y);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 简单多边形（没有重叠）\r\n     */\r\n    public isSimple(): boolean {\r\n        let p = this.polygon;\r\n        let n = p.length >> 1;\r\n        if (n < 4) {\r\n            return true;\r\n        }\r\n\r\n        let a1 = Point();\r\n        let a2 = Point();\r\n        let b1 = Point();\r\n        let b2 = Point();\r\n        let c = Point();\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            a1.x = p[2 * i];\r\n            a1.y = p[2 * i + 1];\r\n\r\n            if (i == n - 1) {\r\n                a2.x = p[0];\r\n                a2.y = p[1];\r\n            } else {\r\n                a2.x = p[2 * i + 2];\r\n                a2.y = p[2 * i + 3];\r\n            }\r\n\r\n            for (let j = 0; j < n; j++) {\r\n                if (Math.abs(i - j) < 2) { continue; }\r\n                if (j == n - 1 && i == 0) { continue; }\r\n                if (i == n - 1 && j == 0) { continue; }\r\n\r\n                b1.x = p[2 * j];\r\n                b1.y = p[2 * j + 1];\r\n\r\n                if (j == n - 1) {\r\n                    b2.x = p[0];\r\n                    b2.y = p[1];\r\n                } else {\r\n                    b2.x = p[2 * j + 2];\r\n                    b2.y = p[2 * j + 3];\r\n                }\r\n\r\n                if (getLineIntersection(a1, a2, b1, b2, c) != null) { return false; }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 是否凸多边形\r\n     */\r\n    public isConvex(): boolean {\r\n        const p = this.polygon;\r\n        if (p.length < 6) { return true; }\r\n        const l = p.length - 4;\r\n        for (let i = 0; i < l; i += 2) {\r\n            if (!isConvex(p[i], p[i + 1], p[i + 2], p[i + 3], p[i + 4], p[i + 5])) { return false; }\r\n        }\r\n        if (!isConvex(p[l], p[l + 1], p[l + 2], p[l + 3], p[0], p[1])) { return false; }\r\n        if (!isConvex(p[l + 2], p[l + 3], p[0], p[1], p[2], p[3])) { return false; }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 多边形面积\r\n     */\r\n    public getArea(): number {\r\n        const p = this.polygon;\r\n        if (p.length < 6) { return 0; }\r\n        const l = p.length - 2;\r\n        let sum = 0;\r\n        for (let i = 0; i < l; i += 2) {\r\n            sum += (p[i + 2] - p[i]) * (p[i + 1] + p[i + 3]);\r\n        }\r\n        sum += (p[0] - p[l]) * (p[l + 1] + p[1]);\r\n        return -sum * 0.5;\r\n    }\r\n\r\n    /**\r\n     * 获取包围盒\r\n     * @param box\r\n     */\r\n    public getAABB(box = new Box2()): Box2 {\r\n        let p = this.polygon;\r\n        let minx = Infinity;\r\n        let miny = Infinity;\r\n        let maxx = -minx;\r\n        let maxy = -miny;\r\n        for (let i = 0; i < p.length; i += 2) {\r\n            minx = Math.min(minx, p[i]);\r\n            maxx = Math.max(maxx, p[i]);\r\n            miny = Math.min(miny, p[i + 1]);\r\n            maxy = Math.max(maxy, p[i + 1]);\r\n        }\r\n        box.min.x = minx;\r\n        box.min.y = miny;\r\n        box.max.x = maxx;\r\n        box.max.y = maxy;\r\n        return box;\r\n    }\r\n\r\n    /**\r\n     * 是否包含点\r\n     * @param pointX\r\n     * @param pointY\r\n     */\r\n    public containsPoint(pointX: number, pointY: number): boolean {\r\n        let p = this.polygon;\r\n        let px = pointX;\r\n        let py = pointY;\r\n        let n = p.length >> 1;\r\n        let ax;\r\n        let ay = p[2 * n - 3] - py;\r\n        let bx = p[2 * n - 2] - px;\r\n        let by = p[2 * n - 1] - py;\r\n\r\n        let lup;\r\n\r\n        for (let ii = 0; ii < n; ii++) {\r\n            ax = bx;\r\n            ay = by;\r\n            bx = p[2 * ii] - px;\r\n            by = p[2 * ii + 1] - py;\r\n            if (ay == by) { continue; }\r\n            lup = by > ay;\r\n        }\r\n\r\n        let depth = 0;\r\n        for (let i = 0; i < n; i++) {\r\n            ax = bx;\r\n            ay = by;\r\n            bx = p[2 * i] - px;\r\n            by = p[2 * i + 1] - py;\r\n            if (ay < 0 && by < 0) { continue; } // both \"up\" or both \"down\"\r\n            if (ay > 0 && by > 0) { continue; } // both \"up\" or both \"down\"\r\n            if (ax < 0 && bx < 0) { continue; } // both points on the left\r\n\r\n            if (ay == by && Math.min(ax, bx) <= 0) { return true; }\r\n            if (ay == by) { continue; }\r\n\r\n            let lx = ax + (bx - ax) * (-ay) / (by - ay);\r\n            if (lx == 0) { return true; } // point on edge\r\n            if (lx > 0) { depth++; }\r\n            if (ay == 0 && lup && by > ay) { depth--; } // hit vertex, both up\r\n            if (ay == 0 && !lup && by < ay) { depth--; } // hit vertex, both down\r\n            lup = by > ay;\r\n        }\r\n        return (depth & 1) == 1;\r\n    }\r\n\r\n    /**\r\n     * 三角形化多边形\r\n     */\r\n    public triangulate(): number[] {\r\n        let p = this.polygon;\r\n        let n = p.length >> 1;\r\n        if (n < 3) { return []; }\r\n        let tgs = [];\r\n        let avl = [];\r\n        for (let count = 0; count < n; count++) {\r\n            avl.push(count);\r\n        }\r\n\r\n        let i = 0;\r\n        let al = n;\r\n        while (al > 3) {\r\n            let i0 = avl[(i + 0) % al];\r\n            let i1 = avl[(i + 1) % al];\r\n            let i2 = avl[(i + 2) % al];\r\n\r\n            let ax = p[2 * i0];\r\n            let ay = p[2 * i0 + 1];\r\n            let bx = p[2 * i1];\r\n            let by = p[2 * i1 + 1];\r\n            let cx = p[2 * i2];\r\n            let cy = p[2 * i2 + 1];\r\n\r\n            let earFound = false;\r\n            if (isConvex(ax, ay, bx, by, cx, cy)) {\r\n                earFound = true;\r\n                for (let j = 0; j < al; j++) {\r\n                    let vi = avl[j];\r\n                    if (vi == i0 || vi == i1 || vi == i2) { continue; }\r\n                    if (isPointInTriangle(p[2 * vi], p[2 * vi + 1], ax, ay, bx, by, cx, cy)) {\r\n                        earFound = false;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (earFound) {\r\n                tgs.push(i0, i1, i2);\r\n                avl.splice((i + 1) % al, 1);\r\n                al--;\r\n                i = 0;\r\n            } else if (i++ > 3 * al) { break; }\r\n        }\r\n        tgs.push(avl[0], avl[1], avl[2]);\r\n        return tgs;\r\n    }\r\n\r\n    /**\r\n     * 多边形切片\r\n     * @param startX\r\n     * @param startY\r\n     * @param endX\r\n     * @param endY\r\n     */\r\n    public slice(startX: number, startY: number, endX: number, endY: number): number[][] {\r\n        let p = this.polygon;\r\n        let ax = startX;\r\n        let ay = startY;\r\n        let bx = endX;\r\n        let by = endY;\r\n\r\n        if (this.containsPoint(ax, ay) || this.containsPoint(bx, by)) {\r\n            return [p.slice(0)];\r\n        }\r\n\r\n        let a = Point(ax, ay);\r\n        let b = Point(bx, by);\r\n        let iscs: Point[] = []; // intersections\r\n        let ps: Point[] = []; // points\r\n\r\n        for (let count = 0; count < p.length; count += 2) {\r\n            ps.push(Point(p[count], p[count + 1]));\r\n        }\r\n\r\n        for (let i = 0; i < ps.length; i++) {\r\n            let isc: Nullable<Point> = Point();\r\n            isc = getLineIntersection(a, b, ps[i], ps[(i + 1) % ps.length], isc);\r\n\r\n            let fisc = iscs[0];\r\n            let lisc = iscs[iscs.length - 1];\r\n            if (isc && (fisc == null || pointDistance(isc, fisc) > 1e-10) && (lisc == null || pointDistance(isc, lisc) > 1e-10)) {\r\n                isc.flag = true;\r\n                iscs.push(isc);\r\n                ps.splice(i + 1, 0, isc);\r\n                i++;\r\n            }\r\n        }\r\n\r\n        if (iscs.length < 2) { return [p.slice(0)]; }\r\n        iscs.sort((u, v) => pointComp(a, u, v));\r\n\r\n        let pgs = [];\r\n        let dir = 0;\r\n        while (iscs.length > 0) {\r\n\r\n            let i0: Point = iscs[0];\r\n            let i1: Point = iscs[1];\r\n\r\n            let index0: number = ps.indexOf(i0);\r\n            let index1: number = ps.indexOf(i1);\r\n            let solved: boolean = false;\r\n\r\n            if (firstWithFlag(ps, index0) == index1) {\r\n                solved = true;\r\n            } else {\r\n                i0 = iscs[1];\r\n                i1 = iscs[0];\r\n                index0 = ps.indexOf(i0);\r\n                index1 = ps.indexOf(i1);\r\n                if (firstWithFlag(ps, index0) == index1) { solved = true; }\r\n            }\r\n\r\n            if (solved) {\r\n                dir--;\r\n                let pgn = getPoints(ps, index0, index1);\r\n                pgs.push(pgn);\r\n                ps = getPoints(ps, index1, index0);\r\n                i0.flag = i1.flag = false;\r\n                iscs.splice(0, 2);\r\n                if (iscs.length == 0) { pgs.push(ps); }\r\n            } else {\r\n                dir++;\r\n                iscs.reverse();\r\n            }\r\n            if (dir > 1) { break; }\r\n        }\r\n\r\n        let result: number[][] = [];\r\n        for (let ii = 0; ii < pgs.length; ii++) {\r\n            let pg = pgs[ii];\r\n            let npg: number[] = [];\r\n            for (let j = 0; j < pg.length; j++) {\r\n                npg.push(pg[j].x, pg[j].y);\r\n            }\r\n            result.push(npg);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 反向多边形\r\n     */\r\n    public reverse(): number[] {\r\n        let p = this.polygon;\r\n        let np = [];\r\n        for (let j = p.length - 2; j >= 0; j -= 2) {\r\n            np.push(p[j], p[j + 1]);\r\n        }\r\n        return np;\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\ninterface Point {\r\n    x: number;\r\n    y: number;\r\n    flag: boolean;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction Point(x: number = 0, y: number = 0): Point {\r\n    return {\r\n        x,\r\n        y,\r\n        flag: false\r\n    };\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @param a1\r\n * @param a2\r\n * @param b1\r\n * @param b2\r\n * @param c\r\n */\r\nfunction getLineIntersection(a1: Point, a2: Point, b1: Point, b2: Point, c: Point): Nullable<Point> {\r\n    let dax = (a1.x - a2.x);\r\n    let dbx = (b1.x - b2.x);\r\n    let day = (a1.y - a2.y);\r\n    let dby = (b1.y - b2.y);\r\n\r\n    let Den = dax * dby - day * dbx;\r\n\r\n    if (Den == 0) {\r\n        return null;\r\n    } // parallel\r\n\r\n    let A = (a1.x * a2.y - a1.y * a2.x);\r\n    let B = (b1.x * b2.y - b1.y * b2.x);\r\n\r\n    let I = c;\r\n    I.x = (A * dbx - dax * B) / Den;\r\n    I.y = (A * dby - day * B) / Den;\r\n\r\n    if (inRectangle(I, a1, a2) && inRectangle(I, b1, b2)) {\r\n        return I;\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @param a\r\n * @param b\r\n * @param c\r\n */\r\nfunction inRectangle(a: Point, b: Point, c: Point): boolean {\r\n    let minx = Math.min(b.x, c.x);\r\n    let maxx = Math.max(b.x, c.x);\r\n    let miny = Math.min(b.y, c.y);\r\n    let maxy = Math.max(b.y, c.y);\r\n\r\n    if (minx == maxx) {\r\n        return (miny <= a.y && a.y <= maxy);\r\n    }\r\n    if (miny == maxy) {\r\n        return (minx <= a.x && a.x <= maxx);\r\n    }\r\n\r\n    // return (minx <= a.x && a.x <= maxx && miny <= a.y && a.y <= maxy)\r\n    return (minx <= a.x + 1e-10 && a.x - 1e-10 <= maxx && miny <= a.y + 1e-10 && a.y - 1e-10 <= maxy);\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @param ax\r\n * @param ay\r\n * @param bx\r\n * @param by\r\n * @param cx\r\n * @param cy\r\n */\r\nfunction isConvex(ax: number, ay: number, bx: number, by: number, cx: number, cy: number) {\r\n    return (ay - by) * (cx - bx) + (bx - ax) * (cy - by) >= 0;\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @param px\r\n * @param py\r\n * @param ax\r\n * @param ay\r\n * @param bx\r\n * @param by\r\n * @param cx\r\n * @param cy\r\n */\r\nfunction isPointInTriangle(px: number, py: number, ax: number, ay: number, bx: number, by: number, cx: number, cy: number) {\r\n    let v0x = cx - ax;\r\n    let v0y = cy - ay;\r\n    let v1x = bx - ax;\r\n    let v1y = by - ay;\r\n    let v2x = px - ax;\r\n    let v2y = py - ay;\r\n\r\n    let dot00 = v0x * v0x + v0y * v0y;\r\n    let dot01 = v0x * v1x + v0y * v1y;\r\n    let dot02 = v0x * v2x + v0y * v2y;\r\n    let dot11 = v1x * v1x + v1y * v1y;\r\n    let dot12 = v1x * v2x + v1y * v2y;\r\n\r\n    let invDenom = 1 / (dot00 * dot11 - dot01 * dot01);\r\n    let u = (dot11 * dot02 - dot01 * dot12) * invDenom;\r\n    let v = (dot00 * dot12 - dot01 * dot02) * invDenom;\r\n\r\n    // Check if point is in triangle\r\n    return (u >= 0) && (v >= 0) && (u + v < 1);\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @param a\r\n * @param b\r\n */\r\nfunction pointDistance(a: Point, b: Point): number {\r\n    const dx = b.x - a.x;\r\n    const dy = b.y - a.y;\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @param a\r\n * @param u\r\n * @param v\r\n */\r\nfunction pointComp(a: Point, u: Point, v: Point): number {\r\n    return pointDistance(a, u) - pointDistance(a, v);\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @param points\r\n * @param index0\r\n * @param index1\r\n */\r\nfunction getPoints(points: Point[], index0: number, index1: number): Point[] {\r\n    let n = points.length;\r\n    let result = [];\r\n    if (index1 < index0) { index1 += n; }\r\n    for (let i = index0; i <= index1; i++) {\r\n        result.push(points[i % n]);\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @param points\r\n * @param index\r\n */\r\nfunction firstWithFlag(points: Point[], index: number): number {\r\n    let n = points.length;\r\n    while (true) {\r\n        index = (index + 1) % n;\r\n        if (points[index].flag) {\r\n            return index;\r\n        }\r\n    }\r\n}\r\n",
        "import { Vector2 } from \"./Vector2\";\r\nimport { Nullable } from \"../types\";\r\nimport { LineSegment2 } from \"./LineSegment2\";\r\nimport { Ray2Ray2Distance, Ray2Segment2Distance } from \"./InterfaceType/DistanceResult\";\r\nimport { Box2 } from \"./Box2\";\r\nimport { Line2 } from \"./Line2\";\r\nimport {\r\n    Ray2Box2Intersect,\r\n    Ray2Ray2Intersect,\r\n    Ray2Segment2Intersect\r\n} from \"./InterfaceType/IntersectResult\";\r\nimport { Intervals } from \"./Algorithm/Intervals\";\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec1 = new Vector2();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec2 = new Vector2();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec3 = new Vector2();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec4 = new Vector2();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec5 = new Vector2();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec6 = new Vector2();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec7 = new Vector2();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempArray = new Array<number>(2);\r\n\r\n/**\r\n * 2D射线\r\n * @category Math\r\n */\r\nexport class Ray2 {\r\n\r\n    /**\r\n     * 原点\r\n     */\r\n    public origin: Vector2;\r\n    /**\r\n     * 方向\r\n     */\r\n    public direction: Vector2;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param origin\r\n     * @param direction\r\n     */\r\n    constructor(origin: Nullable<Vector2> = null, direction: Nullable<Vector2> = null) {\r\n        this.origin = new Vector2();\r\n        this.direction = new Vector2(-1, 0);\r\n\r\n        if (origin) {\r\n            this.origin.copy(origin);\r\n        }\r\n        if (direction) {\r\n            this.direction.copy(direction);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置原点和方向\r\n     * @param origin\r\n     * @param direction\r\n     */\r\n    public set(origin: Vector2, direction: Vector2): Ray2 {\r\n        this.origin.copy(origin);\r\n        this.direction.copy(direction);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): Ray2 {\r\n        return new Ray2().copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param ray\r\n     */\r\n    public copy(ray: Ray2): Ray2 {\r\n        this.origin.copy(ray.origin);\r\n        this.direction.copy(ray.direction);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取射线上的点\r\n     * @param t\r\n     * @param target\r\n     */\r\n    public at(t: number, target = new Vector2()): Vector2 {\r\n        return target.copy(this.direction).multiplyScalar(t).add(this.origin);\r\n    }\r\n\r\n    /**\r\n     * 设置目标点\r\n     * @param vec\r\n     */\r\n    public lookAt(vec: Vector2): Ray2 {\r\n        this.direction.copy(vec).sub(this.origin).normalize();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 重置射线原点\r\n     * @param t\r\n     */\r\n    public recast(t: number) {\r\n        this.origin.copy(this.at(t, _tempVec1));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 点到射线的最近点\r\n     * @param point\r\n     * @param target\r\n     */\r\n    public closestPointToPoint(point: Vector2, target = new Vector2()): Vector2 {\r\n        target.subVectors(point, this.origin);\r\n\r\n        const directionDistance = target.dot(this.direction);\r\n        if (directionDistance < 0) {\r\n            return target.copy(this.origin);\r\n        }\r\n        return target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\r\n    }\r\n\r\n    /**\r\n     * 到坐标点的SQ距离\r\n     * @param point\r\n     * @param rayClosest\r\n     */\r\n    public distanceSqToPoint(point: Vector2, rayClosest: Nullable<Vector2> = null): number {\r\n\r\n        const diff = _tempVec1.subVectors(point, this.origin);\r\n        const rayParameter = this.direction.dot(diff);\r\n\r\n        if (rayParameter > 0) {\r\n            _tempVec2.copy(this.direction).multiplyScalar(rayParameter).add(this.origin);\r\n        }\r\n        else {\r\n            _tempVec2.copy(this.origin);\r\n        }\r\n\r\n        if (rayClosest) {\r\n            rayClosest.copy(_tempVec2);\r\n        }\r\n\r\n        diff.subVectors(point, _tempVec2);\r\n        return diff.dot(diff);\r\n    }\r\n\r\n    /**\r\n     * 到坐标点的距离\r\n     * @param point\r\n     * @param rayClosest\r\n     */\r\n    public distanceToPoint(point: Vector2, rayClosest: Nullable<Vector2> = null): number {\r\n        return Math.sqrt(this.distanceSqToPoint(point, rayClosest));\r\n    }\r\n\r\n    /**\r\n     * 到射线的SQ距离\r\n     * @param ray\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceSqToRay(ray: Ray2, closestPoint0: Nullable<Vector2> = null, closestPoint1: Nullable<Vector2> = null, parameter: Nullable<Ray2Ray2Distance> = null): number {\r\n\r\n        const ray0 = this;\r\n        const ray1 = ray;\r\n\r\n        let diff = _tempVec1.subVectors(ray0.origin, ray1.origin);\r\n        let a01 = -ray0.direction.dot(ray1.direction);\r\n        let b0 = diff.dot(ray0.direction), b1;\r\n        let s0, s1;\r\n\r\n        if (Math.abs(a01) < 1) {\r\n            // Rays are not parallel.\r\n            b1 = -diff.dot(ray1.direction);\r\n            s0 = a01 * b1 - b0;\r\n            s1 = a01 * b0 - b1;\r\n\r\n            if (s0 >= 0) {\r\n                if (s1 >= 0) {\r\n                    const det = 1 - a01 * a01;\r\n                    s0 /= det;\r\n                    s1 /= det;\r\n                }\r\n                else {\r\n                    s1 = 0;\r\n                    if (b0 >= 0) {\r\n                        s0 = 0;\r\n                    }\r\n                    else {\r\n                        s0 = -b0;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (s1 >= 0) {\r\n                    s0 = 0;\r\n                    if (b1 >= 0) {\r\n                        s1 = 0;\r\n                    }\r\n                    else {\r\n                        s1 = -b1;\r\n                    }\r\n                }\r\n                else {\r\n                    if (b0 < 0) {\r\n                        s0 = -b0;\r\n                        s1 = 0;\r\n                    }\r\n                    else {\r\n                        s0 = 0;\r\n                        if (b1 >= 0) {\r\n                            s1 = 0;\r\n                        }\r\n                        else {\r\n                            s1 = -b1;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (a01 > 0) {\r\n                s1 = 0;\r\n                if (b0 >= 0) {\r\n                    s0 = 0;\r\n                }\r\n                else {\r\n                    s0 = -b0;\r\n                }\r\n            }\r\n            else {\r\n                if (b0 >= 0) {\r\n                    b1 = -diff.dot(ray1.direction);\r\n                    s0 = 0;\r\n                    s1 = -b1;\r\n                }\r\n                else {\r\n                    s0 = -b0;\r\n                    s1 = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        _tempVec2.copy(ray0.direction).multiplyScalar(s0).add(ray0.origin);\r\n        _tempVec3.copy(ray1.direction).multiplyScalar(s1).add(ray1.origin);\r\n\r\n        if (closestPoint0) {\r\n            closestPoint0.copy(_tempVec2);\r\n        }\r\n        if (closestPoint1) {\r\n            closestPoint1.copy(_tempVec3);\r\n        }\r\n        if (parameter) {\r\n            parameter.parameter = [s0, s1];\r\n        }\r\n\r\n        diff.subVectors(_tempVec2, _tempVec3);\r\n        return diff.dot(diff);\r\n    }\r\n\r\n    /**\r\n     * 到射线的距离\r\n     * @param ray\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceToRay(ray: Ray2, closestPoint0: Nullable<Vector2> = null, closestPoint1: Nullable<Vector2> = null, parameter: Nullable<Ray2Ray2Distance> = null): number {\r\n        return this.distanceSqToRay(ray, closestPoint0, closestPoint1, parameter);\r\n    }\r\n\r\n    /**\r\n     * 到线段的SQ距离\r\n     * @param segment\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceSqToSegment(segment: LineSegment2, closestPoint0: Nullable<Vector2> = null, closestPoint1: Nullable<Vector2> = null, parameter: Nullable<Ray2Segment2Distance> = null): number {\r\n\r\n        let segCenter = _tempVec1;\r\n        let segDirection = _tempVec2;\r\n        let segExtent = segment.getCenteredForm(segCenter, segDirection);\r\n\r\n        let diff = _tempVec3.subVectors(this.origin, segCenter);\r\n        let a01 = -this.direction.dot(segDirection);\r\n        let b0 = diff.dot(this.direction);\r\n        let s0, s1;\r\n\r\n        if (Math.abs(a01) < 1) {\r\n            let det = 1 - a01 * a01;\r\n            let extDet = segExtent * det;\r\n            let b1 = -diff.dot(segDirection);\r\n            s0 = a01 * b1 - b0;\r\n            s1 = a01 * b0 - b1;\r\n\r\n            if (s0 >= 0) {\r\n                if (s1 >= -extDet) {\r\n                    if (s1 <= extDet) {\r\n                        s0 /= det;\r\n                        s1 /= det;\r\n                    }\r\n                    else {\r\n                        s1 = segExtent;\r\n                        s0 = Math.max(-(a01 * s1 + b0), 0);\r\n                    }\r\n                }\r\n                else {\r\n                    s1 = -segExtent;\r\n                    s0 = Math.max(-(a01 * s1 + b0), 0);\r\n                }\r\n            }\r\n            else {\r\n                if (s1 <= -extDet) {\r\n                    s0 = -(-a01 * segExtent + b0);\r\n                    if (s0 > 0) {\r\n                        s1 = -segExtent;\r\n                    }\r\n                    else {\r\n                        s0 = 0;\r\n                        s1 = -b1;\r\n                        if (s1 < -segExtent) {\r\n                            s1 = -segExtent;\r\n                        }\r\n                        else if (s1 > segExtent) {\r\n                            s1 = segExtent;\r\n                        }\r\n                    }\r\n                }\r\n                else if (s1 <= extDet) {\r\n                    s0 = 0;\r\n                    s1 = -b1;\r\n                    if (s1 < -segExtent) {\r\n                        s1 = -segExtent;\r\n                    }\r\n                    else if (s1 > segExtent) {\r\n                        s1 = segExtent;\r\n                    }\r\n                }\r\n                else {\r\n                    s0 = -(a01 * segExtent + b0);\r\n                    if (s0 > 0) {\r\n                        s1 = segExtent;\r\n                    }\r\n                    else {\r\n                        s0 = 0;\r\n                        s1 = -b1;\r\n                        if (s1 < -segExtent) {\r\n                            s1 = -segExtent;\r\n                        }\r\n                        else if (s1 > segExtent) {\r\n                            s1 = segExtent;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (a01 > 0) {\r\n                s1 = -segExtent;\r\n            }\r\n            else {\r\n                s1 = segExtent;\r\n            }\r\n\r\n            s0 = Math.max(-(a01 * s1 + b0), 0);\r\n        }\r\n\r\n        _tempVec4.copy(this.direction).multiplyScalar(s0).add(this.origin);\r\n        _tempVec5.copy(segDirection).multiplyScalar(s1).add(segCenter);\r\n\r\n        if (closestPoint0) {\r\n            closestPoint0.copy(_tempVec4);\r\n        }\r\n        if (closestPoint1) {\r\n            closestPoint1.copy(_tempVec5);\r\n        }\r\n\r\n        if (parameter) {\r\n            parameter.parameter = [s0, s1];\r\n        }\r\n\r\n        diff.subVectors(_tempVec4, _tempVec5);\r\n        return diff.dot(diff);\r\n    }\r\n\r\n    /**\r\n     * 到线段的距离\r\n     * @param segment\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceToSegment(segment: LineSegment2, closestPoint0: Nullable<Vector2> = null, closestPoint1: Nullable<Vector2> = null, parameter: Nullable<Ray2Segment2Distance> = null): number {\r\n        return Math.sqrt(this.distanceSqToSegment(segment, closestPoint0, closestPoint1, parameter));\r\n    }\r\n\r\n    /**\r\n     * 是否与包围盒相交\r\n     * @param box\r\n     */\r\n    public intersectsBox(box: Box2): boolean {\r\n\r\n        const boxCenter = box.getCenter(_tempVec1);\r\n        const boxExtent = box.getExtent(_tempVec2);\r\n\r\n        const rayOrigin = _tempVec3.subVectors(this.origin, boxCenter);\r\n        return Ray2.intersectsBox(rayOrigin, this.direction, boxExtent);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param rayOrigin\r\n     * @param rayDirection\r\n     * @param boxExtent\r\n     */\r\n    public static intersectsBox(rayOrigin: Vector2, rayDirection: Vector2, boxExtent: Vector2): boolean {\r\n\r\n        for (let i = 0; i < 2; ++i) {\r\n            if (Math.abs(rayOrigin.p[i]) > boxExtent.p[i] && rayOrigin.p[i] * rayDirection.p[i] >= 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return Line2.intersectsBox(rayOrigin, rayDirection, boxExtent);\r\n    }\r\n\r\n    /**\r\n     * 与包围盒相交检测\r\n     * @param box\r\n     */\r\n    public intersectBox(box: Box2): Ray2Box2Intersect {\r\n\r\n        const boxCenter = box.getCenter(_tempVec1);\r\n        const boxExtent = box.getExtent(_tempVec2);\r\n\r\n        const rayOrigin = _tempVec3.subVectors(this.origin, boxCenter);\r\n\r\n        const result = {\r\n            intersect: false,\r\n            numIntersections: 0,\r\n            parameter: new Array<number>(2),\r\n            point: new Array<Vector2>(2)\r\n        };\r\n\r\n        Ray2.intersectBox(rayOrigin, this.direction, boxExtent, result);\r\n\r\n        for (let i = 0; i < result.numIntersections; ++i) {\r\n            result.point[i] = new Vector2().copy(this.direction).multiplyScalar(result.parameter[i]).add(this.origin);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param rayOrigin\r\n     * @param rayDirection\r\n     * @param boxExtent\r\n     * @param result\r\n     */\r\n    public static intersectBox(rayOrigin: Vector2, rayDirection: Vector2, boxExtent: Vector2, result: Ray2Box2Intersect): void {\r\n\r\n        Line2.intersectBox(rayOrigin, rayDirection, boxExtent, result);\r\n\r\n        if (result.intersect)\r\n        {\r\n            // The line containing the ray intersects the box; the\r\n            // t-interval is [t0,t1].  The ray intersects the box as long\r\n            // as [t0,t1] overlaps the ray t-interval [0,+infinity).\r\n            const rayInterval = [ 0, Infinity ];\r\n            const iiResult = Intervals.staticQuery(result.parameter, rayInterval);\r\n            result.intersect = iiResult.intersect;\r\n            result.numIntersections = iiResult.numIntersections;\r\n            result.parameter = iiResult.overlap;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否与线段相交\r\n     * @param segment\r\n     */\r\n    public intersectsSegment(segment: LineSegment2): boolean {\r\n\r\n        const segOrigin = _tempVec1;\r\n        const segDirection = _tempVec2;\r\n        const segExtent = segment.getCenteredForm(segOrigin, segDirection);\r\n\r\n        const line0 = new Line2(this.origin, this.direction);\r\n        const line1 = new Line2(segOrigin, segDirection);\r\n\r\n        const llResult = line0.intersectLine(line1);\r\n        if (llResult.numIntersections == 1)\r\n        {\r\n            // Test whether the line-line intersection is on the ray and\r\n            // segment.\r\n            if (llResult.line0Parameter[0] >= 0 && Math.abs(llResult.line1Parameter[0]) <= segExtent)\r\n            {\r\n                return true;\r\n            }\r\n            else\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n        else if (llResult.numIntersections == Infinity)\r\n        {\r\n            // Compute the location of the right-most point of the segment\r\n            // relative to the ray direction.\r\n            const  diff = _tempVec3.subVectors(segOrigin, this.origin);\r\n            const t = this.direction.dot(diff) + segExtent;\r\n            if (t > 0)\r\n            {\r\n                return true;\r\n            }\r\n            else if (t < 0)\r\n            {\r\n                return false;\r\n            }\r\n            else\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 与线段相交检测\r\n     * @param segment\r\n     */\r\n    public intersectSegment(segment: LineSegment2): Ray2Segment2Intersect {\r\n\r\n        const segOrigin = _tempVec1;\r\n        const segDirection = _tempVec2;\r\n        const segExtent = segment.getCenteredForm(segOrigin, segDirection);\r\n\r\n        const result = {\r\n            intersect: false,\r\n            numIntersections: 0,\r\n            rayParameter: new Array<number>(2),\r\n            segmentParameter: new Array<number>(2),\r\n            point: new Array<Vector2>(2),\r\n        };\r\n\r\n        const line0 = new Line2(this.origin, this.direction);\r\n        const line1 = new Line2(segOrigin, segDirection);\r\n\r\n        const llResult = line0.intersectLine(line1);\r\n\r\n        if (llResult.numIntersections == 1)\r\n        {\r\n            // Test whether the line-line intersection is on the ray and\r\n            // segment.\r\n            if (llResult.line0Parameter[0] >= 0 && Math.abs(llResult.line1Parameter[0]) <= segExtent)\r\n            {\r\n                result.intersect = true;\r\n                result.numIntersections = 1;\r\n                result.rayParameter[0] = llResult.line0Parameter[0];\r\n                result.segmentParameter[0] = llResult.line1Parameter[0];\r\n                result.point[0] = llResult.point;\r\n            }\r\n            else\r\n            {\r\n                result.intersect = false;\r\n                result.numIntersections = 0;\r\n            }\r\n        }\r\n        else if (llResult.numIntersections == Infinity)\r\n        {\r\n            // Compute t for which segment.origin =\r\n            // ray.origin + t*ray.direction.\r\n            const diff = _tempVec3.subVectors(segOrigin, this.origin);\r\n            const t = this.direction.dot(diff);\r\n\r\n            // Get the ray interval.\r\n            const interval0 = [0, Infinity];\r\n\r\n            // Compute the location of the segment endpoints relative to\r\n            // the ray.\r\n            const interval1 = [ t - segExtent, t + segExtent ];\r\n\r\n            // Compute the intersection of [0,+infinity) and [tmin,tmax].\r\n            const iiResult = Intervals.staticQuery(interval0, interval1);\r\n            if (iiResult.intersect) {\r\n                result.intersect = true;\r\n                result.numIntersections = iiResult.numIntersections;\r\n                for (let i = 0; i < iiResult.numIntersections; ++i) {\r\n                    result.rayParameter[i] = iiResult.overlap[i];\r\n                    result.segmentParameter[i] = iiResult.overlap[i] - t;\r\n                    result.point[i] = new Vector2().copy(this.direction).multiplyScalar(result.rayParameter[i]).add(this.origin);\r\n                }\r\n            }\r\n            else {\r\n                result.intersect = false;\r\n                result.numIntersections = 0;\r\n            }\r\n        }\r\n        else {\r\n            result.intersect = false;\r\n            result.numIntersections = 0;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 是否与射线相交\r\n     * @param ray\r\n     */\r\n    public intersectsRay(ray: Ray2): boolean {\r\n\r\n        const line0 = new Line2(this.origin, this.direction);\r\n        const line1 = new Line2(ray.origin, ray.direction);\r\n\r\n        const llResult = line0.intersectLine(line1);\r\n\r\n        if (llResult.numIntersections == 1)\r\n        {\r\n            // Test whether the line-line intersection is on the rays.\r\n            if (llResult.line0Parameter[0] >= 0 && llResult.line1Parameter[0] >= 0)\r\n            {\r\n                return true;\r\n            }\r\n            else\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n        else if (llResult.numIntersections == Infinity)\r\n        {\r\n            if (this.direction.dot(ray.direction) > 0)\r\n            {\r\n                return true;\r\n            }\r\n            else\r\n            {\r\n                // The rays are collinear but in opposite directions.\r\n                // Test whether they overlap.  Ray0 has interval\r\n                // [0,+infinity) and ray1 has interval (-infinity,t]\r\n                // relative to ray0.direction.\r\n                const diff = _tempVec1.subVectors(ray.origin, this.origin);\r\n                const t = this.direction.dot(diff);\r\n                if (t > 0) {\r\n                    return true;\r\n                }\r\n                else if (t < 0) {\r\n                    return false;\r\n                }\r\n                else {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 与射线相交检测\r\n     * @param ray\r\n     */\r\n    public intersectRay(ray: Ray2): Ray2Ray2Intersect {\r\n\r\n        const ray0 = this;\r\n        const ray1 = ray;\r\n\r\n        const result = {\r\n            intersect: false,\r\n            numIntersections: 0,\r\n            ray0Parameter: new Array<number>(2),\r\n            ray1Parameter: new Array<number>(2),\r\n            point: new Array<Vector2>(2),\r\n        };\r\n\r\n        const line0 = new Line2(this.origin, this.direction);\r\n        const line1 = new Line2(ray.origin, ray.direction);\r\n\r\n        const llResult = line0.intersectLine(line1);\r\n\r\n        if (llResult.numIntersections == 1)\r\n        {\r\n            // Test whether the line-line intersection is on the rays.\r\n            if (llResult.line0Parameter[0] >= 0 && llResult.line1Parameter[0] >= 0)\r\n            {\r\n                result.intersect = true;\r\n                result.numIntersections = 1;\r\n                result.ray0Parameter[0] = llResult.line0Parameter[0];\r\n                result.ray1Parameter[0] = llResult.line1Parameter[0];\r\n                result.point[0] = llResult.point;\r\n            }\r\n            else\r\n            {\r\n                result.intersect = false;\r\n                result.numIntersections = 0;\r\n            }\r\n        }\r\n        else if (llResult.numIntersections == Infinity)\r\n        {\r\n            // Compute t for which ray1.origin =\r\n            // ray0.origin + t*ray0.direction.\r\n            const maxReal = Infinity;\r\n            const diff = _tempVec1.subVectors(ray1.origin, ray0.origin);\r\n            const t = ray0.direction.dot(diff);\r\n            if (ray0.direction.dot(ray1.direction) > 0)\r\n            {\r\n                // The rays are collinear and in the same direction, so\r\n                // they must overlap.\r\n                result.intersect = true;\r\n                result.numIntersections = Infinity;\r\n                if (t >= 0)\r\n                {\r\n                    result.ray0Parameter[0] = t;\r\n                    result.ray0Parameter[1] = maxReal;\r\n                    result.ray1Parameter[0] = 0;\r\n                    result.ray1Parameter[1] = maxReal;\r\n                    result.point[0] = ray1.origin;\r\n                }\r\n                else\r\n                {\r\n                    result.ray0Parameter[0] = 0;\r\n                    result.ray0Parameter[1] = maxReal;\r\n                    result.ray1Parameter[0] = -t;\r\n                    result.ray1Parameter[1] = maxReal;\r\n                    result.point[0] = ray0.origin;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                // The rays are collinear but in opposite directions.\r\n                // Test whether they overlap.  Ray0 has interval\r\n                // [0,+infinity) and ray1 has interval (-infinity,t1]\r\n                // relative to ray0.direction.\r\n                if (t >= 0)\r\n                {\r\n                    result.intersect = true;\r\n                    result.numIntersections = 2;\r\n                    result.ray0Parameter[0] = 0;\r\n                    result.ray0Parameter[1] = t;\r\n                    result.ray1Parameter[0] = 0;\r\n                    result.ray1Parameter[1] = t;\r\n                    result.point[0] = ray0.origin;\r\n                    result.point[1] = ray1.origin;\r\n                }\r\n                else\r\n                {\r\n                    result.intersect = false;\r\n                    result.numIntersections = 0;\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            result.intersect = false;\r\n            result.numIntersections = 0;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 是否相等\r\n     * @param ray\r\n     */\r\n    public equals(ray: Ray2): boolean {\r\n        return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);\r\n    }\r\n}\r\n",
        "import { Vector3 } from \"./Vector3\";\r\nimport { Nullable } from \"../types\";\r\nimport { LineSegment3 } from \"./LineSegment3\";\r\nimport { Triangle } from \"./Triangle\";\r\nimport { Box3 } from \"./Box3\";\r\nimport { OBB } from \"./OBB\";\r\nimport { Line3 } from \"./Line3\";\r\nimport { Matrix4 } from \"./Matrix4\";\r\nimport {\r\n    Ray3Box3Distance,\r\n    Ray3OBBDistance,\r\n    Ray3Ray3Distance,\r\n    Ray3Segment3Distance,\r\n    Ray3TriangleDistance\r\n} from \"./InterfaceType/DistanceResult\";\r\nimport {\r\n    Ray3Box3Intersect, Ray3OBBIntersect,\r\n    Ray3PlaneIntersect,\r\n    Ray3SphereIntersect,\r\n    Ray3TriangleIntersect\r\n} from \"./InterfaceType/IntersectResult\";\r\nimport { Sphere } from \"./Sphere\";\r\nimport { Intervals } from \"./Algorithm/Intervals\";\r\nimport { Plane } from \"./Plane\";\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec1 = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec2 = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec3 = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec4 = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec5 = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec6 = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempVec7 = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _tempArray = new Array<number>(3);\r\n\r\n/**\r\n * 3D射线\r\n * @category Math\r\n */\r\nexport class Ray3 {\r\n\r\n    /**\r\n     * 原点\r\n     */\r\n    public origin: Vector3;\r\n    /**\r\n     * 方向\r\n     */\r\n    public direction: Vector3;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param origin\r\n     * @param direction\r\n     */\r\n    constructor(origin: Nullable<Vector3> = null, direction: Nullable<Vector3> = null) {\r\n        this.origin = new Vector3();\r\n        this.direction = new Vector3(0, 0, -1);\r\n\r\n        if (origin) {\r\n            this.origin.copy(origin);\r\n        }\r\n        if (direction) {\r\n            this.direction.copy(direction);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置原点和方向\r\n     * @param origin\r\n     * @param direction\r\n     */\r\n    public set(origin: Vector3, direction: Vector3): Ray3 {\r\n        this.origin.copy(origin);\r\n        this.direction.copy(direction);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): Ray3 {\r\n        return new Ray3().copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param ray\r\n     */\r\n    public copy(ray: Ray3): Ray3 {\r\n        this.origin.copy(ray.origin);\r\n        this.direction.copy(ray.direction);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取射线上的点\r\n     * @param t\r\n     * @param target\r\n     */\r\n    public at(t: number, target = new Vector3()): Vector3 {\r\n        return target.copy(this.direction).multiplyScalar(t).add(this.origin);\r\n    }\r\n\r\n    /**\r\n     * 设置目标点\r\n     * @param vec\r\n     */\r\n    public lookAt(vec: Vector3): Ray3 {\r\n        this.direction.copy(vec).sub(this.origin).normalize();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 重置射线原点\r\n     * @param t\r\n     */\r\n    public recast(t: number) {\r\n        this.origin.copy(this.at(t, _tempVec1));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 点到射线的最近点\r\n     * @param point\r\n     * @param target\r\n     */\r\n    public closestPointToPoint(point: Vector3, target = new Vector3()): Vector3 {\r\n        target.subVectors(point, this.origin);\r\n\r\n        const directionDistance = target.dot(this.direction);\r\n        if (directionDistance < 0) {\r\n            return target.copy(this.origin);\r\n        }\r\n        return target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\r\n    }\r\n\r\n    /**\r\n     * 到坐标点的SQ距离\r\n     * @param point\r\n     * @param rayClosest\r\n     */\r\n    public distanceSqToPoint(point: Vector3, rayClosest: Nullable<Vector3> = null): number {\r\n\r\n        const diff = _tempVec1.subVectors(point, this.origin);\r\n        const rayParameter = this.direction.dot(diff);\r\n\r\n        if (rayParameter > 0) {\r\n            _tempVec2.copy(this.direction).multiplyScalar(rayParameter).add(this.origin);\r\n        }\r\n        else {\r\n            _tempVec2.copy(this.origin);\r\n        }\r\n\r\n        if (rayClosest) {\r\n            rayClosest.copy(_tempVec2);\r\n        }\r\n\r\n        diff.subVectors(point, _tempVec2);\r\n        return diff.dot(diff);\r\n    }\r\n\r\n    /**\r\n     * 到坐标点的距离\r\n     * @param point\r\n     * @param rayClosest\r\n     */\r\n    public distanceToPoint(point: Vector3, rayClosest: Nullable<Vector3> = null): number {\r\n        return Math.sqrt(this.distanceSqToPoint(point, rayClosest));\r\n    }\r\n\r\n    /**\r\n     * 到射线的SQ距离\r\n     * @param ray\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceSqToRay(ray: Ray3, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Ray3Ray3Distance> = null): number {\r\n\r\n        const ray0 = this;\r\n        const ray1 = ray;\r\n\r\n        let diff = _tempVec1.subVectors(ray0.origin, ray1.origin);\r\n        let a01 = -ray0.direction.dot(ray1.direction);\r\n        let b0 = diff.dot(ray0.direction), b1;\r\n        let s0, s1;\r\n\r\n        if (Math.abs(a01) < 1) {\r\n            // Rays are not parallel.\r\n            b1 = -diff.dot(ray1.direction);\r\n            s0 = a01 * b1 - b0;\r\n            s1 = a01 * b0 - b1;\r\n\r\n            if (s0 >= 0) {\r\n                if (s1 >= 0) {\r\n                    const det = 1 - a01 * a01;\r\n                    s0 /= det;\r\n                    s1 /= det;\r\n                }\r\n                else {\r\n                    s1 = 0;\r\n                    if (b0 >= 0) {\r\n                        s0 = 0;\r\n                    }\r\n                    else {\r\n                        s0 = -b0;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (s1 >= 0) {\r\n                    s0 = 0;\r\n                    if (b1 >= 0) {\r\n                        s1 = 0;\r\n                    }\r\n                    else {\r\n                        s1 = -b1;\r\n                    }\r\n                }\r\n                else {\r\n                    if (b0 < 0) {\r\n                        s0 = -b0;\r\n                        s1 = 0;\r\n                    }\r\n                    else {\r\n                        s0 = 0;\r\n                        if (b1 >= 0) {\r\n                            s1 = 0;\r\n                        }\r\n                        else {\r\n                            s1 = -b1;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (a01 > 0) {\r\n                s1 = 0;\r\n                if (b0 >= 0) {\r\n                    s0 = 0;\r\n                }\r\n                else {\r\n                    s0 = -b0;\r\n                }\r\n            }\r\n            else {\r\n                if (b0 >= 0) {\r\n                    b1 = -diff.dot(ray1.direction);\r\n                    s0 = 0;\r\n                    s1 = -b1;\r\n                }\r\n                else {\r\n                    s0 = -b0;\r\n                    s1 = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        _tempVec2.copy(ray0.direction).multiplyScalar(s0).add(ray0.origin);\r\n        _tempVec3.copy(ray1.direction).multiplyScalar(s1).add(ray1.origin);\r\n\r\n        if (closestPoint0) {\r\n            closestPoint0.copy(_tempVec2);\r\n        }\r\n        if (closestPoint1) {\r\n            closestPoint1.copy(_tempVec3);\r\n        }\r\n        if (parameter) {\r\n            parameter.parameter = [s0, s1];\r\n        }\r\n\r\n        diff.subVectors(_tempVec2, _tempVec3);\r\n        return diff.dot(diff);\r\n    }\r\n\r\n    /**\r\n     * 到射线的距离\r\n     * @param ray\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceToRay(ray: Ray3, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Ray3Ray3Distance> = null): number {\r\n        return this.distanceSqToRay(ray, closestPoint0, closestPoint1, parameter);\r\n    }\r\n\r\n    /**\r\n     * 到线段的SQ距离\r\n     * @param segment\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceSqToSegment(segment: LineSegment3, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Ray3Segment3Distance> = null): number {\r\n\r\n        let segCenter = _tempVec1;\r\n        let segDirection = _tempVec2;\r\n        let segExtent = segment.getCenteredForm(segCenter, segDirection);\r\n\r\n        let diff = _tempVec3.subVectors(this.origin, segCenter);\r\n        let a01 = -this.direction.dot(segDirection);\r\n        let b0 = diff.dot(this.direction);\r\n        let s0, s1;\r\n\r\n        if (Math.abs(a01) < 1) {\r\n            let det = 1 - a01 * a01;\r\n            let extDet = segExtent * det;\r\n            let b1 = -diff.dot(segDirection);\r\n            s0 = a01 * b1 - b0;\r\n            s1 = a01 * b0 - b1;\r\n\r\n            if (s0 >= 0) {\r\n                if (s1 >= -extDet) {\r\n                    if (s1 <= extDet) {\r\n                        s0 /= det;\r\n                        s1 /= det;\r\n                    }\r\n                    else {\r\n                        s1 = segExtent;\r\n                        s0 = Math.max(-(a01 * s1 + b0), 0);\r\n                    }\r\n                }\r\n                else {\r\n                    s1 = -segExtent;\r\n                    s0 = Math.max(-(a01 * s1 + b0), 0);\r\n                }\r\n            }\r\n            else {\r\n                if (s1 <= -extDet) {\r\n                    s0 = -(-a01 * segExtent + b0);\r\n                    if (s0 > 0) {\r\n                        s1 = -segExtent;\r\n                    }\r\n                    else {\r\n                        s0 = 0;\r\n                        s1 = -b1;\r\n                        if (s1 < -segExtent) {\r\n                            s1 = -segExtent;\r\n                        }\r\n                        else if (s1 > segExtent) {\r\n                            s1 = segExtent;\r\n                        }\r\n                    }\r\n                }\r\n                else if (s1 <= extDet) {\r\n                    s0 = 0;\r\n                    s1 = -b1;\r\n                    if (s1 < -segExtent) {\r\n                        s1 = -segExtent;\r\n                    }\r\n                    else if (s1 > segExtent) {\r\n                        s1 = segExtent;\r\n                    }\r\n                }\r\n                else {\r\n                    s0 = -(a01 * segExtent + b0);\r\n                    if (s0 > 0) {\r\n                        s1 = segExtent;\r\n                    }\r\n                    else {\r\n                        s0 = 0;\r\n                        s1 = -b1;\r\n                        if (s1 < -segExtent) {\r\n                            s1 = -segExtent;\r\n                        }\r\n                        else if (s1 > segExtent) {\r\n                            s1 = segExtent;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (a01 > 0) {\r\n                s1 = -segExtent;\r\n            }\r\n            else {\r\n                s1 = segExtent;\r\n            }\r\n\r\n            s0 = Math.max(-(a01 * s1 + b0), 0);\r\n        }\r\n\r\n        _tempVec4.copy(this.direction).multiplyScalar(s0).add(this.origin);\r\n        _tempVec5.copy(segDirection).multiplyScalar(s1).add(segCenter);\r\n\r\n        if (closestPoint0) {\r\n            closestPoint0.copy(_tempVec4);\r\n        }\r\n        if (closestPoint1) {\r\n            closestPoint1.copy(_tempVec5);\r\n        }\r\n\r\n        if (parameter) {\r\n            parameter.parameter = [s0, s1];\r\n        }\r\n\r\n        diff.subVectors(_tempVec4, _tempVec5);\r\n        return diff.dot(diff);\r\n    }\r\n\r\n    /**\r\n     * 到线段的距离\r\n     * @param segment\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceToSegment(segment: LineSegment3, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Ray3Segment3Distance> = null): number {\r\n        return Math.sqrt(this.distanceSqToSegment(segment, closestPoint0, closestPoint1, parameter));\r\n    }\r\n\r\n    /**\r\n     * 到三角形的SQ距离\r\n     * @param triangle\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceSqToTriangle(triangle: Triangle, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Ray3TriangleDistance> = null): number {\r\n\r\n        const ltResult = {\r\n            lineParameter: 0,\r\n            triangleParameter: []\r\n        };\r\n        const line = new Line3(this.origin, this.direction);\r\n        let sqrDistance = line.distanceSqToTriangle(triangle, closestPoint0, closestPoint1, ltResult);\r\n\r\n        if (ltResult.lineParameter >= 0) {\r\n            if (parameter) {\r\n                parameter.rayParameter = ltResult.lineParameter;\r\n                parameter.triangleParameter[0] = ltResult.triangleParameter[0];\r\n                parameter.triangleParameter[1] = ltResult.triangleParameter[1];\r\n                parameter.triangleParameter[2] = ltResult.triangleParameter[2];\r\n            }\r\n            return sqrDistance;\r\n        }\r\n\r\n        const ptResult = {\r\n            parameter: []\r\n        };\r\n        sqrDistance = triangle.distanceSqToPoint(this.origin, closestPoint1, ptResult);\r\n        if (closestPoint0) {\r\n            closestPoint0.copy(this.origin);\r\n        }\r\n        if (parameter) {\r\n            parameter.rayParameter = 0;\r\n            parameter.triangleParameter[0] = ptResult.parameter[0];\r\n            parameter.triangleParameter[1] = ptResult.parameter[1];\r\n            parameter.triangleParameter[2] = ptResult.parameter[2];\r\n        }\r\n        return sqrDistance;\r\n    }\r\n\r\n    /**\r\n     * 到三角形的距离\r\n     * @param triangle\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceToTriangle(triangle: Triangle, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Ray3TriangleDistance> = null): number {\r\n        return Math.sqrt(this.distanceSqToTriangle(triangle, closestPoint0, closestPoint1, parameter));\r\n    }\r\n\r\n    /**\r\n     * 到包围盒的SQ距离\r\n     * @param box\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceSqToBox(box: Box3, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Ray3Box3Distance> = null): number {\r\n\r\n        const lbResult = {\r\n            sqrDistance: 0,\r\n            lineParameter: 0\r\n        };\r\n        const line = new Line3(this.origin, this.direction);\r\n        let sqrDistance = line.distanceSqToBox(box, closestPoint0, closestPoint1, lbResult);\r\n\r\n        if (lbResult.lineParameter >= 0) {\r\n            if (parameter) {\r\n                parameter.rayParameter = lbResult.lineParameter;\r\n            }\r\n            return sqrDistance;\r\n        }\r\n\r\n        sqrDistance = box.distanceSqToPoint(this.origin, closestPoint1);\r\n        if (closestPoint0) {\r\n            closestPoint0.copy(this.origin);\r\n        }\r\n        if (parameter) {\r\n            parameter.rayParameter = lbResult.lineParameter;\r\n        }\r\n        return sqrDistance;\r\n    }\r\n\r\n    /**\r\n     * 到包围盒的距离\r\n     * @param box\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceToBox(box: Box3, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Ray3Box3Distance> = null): number {\r\n        return Math.sqrt(this.distanceSqToBox(box, closestPoint0, closestPoint1, parameter));\r\n    }\r\n\r\n    /**\r\n     * 到OBB的SQ距离\r\n     * @param box\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceSqToOBB(box: OBB, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Ray3OBBDistance> = null): number {\r\n\r\n        const lbResult = {\r\n            sqrDistance: 0,\r\n            lineParameter: 0\r\n        };\r\n        const line = new Line3(this.origin, this.direction);\r\n        let sqrDistance = line.distanceSqToOBB(box, closestPoint0, closestPoint1, lbResult);\r\n\r\n        if (lbResult.lineParameter >= 0) {\r\n            if (parameter) {\r\n                parameter.rayParameter = lbResult.lineParameter;\r\n            }\r\n            return sqrDistance;\r\n        }\r\n\r\n        sqrDistance = box.distanceSqToPoint(this.origin, closestPoint1);\r\n        if (closestPoint0) {\r\n            closestPoint0.copy(this.origin);\r\n        }\r\n        if (parameter) {\r\n            parameter.rayParameter = lbResult.lineParameter;\r\n        }\r\n        return sqrDistance;\r\n    }\r\n\r\n    /**\r\n     * 到OBB的距离\r\n     * @param box\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceToOBB(box: OBB, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<Ray3OBBDistance> = null): number {\r\n        return Math.sqrt(this.distanceSqToOBB(box, closestPoint0, closestPoint1, parameter));\r\n    }\r\n\r\n    /**\r\n     * 是否与三角形相交\r\n     * @param triangle\r\n     */\r\n    public intersecsTriangle(triangle: Triangle): boolean {\r\n\r\n        const diff = _tempVec1.subVectors(this.origin, triangle.p[0]);\r\n        const edge1 = _tempVec2.subVectors(triangle.p[1], triangle.p[0]);\r\n        const edge2 = _tempVec3.subVectors(triangle.p[2], triangle.p[0]);\r\n        const normal = _tempVec4.crossVectors(edge1, edge2);\r\n\r\n        let DdN = this.direction.dot(normal);\r\n        let sign;\r\n        if (DdN > 0) {\r\n            sign = 1;\r\n        }\r\n        else if (DdN < 0) {\r\n            sign = -1;\r\n            DdN = -DdN;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n\r\n        const DdQxE2 = sign * this.direction.dotCross(diff, edge2);\r\n        if (DdQxE2 >= 0) {\r\n            const DdE1xQ = sign * this.direction.dotCross(edge1, diff);\r\n            if (DdE1xQ >= 0) {\r\n                if (DdQxE2 + DdE1xQ <= DdN) {\r\n                    const QdN = -sign * diff.dot(normal);\r\n                    if (QdN >= 0) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 于三角形相交检测\r\n     * @param triangle\r\n     */\r\n    public intersecTriangle(triangle: Triangle): Ray3TriangleIntersect {\r\n\r\n        const diff = _tempVec1.subVectors(this.origin, triangle.p[0]);\r\n        const edge1 = _tempVec2.subVectors(triangle.p[1], triangle.p[0]);\r\n        const edge2 = _tempVec3.subVectors(triangle.p[2], triangle.p[0]);\r\n        const normal = _tempVec4.crossVectors(edge1, edge2);\r\n\r\n        let DdN = this.direction.dot(normal);\r\n        let sign;\r\n        if (DdN > 0) {\r\n            sign = 1;\r\n        }\r\n        else if (DdN < 0) {\r\n            sign = -1;\r\n            DdN = -DdN;\r\n        }\r\n        else {\r\n            return {\r\n                intersect: false\r\n            };\r\n        }\r\n\r\n        const DdQxE2 = sign * this.direction.dotCross(diff, edge2);\r\n        if (DdQxE2 >= 0)\r\n        {\r\n            const DdE1xQ = sign * this.direction.dotCross(edge1, diff);\r\n            if (DdE1xQ >= 0)\r\n            {\r\n                if (DdQxE2 + DdE1xQ <= DdN)\r\n                {\r\n                    const QdN = -sign * diff.dot(normal);\r\n                    if (QdN >= 0)\r\n                    {\r\n                        const inv = 1 / DdN;\r\n\r\n                        const result = {\r\n                            intersect: true,\r\n                            parameter: 0,\r\n                            triangleBary: new Array<number>(),\r\n                            point: new Vector3()\r\n                        };\r\n\r\n                        result.parameter = QdN * inv;\r\n                        result.triangleBary[1] = DdQxE2 * inv;\r\n                        result.triangleBary[2] = DdE1xQ * inv;\r\n                        result.triangleBary[0] = 1 - result.triangleBary[1] - result.triangleBary[2];\r\n                        result.point.copy(this.direction).multiplyScalar(result.parameter).add(this.origin);\r\n                        return result;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            intersect: false\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 是否与包围球相交\r\n     * @param sphere\r\n     */\r\n    public intersecsSphere(sphere: Sphere): boolean {\r\n\r\n        const diff = _tempVec1.subVectors(this.origin, sphere.center);\r\n\r\n        const a0 = diff.dot(diff) - sphere.radius * sphere.radius;\r\n        if (a0 <= 0) {\r\n            return true;\r\n        }\r\n\r\n        const a1 = this.direction.dot(diff);\r\n        if (a1 >= 0) {\r\n            return false;\r\n        }\r\n\r\n        const discr = a1 * a1 - a0;\r\n        return (discr >= 0);\r\n    }\r\n\r\n    /**\r\n     * 与包围球相交检测\r\n     * @param sphere\r\n     */\r\n    public intersecSphere(sphere: Sphere): Ray3SphereIntersect {\r\n\r\n        const result = {\r\n            intersect: false,\r\n            numIntersections: 0,\r\n            parameter: new Array<number>(2),\r\n            point: new Array<Vector3>(2),\r\n        };\r\n\r\n        Line3.intersectSphere(this.origin, this.direction, sphere, result);\r\n\r\n        if (result.intersect) {\r\n            const rayInterval = [ 0, Infinity ];\r\n            const iiResult = Intervals.staticQuery(result.parameter, rayInterval);\r\n            if (iiResult.intersect) {\r\n                result.numIntersections = iiResult.numIntersections;\r\n                result.parameter = iiResult.overlap;\r\n            }\r\n            else {\r\n                result.intersect = false;\r\n                result.numIntersections = 0;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < result.numIntersections; ++i) {\r\n            result.point[i] = new Vector3().copy(this.direction).multiplyScalar(result.parameter[i]).add(this.origin);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 是否与平面相交\r\n     * @param plane\r\n     */\r\n    public intersecsPlane(plane: Plane): boolean {\r\n\r\n        const signedDistance = plane.distanceToPoint(this.origin);\r\n\r\n        const DdN = this.direction.dot(plane.normal);\r\n        if (DdN > 0) {\r\n            return (signedDistance <= 0);\r\n        }\r\n        else if (DdN < 0) {\r\n            return (signedDistance >= 0);\r\n        }\r\n        else {\r\n            return (Math.abs(signedDistance) == 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 与平面相交检测\r\n     * @param plane\r\n     */\r\n    public intersecPlane(plane: Plane): Ray3PlaneIntersect {\r\n\r\n        const result = {\r\n            intersect: false,\r\n            numIntersections: 0,\r\n            parameter: 0,\r\n            point: new Vector3()\r\n        };\r\n\r\n        Line3.intersectPlane(this.origin, this.direction, plane, result);\r\n\r\n        if (result.intersect) {\r\n            if (result.parameter < 0) {\r\n                result.intersect = false;\r\n                result.numIntersections = 0;\r\n            }\r\n        }\r\n\r\n        if (result.intersect) {\r\n            result.point.copy(this.direction).multiplyScalar(result.parameter).add(this.origin);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 是否与包围盒相交\r\n     * @param box\r\n     */\r\n    public intersecsBox(box: Box3): boolean {\r\n\r\n        const boxCenter = box.getCenter(_tempVec1);\r\n        const boxExtent = box.getExtent(_tempVec2);\r\n\r\n        const rayOrigin = _tempVec3.subVectors(this.origin, boxCenter);\r\n        return Ray3.intersecsBox(rayOrigin, this.direction, boxExtent);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param rayOrigin\r\n     * @param rayDirection\r\n     * @param boxExtent\r\n     */\r\n    public static intersecsBox(rayOrigin: Vector3, rayDirection: Vector3, boxExtent: Vector3): boolean {\r\n\r\n        for (let i = 0; i < 3; ++i) {\r\n            if (Math.abs(rayOrigin.p[i]) > boxExtent.p[i] && rayOrigin.p[i] * rayDirection.p[i] >= 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return Line3.intersectsBox(rayOrigin, rayDirection, boxExtent);\r\n    }\r\n\r\n    /**\r\n     * 与包围盒相交检测\r\n     * @param box\r\n     */\r\n    public intersecBox(box: Box3): Ray3Box3Intersect {\r\n\r\n        const boxCenter = box.getCenter(_tempVec1);\r\n        const boxExtent = box.getExtent(_tempVec2);\r\n\r\n        const rayOrigin = _tempVec3.subVectors(this.origin, boxCenter);\r\n\r\n        const result = {\r\n            intersect: false,\r\n            numPoints: 0,\r\n            lineParameter: new Array<number>(2),\r\n            point: new Array<Vector3>(2)\r\n        };\r\n\r\n        Ray3.intersecBox(rayOrigin, this.direction, boxExtent, result);\r\n\r\n        for (let i = 0; i < result.numPoints; ++i) {\r\n            result.point[i] = new Vector3().copy(this.direction).multiplyScalar(result.lineParameter[i]).add(this.origin);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param rayOrigin\r\n     * @param rayDirection\r\n     * @param boxExtent\r\n     * @param result\r\n     */\r\n    public static intersecBox(rayOrigin: Vector3, rayDirection: Vector3, boxExtent: Vector3, result: Ray3Box3Intersect) {\r\n\r\n        Line3.intersectBox(rayOrigin, rayDirection, boxExtent, result);\r\n\r\n        if (result.intersect) {\r\n            if (result.lineParameter[1] >= 0) {\r\n                if (result.lineParameter[0] < 0) {\r\n                    result.lineParameter[0] = 0;\r\n                }\r\n            }\r\n            else {\r\n                result.intersect = false;\r\n                result.numPoints = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否与OBB相交\r\n     * @param box\r\n     */\r\n    public intersecsOBB(box: OBB): boolean {\r\n\r\n        const diff = _tempVec1.subVectors(this.origin, box.center);\r\n        const rayOrigin = _tempVec2.set(diff.dot(box.axis[0]), diff.dot(box.axis[1]), diff.dot(box.axis[2]));\r\n        const rayDirection = _tempVec3.set(this.direction.dot(box.axis[0]), this.direction.dot(box.axis[1]), this.direction.dot(box.axis[2]));\r\n        const boxExtent = box.getExtent(_tempVec4);\r\n\r\n        return Ray3.intersecsBox(rayOrigin, rayDirection, boxExtent);\r\n    }\r\n\r\n    /**\r\n     * 与OBB相交检测\r\n     * @param box\r\n     */\r\n    public intersecOBB(box: OBB): Ray3OBBIntersect {\r\n\r\n        const diff = _tempVec1.subVectors(this.origin, box.center);\r\n        const rayOrigin = _tempVec2.set(diff.dot(box.axis[0]), diff.dot(box.axis[1]), diff.dot(box.axis[2]));\r\n        const rayDirection = _tempVec3.set(this.direction.dot(box.axis[0]), this.direction.dot(box.axis[1]), this.direction.dot(box.axis[2]));\r\n        const boxExtent = box.getExtent(_tempVec4);\r\n\r\n        const result = {\r\n            intersect: false,\r\n            numPoints: 0,\r\n            lineParameter: new Array<number>(2),\r\n            point: new Array<Vector3>(2)\r\n        };\r\n\r\n        Ray3.intersecBox(rayOrigin, rayDirection, boxExtent, result);\r\n\r\n        for (let i = 0; i < result.numPoints; ++i) {\r\n            result.point[i] = new Vector3().copy(this.direction).multiplyScalar(result.lineParameter[i]).add(this.origin);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 乘以Matrix4矩阵\r\n     * @param matrix4\r\n     */\r\n    public applyMatrix4(matrix4: Matrix4): Ray3 {\r\n        this.origin.applyMatrix4(matrix4);\r\n        matrix4.transformVector3(this.direction, this.direction);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 是否相等\r\n     * @param ray\r\n     */\r\n    public equals(ray: Ray3): boolean {\r\n        return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);\r\n    }\r\n}\r\n",
        "import { Nullable } from \"../types\";\r\nimport { Vector3 } from \"./Vector3\";\r\nimport { MathUtils } from \"./MathUtils\";\r\n\r\n/**\r\n * 球体\r\n * @category Math\r\n */\r\nexport class Spherical {\r\n\r\n    /**\r\n     * 半径\r\n     */\r\n    public radius: number = 1;\r\n    /**\r\n     * 垂直角度\r\n     */\r\n    public phi: number = 0;\r\n    /**\r\n     * 水平角度\r\n     */\r\n    public theta: number = 0;\r\n\r\n    constructor(radius: Nullable<number> = null, phi: Nullable<number> = null, theta: Nullable<number> = null) {\r\n        if (radius) {\r\n            this.radius = radius;\r\n        }\r\n        if (phi) {\r\n            this.phi = phi;\r\n        }\r\n        if (theta) {\r\n            this.theta = theta;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置半径，极角，方位角\r\n     * @param radius\r\n     * @param phi\r\n     * @param theta\r\n     */\r\n    public set(radius: number, phi: number, theta: number): Spherical {\r\n        this.radius = radius;\r\n        this.phi = phi;\r\n        this.theta = theta;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: Spherical): Spherical {\r\n        this.radius = source.radius;\r\n        this.phi = source.phi;\r\n        this.theta = source.theta;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): Spherical {\r\n        return new Spherical().copy(this);\r\n    }\r\n\r\n    /**\r\n     * 设置安全角度\r\n     */\r\n    public makeSafe(): Spherical {\r\n        const EPS = 0.000001;\r\n        this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置Vector3\r\n     * @param vec\r\n     */\r\n    public setFromVector3(vec: Vector3): Spherical {\r\n        return this.setFromCartesianCoords(vec.x, vec.y, vec.z);\r\n    }\r\n\r\n    /**\r\n     * 设置XYZ坐标\r\n     * @param x\r\n     * @param y\r\n     * @param z\r\n     */\r\n    public setFromCartesianCoords(x: number, y: number, z: number): Spherical {\r\n        this.radius = Math.sqrt(x * x + y * y + z * z);\r\n\r\n        if (this.radius == 0) {\r\n            this.theta = 0;\r\n            this.phi = 0;\r\n        } else {\r\n            this.theta = Math.atan2(x, z);\r\n            this.phi = Math.acos(MathUtils.clamp(y / this.radius, -1, 1));\r\n        }\r\n        return this;\r\n    }\r\n}\r\n",
        "import { Vector3 } from \"./Vector3\";\r\n\r\n/**\r\n * 3D球谐函数\r\n * @category Math\r\n */\r\nexport class SphericalHarmonics3 {\r\n\r\n    /**\r\n     * 置信度系数\r\n     */\r\n    public coefficients: Vector3[] = [];\r\n\r\n    /**\r\n     * 构造函数\r\n     */\r\n    constructor() {\r\n        for (let i = 0; i < 9; i++) {\r\n            this.coefficients.push(new Vector3());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置置信度系数\r\n     * @param coefficients\r\n     */\r\n    public set(coefficients: Vector3[]): SphericalHarmonics3 {\r\n        for (let i = 0; i < 9; i++) {\r\n            this.coefficients[i].copy(coefficients[i]);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 重置\r\n     */\r\n    public zero(): SphericalHarmonics3 {\r\n        for (let i = 0; i < 9; i++) {\r\n            this.coefficients[i].set(0, 0, 0);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获得法线方向的亮度\r\n     * @param normal\r\n     * @param target\r\n     */\r\n    public getAt(normal: Vector3, target: Vector3 = new Vector3()): Vector3 {\r\n\r\n        const x = normal.x;\r\n        const y = normal.y;\r\n        const z = normal.z;\r\n\r\n        const coeff = this.coefficients;\r\n\r\n        // band 0\r\n        target.copy(coeff[0]).multiplyScalar(0.282095);\r\n\r\n        // band 1\r\n        target.addScaledVector(coeff[ 1 ], 0.488603 * y);\r\n        target.addScaledVector(coeff[ 2 ], 0.488603 * z);\r\n        target.addScaledVector(coeff[ 3 ], 0.488603 * x);\r\n\r\n        // band 2\r\n        target.addScaledVector(coeff[ 4 ], 1.092548 * (x * y));\r\n        target.addScaledVector(coeff[ 5 ], 1.092548 * (y * z));\r\n        target.addScaledVector(coeff[ 6 ], 0.315392 * (3.0 * z * z - 1.0));\r\n        target.addScaledVector(coeff[ 7 ], 1.092548 * (x * z));\r\n        target.addScaledVector(coeff[ 8 ], 0.546274 * (x * x - y * y));\r\n\r\n        return target;\r\n    }\r\n\r\n    /**\r\n     * 求法线方向上的辐照度(辐照度与余弦波瓣卷积)\r\n     * @param normal\r\n     * @param target\r\n     */\r\n    public getIrradianceAt(normal: Vector3, target: Vector3 = new Vector3()): Vector3 {\r\n\r\n        const x = normal.x;\r\n        const y = normal.y;\r\n        const z = normal.z;\r\n\r\n        const coeff = this.coefficients;\r\n\r\n        // band 0\r\n        target.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095\r\n\r\n        // band 1\r\n        target.addScaledVector(coeff[ 1 ], 2.0 * 0.511664 * y); // ( 2 * π / 3 ) * 0.488603\r\n        target.addScaledVector(coeff[ 2 ], 2.0 * 0.511664 * z);\r\n        target.addScaledVector(coeff[ 3 ], 2.0 * 0.511664 * x);\r\n\r\n        // band 2\r\n        target.addScaledVector(coeff[ 4 ], 2.0 * 0.429043 * x * y); // ( π / 4 ) * 1.092548\r\n        target.addScaledVector(coeff[ 5 ], 2.0 * 0.429043 * y * z);\r\n        target.addScaledVector(coeff[ 6 ], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3\r\n        target.addScaledVector(coeff[ 7 ], 2.0 * 0.429043 * x * z);\r\n        target.addScaledVector(coeff[ 8 ], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274\r\n\r\n        return target;\r\n    }\r\n\r\n    /**\r\n     * 与SphericalHarmonics3相加\r\n     * @param sh\r\n     */\r\n    public add(sh: SphericalHarmonics3): SphericalHarmonics3 {\r\n        for (let i = 0; i < 9; i++) {\r\n            this.coefficients[i].add(sh.coefficients[i]);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 与SphericalHarmonics3乘以标量的结果相加\r\n     * @param sh\r\n     * @param scalar\r\n     */\r\n    public addScaledSH(sh: SphericalHarmonics3, scalar: number): SphericalHarmonics3 {\r\n        for (let i = 0; i < 9; i++) {\r\n            this.coefficients[ i ].addScaledVector(sh.coefficients[ i ], scalar);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 线性插值\r\n     * @param sh\r\n     * @param alpha\r\n     */\r\n    public lerp(sh: SphericalHarmonics3, alpha: number): SphericalHarmonics3 {\r\n        for (let i = 0; i < 9; i++) {\r\n            this.coefficients[i].lerp(sh.coefficients[i], alpha);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 是否相等\r\n     * @param sh\r\n     */\r\n    public equals(sh: SphericalHarmonics3): boolean {\r\n        for (let i = 0; i < 9; i++) {\r\n            if (!this.coefficients[i].equals(sh.coefficients[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param sh\r\n     */\r\n    public copy(sh: SphericalHarmonics3): SphericalHarmonics3 {\r\n        return this.set(sh.coefficients);\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): SphericalHarmonics3 {\r\n        return new SphericalHarmonics3().copy(this);\r\n    }\r\n}\r\n",
        "import { Vector3 } from \"./Vector3\";\r\nimport { Vector2 } from \"./Vector2\";\r\nimport { int, Nullable } from \"../types\";\r\nimport { Plane } from \"./Plane\";\r\nimport { Box3 } from \"./Box3\";\r\nimport { OBB } from \"./OBB\";\r\nimport { LCPSolver } from \"./Algorithm/LCPSolver\";\r\nimport { PlanePolygonIntersectType } from \"../Enums/PlanePolygonIntersectType\";\r\nimport { TriangleOBBIntersect } from \"./InterfaceType/IntersectResult\";\r\nimport {\r\n    TriangleBox3Distance,\r\n    TriangleOBBDistance,\r\n    TrianglePoint3Distance,\r\n    TriangleTriangleDistance\r\n} from \"./InterfaceType/DistanceResult\";\r\nimport { LineSegment3 } from \"./LineSegment3\";\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst _v0 = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _v1 = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _v2 = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _v3 = new Vector3();\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst _vab = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _vac = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _vbc = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _vap = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _vbp = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _vcp = new Vector3();\r\n/**\r\n * @ignore\r\n */\r\nconst _p0 = new Vector2();\r\n\r\n/**\r\n * 三角形\r\n * @category Math\r\n */\r\nexport class Triangle {\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    private readonly _p: Vector3[];\r\n\r\n    /**\r\n     * 内部元素数组\r\n     */\r\n    public get p() {\r\n        return this._p;\r\n    }\r\n\r\n    /**\r\n     * 坐标点a\r\n     */\r\n    public get a() {\r\n        return this._p[0];\r\n    }\r\n    public set a(value) {\r\n        this._p[0].copy(value);\r\n    }\r\n\r\n    /**\r\n     * 坐标点b\r\n     */\r\n    public get b() {\r\n        return this._p[1];\r\n    }\r\n    public set b(value) {\r\n        this._p[1].copy(value);\r\n    }\r\n\r\n    /**\r\n     * 坐标点c\r\n     */\r\n    public get c() {\r\n        return this._p[2];\r\n    }\r\n    public set c(value) {\r\n        this._p[2].copy(value);\r\n    }\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param a\r\n     * @param b\r\n     * @param c\r\n     */\r\n    constructor(a: Nullable<Vector3> = null, b: Nullable<Vector3> = null, c: Nullable<Vector3> = null) {\r\n\r\n        this._p = [new Vector3(), new Vector3(), new Vector3()];\r\n\r\n        if (a) {\r\n            this._p[0].copy(a);\r\n        }\r\n        if (b) {\r\n            this._p[1].copy(b);\r\n        }\r\n        if (c) {\r\n            this._p[2].copy(c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 计算3个点的法线\r\n     * @param a\r\n     * @param b\r\n     * @param c\r\n     * @param target\r\n     */\r\n    public static getNormal(a: Vector3, b: Vector3, c: Vector3, target = new Vector3()): Vector3 {\r\n\r\n        target.subVectors(c, b);\r\n        _v0.subVectors(a, b);\r\n        target.cross(_v0);\r\n\r\n        const targetLengthSq = target.lengthSq();\r\n        if (targetLengthSq > 0) {\r\n            return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));\r\n        }\r\n\r\n        return target.set(0, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * 求3点的重心\r\n     * @param point\r\n     * @param a\r\n     * @param b\r\n     * @param c\r\n     * @param target\r\n     */\r\n    public static getBarycoord(point: Vector3, a: Vector3, b: Vector3, c: Vector3, target = new Vector3()): Vector3 {\r\n\r\n        _v0.subVectors(c, a);\r\n        _v1.subVectors(b, a);\r\n        _v2.subVectors(point, a);\r\n\r\n        const dot00 = _v0.dot(_v0);\r\n        const dot01 = _v0.dot(_v1);\r\n        const dot02 = _v0.dot(_v2);\r\n        const dot11 = _v1.dot(_v1);\r\n        const dot12 = _v1.dot(_v2);\r\n\r\n        const denom = (dot00 * dot11 - dot01 * dot01);\r\n\r\n        // collinear or singular triangle\r\n        if (denom == 0) {\r\n            // arbitrary location outside of triangle?\r\n            // not sure if this is the best idea, maybe should be returning undefined\r\n            return target.set(-2, -1, -1);\r\n        }\r\n\r\n        const invDenom = 1 / denom;\r\n        const u = (dot11 * dot02 - dot01 * dot12) * invDenom;\r\n        const v = (dot00 * dot12 - dot01 * dot02) * invDenom;\r\n\r\n        // barycentric coordinates must always sum to 1\r\n        return target.set(1 - u - v, v, u);\r\n    }\r\n\r\n    /**\r\n     * 是否包含点\r\n     * @param point\r\n     * @param a\r\n     * @param b\r\n     * @param c\r\n     */\r\n    public static containsPoint(point: Vector3, a: Vector3, b: Vector3, c: Vector3): boolean {\r\n\r\n        Triangle.getBarycoord(point, a, b, c, _v1);\r\n        return (_v1.x >= 0) && (_v1.y >= 0) && ((_v1.x + _v1.y) <= 1);\r\n    }\r\n\r\n    /**\r\n     * 获取UV\r\n     * @param point\r\n     * @param p1\r\n     * @param p2\r\n     * @param p3\r\n     * @param uv1\r\n     * @param uv2\r\n     * @param uv3\r\n     * @param target\r\n     */\r\n    public static getUV(point: Vector3, p1: Vector3, p2: Vector3, p3: Vector3, uv1: Vector2, uv2: Vector2, uv3: Vector2, target = new Vector2()): Vector2 {\r\n\r\n        Triangle.getBarycoord(point, p1, p2, p3, _v3);\r\n\r\n        target.set(0, 0);\r\n        target.addScaledVector(uv1, _v3.x);\r\n        target.addScaledVector(uv2, _v3.y);\r\n        target.addScaledVector(uv3, _v3.z);\r\n\r\n        return target;\r\n    }\r\n\r\n    /**\r\n     * 是否正面\r\n     * @param a\r\n     * @param b\r\n     * @param c\r\n     * @param direction\r\n     */\r\n    public static isFrontFacing(a: Vector3, b: Vector3, c: Vector3, direction: Vector3): boolean {\r\n\r\n        _v0.subVectors(c, b);\r\n        _v1.subVectors(a, b);\r\n\r\n        // strictly front facing\r\n        return (_v0.cross(_v1).dot(direction) < 0);\r\n    }\r\n\r\n    /**\r\n     * 设置3个点\r\n     * @param a\r\n     * @param b\r\n     * @param c\r\n     */\r\n    public set(a: Vector3, b: Vector3, c: Vector3): Triangle {\r\n        this.a.copy(a);\r\n        this.b.copy(b);\r\n        this.c.copy(c);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): Triangle {\r\n        return new Triangle(this.a, this.b, this.c);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param triangle\r\n     */\r\n    public copy(triangle: Triangle): Triangle {\r\n        this.a.copy(triangle.a);\r\n        this.b.copy(triangle.b);\r\n        this.c.copy(triangle.c);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置组件\r\n     * @param index\r\n     * @param value\r\n     */\r\n    public setComponent(index: int, value: Vector3): Triangle {\r\n        switch (index) {\r\n            case 0: this.a.copy(value); break;\r\n            case 1: this.b.copy(value); break;\r\n            case 2: this.c.copy(value); break;\r\n            default: throw new Error(`index is out of range: ${index}`);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取组件\r\n     * @param index\r\n     */\r\n    public getComponent(index: int): Vector3 {\r\n        switch (index) {\r\n            case 0: return this.a;\r\n            case 1: return this.b;\r\n            case 2: return this.c;\r\n            default: throw new Error(`index is out of range: ${index}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取面积\r\n     */\r\n    public getArea(): number {\r\n        _v0.subVectors(this.c, this.b);\r\n        _v1.subVectors(this.a, this.b);\r\n        return _v0.cross(_v1).length() * 0.5;\r\n    }\r\n\r\n    /**\r\n     * 获取中点\r\n     * @param target\r\n     */\r\n    public getMidpoint(target = new Vector3()): Vector3 {\r\n        return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);\r\n    }\r\n\r\n    /**\r\n     * 获取法线\r\n     * @param target\r\n     */\r\n    public getNormal(target = new Vector3()): Vector3 {\r\n        return Triangle.getNormal(this.a, this.b, this.c, target);\r\n    }\r\n\r\n    /**\r\n     * 获取平面\r\n     * @param target\r\n     */\r\n    public getPlane(target = new Plane()): Plane {\r\n        return target.setFromCoplanarPoints(this.a, this.b, this.c);\r\n    }\r\n\r\n    /**\r\n     * 获取重心\r\n     * @param point\r\n     * @param target\r\n     */\r\n    public getBarycoord(point: Vector3, target = new Vector3()): Vector3 {\r\n        return Triangle.getBarycoord(point, this.a, this.b, this.c, target);\r\n    }\r\n\r\n    /**\r\n     * 获取UV\r\n     * @param point\r\n     * @param uv1\r\n     * @param uv2\r\n     * @param uv3\r\n     * @param result\r\n     */\r\n    public getUV(point: Vector3, uv1: Vector2, uv2: Vector2, uv3: Vector2, result = new Vector2()): Vector2 {\r\n        return Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, result);\r\n    }\r\n\r\n    /**\r\n     * 坐标轴投影到三角形\r\n     * @param axis\r\n     * @param minmax\r\n     */\r\n    public axisProjectionMinMax(axis: Vector3, minmax: Vector2 = new Vector2()): Vector2 {\r\n\r\n        const dot = [\r\n            axis.dot(this.a),\r\n            axis.dot(this.b),\r\n            axis.dot(this.c)\r\n        ];\r\n\r\n        minmax.x = dot[0];\r\n        minmax.y = minmax.x;\r\n\r\n        if (dot[1] < minmax.x) {\r\n            minmax.x = dot[1];\r\n        }\r\n        else if (dot[1] > minmax.y) {\r\n            minmax.y = dot[1];\r\n        }\r\n\r\n        if (dot[2] < minmax.x) {\r\n            minmax.x = dot[2];\r\n        }\r\n        else if (dot[2] > minmax.y) {\r\n            minmax.y = dot[2];\r\n        }\r\n\r\n        return minmax;\r\n    }\r\n\r\n    /**\r\n     * 是否包含点\r\n     * @param point\r\n     */\r\n    public containsPoint(point: Vector3): boolean {\r\n        return Triangle.containsPoint(point, this.a, this.b, this.c);\r\n    }\r\n\r\n    /**\r\n     * 点到三角形的最近点\r\n     * @param point\r\n     * @param target\r\n     */\r\n    public closestPointToPoint(point: Vector3, target = new Vector3()): Vector3 {\r\n\r\n        let a = this.a;\r\n        let b = this.b;\r\n        let c = this.c;\r\n        let v;\r\n        let w;\r\n\r\n        // algorithm thanks to Real-Time Collision Detection by Christer Ericson,\r\n        // published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\r\n        // under the accompanying license; see chapter 5.1.5 for detailed explanation.\r\n        // basically, we're distinguishing which of the voronoi regions of the triangle\r\n        // the point lies in with the minimum amount of redundant computation.\r\n\r\n        _vab.subVectors(b, a);\r\n        _vac.subVectors(c, a);\r\n        _vap.subVectors(point, a);\r\n        let d1 = _vab.dot(_vap);\r\n        let d2 = _vac.dot(_vap);\r\n        if (d1 <= 0 && d2 <= 0) {\r\n            // vertex region of A; barycentric coords (1, 0, 0)\r\n            return target.copy(a);\r\n        }\r\n\r\n        _vbp.subVectors(point, b);\r\n        let d3 = _vab.dot(_vbp);\r\n        let d4 = _vac.dot(_vbp);\r\n        if (d3 >= 0 && d4 <= d3) {\r\n            // vertex region of B; barycentric coords (0, 1, 0)\r\n            return target.copy(b);\r\n        }\r\n\r\n        let vc = d1 * d4 - d3 * d2;\r\n        if (vc <= 0 && d1 >= 0 && d3 <= 0) {\r\n            v = d1 / (d1 - d3);\r\n            // edge region of AB; barycentric coords (1-v, v, 0)\r\n            return target.copy(a).addScaledVector(_vab, v);\r\n        }\r\n\r\n        _vcp.subVectors(point, c);\r\n        let d5 = _vab.dot(_vcp);\r\n        let d6 = _vac.dot(_vcp);\r\n        if (d6 >= 0 && d5 <= d6) {\r\n            // vertex region of C; barycentric coords (0, 0, 1)\r\n            return target.copy(c);\r\n        }\r\n\r\n        let vb = d5 * d2 - d1 * d6;\r\n        if (vb <= 0 && d2 >= 0 && d6 <= 0) {\r\n            w = d2 / (d2 - d6);\r\n            // edge region of AC; barycentric coords (1-w, 0, w)\r\n            return target.copy(a).addScaledVector(_vac, w);\r\n        }\r\n\r\n        let va = d3 * d6 - d5 * d4;\r\n        if (va <= 0 && (d4 - d3) >= 0 && (d5 - d6) >= 0) {\r\n            _vbc.subVectors(c, b);\r\n            w = (d4 - d3) / ((d4 - d3) + (d5 - d6));\r\n            // edge region of BC; barycentric coords (0, 1-w, w)\r\n            return target.copy(b).addScaledVector(_vbc, w); // edge region of BC\r\n        }\r\n\r\n        // face region\r\n        let denom = 1 / (va + vb + vc);\r\n        // u = va * denom\r\n        v = vb * denom;\r\n        w = vc * denom;\r\n        return target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);\r\n    }\r\n\r\n    /**\r\n     * 到点的SQ距离\r\n     * @param point\r\n     * @param closestPoint\r\n     * @param parameter\r\n     */\r\n    public distanceSqToPoint(point: Vector3, closestPoint: Nullable<Vector3> = null, parameter: Nullable<TrianglePoint3Distance> = null): number {\r\n\r\n        const diff = _v0.subVectors(point, this.a);\r\n        const edge0 = _v1.subVectors(this.b, this.a);\r\n        const edge1 = _v2.subVectors(this.c, this.a);\r\n\r\n        const a00 = edge0.dot(edge0);\r\n        const a01 = edge0.dot(edge1);\r\n        const a11 = edge1.dot(edge1);\r\n        const b0 = -diff.dot(edge0);\r\n        const b1 = -diff.dot(edge1);\r\n\r\n        const f00 = b0;\r\n        const f10 = b0 + a00;\r\n        const f01 = b0 + a01;\r\n\r\n        let p0 = _vab;\r\n        let p1 = _vac;\r\n        let p = _vap;\r\n        let dt1, h0, h1;\r\n\r\n        // Compute the endpoints p0 and p1 of the segment.  The segment is\r\n        // parameterized by L(z) = (1-z)*p0 + z*p1 for z in [0,1] and the\r\n        // directional derivative of half the quadratic on the segment is\r\n        // H(z) = Dot(p1-p0,gradient[Q](L(z))/2), where gradient[Q]/2 =\r\n        // (F,G).  By design, F(L(z)) = 0 for cases (2), (4), (5), and\r\n        // (6).  Cases (1) and (3) can correspond to no-intersection or\r\n        // intersection of F = 0 with the triangle.\r\n        if (f00 >= 0) {\r\n\r\n            if (f01 >= 0) {\r\n\r\n                // (1) p0 = (0,0), p1 = (0,1), H(z) = G(L(z))\r\n                getMinEdge02(a11, b1, p);\r\n            }\r\n            else {\r\n\r\n                // (2) p0 = (0,t10), p1 = (t01,1-t01),\r\n                // H(z) = (t11 - t10)*G(L(z))\r\n                p0.x = 0;\r\n                p0.y = f00 / (f00 - f01);\r\n                p1.x = f01 / (f01 - f10);\r\n                p1.y = 1 - p1.x;\r\n                dt1 = p1.y - p0.y;\r\n                h0 = dt1 * (a11 * p0.y + b1);\r\n\r\n                if (h0 >= 0) {\r\n\r\n                    getMinEdge02(a11, b1, p);\r\n                }\r\n                else {\r\n\r\n                    h1 = dt1 * (a01 * p1.x + a11 * p1.y + b1);\r\n                    if (h1 <= 0) {\r\n\r\n                        getMinEdge12(a01, a11, b1, f10, f01, p);\r\n                    }\r\n                    else {\r\n\r\n                        getMinInterior(p0, h0, p1, h1, p);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else if (f01 <= 0) {\r\n\r\n            if (f10 <= 0) {\r\n\r\n                // (3) p0 = (1,0), p1 = (0,1), H(z) = G(L(z)) - F(L(z))\r\n                getMinEdge12(a01, a11, b1, f10, f01, p);\r\n            }\r\n            else {\r\n\r\n                // (4) p0 = (t00,0), p1 = (t01,1-t01), H(z) = t11*G(L(z))\r\n                p0.x = f00 / (f00 - f10);\r\n                p0.y = 0;\r\n                p1.x = f01 / (f01 - f10);\r\n                p1.y = 1 - p1.x;\r\n                h0 = p1.y * (a01 * p0.x + b1);\r\n\r\n                if (h0 >= 0) {\r\n\r\n                    p = p0;  // GetMin// Edge01\r\n                }\r\n                else {\r\n\r\n                    h1 = p1.y * (a01 * p1.x + a11 * p1.y + b1);\r\n                    if (h1 <= 0) {\r\n                        getMinEdge12(a01, a11, b1, f10, f01, p);\r\n                    }\r\n                    else {\r\n                        getMinInterior(p0, h0, p1, h1, p);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else if (f10 <= 0) {\r\n\r\n            // (5) p0 = (0,t10), p1 = (t01,1-t01),\r\n            // H(z) = (t11 - t10)*G(L(z))\r\n            p0.x = 0;\r\n            p0.y = f00 / (f00 - f01);\r\n            p1.x = f01 / (f01 - f10);\r\n            p1.y = 1 - p1.x;\r\n            dt1 = p1.y - p0.y;\r\n            h0 = dt1 * (a11 * p0.y + b1);\r\n\r\n            if (h0 >= 0) {\r\n                getMinEdge02(a11, b1, p);\r\n            }\r\n            else {\r\n                h1 = dt1 * (a01 * p1.x + a11 * p1.y + b1);\r\n                if (h1 <= 0) {\r\n                    getMinEdge12(a01, a11, b1, f10, f01, p);\r\n                }\r\n                else {\r\n                    getMinInterior(p0, h0, p1, h1, p);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n\r\n            // (6) p0 = (t00,0), p1 = (0,t11), H(z) = t11*G(L(z))\r\n            p0.x = f00 / (f00 - f10);\r\n            p0.y = 0;\r\n            p1.x = 0;\r\n            p1.y = f00 / (f00 - f01);\r\n            h0 = p1.y * (a01 * p0.x + b1);\r\n\r\n            if (h0 >= 0) {\r\n                p = p0;\r\n            }\r\n            else {\r\n                h1 = p1.y * (a11 * p1.y + b1);\r\n                if (h1 <= 0) {\r\n                    getMinEdge02(a11, b1, p);\r\n                }\r\n                else {\r\n                    getMinInterior(p0, h0, p1, h1, p);\r\n                }\r\n            }\r\n        }\r\n\r\n        _vcp.copy(this.a).add(_v3.copy(edge0).multiplyScalar(p.x)).add(_v3.copy(edge1).multiplyScalar(p.y));\r\n\r\n        if (closestPoint) {\r\n            closestPoint.copy(_vcp);\r\n        }\r\n        if (parameter) {\r\n            parameter.parameter[0] = 1 - p.x - p.y;\r\n            parameter.parameter[1] = p.x;\r\n            parameter.parameter[2] = p.y;\r\n        }\r\n\r\n        diff.subVectors(point, _vcp);\r\n        return diff.dot(diff);\r\n    }\r\n\r\n    /**\r\n     * 到点的距离\r\n     * @param point\r\n     * @param closestPoint\r\n     * @param parameter\r\n     */\r\n    public distanceToPoint(point: Vector3, closestPoint: Nullable<Vector3> = null, parameter: Nullable<TrianglePoint3Distance> = null): number {\r\n        return Math.sqrt(this.distanceSqToPoint(point, closestPoint, parameter));\r\n    }\r\n\r\n    /**\r\n     * 与三角形的SQ距离\r\n     * @param triangle\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceSqToTriangle(triangle: Triangle, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<TriangleTriangleDistance> = null): number {\r\n\r\n        const triangle0 = this;\r\n        const triangle1 = triangle;\r\n\r\n        let sqrDistance = Infinity;\r\n\r\n        for (let i0 = 2, i1 = 0; i1 < 3; i0 = i1++) {\r\n\r\n            const segCenter = _v0.addVectors(triangle0.p[i0], triangle0.p[i1]).multiplyScalar(0.5);\r\n            const segDirection = _v1.subVectors(triangle0.p[i1], triangle0.p[i0]);\r\n            const segExtent = 0.5 * segDirection.length();\r\n            segDirection.normalize();\r\n\r\n            const edge = new LineSegment3();\r\n            edge.setCenteredForm(segCenter, segDirection, segExtent);\r\n\r\n            const stResult = {\r\n                segmentParameter: 0,\r\n                triangleParameter: []\r\n            };\r\n            const stSqrDistance = edge.distanceSqToTriangle(triangle1, _v2, _v3, stResult);\r\n            if (stSqrDistance < sqrDistance)\r\n            {\r\n                sqrDistance = stSqrDistance;\r\n\r\n                if (parameter) {\r\n                    const ratio = stResult.segmentParameter / segExtent;\r\n                    parameter.triangle0Parameter[i0] = 0.5 * (1 - ratio);\r\n                    parameter.triangle0Parameter[i1] = 1 - parameter.triangle0Parameter[i0];\r\n                    parameter.triangle0Parameter[3 - i0 - i1] = 0;\r\n                    parameter.triangle1Parameter[0] = stResult.triangleParameter[0];\r\n                    parameter.triangle1Parameter[1] = stResult.triangleParameter[1];\r\n                    parameter.triangle1Parameter[2] = stResult.triangleParameter[2];\r\n                }\r\n\r\n                if (closestPoint0) {\r\n                    closestPoint0.copy(_v2);\r\n                }\r\n                if (closestPoint1) {\r\n                    closestPoint1.copy(_v3);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i0 = 2, i1 = 0; i1 < 3; i0 = i1++) {\r\n\r\n            const segCenter = _v0.addVectors(triangle1.p[i0], triangle1.p[i1]).multiplyScalar(0.5);\r\n            const segDirection = _v1.subVectors(triangle1.p[i1], triangle1.p[i0]);\r\n            const segExtent = 0.5 * segDirection.length();\r\n            segDirection.normalize();\r\n\r\n            const edge = new LineSegment3();\r\n            edge.setCenteredForm(segCenter, segDirection, segExtent);\r\n\r\n            const stResult = {\r\n                segmentParameter: 0,\r\n                triangleParameter: []\r\n            };\r\n            const stSqrDistance = edge.distanceSqToTriangle(triangle0, _v2, _v3, stResult);\r\n            if (stSqrDistance < sqrDistance)\r\n            {\r\n                sqrDistance = stSqrDistance;\r\n\r\n                if (parameter) {\r\n                    const ratio = stResult.segmentParameter / segExtent;\r\n                    parameter.triangle0Parameter[0] = stResult.triangleParameter[0];\r\n                    parameter.triangle0Parameter[1] = stResult.triangleParameter[1];\r\n                    parameter.triangle0Parameter[2] = stResult.triangleParameter[2];\r\n                    parameter.triangle1Parameter[i0] = 0.5 * (1 - ratio);\r\n                    parameter.triangle1Parameter[i1] = 1 - parameter.triangle1Parameter[i0];\r\n                    parameter.triangle1Parameter[3 - i0 - i1] = 0;\r\n                }\r\n\r\n                if (closestPoint0) {\r\n                    closestPoint0.copy(_v2);\r\n                }\r\n                if (closestPoint1) {\r\n                    closestPoint1.copy(_v3);\r\n                }\r\n            }\r\n        }\r\n\r\n        return sqrDistance;\r\n    }\r\n\r\n    /**\r\n     * 与三角形的距离\r\n     * @param triangle\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceToTriangle(triangle: Triangle, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<TriangleTriangleDistance> = null): number {\r\n        return Math.sqrt(this.distanceSqToTriangle(triangle, closestPoint0, closestPoint1, parameter));\r\n    }\r\n\r\n    /**\r\n     * 与包围盒的SQ距离\r\n     * @param box\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceSqToBox(box: Box3, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<TriangleBox3Distance> = null): number {\r\n\r\n        const K = _v0.subVectors(box.max, box.min);\r\n        const V = _v1.subVectors(this.a, box.min);\r\n        const E0 = _v2.subVectors(this.b, this.a);\r\n        const E1 = _v3.subVectors(this.c, this.a);\r\n\r\n        const dotVE0 = V.dot(E0);\r\n        const dotVE1 = V.dot(E1);\r\n        const dotE0E0 = E0.dot(E0);\r\n        const dotE0E1 = E0.dot(E1);\r\n        const dotE1E1 = E1.dot(E1);\r\n\r\n        const q = [\r\n            -V.x, -V.y, -V.z, dotVE0, dotVE1, K.x, K.y, K.z, 1\r\n        ];\r\n\r\n        const M = [\r\n            [1, 0, 0, -E0.x, -E1.x, 1, 0, 0, 0],\r\n            [0, 1, 0, -E0.y, -E1.y, 0, 1, 0, 0],\r\n            [0, 0, 1, -E0.z, -E1.z, 0, 0, 1, 0],\r\n            [-E0.x, -E0.y, -E0.z, dotE0E0, dotE0E1, 0, 0, 0, 1],\r\n            [-E1.x, -E1.y, -E1.z, dotE0E1, dotE1E1, 0, 0, 0, 1],\r\n            [-1, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            [0, -1, 0, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, -1, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, -1, -1, 0, 0, 0, 0]\r\n        ];\r\n\r\n        const w = new Array<number>(9);\r\n        const z = new Array<number>(9);\r\n\r\n        const mLCP = new LCPSolver(9);\r\n        if (mLCP.solve(q, M, w, z)) {\r\n            _vab.copy(this.a).add(E0.multiplyScalar(z[3])).add(E1.multiplyScalar(z[4]));\r\n\r\n            if (parameter) {\r\n                parameter.queryIsSuccessful = true;\r\n                parameter.numLCPIterations = mLCP.getNumIterations();\r\n                parameter.triangleParameter[0] = 1 - z[3] - z[4];\r\n                parameter.triangleParameter[1] = z[3];\r\n                parameter.triangleParameter[2] = z[4];\r\n            }\r\n\r\n            for (let i = 0; i < 3; ++i) {\r\n                _vac.p[i] =  z[i] + box.min.p[i];\r\n\r\n                if (parameter) {\r\n                    parameter.boxParameter[i] = _vac.p[i];\r\n                }\r\n            }\r\n\r\n            if (closestPoint0) {\r\n                closestPoint0.copy(_vab);\r\n            }\r\n            if (closestPoint1) {\r\n                closestPoint1.copy(_vac);\r\n            }\r\n\r\n            const diff = _vap.subVectors(_vac, _vab);\r\n            return diff.dot(diff);\r\n        }\r\n        else {\r\n            if (parameter) {\r\n                parameter.queryIsSuccessful = false;\r\n                parameter.numLCPIterations = mLCP.getNumIterations();\r\n            }\r\n        }\r\n        return NaN;\r\n    }\r\n\r\n    /**\r\n     * 与包围盒的距离\r\n     * @param box\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceToBox(box: Box3, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<TriangleBox3Distance> = null): number {\r\n        return Math.sqrt(this.distanceSqToBox(box, closestPoint0, closestPoint1, parameter));\r\n    }\r\n\r\n    /**\r\n     * 与OBB的SQ距离\r\n     * @param box\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceSqToOBB(box: OBB, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<TriangleOBBDistance> = null): number {\r\n\r\n        const K = _vab.copy(box.extent).multiplyScalar(2);\r\n        const tempV = _vac.subVectors(this.a, box.center);\r\n        const tempE0 = _vap.subVectors(this.b, this.a);\r\n        const tempE1 = _vcp.subVectors(this.c, this.a);\r\n\r\n        const V = _v0, E0 = _v1, E1 = _v2;\r\n        for (let i = 0; i < 3; ++i) {\r\n            V.p[i] =  box.axis[i].dot(tempV) + box.extent.p[i];\r\n            E0.p[i] =  box.axis[i].dot(tempE0);\r\n            E1.p[i] =  box.axis[i].dot(tempE1);\r\n        }\r\n\r\n        const dotVE0 = V.dot(E0);\r\n        const dotVE1 = V.dot(E1);\r\n        const dotE0E0 = E0.dot(E0);\r\n        const dotE0E1 = E0.dot(E1);\r\n        const dotE1E1 = E1.dot(E1);\r\n\r\n        const q = [\r\n            -V.x, -V.y, -V.z, dotVE0, dotVE1, K.x, K.y, K.z, 1\r\n        ];\r\n\r\n        const M = [\r\n            [1, 0, 0, -E0.x, -E1.x, 1, 0, 0, 0],\r\n            [0, 1, 0, -E0.y, -E1.y, 0, 1, 0, 0],\r\n            [0, 0, 1, -E0.z, -E1.z, 0, 0, 1, 0],\r\n            [-E0.x, -E0.y, -E0.z, dotE0E0, dotE0E1, 0, 0, 0, 1],\r\n            [-E1.x, -E1.y, -E1.z, dotE0E1, dotE1E1, 0, 0, 0, 1],\r\n            [-1, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            [0, -1, 0, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, -1, 0, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, -1, -1, 0, 0, 0, 0]\r\n        ];\r\n\r\n        const w = new Array<number>(9);\r\n        const z = new Array<number>(9);\r\n\r\n        const mLCP = new LCPSolver(9);\r\n        if (mLCP.solve(q, M, w, z)) {\r\n\r\n            if (parameter) {\r\n                parameter.queryIsSuccessful = true;\r\n                parameter.numLCPIterations = mLCP.getNumIterations();\r\n                parameter.triangleParameter[0] = 1 - z[3] - z[4];\r\n                parameter.triangleParameter[1] = z[3];\r\n                parameter.triangleParameter[2] = z[4];\r\n            }\r\n\r\n            _v1.copy(this.a).add(tempE0.multiplyScalar(z[3])).add(tempE1.multiplyScalar(z[4]));\r\n            _v2.copy(box.center);\r\n\r\n            for (let i = 0; i < 3; ++i) {\r\n\r\n                const boxParameter = z[i] - box.extent.p[i];\r\n                if (parameter) {\r\n                    parameter.boxParameter[i] = boxParameter;\r\n                }\r\n\r\n                _v2.add(_v0.copy(box.axis[i]).multiplyScalar(boxParameter));\r\n            }\r\n\r\n            if (closestPoint0) {\r\n                closestPoint0.copy(_v1);\r\n            }\r\n            if (closestPoint1) {\r\n                closestPoint1.copy(_v2);\r\n            }\r\n\r\n            const diff = _v3.subVectors(_v2, _v1);\r\n            return diff.dot(diff);\r\n        }\r\n        else {\r\n            if (parameter) {\r\n                parameter.queryIsSuccessful = false;\r\n                parameter.numLCPIterations = mLCP.getNumIterations();\r\n            }\r\n        }\r\n        return NaN;\r\n    }\r\n\r\n    /**\r\n     * 与OBB的距离\r\n     * @param box\r\n     * @param closestPoint0\r\n     * @param closestPoint1\r\n     * @param parameter\r\n     */\r\n    public distanceToOBB(box: OBB, closestPoint0: Nullable<Vector3> = null, closestPoint1: Nullable<Vector3> = null, parameter: Nullable<TriangleOBBDistance> = null): number {\r\n        return Math.sqrt(this.distanceSqToOBB(box, closestPoint0, closestPoint1, parameter));\r\n    }\r\n\r\n        /**\r\n     * 是否与OBB相交\r\n     * @param obb\r\n     */\r\n    public intersectsOBB(obb: OBB): boolean {\r\n\r\n        const D = _vcp;\r\n        const edge = [_vab, _vac, _vap];\r\n\r\n        let min0: number, max0: number, min1: number, max1: number;\r\n\r\n        edge[0].subVectors(this.b, this.a);\r\n        edge[1].subVectors(this.c, this.a);\r\n\r\n        D.crossVectors(edge[0], edge[1]);\r\n\r\n        min0 = D.dot(this.a);\r\n        max0 = min0;\r\n\r\n        obb.axisProjectionMinMax(D, _p0);\r\n        min1 = _p0.x;\r\n        max1 = _p0.y;\r\n\r\n        if (max1 < min0 || max0 < min1) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0; i < 3; ++i) {\r\n            D.copy(obb.axis[i]);\r\n            this.axisProjectionMinMax(D, _p0);\r\n            min0 = _p0.x;\r\n            max0 = _p0.y;\r\n\r\n            const DdC = D.dot(obb.center);\r\n            min1 = DdC - obb.extent.p[i];\r\n            max1 = DdC + obb.extent.p[i];\r\n            if (max1 < min0 || max0 < min1) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        edge[2].subVectors(edge[1], edge[0]);\r\n        for (let i0 = 0; i0 < 3; ++i0) {\r\n            for (let i1 = 0; i1 < 3; ++i1) {\r\n                D.crossVectors(edge[i0], obb.axis[i1]);\r\n                this.axisProjectionMinMax(D, _p0);\r\n                min0 = _p0.x;\r\n                max0 = _p0.y;\r\n\r\n                obb.axisProjectionMinMax(D, _p0);\r\n                min1 = _p0.x;\r\n                max1 = _p0.y;\r\n\r\n                if (max1 < min0 || max0 < min1) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 与OBB的相交结果\r\n     * @param obb\r\n     */\r\n    public intersectOBB(obb: OBB): TriangleOBBIntersect {\r\n        const result = {\r\n            insidePolygon: [\r\n                new Vector3().copy(this.a), new Vector3().copy(this.b), new Vector3().copy(this.c)\r\n            ],\r\n            outsidePolygons: new Array<Vector3[]>()\r\n        };\r\n\r\n        const plane = new Plane();\r\n\r\n        for (let dir = -1; dir <= 1; dir += 2) {\r\n            for (let side = 0; side < 3; ++side) {\r\n                plane.normal.copy(obb.axis[side]).multiplyScalar(dir);\r\n                plane.constant = plane.normal.dot(obb.center) - obb.extent.p[side];\r\n\r\n                const ppResult = plane.intersectPolygon(result.insidePolygon);\r\n                switch (ppResult.type)\r\n                {\r\n                    case PlanePolygonIntersectType.SPLIT:\r\n                        result.insidePolygon = ppResult.positivePolygon;\r\n                        result.outsidePolygons.push(ppResult.negativePolygon);\r\n                        break;\r\n                    case PlanePolygonIntersectType.POSITIVE_SIDE_VERTEX:\r\n                    case PlanePolygonIntersectType.POSITIVE_SIDE_EDGE:\r\n                    case PlanePolygonIntersectType.POSITIVE_SIDE_STRICT:\r\n                        result.insidePolygon = ppResult.positivePolygon;\r\n                        break;\r\n                    case PlanePolygonIntersectType.NEGATIVE_SIDE_VERTEX:\r\n                    case PlanePolygonIntersectType.NEGATIVE_SIDE_EDGE:\r\n                    case PlanePolygonIntersectType.NEGATIVE_SIDE_STRICT:\r\n                        result.insidePolygon.length = 0;\r\n                        result.outsidePolygons.push(ppResult.negativePolygon);\r\n                        return result;\r\n                    case PlanePolygonIntersectType.CONTAINED:\r\n                        result.insidePolygon = ppResult.intersection;\r\n                        break;\r\n                    default:\r\n                        result.insidePolygon.length = 0;\r\n                        result.outsidePolygons.length = 0;\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 是否相等\r\n     * @param triangle\r\n     */\r\n    public equals(triangle: Triangle): boolean {\r\n        return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction getMinEdge02(a11: number, b1: number, p: Vector3): void {\r\n    p.x = 0;\r\n\r\n    if (b1 >= 0) {\r\n        p.y = 0;\r\n    }\r\n    else if (a11 + b1 <= 0) {\r\n        p.y = 1;\r\n    }\r\n    else {\r\n        p.y = -b1 / a11;\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction getMinEdge12(a01: number, a11: number, b1: number, f10: number, f01: number, p: Vector3): void {\r\n    const h0 = a01 + b1 - f10;\r\n    if (h0 >= 0) {\r\n        p.y = 0;\r\n    }\r\n    else {\r\n        const h1 = a11 + b1 - f01;\r\n        if (h1 <= 0) {\r\n            p.y = 1;\r\n        }\r\n        else {\r\n            p.y = h0 / (h0 - h1);\r\n        }\r\n    }\r\n    p.x = 1 - p.y;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction getMinInterior(p0: Vector3, h0: number, p1: Vector3, h1: number, p: Vector3): void {\r\n    const z = h0 / (h0 - h1);\r\n    p.addVectors(_vbp.copy(p0).multiplyScalar(1 - z), _vbc.copy(p1).multiplyScalar(z));\r\n}\r\n",
        "import { EllipseCurve } from \"./EllipseCurve\";\r\nimport { ArcCurve } from \"./ArcCurve\";\r\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\r\nimport { CubicBezierCurve3 } from \"./CubicBezierCurve3\";\r\nimport { LineCurve } from \"./LineCurve\";\r\nimport { LineCurve3 } from \"./LineCurve3\";\r\nimport { QuadraticBezierCurve } from \"./QuadraticBezierCurve\";\r\nimport { QuadraticBezierCurve3 } from \"./QuadraticBezierCurve3\";\r\nimport { SplineCurve } from \"./SplineCurve\";\r\nimport { CatmullRomCurve } from \"./CatmullRomCurve\";\r\nimport { CatmullRomCurve3 } from \"./CatmullRomCurve3\";\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport function createCurve(type: string): any {\r\n    switch (type) {\r\n        case 'EllipseCurve': return new EllipseCurve();\r\n        case 'ArcCurve': return new ArcCurve();\r\n        case 'CubicBezierCurve': return new CubicBezierCurve();\r\n        case 'CubicBezierCurve3': return new CubicBezierCurve3();\r\n        case 'LineCurve': return new LineCurve();\r\n        case 'LineCurve3': return new LineCurve3();\r\n        case 'QuadraticBezierCurve': return new QuadraticBezierCurve();\r\n        case 'QuadraticBezierCurve3': return new QuadraticBezierCurve3();\r\n        case 'SplineCurve': return new SplineCurve();\r\n        case 'CatmullRomCurve': return new CatmullRomCurve();\r\n        case 'CatmullRomCurve3': return new CatmullRomCurve3();\r\n        default:\r\n            throw Error('createCurve error!');\r\n    }\r\n}\r\n",
        "import { ColorRGB } from \"../ColorRGB\";\r\nimport { Path } from \"./Path\";\r\nimport { Nullable } from \"../../types\";\r\nimport { Vector2 } from \"../Vector2\";\r\nimport { Shape } from \"./Shape\";\r\nimport { ShapeUtils } from \"./ShapeUtils\";\r\nimport { BinaryBuffer } from \"../../Misc\";\r\n\r\n/**\r\n * 2D形状路径\r\n * @category Shape\r\n */\r\nexport class ShapePath {\r\n\r\n    public color: ColorRGB;\r\n    public subPaths: Path[];\r\n    public currentPath: Nullable<Path>;\r\n\r\n    /**\r\n     * 构造函数\r\n     */\r\n    constructor() {\r\n        this.color = new ColorRGB();\r\n        this.subPaths = [];\r\n        this.currentPath = null;\r\n    }\r\n\r\n    /**\r\n     * 移动到\r\n     * @param x\r\n     * @param y\r\n     */\r\n    public moveTo(x: number, y: number): ShapePath {\r\n        this.currentPath = new Path();\r\n        this.subPaths.push(this.currentPath);\r\n        this.currentPath.moveTo(x, y);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 当前位置插入直线\r\n     * @param x\r\n     * @param y\r\n     */\r\n    public lineTo(x: number, y: number): ShapePath {\r\n        this.currentPath?.lineTo(x, y);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 当前位置插入圆弧\r\n     * @param aX\r\n     * @param aY\r\n     * @param aRadius\r\n     * @param aStartAngle\r\n     * @param aEndAngle\r\n     * @param aClockwise\r\n     */\r\n    public arc(aX: number, aY: number, aRadius: number, aStartAngle: number, aEndAngle: number, aClockwise: boolean): ShapePath {\r\n        this.currentPath?.arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 绝对位置插入圆弧\r\n     * @param aX\r\n     * @param aY\r\n     * @param aRadius\r\n     * @param aStartAngle\r\n     * @param aEndAngle\r\n     * @param aClockwise\r\n     */\r\n    public absarc(aX: number, aY: number, aRadius: number, aStartAngle: number, aEndAngle: number, aClockwise: boolean): ShapePath {\r\n        this.currentPath?.absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 当前位置插入椭圆\r\n     * @param aX\r\n     * @param aY\r\n     * @param xRadius\r\n     * @param yRadius\r\n     * @param aStartAngle\r\n     * @param aEndAngle\r\n     * @param aClockwise\r\n     * @param aRotation\r\n     */\r\n    public ellipse(aX: number, aY: number, xRadius: number, yRadius: number, aStartAngle: number, aEndAngle: number, aClockwise: boolean, aRotation: number = 0): ShapePath {\r\n        this.currentPath?.ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 绝对位置插入椭圆\r\n     * @param aX\r\n     * @param aY\r\n     * @param xRadius\r\n     * @param yRadius\r\n     * @param aStartAngle\r\n     * @param aEndAngle\r\n     * @param aClockwise\r\n     * @param aRotation\r\n     */\r\n    public absellipse(aX: number, aY: number, xRadius: number, yRadius: number, aStartAngle: number, aEndAngle: number, aClockwise: boolean, aRotation: number = 0): ShapePath {\r\n        this.currentPath?.absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 当前位置插入二次贝塞尔曲线\r\n     * @param aCPx\r\n     * @param aCPy\r\n     * @param aX\r\n     * @param aY\r\n     */\r\n    public quadraticCurveTo(aCPx: number, aCPy: number, aX: number, aY: number): ShapePath {\r\n        this.currentPath?.quadraticCurveTo(aCPx, aCPy, aX, aY);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 当前位置插入三次贝塞尔曲线\r\n     * @param aCP1x\r\n     * @param aCP1y\r\n     * @param aCP2x\r\n     * @param aCP2y\r\n     * @param aX\r\n     * @param aY\r\n     */\r\n    public bezierCurveTo(aCP1x: number, aCP1y: number, aCP2x: number, aCP2y: number, aX: number, aY: number): ShapePath {\r\n        this.currentPath?.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 插入自定义样条\r\n     * @param pts\r\n     */\r\n    public splineThru(pts: Vector2[]): ShapePath {\r\n        this.currentPath?.splineThru(pts);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 转换多个图形\r\n     * @param isCCW\r\n     * @param noHoles\r\n     */\r\n    public toShapes(isCCW: boolean, noHoles: boolean) {\r\n\r\n        function toShapesNoHoles(inSubpaths: Path[]) {\r\n            let shapes = [];\r\n\r\n            for (let i = 0, l = inSubpaths.length; i < l; i++) {\r\n                let tmpPath = inSubpaths[i];\r\n\r\n                let tmpShape = new Shape();\r\n                tmpShape.curves = tmpPath.curves;\r\n\r\n                shapes.push(tmpShape);\r\n            }\r\n\r\n            return shapes;\r\n        }\r\n\r\n        function isPointInsidePolygon(inPt: Vector2, inPolygon: Vector2[]) {\r\n\r\n            let polyLen = inPolygon.length;\r\n\r\n            let inside = false;\r\n            for (let p = polyLen - 1, q = 0; q < polyLen; p = q++) {\r\n                let edgeLowPt = inPolygon[p];\r\n                let edgeHighPt = inPolygon[q];\r\n\r\n                let edgeDx = edgeHighPt.x - edgeLowPt.x;\r\n                let edgeDy = edgeHighPt.y - edgeLowPt.y;\r\n\r\n                if (Math.abs(edgeDy) > Number.EPSILON) {\r\n                    // not parallel\r\n                    if (edgeDy < 0) {\r\n                        edgeLowPt = inPolygon[q]; edgeDx = -edgeDx;\r\n                        edgeHighPt = inPolygon[p]; edgeDy = -edgeDy;\r\n                    }\r\n                    if ((inPt.y < edgeLowPt.y) || (inPt.y > edgeHighPt.y)) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (inPt.y == edgeLowPt.y) {\r\n                        if (inPt.x == edgeLowPt.x) {\r\n                            return true;\r\n                        }\t\t// inPt is on contour ?\r\n                    } else {\r\n                        let perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);\r\n                        if (perpEdge == 0) {\r\n                            return true;\r\n                        }\t\t// inPt is on contour ?\r\n\r\n                        if (perpEdge < 0) {\r\n                            continue;\r\n                        }\r\n                        inside = !inside;\t\t// true intersection left of inPt\r\n                    }\r\n                } else {\r\n                    // parallel or collinear\r\n                    if (inPt.y != edgeLowPt.y) {\r\n                        continue;\r\n                    }\t\t\t// parallel\r\n\r\n                    // edge lies on the same horizontal line as inPt\r\n                    if (((edgeHighPt.x <= inPt.x) && (inPt.x <= edgeLowPt.x)) || ((edgeLowPt.x <= inPt.x) && (inPt.x <= edgeHighPt.x))) {\r\n                        return true;\r\n                    }\t// inPt: Point on contour !\r\n                }\r\n            }\r\n\r\n            return\tinside;\r\n        }\r\n\r\n        let isClockWise = ShapeUtils.isClockWise;\r\n\r\n        let subPaths = this.subPaths;\r\n        if (subPaths.length == 0) {\r\n            return [];\r\n        }\r\n\r\n        if (noHoles) {\r\n            return\ttoShapesNoHoles(subPaths);\r\n        }\r\n\r\n        let solid; let tmpPath; let tmpShape; let shapes = [];\r\n\r\n        if (subPaths.length == 1) {\r\n            tmpPath = subPaths[0];\r\n            tmpShape = new Shape();\r\n            tmpShape.curves = tmpPath.curves;\r\n            shapes.push(tmpShape);\r\n            return shapes;\r\n        }\r\n\r\n        let holesFirst = !isClockWise(subPaths[0].getPoints());\r\n        holesFirst = isCCW ? !holesFirst : holesFirst;\r\n\r\n        let betterShapeHoles = [];\r\n        let newShapes = [];\r\n        let newShapeHoles = [];\r\n        let mainIdx = 0;\r\n        let tmpPoints;\r\n\r\n        newShapes[mainIdx] = undefined;\r\n        newShapeHoles[mainIdx] = [];\r\n\r\n        for (let i = 0, l = subPaths.length; i < l; i++) {\r\n            tmpPath = subPaths[i];\r\n            tmpPoints = tmpPath.getPoints();\r\n            solid = isClockWise(tmpPoints);\r\n            solid = isCCW ? !solid : solid;\r\n\r\n            if (solid) {\r\n                if ((!holesFirst) && (newShapes[mainIdx]))\t{ mainIdx++; }\r\n\r\n                newShapes[mainIdx] = {\r\n                    s: new Shape(),\r\n                    p: tmpPoints\r\n                };\r\n\r\n                // @ts-ignore\r\n                newShapes[mainIdx].s.curves = tmpPath.curves;\r\n\r\n                if (holesFirst)\t{ mainIdx++; }\r\n                newShapeHoles[mainIdx] = [];\r\n\r\n            } else {\r\n                newShapeHoles[mainIdx].push({\r\n                    // @ts-ignore\r\n                    h: tmpPath,\r\n                    // @ts-ignore\r\n                    p: tmpPoints[0]\r\n                });\r\n            }\r\n        }\r\n\r\n        // only Holes? -> probably all Shapes with wrong orientation\r\n        if (!newShapes[0])\t{\r\n            return toShapesNoHoles(subPaths);\r\n        }\r\n\r\n        if (newShapes.length > 1) {\r\n            let ambiguous = false;\r\n            let toChange = [];\r\n\r\n            for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\r\n                betterShapeHoles[sIdx] = [];\r\n            }\r\n\r\n            for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\r\n                let sho = newShapeHoles[sIdx];\r\n\r\n                for (let hIdx = 0; hIdx < sho.length; hIdx++) {\r\n                    let ho = sho[hIdx];\r\n                    let hole_unassigned = true;\r\n\r\n                    for (let s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {\r\n                        // @ts-ignore\r\n                        if (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {\r\n                            if (sIdx != s2Idx)\t{\r\n                                toChange.push({\r\n                                    froms: sIdx,\r\n                                    tos: s2Idx,\r\n                                    hole: hIdx\r\n                                });\r\n                            }\r\n                            if (hole_unassigned) {\r\n                                hole_unassigned = false;\r\n                                betterShapeHoles[s2Idx].push(ho);\r\n                            } else {\r\n                                ambiguous = true;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (hole_unassigned) {\r\n                        betterShapeHoles[sIdx].push(ho);\r\n                    }\r\n                }\r\n            }\r\n            if (toChange.length > 0) {\r\n                if (!ambiguous)\t{ newShapeHoles = betterShapeHoles; }\r\n            }\r\n        }\r\n\r\n        let tmpHoles;\r\n\r\n        for (let i = 0, il = newShapes.length; i < il; i++) {\r\n            // @ts-ignore\r\n            tmpShape = newShapes[i].s;\r\n            shapes.push(tmpShape);\r\n            tmpHoles = newShapeHoles[i];\r\n\r\n            for (let j = 0, jl = tmpHoles.length; j < jl; j++) {\r\n                // @ts-ignore\r\n                tmpShape.holes.push(tmpHoles[j].h);\r\n            }\r\n        }\r\n\r\n        return shapes;\r\n    }\r\n\r\n    /**\r\n     * 序列化JSON\r\n     */\r\n    public toJSON(): any {\r\n\r\n        const data = {\r\n            subPaths: new Array<any>()\r\n        };\r\n\r\n        for (let i = 0, l = this.subPaths.length; i < l; i++) {\r\n            const path = this.subPaths[i];\r\n            data.subPaths.push(path.toJSON());\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * 反序列化JSON\r\n     * @param json\r\n     */\r\n    public fromJSON(json: any): ShapePath {\r\n\r\n        this.subPaths = [];\r\n\r\n        for (let i = 0, l = json.subPaths.length; i < l; i++) {\r\n            const path = json.subPaths[i];\r\n            this.subPaths.push(new Path().fromJSON(path));\r\n            this.currentPath = this.subPaths[this.subPaths.length - 1];\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public toDataBuffer(dataBuffer: BinaryBuffer): ShapePath {\r\n\r\n        dataBuffer.writeUint16(this.subPaths.length);\r\n\r\n        this.subPaths.forEach((path) => {\r\n            path.toDataBuffer(dataBuffer);\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 反序列化二进制\r\n     * @param dataBuffer\r\n     */\r\n    public fromDataBuffer(dataBuffer: BinaryBuffer): ShapePath {\r\n\r\n        const count = dataBuffer.readUint16();\r\n        for (let i = 0; i < count; ++i) {\r\n            const path = new Path().fromDataBuffer(dataBuffer);\r\n            this.subPaths.push(path);\r\n            this.currentPath = this.subPaths[this.subPaths.length - 1];\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n",
        "import { int } from \"../types\";\r\nimport { encode, decode } from \"./Utf8\";\r\n\r\n/**\r\n * IO缓冲\r\n * @category Libs\r\n */\r\nexport class IOBuffer {\r\n    public littleEndian: boolean;\r\n    public lastWrittenByte: number;\r\n    public length: number;\r\n    public byteLength: number;\r\n    public byteOffset: number;\r\n    public offset: number;\r\n    public buffer: ArrayBuffer | Float32Array;\r\n\r\n    protected _data: DataView;\r\n    protected _mark: number;\r\n    protected _marks: number[];\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param data\r\n     */\r\n    constructor(data: IOBuffer | ArrayBuffer | Float32Array | number) {\r\n        let dataIsGiven = false;\r\n        if (typeof data == 'number') {\r\n            data = new ArrayBuffer(data);\r\n        }\r\n        else {\r\n            dataIsGiven = true;\r\n            this.lastWrittenByte = data.byteLength;\r\n        }\r\n\r\n        const offset = 0;\r\n        const byteLength = data.byteLength - offset;\r\n\r\n        let dvOffset = offset;\r\n        if (ArrayBuffer.isView(data) || data instanceof IOBuffer) {\r\n            if (data.byteLength != data.buffer.byteLength) {\r\n                dvOffset = data.byteOffset + offset;\r\n            }\r\n            data = data.buffer;\r\n        }\r\n        if (dataIsGiven) {\r\n            this.lastWrittenByte = byteLength;\r\n        }\r\n        else {\r\n            this.lastWrittenByte = 0;\r\n        }\r\n        this.buffer = data;\r\n        this.length = byteLength;\r\n        this.byteLength = byteLength;\r\n        this.byteOffset = dvOffset;\r\n        this.offset = 0;\r\n        this.littleEndian = true;\r\n        this._data = new DataView(this.buffer, dvOffset, byteLength);\r\n        this._mark = 0;\r\n        this._marks = [];\r\n    }\r\n\r\n    /**\r\n     * 检查分配给缓冲区的内存是否足够在偏移后存储更多字节\r\n     * @param byteLength\r\n     */\r\n    public available(byteLength: number = 1): boolean {\r\n        return this.offset + byteLength <= this.length;\r\n    }\r\n\r\n    /**\r\n     * 是否小端字节模式\r\n     */\r\n    public isLittleEndian(): boolean {\r\n        return this.littleEndian;\r\n    }\r\n\r\n    /**\r\n     * 设置小端字节模式\r\n     */\r\n    public setLittleEndian(): IOBuffer {\r\n        this.littleEndian = true;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 是否大端字节模式\r\n     */\r\n    public isBigEndian(): boolean {\r\n        return !this.littleEndian;\r\n    }\r\n\r\n    /**\r\n     * 设置大端字节模式\r\n     */\r\n    public setBigEndian(): IOBuffer {\r\n        this.littleEndian = false;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 将指针向前移动n个字节\r\n     * @param n\r\n     */\r\n    public skip(n: number = 1): IOBuffer {\r\n        this.offset += n;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 将指针移动到给定的偏移量\r\n     * @param offset\r\n     */\r\n    public seek(offset: number): IOBuffer {\r\n        this.offset = offset;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 存储当前指针偏移量\r\n     */\r\n    public mark(): IOBuffer {\r\n        this._mark = this.offset;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 将指针移回由标记设置的最后一个指针偏移量\r\n     */\r\n    public reset(): IOBuffer {\r\n        this.offset = this._mark;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 将当前指针偏移量推入标记堆栈\r\n     */\r\n    public pushMark(): IOBuffer {\r\n        this._marks.push(this.offset);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 从标记堆栈中弹出最后一个指针偏移量，并将当前指针偏移量设置为弹出的值\r\n     */\r\n    public popMark(): IOBuffer {\r\n        const offset = this._marks.pop();\r\n        if (offset == undefined) {\r\n            throw new Error('Mark stack empty');\r\n        }\r\n        this.seek(offset);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 将指针偏移量移回0\r\n     */\r\n    public rewind(): IOBuffer {\r\n        this.offset = 0;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 确保缓冲区有足够的内存在当前指针偏移量处写入给定的byteLength。\r\n     * 如果缓冲区的内存不足，该方法将创建一个长度为两倍(byteLength + current offset)的新缓冲区(一个副本)\r\n     * @param byteLength\r\n     */\r\n    public ensureAvailable(byteLength: number = 1): IOBuffer {\r\n        if (!this.available(byteLength)) {\r\n            const lengthNeeded = this.offset + byteLength;\r\n            const newLength = lengthNeeded * 2;\r\n            const newArray = new Uint8Array(newLength);\r\n            newArray.set(new Uint8Array(this.buffer));\r\n            this.buffer = newArray.buffer;\r\n            this.length = this.byteLength = newLength;\r\n            this._data = new DataView(this.buffer);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 读取一个字节，如果字节的值为0，则返回false，否则返回true。将指针向前移动一个字节。\r\n     */\r\n    public readBoolean() {\r\n        return this.readUint8() != 0;\r\n    }\r\n\r\n    /**\r\n     * 读取一个8位有符号整数，并将指针向前移动1字节。\r\n     */\r\n    public readInt8() {\r\n        return this._data.getInt8(this.offset++);\r\n    }\r\n\r\n    /**\r\n     * 读取一个无符号8位整数,并将指针向前移动1字节。\r\n     */\r\n    public readUint8() {\r\n        return this._data.getUint8(this.offset++);\r\n    }\r\n\r\n    /**\r\n     * 读取1个字节,并将指针向前移动1字节。\r\n     */\r\n    public readByte() {\r\n        return this.readUint8();\r\n    }\r\n\r\n    /**\r\n     * 读取n个字节,并将指针向前移动n个字节。\r\n     */\r\n    public readBytes(n: number = 1): Uint8Array {\r\n        const bytes = new Uint8Array(n);\r\n        for (let i = 0; i < n; i++) {\r\n            bytes[i] = this.readByte();\r\n        }\r\n        return bytes;\r\n    }\r\n\r\n    /**\r\n     * 读取一个16位有符号整数，并将指针向前移动2字节。\r\n     */\r\n    public readInt16(): int {\r\n        const value = this._data.getInt16(this.offset, this.littleEndian);\r\n        this.offset += 2;\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * 读取一个16位无符号整数，并将指针向前移动2字节。\r\n     */\r\n    public readUint16(): int {\r\n        const value = this._data.getUint16(this.offset, this.littleEndian);\r\n        this.offset += 2;\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * 读取一个32位有符号整数，并将指针向前移动4字节。\r\n     */\r\n    public readInt32(): int {\r\n        const value = this._data.getInt32(this.offset, this.littleEndian);\r\n        this.offset += 4;\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * 读取一个32位无符号整数，并将指针向前移动4字节。\r\n     */\r\n    public readUint32(): int {\r\n        const value = this._data.getUint32(this.offset, this.littleEndian);\r\n        this.offset += 4;\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * 读取一个32位浮点数并将指针向前移动4字节。\r\n     */\r\n    public readFloat32(): number {\r\n        const value = this._data.getFloat32(this.offset, this.littleEndian);\r\n        this.offset += 4;\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * 读取64位浮点数并将指针向前移动8个字节。\r\n     */\r\n    public readFloat64(): number {\r\n        const value = this._data.getFloat64(this.offset, this.littleEndian);\r\n        this.offset += 8;\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * 读取一个1字节的ASCII字符，并将指针向前移动1字节。\r\n     */\r\n    public readChar(): string {\r\n        return String.fromCharCode(this.readInt8());\r\n    }\r\n\r\n    /**\r\n     * 读取n个1字节ASCII字符，并将指针向前移动n个字节。\r\n     */\r\n    public readChars(n: number = 1): string {\r\n        let result = '';\r\n        for (let i = 0; i < n; i++) {\r\n            result += this.readChar();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 读取n个字节，返回一个UTF-8解码的字符串，并将指针向前移动n个字节。\r\n     */\r\n    public readUtf8(n: number = 1): string {\r\n        const bString = this.readChars(n);\r\n        return decode(bString);\r\n    }\r\n\r\n    /**\r\n     * 写入布尔, 为真写0xff，否则写0x00，并将指针向前移动1字节。\r\n     */\r\n    public writeBoolean(value: boolean): IOBuffer {\r\n        this.writeUint8(value ? 0xff : 0x00);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 写入一个8位有符号整数，并将指针向前移动1字节。\r\n     */\r\n    public writeInt8(value: int): IOBuffer {\r\n        this.ensureAvailable(1);\r\n        this._data.setInt8(this.offset++, value);\r\n        this._updateLastWrittenByte();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 写入一个8位无符号整数，并将指针向前移动1字节。\r\n     */\r\n    public writeUint8(value: int): IOBuffer {\r\n        this.ensureAvailable(1);\r\n        this._data.setUint8(this.offset++, value);\r\n        this._updateLastWrittenByte();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 写入一个字节，并将指针向前移动1字节。\r\n     * @param value\r\n     */\r\n    public writeByte(value: int): IOBuffer {\r\n        return this.writeUint8(value);\r\n    }\r\n\r\n    /**\r\n     * 写入n个字节，并将指针向前移动m个字节。\r\n     */\r\n    public writeBytes(bytes: int[]): IOBuffer {\r\n        this.ensureAvailable(bytes.length);\r\n        for (let i = 0; i < bytes.length; i++) {\r\n            this._data.setUint8(this.offset++, bytes[i]);\r\n        }\r\n        this._updateLastWrittenByte();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 写入一个16位有符号整数，并将指针向前移动2字节。\r\n     */\r\n    public writeInt16(value: int): IOBuffer {\r\n        this.ensureAvailable(2);\r\n        this._data.setInt16(this.offset, value, this.littleEndian);\r\n        this.offset += 2;\r\n        this._updateLastWrittenByte();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 写入一个16位无符号整数，并将指针向前移动2字节。\r\n     */\r\n    public writeUint16(value: int): IOBuffer {\r\n        this.ensureAvailable(2);\r\n        this._data.setUint16(this.offset, value, this.littleEndian);\r\n        this.offset += 2;\r\n        this._updateLastWrittenByte();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 写入一个32位有符号整数，并将指针向前移动4字节。\r\n     */\r\n    public writeInt32(value: int): IOBuffer {\r\n        this.ensureAvailable(4);\r\n        this._data.setInt32(this.offset, value, this.littleEndian);\r\n        this.offset += 4;\r\n        this._updateLastWrittenByte();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 写入一个32位无符号整数，并将指针向前移动4字节。\r\n     * @param value\r\n     */\r\n    public writeUint32(value: int): IOBuffer {\r\n        this.ensureAvailable(4);\r\n        this._data.setUint32(this.offset, value, this.littleEndian);\r\n        this.offset += 4;\r\n        this._updateLastWrittenByte();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 写入一个32位浮点数，并将指针向前移动4字节。\r\n     */\r\n    public writeFloat32(value: number): IOBuffer {\r\n        this.ensureAvailable(4);\r\n        this._data.setFloat32(this.offset, value, this.littleEndian);\r\n        this.offset += 4;\r\n        this._updateLastWrittenByte();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 写入一个64位浮点数，并将指针向前移动8字节。\r\n     */\r\n    public writeFloat64(value: number): IOBuffer {\r\n        this.ensureAvailable(8);\r\n        this._data.setFloat64(this.offset, value, this.littleEndian);\r\n        this.offset += 8;\r\n        this._updateLastWrittenByte();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 写入一个字符，并将指针向前移动1字节。\r\n     */\r\n    public writeChar(str: string): IOBuffer {\r\n        return this.writeUint8(str.charCodeAt(0));\r\n    }\r\n\r\n    /**\r\n     * 写入n个字符，并将指针向前移动n个字节。\r\n     */\r\n    public writeChars(str: string): IOBuffer {\r\n        for (let i = 0; i < str.length; i++) {\r\n            this.writeUint8(str.charCodeAt(i));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 写入一个UTF8字符串，并将指针向前移动length个字节。\r\n     */\r\n    public writeUtf8(str: string): IOBuffer {\r\n        const bString = encode(str);\r\n        return this.writeChars(bString);\r\n    }\r\n\r\n    /**\r\n     * 导出内部缓冲区的Uint8Array视图。视图从字节偏移量开始，其长度计算到最后一个写入字节或原始长度。\r\n     */\r\n    public toArray(): Uint8Array {\r\n        return new Uint8Array(this.buffer, this.byteOffset, this.lastWrittenByte);\r\n    }\r\n\r\n    /**\r\n     * 更新最后写入的字节偏移量\r\n     */\r\n    private _updateLastWrittenByte(): void {\r\n        if (this.offset > this.lastWrittenByte) {\r\n            this.lastWrittenByte = this.offset;\r\n        }\r\n    }\r\n}\r\n",
        "import { FloatArray, Nullable } from \"../types\";\r\n\r\n/**\r\n * 多边形三角库\r\n * @category Libs\r\n */\r\nexport abstract class Earcut {\r\n\r\n    /**\r\n     * 返回三角形数组\r\n     * @param data\r\n     * @param holeIndices\r\n     * @param dim\r\n     */\r\n    public static earcut(data: number[], holeIndices: Nullable<FloatArray> = null, dim: number = 2): number[] {\r\n\r\n        let hasHoles = holeIndices && holeIndices.length,\r\n            outerLen = hasHoles && holeIndices ? holeIndices[0] * dim : data.length,\r\n            outerNode = linkedList(data, 0, outerLen, dim, true),\r\n            triangles = new Array<number>();\r\n\r\n        if (!outerNode || outerNode.next == outerNode.prev) { return triangles; }\r\n\r\n        let minX, minY, maxX, maxY, x, y, invSize;\r\n\r\n        if (hasHoles && holeIndices) { outerNode = eliminateHoles(data, holeIndices, outerNode, dim); }\r\n\r\n        // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\r\n        if (data.length > 80 * dim) {\r\n            minX = maxX = data[0];\r\n            minY = maxY = data[1];\r\n\r\n            for (let i = dim; i < outerLen; i += dim) {\r\n                x = data[i];\r\n                y = data[i + 1];\r\n                if (x < minX) { minX = x; }\r\n                if (y < minY) { minY = y; }\r\n                if (x > maxX) { maxX = x; }\r\n                if (y > maxY) { maxY = y; }\r\n            }\r\n\r\n            // minX, minY and invSize are later used to transform coords into integers for z-order calculation\r\n            invSize = Math.max(maxX - minX, maxY - minY);\r\n            invSize = invSize != 0 ? 1 / invSize : 0;\r\n        }\r\n\r\n        // @ts-ignore\r\n        earcutLinked(outerNode, triangles, dim, minX, minY, invSize);\r\n\r\n        return triangles;\r\n\r\n    }\r\n\r\n    /**\r\n     * 返回三角区域面积\r\n     * @param data\r\n     * @param dim\r\n     * @param triangles\r\n     */\r\n    public static trianglesArea(data: number[], triangles: number[], dim: number = 2): number {\r\n        let trianglesArea = 0;\r\n        for (let i = 0; i < triangles.length; i += 3) {\r\n            let a = triangles[i] * dim;\r\n            let b = triangles[i + 1] * dim;\r\n            let c = triangles[i + 2] * dim;\r\n            trianglesArea += Math.abs((data[a] - data[c]) * (data[b + 1] - data[a + 1]) - (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\r\n        }\r\n        return trianglesArea * 0.5;\r\n    }\r\n\r\n    /**\r\n     * 返回多边形区域与其三角区域之间的百分比差值;用于验证三角剖分的正确性\r\n     * @param data\r\n     * @param holeIndices\r\n     * @param dim\r\n     * @param triangles\r\n     */\r\n    public static deviation(data: number[], holeIndices: FloatArray, dim: number = 2, triangles: FloatArray): number {\r\n\r\n        let hasHoles = holeIndices && holeIndices.length;\r\n        let outerLen = hasHoles ? holeIndices[0] * dim : data.length;\r\n\r\n        let polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\r\n        if (hasHoles) {\r\n            for (let i = 0, len = holeIndices.length; i < len; i++) {\r\n                let start = holeIndices[i] * dim;\r\n                let end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\r\n                polygonArea -= Math.abs(signedArea(data, start, end, dim));\r\n            }\r\n        }\r\n\r\n        let trianglesArea = 0;\r\n        for (let i = 0; i < triangles.length; i += 3) {\r\n            let a = triangles[i] * dim;\r\n            let b = triangles[i + 1] * dim;\r\n            let c = triangles[i + 2] * dim;\r\n            trianglesArea += Math.abs((data[a] - data[c]) * (data[b + 1] - data[a + 1]) - (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\r\n        }\r\n\r\n        return polygonArea == 0 && trianglesArea == 0 ? 0 : Math.abs((trianglesArea - polygonArea) / polygonArea);\r\n    }\r\n\r\n    /**\r\n     * 将多维数组形式的多边形转换为Earcut接受的形式\r\n     * @param data\r\n     */\r\n    public static flatten(data: number[][][]) {\r\n        let dim = data[0][0].length,\r\n            result = {vertices: new Array<number>(), holes: new Array<number>(), dimensions: dim},\r\n            holeIndex = 0;\r\n\r\n        for (let i = 0; i < data.length; i++) {\r\n            for (let j = 0; j < data[i].length; j++) {\r\n                for (let d = 0; d < dim; d++) {\r\n                    result.vertices.push(data[i][j][d]);\r\n                }\r\n            }\r\n            if (i > 0) {\r\n                holeIndex += data[i - 1].length;\r\n                result.holes.push(holeIndex);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nclass Node {\r\n    public i: number;\r\n    public x: number;\r\n    public y: number;\r\n\r\n    public prev: Nullable<Node>;\r\n    public next: Nullable<Node>;\r\n\r\n    public z: Nullable<number>;\r\n    public prevZ: Nullable<Node>;\r\n    public nextZ: Nullable<Node>;\r\n\r\n    public steiner: boolean;\r\n\r\n    constructor(i: number, x: number, y: number) {\r\n        this.i = i;\r\n\r\n        // vertex coordinates\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        // previous and next vertex nodes in a polygon ring\r\n        this.prev = null;\r\n        this.next = null;\r\n\r\n        // z-order curve value\r\n        this.z = null;\r\n\r\n        // previous and next nodes in z-order\r\n        this.prevZ = null;\r\n        this.nextZ = null;\r\n\r\n        // indicates whether this is a steiner point\r\n        this.steiner = false;\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n * @param data\r\n * @param start\r\n * @param end\r\n * @param dim\r\n * @param clockwise\r\n */\r\nfunction linkedList(data: number[], start: number, end: number, dim: number, clockwise: boolean) {\r\n    let last: Nullable<Node> = null;\r\n\r\n    if (clockwise == (signedArea(data, start, end, dim) > 0)) {\r\n        for (let i = start; i < end; i += dim) {\r\n            last = insertNode(i, data[i], data[i + 1], last);\r\n        }\r\n    } else {\r\n        for (let i = end - dim; i >= start; i -= dim) {\r\n            last = insertNode(i, data[i], data[i + 1], last);\r\n        }\r\n    }\r\n\r\n    // @ts-ignore\r\n    if (last && equals(last, last.next)) {\r\n        removeNode(last);\r\n        last = last.next;\r\n    }\r\n\r\n    return last;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction filterPoints(start: Node, end: Nullable<Node> = null): Nullable<Node> {\r\n    if (!start) { return start; }\r\n    if (!end) { end = start; }\r\n\r\n    let p = start, again;\r\n    do {\r\n        again = false;\r\n\r\n        // @ts-ignore\r\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) == 0)) {\r\n            removeNode(p);\r\n            // @ts-ignore\r\n            p = end = p.prev;\r\n            if (p == p.next) { break; }\r\n            again = true;\r\n\r\n        } else {\r\n            // @ts-ignore\r\n            p = p.next;\r\n        }\r\n    } while (again || p != end);\r\n\r\n    return end;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction earcutLinked(ear: Node, triangles: number[], dim: number, minX: number, minY: number, invSize: number, pass: number = 0) {\r\n    if (!ear) { return; }\r\n\r\n    // interlink polygon nodes in z-order\r\n    if (!pass && invSize) { indexCurve(ear, minX, minY, invSize); }\r\n\r\n    let stop = ear, prev, next;\r\n\r\n    // iterate through ears, slicing them one by one\r\n    while (ear.prev != ear.next) {\r\n        prev = ear.prev;\r\n        next = ear.next;\r\n\r\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\r\n            // cut off the triangle\r\n            // @ts-ignore\r\n            triangles.push(prev.i / dim);\r\n            triangles.push(ear.i / dim);\r\n            // @ts-ignore\r\n            triangles.push(next.i / dim);\r\n\r\n            removeNode(ear);\r\n\r\n            // skipping the next vertex leads to less sliver triangles\r\n            // @ts-ignore\r\n            ear = next.next;\r\n            // @ts-ignore\r\n            stop = next.next;\r\n\r\n            continue;\r\n        }\r\n\r\n        // @ts-ignore\r\n        ear = next;\r\n\r\n        // if we looped through the whole remaining polygon and can't find any more ears\r\n        if (ear == stop) {\r\n            // try filtering points and slicing again\r\n            if (!pass) {\r\n                // @ts-ignore\r\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\r\n\r\n                // if this didn't work, try curing all small self-intersections locally\r\n            } else if (pass == 1) {\r\n                // @ts-ignore\r\n                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\r\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\r\n\r\n                // as a last resort, try splitting the remaining polygon into two\r\n            } else if (pass == 2) {\r\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\r\n            }\r\n\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction isEar(ear: Node): boolean {\r\n    let a = ear.prev,\r\n        b = ear,\r\n        c = ear.next;\r\n\r\n    // @ts-ignore\r\n    if (area(a, b, c) >= 0) { return false; } // reflex, can't be an ear\r\n\r\n    // now make sure we don't have other points inside the potential ear\r\n    // @ts-ignore\r\n    let p = ear.next.next;\r\n\r\n    while (p != ear.prev) {\r\n        // @ts-ignore\r\n        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) { return false; }\r\n        // @ts-ignore\r\n        p = p.next;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction isEarHashed(ear: Node, minX: number, minY: number, invSize: number): boolean {\r\n    let a = ear.prev,\r\n        b = ear,\r\n        c = ear.next;\r\n\r\n    // @ts-ignore\r\n    if (area(a, b, c) >= 0) { return false; } // reflex, can't be an ear\r\n\r\n    // triangle bbox; min & max are calculated like this for speed\r\n    // @ts-ignore\r\n    let minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x), minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y), maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x), maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);\r\n\r\n    // z-order range for the current triangle bbox;\r\n    let minZ = zOrder(minTX, minTY, minX, minY, invSize), maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\r\n\r\n    let p = ear.prevZ, n = ear.nextZ;\r\n\r\n    // look for points inside the triangle in both directions\r\n    // @ts-ignore\r\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\r\n        // @ts-ignore\r\n        if (p != ear.prev && p != ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) { return false; }\r\n        p = p.prevZ;\r\n\r\n        // @ts-ignore\r\n        if (n != ear.prev && n != ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) { return false; }\r\n        n = n.nextZ;\r\n    }\r\n\r\n    // look for remaining points in decreasing z-order\r\n    // @ts-ignore\r\n    while (p && p.z >= minZ) {\r\n        // @ts-ignore\r\n        if (p != ear.prev && p != ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) { return false; }\r\n        p = p.prevZ;\r\n    }\r\n\r\n    // look for remaining points in increasing z-order\r\n    // @ts-ignore\r\n    while (n && n.z <= maxZ) {\r\n        // @ts-ignore\r\n        if (n != ear.prev && n != ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) { return false; }\r\n        n = n.nextZ;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction cureLocalIntersections(start: Node, triangles: number[], dim: number): Nullable<Node> {\r\n    let p = start;\r\n    do {\r\n        // @ts-ignore\r\n        let a = p.prev, b = p.next.next;\r\n\r\n        // @ts-ignore\r\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\r\n\r\n            // @ts-ignore\r\n            triangles.push(a.i / dim);\r\n            // @ts-ignore\r\n            triangles.push(p.i / dim);\r\n            // @ts-ignore\r\n            triangles.push(b.i / dim);\r\n\r\n            // remove two nodes involved\r\n            removeNode(p);\r\n            // @ts-ignore\r\n            removeNode(p.next);\r\n\r\n            // @ts-ignore\r\n            p = start = b;\r\n        }\r\n        // @ts-ignore\r\n        p = p.next;\r\n    } while (p != start);\r\n\r\n    return filterPoints(p);\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction splitEarcut(start: Node, triangles: number[], dim: number, minX: number, minY: number, invSize: number) {\r\n    // look for a valid diagonal that divides the polygon into two\r\n    let a = start;\r\n    do {\r\n        // @ts-ignore\r\n        let b = a.next.next;\r\n        while (b != a.prev) {\r\n            // @ts-ignore\r\n            if (a.i != b.i && isValidDiagonal(a, b)) {\r\n                // split the polygon in two by the diagonal\r\n                // @ts-ignore\r\n                let c = splitPolygon(a, b);\r\n\r\n                // filter colinear points around the cuts\r\n                // @ts-ignore\r\n                a = filterPoints(a, a.next);\r\n                // @ts-ignore\r\n                c = filterPoints(c, c.next);\r\n\r\n                // run earcut on each half\r\n                earcutLinked(a, triangles, dim, minX, minY, invSize);\r\n                earcutLinked(c, triangles, dim, minX, minY, invSize);\r\n                return;\r\n            }\r\n            // @ts-ignore\r\n            b = b.next;\r\n        }\r\n        // @ts-ignore\r\n        a = a.next;\r\n    } while (a != start);\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction eliminateHoles(data: number[], holeIndices: FloatArray, outerNode: Node, dim: number) {\r\n    let queue = [],\r\n        i, len, start, end, list;\r\n\r\n    for (i = 0, len = holeIndices.length; i < len; i++) {\r\n        start = holeIndices[i] * dim;\r\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\r\n        list = linkedList(data, start, end, dim, false);\r\n        // @ts-ignore\r\n        if (list == list.next) { list.steiner = true; }\r\n        // @ts-ignore\r\n        queue.push(getLeftmost(list));\r\n    }\r\n\r\n    queue.sort(compareX);\r\n\r\n    // process holes from left to right\r\n    for (i = 0; i < queue.length; i++) {\r\n        eliminateHole(queue[i], outerNode);\r\n        // @ts-ignore\r\n        outerNode = filterPoints(outerNode, outerNode.next);\r\n    }\r\n\r\n    return outerNode;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction compareX(a: Node, b: Node): number {\r\n    return a.x - b.x;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction eliminateHole(hole: Node, outerNode: Node) {\r\n    const outerNode2 = findHoleBridge(hole, outerNode);\r\n    if (outerNode2) {\r\n        const b = splitPolygon(outerNode2, hole);\r\n\r\n        // filter collinear points around the cuts\r\n        // @ts-ignore\r\n        filterPoints(outerNode2, outerNode2.next);\r\n        // @ts-ignore\r\n        filterPoints(b, b.next);\r\n    }\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction findHoleBridge(hole: Node, outerNode: Node): Nullable<Node> {\r\n    let p = outerNode,\r\n        hx = hole.x,\r\n        hy = hole.y,\r\n        qx = -Infinity,\r\n        m;\r\n\r\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\r\n    // segment's endpoint with lesser x will be potential connection point\r\n    do {\r\n        // @ts-ignore\r\n        if (hy <= p.y && hy >= p.next.y && p.next.y != p.y) {\r\n            // @ts-ignore\r\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\r\n            if (x <= hx && x > qx) {\r\n                qx = x;\r\n                if (x == hx) {\r\n                    if (hy == p.y) { return p; }\r\n                    // @ts-ignore\r\n                    if (hy == p.next.y) { return p.next; }\r\n                }\r\n                // @ts-ignore\r\n                m = p.x < p.next.x ? p : p.next;\r\n            }\r\n        }\r\n        // @ts-ignore\r\n        p = p.next;\r\n    } while (p != outerNode);\r\n\r\n    if (!m) { return null; }\r\n\r\n    if (hx == qx) { return m; } // hole touches outer segment; pick leftmost endpoint\r\n\r\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\r\n    // if there are no points found, we have a valid connection;\r\n    // otherwise choose the point of the minimum angle with the ray as connection point\r\n\r\n    let stop = m,\r\n        mx = m.x,\r\n        my = m.y,\r\n        tanMin = Infinity,\r\n        tan;\r\n\r\n    p = m;\r\n\r\n    do {\r\n        if (hx >= p.x && p.x >= mx && hx != p.x &&\r\n            pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\r\n\r\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\r\n\r\n            if (locallyInside(p, hole) &&\r\n                (tan < tanMin || (tan == tanMin && (p.x > m.x || (p.x == m.x && sectorContainsSector(m, p)))))) {\r\n                m = p;\r\n                tanMin = tan;\r\n            }\r\n        }\r\n\r\n        // @ts-ignore\r\n        p = p.next;\r\n\r\n    } while (p != stop);\r\n\r\n    return m;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction sectorContainsSector(m: Node, p: Node): boolean {\r\n    // @ts-ignore\r\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction indexCurve(start: Node, minX: number, minY: number, invSize: number) {\r\n    let p = start;\r\n    do {\r\n        if (p.z == null) { p.z = zOrder(p.x, p.y, minX, minY, invSize); }\r\n        p.prevZ = p.prev;\r\n        p.nextZ = p.next;\r\n        // @ts-ignore\r\n        p = p.next;\r\n    } while (p != start);\r\n\r\n    // @ts-ignore\r\n    p.prevZ.nextZ = null;\r\n    p.prevZ = null;\r\n\r\n    sortLinked(p);\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction sortLinked(list: Nullable<Node>) {\r\n    let i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;\r\n\r\n    do {\r\n        p = list;\r\n        list = null;\r\n        tail = null;\r\n        numMerges = 0;\r\n\r\n        while (p) {\r\n            numMerges++;\r\n            q = p;\r\n            pSize = 0;\r\n            for (i = 0; i < inSize; i++) {\r\n                pSize++;\r\n                // @ts-ignore\r\n                q = q.nextZ;\r\n                if (!q) { break; }\r\n            }\r\n            qSize = inSize;\r\n\r\n            while (pSize > 0 || (qSize > 0 && q)) {\r\n\r\n                // @ts-ignore\r\n                if (pSize != 0 && (qSize == 0 || !q || p.z <= q.z)) {\r\n                    e = p;\r\n                    // @ts-ignore\r\n                    p = p.nextZ;\r\n                    pSize--;\r\n                } else {\r\n                    e = q;\r\n                    // @ts-ignore\r\n                    q = q.nextZ;\r\n                    qSize--;\r\n                }\r\n\r\n                if (tail) { tail.nextZ = e; }\r\n                else { list = e; }\r\n\r\n                // @ts-ignore\r\n                e.prevZ = tail;\r\n                tail = e;\r\n            }\r\n\r\n            p = q;\r\n        }\r\n\r\n        // @ts-ignore\r\n        tail.nextZ = null;\r\n        inSize *= 2;\r\n\r\n    } while (numMerges > 1);\r\n\r\n    return list;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction zOrder(x: number, y: number, minX: number, minY: number, invSize: number): number {\r\n    // coords are transformed into non-negative 15-bit integer range\r\n    x = 32767 * (x - minX) * invSize;\r\n    y = 32767 * (y - minY) * invSize;\r\n\r\n    x = (x | (x << 8)) & 0x00FF00FF;\r\n    x = (x | (x << 4)) & 0x0F0F0F0F;\r\n    x = (x | (x << 2)) & 0x33333333;\r\n    x = (x | (x << 1)) & 0x55555555;\r\n\r\n    y = (y | (y << 8)) & 0x00FF00FF;\r\n    y = (y | (y << 4)) & 0x0F0F0F0F;\r\n    y = (y | (y << 2)) & 0x33333333;\r\n    y = (y | (y << 1)) & 0x55555555;\r\n\r\n    return x | (y << 1);\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction getLeftmost(start: Node) {\r\n    let p = start,\r\n        leftmost = start;\r\n    do {\r\n        if (p.x < leftmost.x || (p.x == leftmost.x && p.y < leftmost.y)) { leftmost = p; }\r\n        // @ts-ignore\r\n        p = p.next;\r\n    } while (p != start);\r\n\r\n    return leftmost;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction pointInTriangle(ax: number, ay: number, bx: number, by: number, cx: number, cy: number, px: number, py: number): boolean {\r\n    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&\r\n        (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&\r\n        (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction isValidDiagonal(a: Node, b: Node): boolean {\r\n    // @ts-ignore\r\n    return a.next.i != b.i && a.prev.i != b.i && !intersectsPolygon(a, b) && (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && (area(a.prev, a, b.prev) || area(a, b.prev, b)) || equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0);\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction area(p: Node, q: Node, r: Node): number {\r\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction equals(p1: Node, p2: Node): boolean {\r\n    return p1.x == p2.x && p1.y == p2.y;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction intersects(p1: Node, q1: Node, p2: Node, q2: Node): boolean {\r\n\r\n    const o1 = sign(area(p1, q1, p2));\r\n    const o2 = sign(area(p1, q1, q2));\r\n    const o3 = sign(area(p2, q2, p1));\r\n    const o4 = sign(area(p2, q2, q1));\r\n\r\n    if (o1 != o2 && o3 != o4) { return true; } // general case\r\n\r\n    if (o1 == 0 && onSegment(p1, p2, q1)) { return true; } // p1, q1 and p2 are collinear and p2 lies on p1q1\r\n    if (o2 == 0 && onSegment(p1, q2, q1)) { return true; } // p1, q1 and q2 are collinear and q2 lies on p1q1\r\n    if (o3 == 0 && onSegment(p2, p1, q2)) { return true; } // p2, q2 and p1 are collinear and p1 lies on p2q2\r\n    if (o4 == 0 && onSegment(p2, q1, q2)) { return true; } // p2, q2 and q1 are collinear and q1 lies on p2q2\r\n\r\n    return false;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction onSegment(p: Node, q: Node, r: Node): boolean {\r\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction sign(num: number): number {\r\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction intersectsPolygon(a: Node, b: Node) {\r\n\r\n    let p = a;\r\n    do {\r\n        // @ts-ignore\r\n        if (p.i != a.i && p.next.i != a.i && p.i != b.i && p.next.i != b.i && intersects(p, p.next, a, b)) { return true; }\r\n        // @ts-ignore\r\n        p = p.next;\r\n    } while (p != a);\r\n\r\n    return false;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction locallyInside(a: Node, b: Node): boolean {\r\n    // @ts-ignore\r\n    return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction middleInside(a: Node, b: Node) {\r\n    let p = a,\r\n        inside = false,\r\n        px = (a.x + b.x) / 2,\r\n        py = (a.y + b.y) / 2;\r\n    do {\r\n        // @ts-ignore\r\n        if (((p.y > py) != (p.next.y > py)) && p.next.y != p.y && (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x)) {\r\n            inside = !inside;\r\n        }\r\n        // @ts-ignore\r\n        p = p.next;\r\n\r\n    } while (p != a);\r\n\r\n    return inside;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction splitPolygon(a: Node, b: Node): Node {\r\n    let a2 = new Node(a.i, a.x, a.y),\r\n        b2 = new Node(b.i, b.x, b.y),\r\n        an = a.next,\r\n        bp = b.prev;\r\n\r\n    a.next = b;\r\n    b.prev = a;\r\n\r\n    a2.next = an;\r\n    // @ts-ignore\r\n    an.prev = a2;\r\n\r\n    b2.next = a2;\r\n    a2.prev = b2;\r\n\r\n    // @ts-ignore\r\n    bp.next = b2;\r\n    b2.prev = bp;\r\n\r\n    return b2;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction insertNode(i: number, x: number, y: number, last: Nullable<Node>): Node {\r\n    let p = new Node(i, x, y);\r\n\r\n    if (!last) {\r\n        p.prev = p;\r\n        p.next = p;\r\n\r\n    } else {\r\n        p.next = last.next;\r\n        p.prev = last;\r\n        // @ts-ignore\r\n        last.next.prev = p;\r\n        last.next = p;\r\n    }\r\n    return p;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction removeNode(p: Node) {\r\n    if (p.next) { p.next.prev = p.prev; }\r\n    if (p.prev) { p.prev.next = p.next; }\r\n\r\n    if (p.prevZ) { p.prevZ.nextZ = p.nextZ; }\r\n    if (p.nextZ) { p.nextZ.prevZ = p.prevZ; }\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction signedArea(data: FloatArray, start: number, end: number, dim: number): number {\r\n    let sum = 0;\r\n    for (let i = start, j = end - dim; i < end; i += dim) {\r\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\r\n        j = i;\r\n    }\r\n    return sum;\r\n}\r\n",
        "/**\r\n * 事件\r\n * @category Event\r\n */\r\nexport class Event {\r\n\r\n    /**\r\n     * 事件类型\r\n     */\r\n    public type: string;\r\n\r\n    /**\r\n     * 是否删除\r\n     */\r\n    public removed: boolean;\r\n\r\n    /**\r\n     * 触发目标\r\n     */\r\n    public target: any;\r\n\r\n    /**\r\n     * 停止\r\n     */\r\n    public propagationStopped: boolean;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param type\r\n     */\r\n    constructor(type: string) {\r\n        this.type = type;\r\n        this.removed = false;\r\n        this.propagationStopped = false;\r\n    }\r\n\r\n    /**\r\n     * 删除事件\r\n     */\r\n    remove() {\r\n        this.removed = true;\r\n        return this;\r\n    }\r\n}\r\n",
        "import { IDisposable } from \"../Misc/IDisposable\";\r\nimport { Event } from \"./Event\";\r\n\r\n/**\r\n * @category Event\r\n */\r\ninterface EventListenerObject {\r\n    handleEvent(evt: Event): void;\r\n}\r\n\r\n/**\r\n * @category Event\r\n */\r\ninterface EventListener {\r\n    (evt: Event): void;\r\n}\r\n\r\n/**\r\n * @category Event\r\n */\r\ndeclare type EventListenerOrEventListenerObject = EventListener | EventListenerObject;\r\n/**\r\n * @category Event\r\n */\r\ndeclare type EventListeners = Map<string, Array<EventListenerOrEventListenerObject>>;\r\n\r\n/**\r\n * 事件分发\r\n * @category Event\r\n */\r\nexport class EventDispatcher implements IDisposable {\r\n\r\n    private _listeners: EventListeners;\r\n\r\n    /**\r\n     * 构造函数\r\n     */\r\n    constructor() {\r\n        this._listeners = new Map<string, Array<EventListenerOrEventListenerObject>>();\r\n    }\r\n\r\n    /**\r\n     * 是否存在事件监听\r\n     * @param type\r\n     */\r\n    hasEventListener(type: string): boolean {\r\n        const listeners = this._listeners;\r\n        return listeners.has(type);\r\n    }\r\n\r\n    /**\r\n     * 注册事件监听\r\n     * @param type\r\n     * @param listener\r\n     */\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject): EventListenerOrEventListenerObject {\r\n\r\n        const listeners: EventListeners = this._listeners;\r\n\r\n        let arr = listeners.get(type);\r\n        if (arr) {\r\n            this.removeEventListener(type, listener);\r\n            arr = listeners.get(type);\r\n        }\r\n        if (!arr) {\r\n            arr = new Array<EventListenerOrEventListenerObject>();\r\n            listeners.set(type, arr);\r\n        }\r\n        arr.push(listener);\r\n        return listener;\r\n    }\r\n\r\n    /**\r\n     * 删除事件监听\r\n     * @param type\r\n     * @param listener\r\n     */\r\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject): void {\r\n\r\n        const listeners: EventListeners = this._listeners;\r\n        if (!listeners) {\r\n            return;\r\n        }\r\n\r\n        const arr = listeners.get(type);\r\n        if (!arr) {\r\n            return;\r\n        }\r\n\r\n        const idx = arr.indexOf(listener);\r\n        if (idx >= 0) {\r\n            arr.splice(idx, 1);\r\n        }\r\n\r\n        if (arr.length <= 0) {\r\n            listeners.delete(type);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 删除所有事件监听\r\n     * @param type\r\n     */\r\n    removeAllEventListeners(type: string | null): void {\r\n        if (type) {\r\n            if (this._listeners) { this._listeners.delete(type); }\r\n        } else {\r\n            this._listeners.clear();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 分发事件\r\n     * @param event\r\n     */\r\n    dispatchEvent(event: Event): void {\r\n\r\n        event.target = this;\r\n        event.removed = false;\r\n\r\n        const listeners: EventListeners = this._listeners;\r\n\r\n        let arr = listeners.get(event.type);\r\n        if (!arr || arr.length <= 0) {\r\n            return;\r\n        }\r\n\r\n        arr = arr.slice();\r\n\r\n        let l = arr.length;\r\n        for (let i = 0; i < l && !event.propagationStopped; i++) {\r\n            let o = arr[i];\r\n\r\n            if ((o as EventListenerObject).handleEvent != undefined) {\r\n                (o as EventListenerObject).handleEvent(event);\r\n            }\r\n            else {\r\n                o = o as EventListener;\r\n                o(event);\r\n            }\r\n\r\n            if (event.removed) {\r\n                this.removeEventListener(event.type, o);\r\n                event.removed = false;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 释放资源\r\n     */\r\n    dispose(): void {\r\n        this._listeners.clear();\r\n        delete this._listeners;\r\n    }\r\n}\r\n",
        "/**\r\n * 视口\r\n */\r\nexport class Viewport {\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param x\r\n     * @param y\r\n     * @param width\r\n     * @param height\r\n     */\r\n    constructor(\r\n        public x: number,\r\n        public y: number,\r\n        public width: number,\r\n        public height: number) {\r\n    }\r\n\r\n    /**\r\n     * 使用绝对大小调整(从0->宽度，0->高度，而不是0->1)创建一个新的viewport\r\n     * @param renderWidth\r\n     * @param renderHeight\r\n     */\r\n    public toGlobal(renderWidth: number, renderHeight: number): Viewport {\r\n        return new Viewport(this.x * renderWidth, this.y * renderHeight, this.width * renderWidth, this.height * renderHeight);\r\n    }\r\n\r\n    /**\r\n     * 将绝对视口值存储到目标视口(从0->宽度，0->高度而不是0->1)\r\n     * @param renderWidth\r\n     * @param renderHeight\r\n     * @param ref\r\n     */\r\n    public toGlobalToRef(renderWidth: number, renderHeight: number, ref: Viewport): Viewport {\r\n        ref.x = this.x * renderWidth;\r\n        ref.y = this.y * renderHeight;\r\n        ref.width = this.width * renderWidth;\r\n        ref.height = this.height * renderHeight;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     * @returns a new Viewport\r\n     */\r\n    public clone(): Viewport {\r\n        return new Viewport(this.x, this.y, this.width, this.height);\r\n    }\r\n}\r\n",
        "import { Camera } from \"./Camera\";\r\nimport { AbstractObject, Scene } from \"../Scene\";\r\nimport { Nullable } from \"../types\";\r\n\r\n/**\r\n * 正交摄像机\r\n */\r\nexport class OrthographicCamera extends Camera {\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _left: number;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _right: number;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _top: number;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _bottom: number;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _near: number;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _far: number;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _aspect: number;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param scene\r\n     * @param activeIfNoneActive\r\n     * @param parent\r\n     * @param name\r\n     * @param left\r\n     * @param right\r\n     * @param top\r\n     * @param bottom\r\n     * @param near\r\n     * @param far\r\n     */\r\n    constructor(scene: Scene, activeIfNoneActive: boolean = true, parent: Nullable<AbstractObject> = null, name: string = '',\r\n                left: number = -1, right: number = 1, top: number = 1, bottom: number = -1,\r\n                near: number = 0.1, far: number = 2000) {\r\n        super(scene, activeIfNoneActive, parent, name);\r\n\r\n        this.left = left;\r\n        this.right = right;\r\n        this.top = top;\r\n        this.bottom = bottom;\r\n\r\n        this.near = near;\r\n        this.far = far;\r\n\r\n        this.aspect = (this.right - this.left) / (this.top - this.bottom);\r\n    }\r\n\r\n    public get left() {\r\n        return this._left;\r\n    }\r\n    public set left(value) {\r\n        if (this._left != value) {\r\n            this._left = value;\r\n            this._needsUpdateCameraMatrix = true;\r\n        }\r\n    }\r\n\r\n    public get right() {\r\n        return this._right;\r\n    }\r\n    public set right(value) {\r\n        if (this._right != value) {\r\n            this._right = value;\r\n            this._needsUpdateCameraMatrix = true;\r\n        }\r\n    }\r\n\r\n    public get top() {\r\n        return this._top;\r\n    }\r\n    public set top(value) {\r\n        if (this._top != value) {\r\n            this._top = value;\r\n            this._needsUpdateCameraMatrix = true;\r\n        }\r\n    }\r\n\r\n    public get bottom() {\r\n        return this._bottom;\r\n    }\r\n    public set bottom(value) {\r\n        if (this._bottom != value) {\r\n            this._bottom = value;\r\n            this._needsUpdateCameraMatrix = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 近裁面\r\n     */\r\n    public get near() {\r\n        return this._near;\r\n    }\r\n    public set near(value) {\r\n        if (this._near != value) {\r\n            this._near = value;\r\n            this._needsUpdateCameraMatrix = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 远裁面\r\n     */\r\n    public get far() {\r\n        return this._far;\r\n    }\r\n    public set far(value) {\r\n        if (this._far != value) {\r\n            this._far = value;\r\n            this._needsUpdateCameraMatrix = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 纵横比\r\n     */\r\n    public get aspect() {\r\n        return this._aspect;\r\n    }\r\n    public set aspect(value) {\r\n        if (this._aspect != value) {\r\n            this._aspect = value;\r\n            this._needsUpdateCameraMatrix = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新投影矩阵\r\n     */\r\n    public updateProjectionMatrix() {\r\n\r\n        this._needsUpdateCameraMatrix = false;\r\n\r\n        const dx = (this.right - this.left) / (2);\r\n        const dy = (this.top - this.bottom) / (2);\r\n        const cx = (this.right + this.left) / 2;\r\n        const cy = (this.top + this.bottom) / 2;\r\n\r\n        const left = cx - dx;\r\n        const right = cx + dx;\r\n        const top = cy + dy;\r\n        const bottom = cy - dy;\r\n\r\n        this._projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);\r\n        this._projectionMatrixInverse.getInverse(this._projectionMatrix);\r\n        this._viewProjectionMatrix.multiplyMatrices(this._projectionMatrix, this._matrixWorldInverse);\r\n        this._viewProjectionMatrixInverse.getInverse(this._viewProjectionMatrix);\r\n        this._frustum.setFromProjectionMatrix(this._viewProjectionMatrix);\r\n    }\r\n}\r\n",
        "import { Camera } from \"./Camera\";\r\nimport { MathUtils } from \"../Math\";\r\nimport { AbstractObject, Scene } from \"../Scene\";\r\nimport { Nullable } from \"../types\";\r\n\r\n/**\r\n * 透视摄像机\r\n */\r\nexport class PerspectiveCamera extends Camera {\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _fov: number;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _aspect: number;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _near: number;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _far: number;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _filmGauge: number;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _filmOffset: number;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param scene\r\n     * @param activeIfNoneActive\r\n     * @param parent\r\n     * @param name\r\n     * @param fov\r\n     * @param aspect\r\n     * @param near\r\n     * @param far\r\n     */\r\n    constructor(scene: Scene, activeIfNoneActive: boolean = true, parent: Nullable<AbstractObject> = null, name: string = '', fov: number = 50, aspect: number = 1, near: number = 0.1, far: number = 2000) {\r\n        super(scene, activeIfNoneActive, parent, name);\r\n\r\n        this._fov = fov;\r\n        this._aspect = aspect;\r\n        this._near = near;\r\n        this._far = far;\r\n\r\n        this._filmGauge = 35;\r\n        this._filmOffset = 0;\r\n\r\n        this.updateProjectionMatrix();\r\n    }\r\n\r\n    /**\r\n     * 视场角\r\n     */\r\n    public get fov() {\r\n        return this._fov;\r\n    }\r\n    public set fov(value) {\r\n        if (this._fov != value) {\r\n            this._fov = value;\r\n            this._needsUpdateCameraMatrix = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 纵横比\r\n     */\r\n    public get aspect() {\r\n        return this._aspect;\r\n    }\r\n    public set aspect(value) {\r\n        if (this._aspect != value) {\r\n            this._aspect = value;\r\n            this._needsUpdateCameraMatrix = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 近裁面\r\n     */\r\n    public get near() {\r\n        return this._near;\r\n    }\r\n    public set near(value) {\r\n        if (this._near != value) {\r\n            this._near = value;\r\n            this._needsUpdateCameraMatrix = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 远裁面\r\n     */\r\n    public get far() {\r\n        return this._far;\r\n    }\r\n    public set far(value) {\r\n        if (this._far != value) {\r\n            this._far = value;\r\n            this._needsUpdateCameraMatrix = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * filmGauge\r\n     */\r\n    public get filmGauge() {\r\n        return this._filmGauge;\r\n    }\r\n    public set filmGauge(value) {\r\n        if (this._filmGauge != value) {\r\n            this._filmGauge = value;\r\n            this._needsUpdateCameraMatrix = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * filmOffset\r\n     */\r\n    public get filmOffset() {\r\n        return this._filmOffset;\r\n    }\r\n    public set filmOffset(value) {\r\n        if (this._filmOffset != value) {\r\n            this._filmOffset = value;\r\n            this._needsUpdateCameraMatrix = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 根据焦距设置FOV\r\n     * @param focalLength\r\n     */\r\n    public setFocalLength(focalLength: number): PerspectiveCamera {\r\n        const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\r\n        this.fov = MathUtils.RAD2DEG * 2 * Math.atan(vExtentSlope);\r\n        this.updateProjectionMatrix();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取焦距\r\n     */\r\n    public getFocalLength(): number {\r\n        const vExtentSlope = Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov);\r\n        return 0.5 * this.getFilmHeight() / vExtentSlope;\r\n    }\r\n\r\n    /**\r\n     * 以角度返回当前垂直视野角度\r\n     */\r\n    public getEffectiveFOV(): number {\r\n        return MathUtils.RAD2DEG * 2 * Math.atan(Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov));\r\n    }\r\n\r\n    /**\r\n     * 返回当前胶片上图像的宽\r\n     */\r\n    public getFilmWidth(): number {\r\n        return this.filmGauge * Math.min(this.aspect, 1);\r\n    }\r\n\r\n    /**\r\n     * 返回当前胶片上图像的高\r\n     */\r\n    public getFilmHeight() {\r\n        return this.filmGauge / Math.max(this.aspect, 1);\r\n    }\r\n\r\n    /**\r\n     * 更新投影矩阵\r\n     */\r\n    public updateProjectionMatrix(): void {\r\n\r\n        this._needsUpdateCameraMatrix = false;\r\n\r\n        let near = this.near;\r\n        let top = near * Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov) / this.zoom;\r\n        let bottom = -top;\r\n        let height = 2 * top;\r\n        let width = this.aspect * height;\r\n        let left = -0.5 * width;\r\n        let right = -left;\r\n\r\n        let skew = this.filmOffset;\r\n        if (skew != 0) { left += near * skew / this.getFilmWidth(); }\r\n\r\n        this._projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);\r\n        this._projectionMatrixInverse.getInverse(this._projectionMatrix);\r\n        this._viewProjectionMatrix.multiplyMatrices(this._projectionMatrix, this._matrixWorldInverse);\r\n        this._viewProjectionMatrixInverse.getInverse(this._viewProjectionMatrix);\r\n        this._frustum.setFromProjectionMatrix(this._viewProjectionMatrix);\r\n    }\r\n}\r\n",
        "export * from \"./CSG\";\r\nexport * from \"./CAG\";\r\n",
        "import {CSGMatrix4x4} from './CSGMatrix4x4'\r\n\r\n/**\r\n * CSG属性类\r\n */\r\nexport class CSGProperties {\r\n\r\n    constructor() {\r\n    }\r\n\r\n    /**\r\n     * 转化OBJ\r\n     * @param source\r\n     * @param result\r\n     * @param matrix4x4\r\n     */\r\n    static transformObj(source: any, result: any, matrix4x4: CSGMatrix4x4) {\r\n        for (let propertyname in source) {\r\n            if (propertyname == '_transform') {\r\n                continue;\r\n            }\r\n            if (propertyname == '_merge') {\r\n                continue;\r\n            }\r\n            let propertyvalue = source[propertyname];\r\n            let transformed = propertyvalue;\r\n            if (typeof (propertyvalue) == 'object') {\r\n                if (('transform' in propertyvalue) && (typeof (propertyvalue.transform) == 'function')) {\r\n                    transformed = propertyvalue.transform(matrix4x4);\r\n                } else if (propertyvalue instanceof Array) {\r\n                    transformed = [];\r\n                    CSGProperties.transformObj(propertyvalue, transformed, matrix4x4);\r\n                } else if (propertyvalue instanceof CSGProperties) {\r\n                    transformed = new CSGProperties();\r\n                    CSGProperties.transformObj(propertyvalue, transformed, matrix4x4);\r\n                }\r\n            }\r\n            result[propertyname] = transformed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     * @param source\r\n     * @param result\r\n     */\r\n    static cloneObj(source: any, result: any) {\r\n        for (let propertyname in source) {\r\n            if (propertyname == '_transform') {\r\n                continue;\r\n            }\r\n            if (propertyname == '_merge') {\r\n                continue;\r\n            }\r\n            let propertyvalue = source[propertyname];\r\n            let cloned = propertyvalue;\r\n            if (typeof (propertyvalue) == 'object') {\r\n                if (propertyvalue instanceof Array) {\r\n                    cloned = [];\r\n                    for (let i = 0; i < propertyvalue.length; i++) {\r\n                        cloned.push(propertyvalue[i]);\r\n                    }\r\n                } else if (propertyvalue instanceof CSGProperties) {\r\n                    cloned = new CSGProperties();\r\n                    CSGProperties.cloneObj(propertyvalue, cloned);\r\n                }\r\n            }\r\n            result[propertyname] = cloned;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 添加\r\n     * @param result\r\n     * @param otherproperties\r\n     */\r\n    static addFrom(result: any, otherproperties: any) {\r\n        for (let propertyname in otherproperties) {\r\n            if (propertyname == '_transform') {\r\n                continue;\r\n            }\r\n            if (propertyname == '_merge') {\r\n                continue;\r\n            }\r\n            if ((propertyname in result) &&\r\n                (typeof (result[propertyname]) == 'object') &&\r\n                (result[propertyname] instanceof CSGProperties) &&\r\n                (typeof (otherproperties[propertyname]) == 'object') &&\r\n                (otherproperties[propertyname] instanceof CSGProperties)) {\r\n                CSGProperties.addFrom(result[propertyname], otherproperties[propertyname]);\r\n            } else if (!(propertyname in result)) {\r\n                result[propertyname] = otherproperties[propertyname];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 转化\r\n     * @param matrix4x4\r\n     * @private\r\n     */\r\n    private _transform(matrix4x4: CSGMatrix4x4) {\r\n        let result = new CSGProperties();\r\n        CSGProperties.transformObj(this, result, matrix4x4);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 合并\r\n     * @param otherproperties\r\n     * @private\r\n     */\r\n    private _merge(otherproperties: CSGProperties): CSGProperties {\r\n        let result = new CSGProperties();\r\n        CSGProperties.cloneObj(this, result);\r\n        CSGProperties.addFrom(result, otherproperties);\r\n        return result;\r\n    }\r\n}\r\n",
        "import {CSGFuzzyFactory} from './CSGFuzzyFactory';\r\nimport {CAGSide} from './CAGSide';\r\nimport {CAG} from './CAG';\r\nimport {CAGVertex} from './CAGVertex';\r\n\r\n/**\r\n * CAG模糊工厂\r\n */\r\nexport class CAGFuzzyFactory {\r\n    /**\r\n     * 顶点工厂\r\n     */\r\n    public vertexfactory: CSGFuzzyFactory;\r\n\r\n    /**\r\n     * 构造函数\r\n     */\r\n    constructor() {\r\n        this.vertexfactory = new CSGFuzzyFactory(2, 1e-5);\r\n    }\r\n\r\n    /**\r\n     * 获取顶点\r\n     * @param sourcevertex\r\n     */\r\n    public getVertex(sourcevertex: CAGVertex): any {\r\n        let elements = [sourcevertex.pos._x, sourcevertex.pos._y];\r\n        let result = this.vertexfactory.lookupOrCreate(elements, (els: any) => sourcevertex);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 获取边\r\n     * @param sourceside\r\n     */\r\n    public getSide(sourceside: CAGSide): CAGSide {\r\n        let vertex0 = this.getVertex(sourceside.vertex0);\r\n        let vertex1 = this.getVertex(sourceside.vertex1);\r\n        return new CAGSide(vertex0, vertex1);\r\n    }\r\n\r\n    /**\r\n     * 获取CAG\r\n     * @param sourcecag\r\n     */\r\n    public getCAG(sourcecag: any): CAG {\r\n        let _this = this;\r\n        let newsides = sourcecag.sides.map((side: any) => _this.getSide(side))\r\n            // remove bad sides (mostly a user input issue)\r\n            .filter((side: any) => side.length() > 1e-5);\r\n        return CAG.fromSides(newsides);\r\n    }\r\n}\r\n\r\n",
        "import {CSGVector2D} from './CSGVector2D';\r\nimport {CSGMatrix4x4} from './CSGMatrix4x4';\r\nimport {CSGPlane} from './CSGPlane';\r\nimport {CSGVector3D} from './CSGVector3D';\r\nimport {CAGVertex} from './CAGVertex';\r\nimport {CAGSide} from './CAGSide';\r\nimport {CSG} from './CSG';\r\nimport {CAG} from './CAG';\r\n\r\n/**\r\n * CSG2D路径类\r\n */\r\nexport class CSGPath2D {\r\n    /**\r\n     * 点\r\n     */\r\n    public points: any;\r\n\r\n    /**\r\n     * 封闭状态\r\n     */\r\n    public closed: boolean;\r\n\r\n    /**\r\n     * 默认分辨率\r\n     */\r\n    static defaultResolution2D: number;\r\n\r\n    /**\r\n     * 上次贝塞尔控制点\r\n     */\r\n    public lastBezierControlPoint: [];\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param points\r\n     * @param closed\r\n     */\r\n    constructor(points?: number[], closed?: boolean) {\r\n        closed = !!closed;\r\n        points = points || [];\r\n        // re-parse the points into CSG.Vector2D\r\n        // and remove any duplicate points\r\n        let prevpoint: any = null;\r\n        if (closed && (points.length > 0)) {\r\n            prevpoint = new CSGVector2D(points[points.length - 1]);\r\n        }\r\n        let newpoints: any = [];\r\n        points.map((point) => {\r\n            const _point = new CSGVector2D(point);\r\n            let skip = false;\r\n            if (prevpoint != null) {\r\n                let distance = _point.distanceTo(prevpoint);\r\n                skip = distance < 1e-5;\r\n            }\r\n            if (!skip) {\r\n                newpoints.push(_point);\r\n            }\r\n            prevpoint = _point;\r\n        });\r\n        this.points = newpoints;\r\n        this.closed = closed;\r\n    }\r\n\r\n    /**\r\n     * 根据角度生成\r\n     * @param options\r\n     */\r\n    static arc(options: any): CSGPath2D {\r\n        let center = CSG.parseOptionAs2DVector(options, 'center', 0);\r\n        let radius = CSG.parseOptionAsFloat(options, 'radius', 1);\r\n        let startangle = CSG.parseOptionAsFloat(options, 'startangle', 0);\r\n        let endangle = CSG.parseOptionAsFloat(options, 'endangle', 360);\r\n        let resolution = CSG.parseOptionAsInt(options, 'resolution', CSG.defaultResolution2D);\r\n        let maketangent = CSG.parseOptionAsBool(options, 'maketangent', false);\r\n        // no need to make multiple turns:\r\n        while (endangle - startangle >= 720) {\r\n            endangle -= 360;\r\n        }\r\n        while (endangle - startangle <= -720) {\r\n            endangle += 360;\r\n        }\r\n        let points: any = [];\r\n        let point;\r\n        let absangledif = Math.abs(endangle - startangle);\r\n        if (absangledif < 1e-5) {\r\n            point = CSGVector2D.fromAngle(startangle / 180.0 * Math.PI).times(radius);\r\n            points.push(point.plus(center));\r\n        } else {\r\n            let numsteps = Math.floor(resolution * absangledif / 360) + 1;\r\n            let edgestepsize = numsteps * 0.5 / absangledif; // step size for half a degree\r\n            if (edgestepsize > 0.25) {\r\n                edgestepsize = 0.25;\r\n            }\r\n            let numsteps_mod = maketangent ? (numsteps + 2) : numsteps;\r\n            for (let i = 0; i <= numsteps_mod; i++) {\r\n                let step = i;\r\n                if (maketangent) {\r\n                    step = (i - 1) * (numsteps - 2 * edgestepsize) / numsteps + edgestepsize;\r\n                    if (step < 0) {\r\n                        step = 0;\r\n                    }\r\n                    if (step > numsteps) {\r\n                        step = numsteps;\r\n                    }\r\n                }\r\n                let angle = startangle + step * (endangle - startangle) / numsteps;\r\n                point = CSGVector2D.fromAngle(angle / 180.0 * Math.PI).times(radius);\r\n                points.push(point.plus(center));\r\n            }\r\n        }\r\n        return new CSGPath2D(points, false);\r\n    }\r\n\r\n    /**\r\n     * 扩充\r\n     * @param otherpath\r\n     */\r\n    public concat(otherpath: CSGPath2D) {\r\n        if (this.closed || otherpath.closed) {\r\n            throw new Error('Paths must not be closed');\r\n        }\r\n        let newpoints = this.points.concat(otherpath.points);\r\n        return new CSGPath2D(newpoints);\r\n    }\r\n\r\n    /**\r\n     * 添加点\r\n     * @param point\r\n     */\r\n    public appendPoint(point: any) {\r\n        if (this.closed) {\r\n            throw new Error('Path must not be closed');\r\n        }\r\n        point = new CSGVector2D(point); // cast to Vector2D\r\n        let newpoints = this.points.concat([point]);\r\n        return new CSGPath2D(newpoints);\r\n    }\r\n\r\n    /**\r\n     * 添加点\r\n     * @param points\r\n     */\r\n    public appendPoints(points: any) {\r\n        if (this.closed) {\r\n            throw new Error('Path must not be closed');\r\n        }\r\n        let newpoints = this.points;\r\n        points.forEach((point: any) => {\r\n            newpoints.push(new CSGVector2D(point)); // cast to Vector2D\r\n        });\r\n        return new CSGPath2D(newpoints);\r\n    }\r\n\r\n    /**\r\n     * 封闭\r\n     */\r\n    public close(): CSGPath2D {\r\n        return new CSGPath2D(this.points, true);\r\n    }\r\n\r\n    // Extrude the path by following it with a rectangle (upright, perpendicular to the path direction)\r\n    // Returns a CSG solid\r\n    //   width: width of the extrusion, in the z=0 plane\r\n    //   height: height of the extrusion in the z direction\r\n    //   resolution: number of segments per 360 degrees for the curve in a corner\r\n    /**\r\n     * 矩形拉伸\r\n     * @param width\r\n     * @param height\r\n     * @param resolution\r\n     */\r\n    public rectangularExtrude(width: any, height: any, resolution: any) {\r\n        let cag = this.expandToCAG(width / 2, resolution);\r\n        let result = cag.extrude({\r\n            offset: [0, 0, height],\r\n        });\r\n        return result;\r\n    }\r\n\r\n    // Expand the path to a CAG\r\n    // This traces the path with a circle with radius pathradius\r\n    /**\r\n     * 将路径扩展到CAG\r\n     * @param pathradius\r\n     * @param resolution\r\n     */\r\n    public expandToCAG(pathradius: any, resolution: any) {\r\n        let sides = [];\r\n        let numpoints = this.points.length;\r\n        let startindex = 0;\r\n        if (this.closed && (numpoints > 2)) {\r\n            startindex = -1;\r\n        }\r\n        let prevvertex: any;\r\n        for (let i = startindex; i < numpoints; i++) {\r\n            let pointindex = i;\r\n            if (pointindex < 0) {\r\n                pointindex = numpoints - 1;\r\n            }\r\n            let point = this.points[pointindex];\r\n            let vertex = new CAGVertex(point);\r\n            if (i > startindex) {\r\n                let side = new CAGSide(prevvertex, vertex);\r\n                sides.push(side);\r\n            }\r\n            prevvertex = vertex;\r\n        }\r\n        let shellcag = CAG.fromSides(sides);\r\n        let expanded = shellcag.expandedShell(pathradius, resolution);\r\n        return expanded;\r\n    }\r\n\r\n    /**\r\n     * 内部CAG\r\n     */\r\n    public innerToCAG(): any {\r\n        if (!this.closed) {\r\n            throw new Error('The path should be closed!');\r\n        }\r\n        return CAG.fromPoints(this.points);\r\n    }\r\n\r\n    /**\r\n     * 转换\r\n     * @param matrix4x4\r\n     */\r\n    public transform(matrix4x4: CSGMatrix4x4) {\r\n        let newpoints = this.points.map((point: any) => point.multiply4x4(matrix4x4));\r\n        return new CSGPath2D(newpoints, this.closed);\r\n    }\r\n\r\n    /**\r\n     * 添加贝塞尔曲线\r\n     * @param controlpoints\r\n     * @param options\r\n     */\r\n    public appendBezier(controlpoints: any, options: any): CSGPath2D {\r\n        if (arguments.length < 2) {\r\n            options = {};\r\n        }\r\n        if (this.closed) {\r\n            throw new Error('Path must not be closed');\r\n        }\r\n        if (!(controlpoints instanceof Array)) {\r\n            throw new Error('appendBezier: should pass an array of control points');\r\n        }\r\n        if (controlpoints.length < 1) {\r\n            throw new Error('appendBezier: need at least 1 control point');\r\n        }\r\n        if (this.points.length < 1) {\r\n            throw new Error('appendBezier: path must already contain a point (the endpoint of the path is used as the starting point for the bezier curve)');\r\n        }\r\n        let resolution = CSG.parseOptionAsInt(options, 'resolution', CSG.defaultResolution2D);\r\n        if (resolution < 4) {\r\n            resolution = 4;\r\n        }\r\n        let factorials = [];\r\n        let controlpoints_parsed: any = [];\r\n        controlpoints_parsed.push(this.points[this.points.length - 1]); // start at the previous end point\r\n        for (let i = 0; i < controlpoints.length; ++i) {\r\n            let p = controlpoints[i];\r\n            if (p == null) {\r\n                // we can pass null as the first control point. In that case a smooth gradient is ensured:\r\n                if (i != 0) {\r\n                    throw new Error('appendBezier: null can only be passed as the first control point');\r\n                }\r\n                if (controlpoints.length < 2) {\r\n                    throw new Error('appendBezier: null can only be passed if there is at least one more control point');\r\n                }\r\n                let lastBezierControlPoint;\r\n                if ('lastBezierControlPoint' in this) {\r\n                    lastBezierControlPoint = this.lastBezierControlPoint;\r\n                } else {\r\n                    // if (this.points.length < 2) {\r\n                    //     throw new Error('appendBezier: null is passed as a control point but this requires a previous bezier curve or at least two points in the existing path');\r\n                    // }\r\n                    // lastBezierControlPoint = this.points[this.points.length - 2];\r\n                }\r\n                // mirror the last bezier control point:\r\n                p = this.points[this.points.length - 1].times(2).minus(lastBezierControlPoint);\r\n            } else {\r\n                p = new CSGVector2D(p); // cast to Vector2D\r\n            }\r\n            controlpoints_parsed.push(p);\r\n        }\r\n        let bezier_order = controlpoints_parsed.length - 1;\r\n        let fact = 1;\r\n        for (let i = 0; i <= bezier_order; ++i) {\r\n            if (i > 0) {\r\n                fact *= i;\r\n            }\r\n            factorials.push(fact);\r\n        }\r\n        let binomials: any = [];\r\n        for (let i = 0; i <= bezier_order; ++i) {\r\n            let binomial = factorials[bezier_order] / (factorials[i] * factorials[bezier_order - i]);\r\n            binomials.push(binomial);\r\n        }\r\n        let getPointForT = function (t: any) {\r\n            let t_k = 1; // = pow(t,k)\r\n            let one_minus_t_n_minus_k = Math.pow(1 - t, bezier_order); // = pow( 1-t, bezier_order - k)\r\n            let inv_1_minus_t = (t != 1) ? (1 / (1 - t)) : 1;\r\n            let point = new CSGVector2D(0, 0);\r\n            for (let k = 0; k <= bezier_order; ++k) {\r\n                if (k == bezier_order) {\r\n                    one_minus_t_n_minus_k = 1;\r\n                }\r\n                let bernstein_coefficient = binomials[k] * t_k * one_minus_t_n_minus_k;\r\n                point = point.plus(controlpoints_parsed[k].times(bernstein_coefficient));\r\n                t_k *= t;\r\n                one_minus_t_n_minus_k *= inv_1_minus_t;\r\n            }\r\n            return point;\r\n        };\r\n        let newpoints = [];\r\n        let newpoints_t = [];\r\n        let numsteps = bezier_order + 1;\r\n        for (let i = 0; i < numsteps; ++i) {\r\n            let t = i / (numsteps - 1);\r\n            let point = getPointForT(t);\r\n            newpoints.push(point);\r\n            newpoints_t.push(t);\r\n        }\r\n        // subdivide each segment until the angle at each vertex becomes small enough:\r\n        let subdivide_base = 1;\r\n        let maxangle = Math.PI * 2 / resolution; // segments may have differ no more in angle than this\r\n        let maxsinangle = Math.sin(maxangle);\r\n        while (subdivide_base < newpoints.length - 1) {\r\n            let dir1 = newpoints[subdivide_base].minus(newpoints[subdivide_base - 1]).unit();\r\n            let dir2 = newpoints[subdivide_base + 1].minus(newpoints[subdivide_base]).unit();\r\n            let sinangle = dir1.cross(dir2); // this is the sine of the angle\r\n            if (Math.abs(sinangle) > maxsinangle) {\r\n                // angle is too big, we need to subdivide\r\n                let t0 = newpoints_t[subdivide_base - 1];\r\n                let t1 = newpoints_t[subdivide_base + 1];\r\n                let t0_new = t0 + (t1 - t0) * 1 / 3;\r\n                let t1_new = t0 + (t1 - t0) * 2 / 3;\r\n                let point0_new = getPointForT(t0_new);\r\n                let point1_new = getPointForT(t1_new);\r\n                // remove the point at subdivide_base and replace with 2 new points:\r\n                newpoints.splice(subdivide_base, 1, point0_new, point1_new);\r\n                newpoints_t.splice(subdivide_base, 1, t0_new, t1_new);\r\n                // re - evaluate the angles, starting at the previous junction since it has changed:\r\n                subdivide_base--;\r\n                if (subdivide_base < 1) {\r\n                    subdivide_base = 1;\r\n                }\r\n            } else {\r\n                ++subdivide_base;\r\n            }\r\n        }\r\n        // append to the previous points, but skip the first new point because it is identical to the last point:\r\n        newpoints = this.points.concat(newpoints.slice(1));\r\n        let result = new CSGPath2D(newpoints);\r\n        result.lastBezierControlPoint = controlpoints_parsed[controlpoints_parsed.length - 2];\r\n        return result;\r\n    }\r\n\r\n    /*\r\n         options:\r\n         .resolution // smoothness of the arc (number of segments per 360 degree of rotation)\r\n         // to create a circular arc:\r\n         .radius\r\n         // to create an elliptical arc:\r\n         .xradius\r\n         .yradius\r\n         .xaxisrotation  // the rotation (in degrees) of the x axis of the ellipse with respect to the x axis of our coordinate system\r\n         // this still leaves 4 possible arcs between the two given points. The following two flags select which one we draw:\r\n         .clockwise // = true | false (default is false). Two of the 4 solutions draw clockwise with respect to the center point, the other 2 counterclockwise\r\n         .large     // = true | false (default is false). Two of the 4 solutions are an arc longer than 180 degrees, the other two are <= 180 degrees\r\n         This implementation follows the SVG arc specs. For the details see\r\n         http://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands\r\n         */\r\n    /**\r\n     * 添加角\r\n     * @param endpoint\r\n     * @param options\r\n     */\r\n    public appendArc(endpoint: any, options: any): CSGPath2D {\r\n        let decimals = 100000;\r\n        if (arguments.length < 2) {\r\n            options = {};\r\n        }\r\n        if (this.closed) {\r\n            throw new Error('Path must not be closed');\r\n        }\r\n        if (this.points.length < 1) {\r\n            throw new Error('appendArc: path must already contain a point (the endpoint of the path is used as the starting point for the arc)');\r\n        }\r\n        let resolution = CSG.parseOptionAsInt(options, 'resolution', CSG.defaultResolution2D);\r\n        if (resolution < 4) {\r\n            resolution = 4;\r\n        }\r\n        let xradius;\r\n        let\r\n            yradius;\r\n        if (('xradius' in options) || ('yradius' in options)) {\r\n            if ('radius' in options) {\r\n                throw new Error('Should either give an xradius and yradius parameter, or a radius parameter');\r\n            }\r\n            xradius = CSG.parseOptionAsFloat(options, 'xradius', 0);\r\n            yradius = CSG.parseOptionAsFloat(options, 'yradius', 0);\r\n        } else {\r\n            xradius = CSG.parseOptionAsFloat(options, 'radius', 0);\r\n            yradius = xradius;\r\n        }\r\n        let xaxisrotation = CSG.parseOptionAsFloat(options, 'xaxisrotation', 0);\r\n        let clockwise = CSG.parseOptionAsBool(options, 'clockwise', false);\r\n        let largearc = CSG.parseOptionAsBool(options, 'large', false);\r\n        let startpoint = this.points[this.points.length - 1];\r\n        endpoint = new CSGVector2D(endpoint);\r\n        // round to precision in order to have determinate calculations\r\n        xradius = Math.round(xradius * decimals) / decimals;\r\n        yradius = Math.round(yradius * decimals) / decimals;\r\n        endpoint = new CSGVector2D(Math.round(endpoint.x * decimals) / decimals, Math.round(endpoint.y * decimals) / decimals);\r\n        let sweep_flag = !clockwise;\r\n        let newpoints = [];\r\n        if ((xradius == 0) || (yradius == 0)) {\r\n            // http://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes:\r\n            // If rx = 0 or ry = 0, then treat this as a straight line from (x1, y1) to (x2, y2) and stop\r\n            newpoints.push(endpoint);\r\n        } else {\r\n            xradius = Math.abs(xradius);\r\n            yradius = Math.abs(yradius);\r\n            // see http://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes :\r\n            let phi = xaxisrotation * Math.PI / 180.0;\r\n            let cosphi = Math.cos(phi);\r\n            let sinphi = Math.sin(phi);\r\n            let minushalfdistance = startpoint.minus(endpoint).times(0.5);\r\n            // F.6.5.1:\r\n            // round to precision in order to have determinate calculations\r\n            let x = Math.round((cosphi * minushalfdistance.x + sinphi * minushalfdistance.y) * decimals) / decimals;\r\n            let y = Math.round((-sinphi * minushalfdistance.x + cosphi * minushalfdistance.y) * decimals) / decimals;\r\n            let start_translated: any = new CSGVector2D(x, y);\r\n            // F.6.6.2:\r\n            let biglambda = start_translated.x * start_translated.x / (xradius * xradius) + start_translated.y * start_translated.y / (yradius * yradius);\r\n            if (biglambda > 1) {\r\n                // F.6.6.3:\r\n                let sqrtbiglambda = Math.sqrt(biglambda);\r\n                xradius *= sqrtbiglambda;\r\n                yradius *= sqrtbiglambda;\r\n                // round to precision in order to have determinate calculations\r\n                xradius = Math.round(xradius * decimals) / decimals;\r\n                yradius = Math.round(yradius * decimals) / decimals;\r\n            }\r\n            // F.6.5.2:\r\n            let multiplier1 = Math.sqrt((xradius * xradius * yradius * yradius - xradius * xradius * start_translated.y * start_translated.y - yradius * yradius * start_translated.x * start_translated.x) / (xradius * xradius * start_translated.y * start_translated.y + yradius * yradius * start_translated.x * start_translated.x));\r\n            if (sweep_flag == largearc) {\r\n                multiplier1 = -multiplier1;\r\n            }\r\n            let center_translated: any = new CSGVector2D(xradius * start_translated.y / yradius, -yradius * start_translated.x / xradius).times(multiplier1);\r\n            // F.6.5.3:\r\n            let center = new CSGVector2D(cosphi * center_translated.x - sinphi * center_translated.y, sinphi * center_translated.x + cosphi * center_translated.y).plus((startpoint.plus(endpoint)).times(0.5));\r\n            // F.6.5.5:\r\n            let vec1 = new CSGVector2D((start_translated.x - center_translated.x) / xradius, (start_translated.y - center_translated.y) / yradius);\r\n            let vec2 = new CSGVector2D((-start_translated.x - center_translated.x) / xradius, (-start_translated.y - center_translated.y) / yradius);\r\n            let theta1 = vec1.angleRadians();\r\n            let theta2 = vec2.angleRadians();\r\n            let deltatheta = theta2 - theta1;\r\n            deltatheta = deltatheta % (2 * Math.PI);\r\n            if ((!sweep_flag) && (deltatheta > 0)) {\r\n                deltatheta -= 2 * Math.PI;\r\n            } else if ((sweep_flag) && (deltatheta < 0)) {\r\n                deltatheta += 2 * Math.PI;\r\n            }\r\n            // Ok, we have the center point and angle range (from theta1, deltatheta radians) so we can create the ellipse\r\n            let numsteps = Math.ceil(Math.abs(deltatheta) / (2 * Math.PI) * resolution) + 1;\r\n            if (numsteps < 1) {\r\n                numsteps = 1;\r\n            }\r\n            for (let step = 1; step <= numsteps; step++) {\r\n                let theta = theta1 + step / numsteps * deltatheta;\r\n                let costheta = Math.cos(theta);\r\n                let sintheta = Math.sin(theta);\r\n                // F.6.3.1:\r\n                let point = new CSGVector2D(cosphi * xradius * costheta - sinphi * yradius * sintheta, sinphi * xradius * costheta + cosphi * yradius * sintheta).plus(center);\r\n                newpoints.push(point);\r\n            }\r\n        }\r\n        newpoints = this.points.concat(newpoints);\r\n        let result = new CSGPath2D(newpoints);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 镜像平面\r\n     * @param plane\r\n     */\r\n    public mirrored(plane: CSGPlane): CSGPath2D {\r\n        return this.transform(CSGMatrix4x4.mirroring(plane));\r\n    }\r\n\r\n    /**\r\n     * X轴镜像\r\n     */\r\n    public mirroredX(): CSGPath2D {\r\n        let plane = new CSGPlane(CSGVector3D.Create(1, 0, 0), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * Y轴镜像\r\n     */\r\n    public mirroredY(): CSGPath2D {\r\n        let plane = new CSGPlane(CSGVector3D.Create(0, 1, 0), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * Z轴镜像\r\n     */\r\n    public mirroredZ(): CSGPath2D {\r\n        let plane = new CSGPlane(CSGVector3D.Create(0, 0, 1), 0);\r\n        return this.mirrored(plane);\r\n    }\r\n\r\n    /**\r\n     * 转化\r\n     * @param v\r\n     */\r\n    public translate(v: any): CSGPath2D {\r\n        return this.transform(CSGMatrix4x4.translation(v));\r\n    }\r\n\r\n    /**\r\n     * 缩放\r\n     * @param f\r\n     */\r\n    public scale(f: any): CSGPath2D {\r\n        return this.transform(CSGMatrix4x4.scaling(f));\r\n    }\r\n\r\n    /**\r\n     * X轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateX(deg: any): CSGPath2D {\r\n        return this.transform(CSGMatrix4x4.rotationX(deg));\r\n    }\r\n\r\n    /**\r\n     * Y轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateY(deg: any): CSGPath2D {\r\n        return this.transform(CSGMatrix4x4.rotationY(deg));\r\n    }\r\n\r\n    /**\r\n     * Z轴旋转\r\n     * @param deg\r\n     */\r\n    public rotateZ(deg: any): CSGPath2D {\r\n        return this.transform(CSGMatrix4x4.rotationZ(deg));\r\n    }\r\n\r\n    /**\r\n     * 旋转\r\n     * @param rotationCenter\r\n     * @param rotationAxis\r\n     * @param degrees\r\n     */\r\n    public rotate(rotationCenter: any, rotationAxis: any, degrees: any): CSGPath2D {\r\n        return this.transform(CSGMatrix4x4.rotation(rotationCenter, rotationAxis, degrees));\r\n    }\r\n\r\n    /**\r\n     * 旋转欧拉角\r\n     * @param alpha\r\n     * @param beta\r\n     * @param gamma\r\n     * @param position\r\n     */\r\n    public rotateEulerAngles(alpha: any, beta: any, gamma: any, position: any): CSGPath2D {\r\n        position = position || [0, 0, 0];\r\n        let Rz1 = CSGMatrix4x4.rotationZ(alpha);\r\n        let Rx = CSGMatrix4x4.rotationX(beta);\r\n        let Rz2 = CSGMatrix4x4.rotationZ(gamma);\r\n        let T = CSGMatrix4x4.translation(new CSGVector3D(position));\r\n        return this.transform(Rz2.multiply(Rx).multiply(Rz1).multiply(T));\r\n    }\r\n}\r\n",
        "import {CSGPolygonTreeNode} from './CSGPolygonTreeNode';\r\nimport {CSGNode} from './CSGNode';\r\nimport {Nullable} from \"../types\";\r\nimport {CSGPolygon} from './CSGPolygon';\r\nimport {CSGVector2D} from \"./CSGVector2D\";\r\n\r\n/**\r\n * CSG树\r\n */\r\nexport class CSGTree {\r\n    /**\r\n     * 多边形树\r\n     */\r\n    private polygonTree: CSGPolygonTreeNode;\r\n\r\n    /**\r\n     * 根节点\r\n     */\r\n    public rootnode: CSGNode;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param polygons\r\n     */\r\n    constructor(polygons?: CSGPolygon | CSGPolygon[]) {\r\n        this.polygonTree = new CSGPolygonTreeNode();\r\n        this.rootnode = new CSGNode(null);\r\n        if (polygons) {\r\n            this.addPolygons(polygons);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 镜像\r\n     */\r\n    public invert() {\r\n        this.polygonTree.invert();\r\n        this.rootnode.invert();\r\n    }\r\n\r\n    // Remove all polygons in this BSP tree that are inside the other BSP tree\r\n    // `tree`.\r\n    /**\r\n     * 删除此BSP树中所有其他BSP树中的多边形\r\n     * @param tree\r\n     * @param alsoRemovecoplanarFront\r\n     */\r\n    public clipTo(tree: CSGTree, alsoRemovecoplanarFront?: any) {\r\n        alsoRemovecoplanarFront = !!alsoRemovecoplanarFront;\r\n        this.rootnode.clipTo(tree, alsoRemovecoplanarFront);\r\n    }\r\n\r\n    /**\r\n     * 获取所有多边形\r\n     */\r\n    public allPolygons(): [] {\r\n        let result: [] = [];\r\n        this.polygonTree.getPolygons(result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 添加多边形\r\n     * @param polygons\r\n     */\r\n    public addPolygons(polygons: any) {\r\n        let _this = this;\r\n        let polygontreenodes = polygons.map((p: any) => _this.polygonTree.addChild(p));\r\n        this.rootnode.addPolygonTreeNodes(polygontreenodes);\r\n    }\r\n}\r\n",
        "import {CSGPolygon} from \"./CSGPolygon\";\r\nimport {CSGPlane} from \"./CSGPlane\";\r\nimport {CSGNode} from \"./CSGNode\";\r\n\r\n\r\n/**\r\n * CSG多边形树节点\r\n */\r\nexport class CSGPolygonTreeNode {\r\n    /**\r\n     * 父对象\r\n     */\r\n    public parent: any;\r\n\r\n    /**\r\n     * 子对象\r\n     */\r\n    public children: any[];\r\n\r\n    /**\r\n     * 多边形\r\n     */\r\n    public polygon: CSGPolygon | null;\r\n\r\n    /**\r\n     * 移除\r\n     */\r\n    public removed: boolean;\r\n\r\n    /**\r\n     * 构造函数\r\n     */\r\n    constructor() {\r\n        /**\r\n         * 父对象\r\n         */\r\n        this.parent = null;\r\n\r\n        /**\r\n         * 子对象\r\n         */\r\n        this.children = [];\r\n\r\n        /**\r\n         * 多边形\r\n         */\r\n        this.polygon = null;\r\n\r\n        /**\r\n         * 移除状态\r\n         */\r\n        this.removed = false;\r\n    }\r\n\r\n    /**\r\n     * 添加多边形\r\n     * @param polygons\r\n     */\r\n    public addPolygons(polygons: CSGPolygon[]) {\r\n        if (!this.isRootNode())\r\n            // new polygons can only be added to root node; children can only be splitted polygons\r\n        {\r\n            throw new Error('Assertion failed');\r\n        }\r\n        let _this = this;\r\n        polygons.map((polygon) => {\r\n            _this.addChild(polygon);\r\n        });\r\n    }\r\n\r\n    // remove a node\r\n    // - the siblings become toplevel nodes\r\n    // - the parent is removed recursively\r\n    /**\r\n     * 移除节点\r\n     */\r\n    public remove() {\r\n        if (!this.removed) {\r\n            this.removed = true;\r\n            /* if (_CSGDEBUG) {\r\n                    if (this.isRootNode()) throw new Error(\"Assertion failed\") // can't remove root node\r\n                    if (this.children.length) throw new Error(\"Assertion failed\") // we shouldn't remove nodes with children\r\n                } */\r\n            // remove ourselves from the parent's children list:\r\n            let parentschildren = this.parent.children;\r\n            let i = parentschildren.indexOf(this);\r\n            if (i < 0) {\r\n                throw new Error('Assertion failed');\r\n            }\r\n            parentschildren.splice(i, 1);\r\n            // invalidate the parent's polygon, and of all parents above it:\r\n            this.parent.recursivelyInvalidatePolygon();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 移除状态\r\n     */\r\n    public isRemoved(): boolean {\r\n        return this.removed;\r\n    }\r\n\r\n    /**\r\n     * 根节点状态\r\n     */\r\n    public isRootNode(): boolean {\r\n        return !this.parent;\r\n    }\r\n\r\n    // invert all polygons in the tree. Call on the root node\r\n    /**\r\n     * 镜像所有多边形\r\n     */\r\n    public invert() {\r\n        if (!this.isRootNode()) {\r\n            throw new Error('Assertion failed');\r\n        } // can only call this on the root node\r\n        this.invertSub();\r\n    }\r\n\r\n    /**\r\n     * 获取多边形\r\n     */\r\n    public getPolygon(): CSGPolygon {\r\n        if (!this.polygon) {\r\n            throw new Error('Assertion failed');\r\n        } // doesn't have a polygon, which means that it has been broken down\r\n        return this.polygon;\r\n    }\r\n\r\n    /**\r\n     * 获取多边形\r\n     * @param result\r\n     */\r\n    public getPolygons(result: any[]) {\r\n        let children = [this];\r\n        let queue = [children];\r\n        let i: number;\r\n        let j: number;\r\n        let l: number;\r\n        let node: any;\r\n        for (i = 0; i < queue.length; ++i) { // queue size can change in loop, don't cache length\r\n            children = queue[i];\r\n            for (j = 0, l = children.length; j < l; j++) { // ok to cache length\r\n                node = children[j];\r\n                if (node.polygon) {\r\n                    // the polygon hasn't been broken yet. We can ignore the children and return our polygon:\r\n                    result.push(node.polygon);\r\n                } else {\r\n                    // our polygon has been split up and broken, so gather all subpolygons from the children\r\n                    queue.push(node.children);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // split the node by a plane; add the resulting nodes to the frontnodes and backnodes array\r\n    // If the plane doesn't intersect the polygon, the 'this' object is added to one of the arrays\r\n    // If the plane does intersect the polygon, two new child nodes are created for the front and back fragments,\r\n    //  and added to both arrays.\r\n    /**\r\n     * 用平面分割节点\r\n     * @param plane\r\n     * @param coplanarfrontnodes\r\n     * @param coplanarbacknodes\r\n     * @param frontnodes\r\n     * @param backnodes\r\n     */\r\n    public splitByPlane(plane: CSGPlane, coplanarfrontnodes: CSGPolygonTreeNode[], coplanarbacknodes: CSGPolygonTreeNode[], frontnodes: CSGPolygonTreeNode[], backnodes: CSGPolygonTreeNode[]) {\r\n        if (this.children.length) {\r\n            let queue = [this.children];\r\n            let i;\r\n            let j;\r\n            let l;\r\n            let node;\r\n            let nodes;\r\n            for (i = 0; i < queue.length; i++) { // queue.length can increase, do not cache\r\n                nodes = queue[i];\r\n                for (j = 0, l = nodes.length; j < l; j++) { // ok to cache length\r\n                    node = nodes[j];\r\n                    if (node.children.length) {\r\n                        queue.push(node.children);\r\n                    } else {\r\n                        // no children. Split the polygon:\r\n                        node._splitByPlane(plane, coplanarfrontnodes, coplanarbacknodes, frontnodes, backnodes);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            this._splitByPlane(plane, coplanarfrontnodes, coplanarbacknodes, frontnodes, backnodes);\r\n        }\r\n    }\r\n\r\n    // only to be called for nodes with no children\r\n    /**\r\n     * 仅调用没有子节点的节点\r\n     * @param plane\r\n     * @param coplanarfrontnodes\r\n     * @param coplanarbacknodes\r\n     * @param frontnodes\r\n     * @param backnodes\r\n     * @private\r\n     */\r\n    private _splitByPlane(plane: CSGPlane, coplanarfrontnodes: any, coplanarbacknodes: any, frontnodes: any, backnodes: any) {\r\n        let polygon = this.polygon;\r\n        if (polygon) {\r\n            let bound = polygon.boundingSphere();\r\n            let sphereradius = bound[1] + 1e-4;\r\n            let planenormal = plane.normal;\r\n            let spherecenter = bound[0];\r\n            let d = planenormal.dot(spherecenter) - plane.w;\r\n            if (d > sphereradius) {\r\n                frontnodes.push(this);\r\n            } else if (d < -sphereradius) {\r\n                backnodes.push(this);\r\n            } else {\r\n                let splitresult = plane.splitPolygon(polygon);\r\n                switch (splitresult.type) {\r\n                    case 0:\r\n                        // coplanar front:\r\n                        coplanarfrontnodes.push(this);\r\n                        break;\r\n                    case 1:\r\n                        // coplanar back:\r\n                        coplanarbacknodes.push(this);\r\n                        break;\r\n                    case 2:\r\n                        // front:\r\n                        frontnodes.push(this);\r\n                        break;\r\n                    case 3:\r\n                        // back:\r\n                        backnodes.push(this);\r\n                        break;\r\n                    case 4:\r\n                        // spanning:\r\n                        if (splitresult.front) {\r\n                            let frontnode = this.addChild(splitresult.front);\r\n                            frontnodes.push(frontnode);\r\n                        }\r\n                        if (splitresult.back) {\r\n                            let backnode = this.addChild(splitresult.back);\r\n                            backnodes.push(backnode);\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // PRIVATE methods from here:\r\n    // add child to a node\r\n    // this should be called whenever the polygon is split\r\n    // a child should be created for every fragment of the split polygon\r\n    // returns the newly created child\r\n    /**\r\n     * 添加子节点\r\n     * @param polygon\r\n     */\r\n    public addChild(polygon: CSGPolygon) {\r\n        let newchild = new CSGPolygonTreeNode();\r\n        newchild.parent = this;\r\n        newchild.polygon = polygon;\r\n        this.children.push(newchild);\r\n        return newchild;\r\n    }\r\n\r\n    /**\r\n     * 递归子对象\r\n     */\r\n    public invertSub() {\r\n        let children = [this];\r\n        let queue = [children];\r\n        let i;\r\n        let j;\r\n        let l;\r\n        let\r\n            node;\r\n        for (i = 0; i < queue.length; i++) {\r\n            children = queue[i];\r\n            for (j = 0, l = children.length; j < l; j++) {\r\n                node = children[j];\r\n                if (node.polygon) {\r\n                    node.polygon = node.polygon.flipped();\r\n                }\r\n                queue.push(node.children);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 递归无效节点\r\n     */\r\n    public recursivelyInvalidatePolygon() {\r\n        let node = this;\r\n        while (node.polygon) {\r\n            node.polygon = null;\r\n            if (node.parent) {\r\n                node = node.parent;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n",
        "import {CSGPlane} from './CSGPlane';\r\nimport {CSGTree} from './CSGTree';\r\nimport {CSGPolygonTreeNode} from './CSGPolygonTreeNode';\r\nimport {CSGVector3D} from './CSGVector3D';\r\n\r\n/**\r\n * CSG树节点类\r\n */\r\nexport class CSGNode {\r\n    /**\r\n     * 当前平面节点\r\n     */\r\n    public plane: CSGPlane;\r\n\r\n    /**\r\n     * 前面节点\r\n     */\r\n    public front: CSGNode;\r\n\r\n    /**\r\n     * 背面节点\r\n     */\r\n    public back: CSGNode;\r\n\r\n    /**\r\n     * 多边形树节点\r\n     */\r\n    public polygontreenodes: [];\r\n\r\n    /**\r\n     * 父对象\r\n     */\r\n    public parent: CSGNode | null;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param parent\r\n     */\r\n    constructor(parent: CSGNode | null) {\r\n        this.polygontreenodes = [];\r\n        this.parent = parent;\r\n    }\r\n\r\n    // Convert solid space to empty space and empty space to solid space.\r\n    /**\r\n     * 实体空间 -> 空白空间 -> 实体空间\r\n     */\r\n    public invert() {\r\n        let queue: CSGNode[] = [this];\r\n        let i;\r\n        let node;\r\n        for (let i = 0; i < queue.length; i++) {\r\n            node = queue[i];\r\n            if (node.plane) {\r\n                node.plane = node.plane.flipped();\r\n            }\r\n            if (node.front) {\r\n                queue.push(node.front);\r\n            }\r\n            if (node.back) {\r\n                queue.push(node.back);\r\n            }\r\n            let temp = node.front;\r\n            node.front = node.back;\r\n            node.back = temp;\r\n        }\r\n    }\r\n\r\n    // clip polygontreenodes to our plane\r\n    // calls remove() for all clipped PolygonTreeNodes\r\n    /**\r\n     * 裁剪多边形\r\n     * @param polygontreenodes\r\n     * @param alsoRemovecoplanarFront\r\n     */\r\n    public clipPolygons(polygontreenodes: CSGPolygonTreeNode[], alsoRemovecoplanarFront: CSGNode) {\r\n        let args: any | any[] = {\r\n            node: this,\r\n            polygontreenodes,\r\n        };\r\n        let node;\r\n        let stack = [];\r\n        do {\r\n            node = args.node;\r\n            polygontreenodes = args.polygontreenodes;\r\n            // begin \"function\"\r\n            if (node.plane) {\r\n                let backnodes: any[] = [];\r\n                let frontnodes: [] = [];\r\n                let coplanarfrontnodes = alsoRemovecoplanarFront ? backnodes : frontnodes;\r\n                let plane = node.plane;\r\n                let numpolygontreenodes = polygontreenodes.length;\r\n                for (let i = 0; i < numpolygontreenodes; i++) {\r\n                    let node1 = polygontreenodes[i];\r\n                    if (!node1.isRemoved()) {\r\n                        node1.splitByPlane(plane, coplanarfrontnodes, backnodes, frontnodes, backnodes);\r\n                    }\r\n                }\r\n                if (node.front && (frontnodes.length > 0)) {\r\n                    stack.push({\r\n                        node: node.front,\r\n                        polygontreenodes: frontnodes,\r\n                    });\r\n                }\r\n                let numbacknodes = backnodes.length;\r\n                if (node.back && (numbacknodes > 0)) {\r\n                    stack.push({\r\n                        node: node.back,\r\n                        polygontreenodes: backnodes,\r\n                    });\r\n                } else {\r\n                    // there's nothing behind this plane. Delete the nodes behind this plane:\r\n                    for (let i = 0; i < numbacknodes; i++) {\r\n                        backnodes[i].remove();\r\n                    }\r\n                }\r\n            }\r\n            args = stack.pop();\r\n        } while (typeof (args) != 'undefined');\r\n    }\r\n\r\n    //  Remove all polygons in this BSP tree that are inside the other BSP tree\r\n    // `tree`.\r\n    /**\r\n     * 删除此BSP树中所有其他B的多边形\r\n     * @param tree\r\n     * @param alsoRemovecoplanarFront\r\n     */\r\n    public clipTo(tree: CSGTree, alsoRemovecoplanarFront: CSGNode) {\r\n        let node: any = this;\r\n        let stack: CSGNode[] = [];\r\n        do {\r\n            if (node.polygontreenodes.length > 0) {\r\n                tree.rootnode.clipPolygons(node.polygontreenodes, alsoRemovecoplanarFront);\r\n            }\r\n            if (node.front) {\r\n                stack.push(node.front);\r\n            }\r\n            if (node.back) {\r\n                stack.push(node.back);\r\n            }\r\n            node = stack.pop();\r\n        } while (typeof (node) != 'undefined');\r\n    }\r\n\r\n    /**\r\n     * 添加多边形树节点\r\n     * @param polygontreenodes\r\n     */\r\n    public addPolygonTreeNodes(polygontreenodes: CSGPolygonTreeNode[]) {\r\n        let args = {\r\n            node: this,\r\n            polygontreenodes,\r\n        };\r\n        let node;\r\n        let stack: any = [];\r\n        do {\r\n            node = args.node;\r\n            polygontreenodes = args.polygontreenodes;\r\n            if (polygontreenodes.length == 0) {\r\n                args = stack.pop();\r\n                continue;\r\n            }\r\n            let _this = node;\r\n            if (!node.plane) {\r\n                let bestplane = polygontreenodes[0].getPolygon().plane;\r\n                node.plane = bestplane;\r\n            }\r\n            let frontnodes: [] = [];\r\n            let backnodes: [] = [];\r\n            for (let i = 0, n = polygontreenodes.length; i < n; ++i) {\r\n                polygontreenodes[i].splitByPlane(_this.plane, _this.polygontreenodes, backnodes, frontnodes, backnodes);\r\n            }\r\n            if (frontnodes.length > 0) {\r\n                if (!node.front) {\r\n                    node.front = new CSGNode(node);\r\n                }\r\n                stack.push({\r\n                    node: node.front,\r\n                    polygontreenodes: frontnodes,\r\n                });\r\n            }\r\n            if (backnodes.length > 0) {\r\n                if (!node.back) {\r\n                    node.back = new CSGNode(node);\r\n                }\r\n                stack.push({\r\n                    node: node.back,\r\n                    polygontreenodes: backnodes,\r\n                });\r\n            }\r\n            args = stack.pop();\r\n        } while (typeof (args) != 'undefined');\r\n    }\r\n\r\n    /**\r\n     * 获取父平面向量\r\n     * @param normals\r\n     * @param maxdepth\r\n     */\r\n    public getParentPlaneNormals(normals: CSGVector3D[], maxdepth: number) {\r\n        if (maxdepth > 0) {\r\n            if (this.parent) {\r\n                normals.push(this.parent.plane.normal);\r\n                this.parent.getParentPlaneNormals(normals, maxdepth - 1);\r\n            }\r\n        }\r\n    }\r\n}\r\n",
        "import { CSGFuzzyFactory } from './CSGFuzzyFactory';\r\nimport { CSGPolygon } from './CSGPolygon';\r\nimport { CSG } from './CSG';\r\n\r\n/**\r\n * CSG模糊处理工厂\r\n */\r\nexport class CSGFuzzyCSGFactory {\r\n    /**\r\n     * 顶点工厂\r\n     */\r\n    public vertexfactory : CSGFuzzyFactory;\r\n\r\n    /**\r\n     * 平面工厂\r\n     */\r\n    public planefactory : CSGFuzzyFactory;\r\n\r\n    /**\r\n     * 多边形共享工厂\r\n     */\r\n    public polygonsharedfactory : any;\r\n\r\n    /**\r\n     * 构造函数\r\n     */\r\n    constructor() {\r\n        this.vertexfactory = new CSGFuzzyFactory(3, 1e-5);\r\n        this.planefactory = new CSGFuzzyFactory(4, 1e-5);\r\n        this.polygonsharedfactory = {};\r\n    }\r\n\r\n    /**\r\n     * 获取共享多边形\r\n     * @param sourceshared\r\n     */\r\n    public getPolygonShared(sourceshared: any): any {\r\n        let hash = sourceshared.getHash();\r\n        if (hash in this.polygonsharedfactory) {\r\n            return this.polygonsharedfactory[hash];\r\n        } else {\r\n            this.polygonsharedfactory[hash] = sourceshared;\r\n            return sourceshared;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取顶点\r\n     * @param sourcevertex\r\n     */\r\n    public getVertex(sourcevertex: any) {\r\n        let elements = [sourcevertex.pos._x, sourcevertex.pos._y, sourcevertex.pos._z];\r\n        let result = this.vertexfactory.lookupOrCreate(elements, (els: any) => sourcevertex);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 获取平面\r\n     * @param sourceplane\r\n     */\r\n    public getPlane(sourceplane: any) {\r\n        let elements = [sourceplane.normal._x, sourceplane.normal._y, sourceplane.normal._z, sourceplane.w];\r\n        let result = this.planefactory.lookupOrCreate(elements, (els: any) => sourceplane);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 获取多边形\r\n     * @param sourcepolygon\r\n     */\r\n    public getPolygon(sourcepolygon: any) {\r\n        let newplane = this.getPlane(sourcepolygon.plane);\r\n        let newshared = this.getPolygonShared(sourcepolygon.shared);\r\n        let _this = this;\r\n        let newvertices = sourcepolygon.vertices.map((vertex: any) => _this.getVertex(vertex));\r\n\r\n        // two vertices that were originally very close may now have become\r\n        // truly identical (referring to the same CSG.Vertex object).\r\n        // Remove duplicate vertices:\r\n        let newvertices_dedup: any = [];\r\n        if (newvertices.length > 0) {\r\n            let prevvertextag = newvertices[newvertices.length - 1].getTag();\r\n            newvertices.forEach((vertex: any) => {\r\n                let vertextag = vertex.getTag();\r\n                if (vertextag != prevvertextag) {\r\n                    newvertices_dedup.push(vertex);\r\n                }\r\n                prevvertextag = vertextag;\r\n            });\r\n        }\r\n        // If it's degenerate, remove all vertices:\r\n        if (newvertices_dedup.length < 3) {\r\n            newvertices_dedup = [];\r\n        }\r\n        return new CSGPolygon(newvertices_dedup, newshared, newplane);\r\n    }\r\n\r\n    /**\r\n     * 获取CSG对象\r\n     * @param sourcecsg\r\n     */\r\n    public getCSG(sourcecsg: any) {\r\n        let _this = this;\r\n        let newpolygons: any = [];\r\n        sourcecsg.polygons.forEach((polygon: any) => {\r\n            let newpolygon = _this.getPolygon(polygon);\r\n            // see getPolygon above: we may get a polygon with no vertices, discard it:\r\n            if (newpolygon.vertices.length >= 3) {\r\n                newpolygons.push(newpolygon);\r\n            }\r\n        });\r\n        return CSG.fromPolygons(newpolygons);\r\n    }\r\n}\r\n",
        "/**\r\n * @category Engine\r\n */\r\nexport class GLConstants {\r\n    public static readonly DEPTH_BUFFER_BIT = 0x00000100;\r\n    public static readonly STENCIL_BUFFER_BIT = 0x00000400;\r\n    public static readonly COLOR_BUFFER_BIT = 0x00004000;\r\n    public static readonly POINTS = 0x0000;\r\n    public static readonly LINES = 0x0001;\r\n    public static readonly LINE_LOOP = 0x0002;\r\n    public static readonly LINE_STRIP = 0x0003;\r\n    public static readonly TRIANGLES = 0x0004;\r\n    public static readonly TRIANGLE_STRIP = 0x0005;\r\n    public static readonly TRIANGLE_FAN = 0x0006;\r\n    public static readonly ZERO = 0;\r\n    public static readonly ONE = 1;\r\n    public static readonly SRC_COLOR = 0x0300;\r\n    public static readonly ONE_MINUS_SRC_COLOR = 0x0301;\r\n    public static readonly SRC_ALPHA = 0x0302;\r\n    public static readonly ONE_MINUS_SRC_ALPHA = 0x0303;\r\n    public static readonly DST_ALPHA = 0x0304;\r\n    public static readonly ONE_MINUS_DST_ALPHA = 0x0305;\r\n    public static readonly DST_COLOR = 0x0306;\r\n    public static readonly ONE_MINUS_DST_COLOR = 0x0307;\r\n    public static readonly SRC_ALPHA_SATURATE = 0x0308;\r\n    public static readonly FUNC_ADD = 0x8006;\r\n    public static readonly BLEND_EQUATION = 0x8009;\r\n    public static readonly BLEND_EQUATION_RGB = 0x8009; // same as BLEND_EQUATION\r\n    public static readonly BLEND_EQUATION_ALPHA = 0x883D;\r\n    public static readonly FUNC_SUBTRACT = 0x800A;\r\n    public static readonly FUNC_REVERSE_SUBTRACT = 0x800B;\r\n    public static readonly BLEND_DST_RGB = 0x80C8;\r\n    public static readonly BLEND_SRC_RGB = 0x80C9;\r\n    public static readonly BLEND_DST_ALPHA = 0x80CA;\r\n    public static readonly BLEND_SRC_ALPHA = 0x80CB;\r\n    public static readonly CONSTANT_COLOR = 0x8001;\r\n    public static readonly ONE_MINUS_CONSTANT_COLOR = 0x8002;\r\n    public static readonly CONSTANT_ALPHA = 0x8003;\r\n    public static readonly ONE_MINUS_CONSTANT_ALPHA = 0x8004;\r\n    public static readonly BLEND_COLOR = 0x8005;\r\n    public static readonly ARRAY_BUFFER = 0x8892;\r\n    public static readonly ELEMENT_ARRAY_BUFFER = 0x8893;\r\n    public static readonly ARRAY_BUFFER_BINDING = 0x8894;\r\n    public static readonly ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;\r\n    public static readonly STREAM_DRAW = 0x88E0;\r\n    public static readonly STATIC_DRAW = 0x88E4;\r\n    public static readonly DYNAMIC_DRAW = 0x88E8;\r\n    public static readonly BUFFER_SIZE = 0x8764;\r\n    public static readonly BUFFER_USAGE = 0x8765;\r\n    public static readonly CURRENT_VERTEX_ATTRIB = 0x8626;\r\n    public static readonly FRONT = 0x0404;\r\n    public static readonly BACK = 0x0405;\r\n    public static readonly FRONT_AND_BACK = 0x0408;\r\n    public static readonly CULL_FACE = 0x0B44;\r\n    public static readonly BLEND = 0x0BE2;\r\n    public static readonly DITHER = 0x0BD0;\r\n    public static readonly STENCIL_TEST = 0x0B90;\r\n    public static readonly DEPTH_TEST = 0x0B71;\r\n    public static readonly SCISSOR_TEST = 0x0C11;\r\n    public static readonly POLYGON_OFFSET_FILL = 0x8037;\r\n    public static readonly SAMPLE_ALPHA_TO_COVERAGE = 0x809E;\r\n    public static readonly SAMPLE_COVERAGE = 0x80A0;\r\n    public static readonly NO_ERROR = 0;\r\n    public static readonly INVALID_ENUM = 0x0500;\r\n    public static readonly INVALID_VALUE = 0x0501;\r\n    public static readonly INVALID_OPERATION = 0x0502;\r\n    public static readonly OUT_OF_MEMORY = 0x0505;\r\n    public static readonly CW = 0x0900;\r\n    public static readonly CCW = 0x0901;\r\n    public static readonly LINE_WIDTH = 0x0B21;\r\n    public static readonly ALIASED_POINT_SIZE_RANGE = 0x846D;\r\n    public static readonly ALIASED_LINE_WIDTH_RANGE = 0x846E;\r\n    public static readonly CULL_FACE_MODE = 0x0B45;\r\n    public static readonly FRONT_FACE = 0x0B46;\r\n    public static readonly DEPTH_RANGE = 0x0B70;\r\n    public static readonly DEPTH_WRITEMASK = 0x0B72;\r\n    public static readonly DEPTH_CLEAR_VALUE = 0x0B73;\r\n    public static readonly DEPTH_FUNC = 0x0B74;\r\n    public static readonly STENCIL_CLEAR_VALUE = 0x0B91;\r\n    public static readonly STENCIL_FUNC = 0x0B92;\r\n    public static readonly STENCIL_FAIL = 0x0B94;\r\n    public static readonly STENCIL_PASS_DEPTH_FAIL = 0x0B95;\r\n    public static readonly STENCIL_PASS_DEPTH_PASS = 0x0B96;\r\n    public static readonly STENCIL_REF = 0x0B97;\r\n    public static readonly STENCIL_VALUE_MASK = 0x0B93;\r\n    public static readonly STENCIL_WRITEMASK = 0x0B98;\r\n    public static readonly STENCIL_BACK_FUNC = 0x8800;\r\n    public static readonly STENCIL_BACK_FAIL = 0x8801;\r\n    public static readonly STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;\r\n    public static readonly STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;\r\n    public static readonly STENCIL_BACK_REF = 0x8CA3;\r\n    public static readonly STENCIL_BACK_VALUE_MASK = 0x8CA4;\r\n    public static readonly STENCIL_BACK_WRITEMASK = 0x8CA5;\r\n    public static readonly VIEWPORT = 0x0BA2;\r\n    public static readonly SCISSOR_BOX = 0x0C10;\r\n    public static readonly COLOR_CLEAR_VALUE = 0x0C22;\r\n    public static readonly COLOR_WRITEMASK = 0x0C23;\r\n    public static readonly UNPACK_ALIGNMENT = 0x0CF5;\r\n    public static readonly PACK_ALIGNMENT = 0x0D05;\r\n    public static readonly MAX_TEXTURE_SIZE = 0x0D33;\r\n    public static readonly MAX_VIEWPORT_DIMS = 0x0D3A;\r\n    public static readonly SUBPIXEL_BITS = 0x0D50;\r\n    public static readonly RED_BITS = 0x0D52;\r\n    public static readonly GREEN_BITS = 0x0D53;\r\n    public static readonly BLUE_BITS = 0x0D54;\r\n    public static readonly ALPHA_BITS = 0x0D55;\r\n    public static readonly DEPTH_BITS = 0x0D56;\r\n    public static readonly STENCIL_BITS = 0x0D57;\r\n    public static readonly POLYGON_OFFSET_UNITS = 0x2A00;\r\n    public static readonly POLYGON_OFFSET_FACTOR = 0x8038;\r\n    public static readonly TEXTURE_BINDING_2D = 0x8069;\r\n    public static readonly SAMPLE_BUFFERS = 0x80A8;\r\n    public static readonly SAMPLES = 0x80A9;\r\n    public static readonly SAMPLE_COVERAGE_VALUE = 0x80AA;\r\n    public static readonly SAMPLE_COVERAGE_INVERT = 0x80AB;\r\n    public static readonly COMPRESSED_TEXTURE_FORMATS = 0x86A3;\r\n    public static readonly DONT_CARE = 0x1100;\r\n    public static readonly FASTEST = 0x1101;\r\n    public static readonly NICEST = 0x1102;\r\n    public static readonly GENERATE_MIPMAP_HINT = 0x8192;\r\n    public static readonly BYTE = 0x1400;\r\n    public static readonly UNSIGNED_BYTE = 0x1401;\r\n    public static readonly SHORT = 0x1402;\r\n    public static readonly UNSIGNED_SHORT = 0x1403;\r\n    public static readonly INT = 0x1404;\r\n    public static readonly UNSIGNED_INT = 0x1405;\r\n    public static readonly FLOAT = 0x1406;\r\n    public static readonly DEPTH_COMPONENT = 0x1902;\r\n    public static readonly ALPHA = 0x1906;\r\n    public static readonly RGB = 0x1907;\r\n    public static readonly RGBA = 0x1908;\r\n    public static readonly LUMINANCE = 0x1909;\r\n    public static readonly LUMINANCE_ALPHA = 0x190A;\r\n    public static readonly UNSIGNED_SHORT_4_4_4_4 = 0x8033;\r\n    public static readonly UNSIGNED_SHORT_5_5_5_1 = 0x8034;\r\n    public static readonly UNSIGNED_SHORT_5_6_5 = 0x8363;\r\n    public static readonly FRAGMENT_SHADER = 0x8B30;\r\n    public static readonly VERTEX_SHADER = 0x8B31;\r\n    public static readonly MAX_VERTEX_ATTRIBS = 0x8869;\r\n    public static readonly MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;\r\n    public static readonly MAX_VARYING_VECTORS = 0x8DFC;\r\n    public static readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;\r\n    public static readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;\r\n    public static readonly MAX_TEXTURE_IMAGE_UNITS = 0x8872;\r\n    public static readonly MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;\r\n    public static readonly SHADER_TYPE = 0x8B4F;\r\n    public static readonly DELETE_STATUS = 0x8B80;\r\n    public static readonly LINK_STATUS = 0x8B82;\r\n    public static readonly VALIDATE_STATUS = 0x8B83;\r\n    public static readonly ATTACHED_SHADERS = 0x8B85;\r\n    public static readonly ACTIVE_UNIFORMS = 0x8B86;\r\n    public static readonly ACTIVE_ATTRIBUTES = 0x8B89;\r\n    public static readonly SHADING_LANGUAGE_VERSION = 0x8B8C;\r\n    public static readonly CURRENT_PROGRAM = 0x8B8D;\r\n    public static readonly NEVER = 0x0200;\r\n    public static readonly LESS = 0x0201;\r\n    public static readonly EQUAL = 0x0202;\r\n    public static readonly LEQUAL = 0x0203;\r\n    public static readonly GREATER = 0x0204;\r\n    public static readonly NOTEQUAL = 0x0205;\r\n    public static readonly GEQUAL = 0x0206;\r\n    public static readonly ALWAYS = 0x0207;\r\n    public static readonly KEEP = 0x1E00;\r\n    public static readonly REPLACE = 0x1E01;\r\n    public static readonly INCR = 0x1E02;\r\n    public static readonly DECR = 0x1E03;\r\n    public static readonly INVERT = 0x150A;\r\n    public static readonly INCR_WRAP = 0x8507;\r\n    public static readonly DECR_WRAP = 0x8508;\r\n    public static readonly VENDOR = 0x1F00;\r\n    public static readonly RENDERER = 0x1F01;\r\n    public static readonly VERSION = 0x1F02;\r\n    public static readonly NEAREST = 0x2600;\r\n    public static readonly LINEAR = 0x2601;\r\n    public static readonly NEAREST_MIPMAP_NEAREST = 0x2700;\r\n    public static readonly LINEAR_MIPMAP_NEAREST = 0x2701;\r\n    public static readonly NEAREST_MIPMAP_LINEAR = 0x2702;\r\n    public static readonly LINEAR_MIPMAP_LINEAR = 0x2703;\r\n    public static readonly TEXTURE_MAG_FILTER = 0x2800;\r\n    public static readonly TEXTURE_MIN_FILTER = 0x2801;\r\n    public static readonly TEXTURE_WRAP_S = 0x2802;\r\n    public static readonly TEXTURE_WRAP_T = 0x2803;\r\n    public static readonly TEXTURE_2D = 0x0DE1;\r\n    public static readonly TEXTURE = 0x1702;\r\n    public static readonly TEXTURE_CUBE_MAP = 0x8513;\r\n    public static readonly TEXTURE_BINDING_CUBE_MAP = 0x8514;\r\n    public static readonly TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;\r\n    public static readonly TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;\r\n    public static readonly TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;\r\n    public static readonly TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;\r\n    public static readonly TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;\r\n    public static readonly TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;\r\n    public static readonly MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;\r\n    public static readonly TEXTURE0 = 0x84C0;\r\n    public static readonly TEXTURE1 = 0x84C1;\r\n    public static readonly TEXTURE2 = 0x84C2;\r\n    public static readonly TEXTURE3 = 0x84C3;\r\n    public static readonly TEXTURE4 = 0x84C4;\r\n    public static readonly TEXTURE5 = 0x84C5;\r\n    public static readonly TEXTURE6 = 0x84C6;\r\n    public static readonly TEXTURE7 = 0x84C7;\r\n    public static readonly TEXTURE8 = 0x84C8;\r\n    public static readonly TEXTURE9 = 0x84C9;\r\n    public static readonly TEXTURE10 = 0x84CA;\r\n    public static readonly TEXTURE11 = 0x84CB;\r\n    public static readonly TEXTURE12 = 0x84CC;\r\n    public static readonly TEXTURE13 = 0x84CD;\r\n    public static readonly TEXTURE14 = 0x84CE;\r\n    public static readonly TEXTURE15 = 0x84CF;\r\n    public static readonly TEXTURE16 = 0x84D0;\r\n    public static readonly TEXTURE17 = 0x84D1;\r\n    public static readonly TEXTURE18 = 0x84D2;\r\n    public static readonly TEXTURE19 = 0x84D3;\r\n    public static readonly TEXTURE20 = 0x84D4;\r\n    public static readonly TEXTURE21 = 0x84D5;\r\n    public static readonly TEXTURE22 = 0x84D6;\r\n    public static readonly TEXTURE23 = 0x84D7;\r\n    public static readonly TEXTURE24 = 0x84D8;\r\n    public static readonly TEXTURE25 = 0x84D9;\r\n    public static readonly TEXTURE26 = 0x84DA;\r\n    public static readonly TEXTURE27 = 0x84DB;\r\n    public static readonly TEXTURE28 = 0x84DC;\r\n    public static readonly TEXTURE29 = 0x84DD;\r\n    public static readonly TEXTURE30 = 0x84DE;\r\n    public static readonly TEXTURE31 = 0x84DF;\r\n    public static readonly ACTIVE_TEXTURE = 0x84E0;\r\n    public static readonly REPEAT = 0x2901;\r\n    public static readonly CLAMP_TO_EDGE = 0x812F;\r\n    public static readonly MIRRORED_REPEAT = 0x8370;\r\n    public static readonly FLOAT_VEC2 = 0x8B50;\r\n    public static readonly FLOAT_VEC3 = 0x8B51;\r\n    public static readonly FLOAT_VEC4 = 0x8B52;\r\n    public static readonly INT_VEC2 = 0x8B53;\r\n    public static readonly INT_VEC3 = 0x8B54;\r\n    public static readonly INT_VEC4 = 0x8B55;\r\n    public static readonly BOOL = 0x8B56;\r\n    public static readonly BOOL_VEC2 = 0x8B57;\r\n    public static readonly BOOL_VEC3 = 0x8B58;\r\n    public static readonly BOOL_VEC4 = 0x8B59;\r\n    public static readonly FLOAT_MAT2 = 0x8B5A;\r\n    public static readonly FLOAT_MAT3 = 0x8B5B;\r\n    public static readonly FLOAT_MAT4 = 0x8B5C;\r\n    public static readonly SAMPLER_2D = 0x8B5E;\r\n    public static readonly SAMPLER_CUBE = 0x8B60;\r\n    public static readonly VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;\r\n    public static readonly VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;\r\n    public static readonly VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;\r\n    public static readonly VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;\r\n    public static readonly VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;\r\n    public static readonly VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;\r\n    public static readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;\r\n    public static readonly IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;\r\n    public static readonly IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;\r\n    public static readonly COMPILE_STATUS = 0x8B81;\r\n    public static readonly LOW_FLOAT = 0x8DF0;\r\n    public static readonly MEDIUM_FLOAT = 0x8DF1;\r\n    public static readonly HIGH_FLOAT = 0x8DF2;\r\n    public static readonly LOW_INT = 0x8DF3;\r\n    public static readonly MEDIUM_INT = 0x8DF4;\r\n    public static readonly HIGH_INT = 0x8DF5;\r\n    public static readonly FRAMEBUFFER = 0x8D40;\r\n    public static readonly RENDERBUFFER = 0x8D41;\r\n    public static readonly RGBA4 = 0x8056;\r\n    public static readonly RGB5_A1 = 0x8057;\r\n    public static readonly RGB565 = 0x8D62;\r\n    public static readonly DEPTH_COMPONENT16 = 0x81A5;\r\n    public static readonly STENCIL_INDEX = 0x1901;\r\n    public static readonly STENCIL_INDEX8 = 0x8D48;\r\n    public static readonly DEPTH_STENCIL = 0x84F9;\r\n    public static readonly RENDERBUFFER_WIDTH = 0x8D42;\r\n    public static readonly RENDERBUFFER_HEIGHT = 0x8D43;\r\n    public static readonly RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;\r\n    public static readonly RENDERBUFFER_RED_SIZE = 0x8D50;\r\n    public static readonly RENDERBUFFER_GREEN_SIZE = 0x8D51;\r\n    public static readonly RENDERBUFFER_BLUE_SIZE = 0x8D52;\r\n    public static readonly RENDERBUFFER_ALPHA_SIZE = 0x8D53;\r\n    public static readonly RENDERBUFFER_DEPTH_SIZE = 0x8D54;\r\n    public static readonly RENDERBUFFER_STENCIL_SIZE = 0x8D55;\r\n    public static readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;\r\n    public static readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;\r\n    public static readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;\r\n    public static readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;\r\n    public static readonly COLOR_ATTACHMENT0 = 0x8CE0;\r\n    public static readonly DEPTH_ATTACHMENT = 0x8D00;\r\n    public static readonly STENCIL_ATTACHMENT = 0x8D20;\r\n    public static readonly DEPTH_STENCIL_ATTACHMENT = 0x821A;\r\n    public static readonly NONE = 0;\r\n    public static readonly FRAMEBUFFER_COMPLETE = 0x8CD5;\r\n    public static readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;\r\n    public static readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;\r\n    public static readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;\r\n    public static readonly FRAMEBUFFER_UNSUPPORTED = 0x8CDD;\r\n    public static readonly FRAMEBUFFER_BINDING = 0x8CA6;\r\n    public static readonly RENDERBUFFER_BINDING = 0x8CA7;\r\n    public static readonly MAX_RENDERBUFFER_SIZE = 0x84E8;\r\n    public static readonly INVALID_FRAMEBUFFER_OPERATION = 0x0506;\r\n    public static readonly UNPACK_FLIP_Y_WEBGL = 0x9240;\r\n    public static readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241;\r\n    public static readonly CONTEXT_LOST_WEBGL = 0x9242;\r\n    public static readonly UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;\r\n    public static readonly BROWSER_DEFAULT_WEBGL = 0x9244;\r\n\r\n    public static readonly COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;\r\n    public static readonly COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;\r\n    public static readonly COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;\r\n    public static readonly COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;\r\n\r\n    public static readonly COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00;\r\n    public static readonly COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01;\r\n    public static readonly COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02;\r\n    public static readonly COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03;\r\n\r\n    public static readonly COMPRESSED_RGB_ETC1_WEBGL = 0x8D64;\r\n\r\n    public static readonly HALF_FLOAT_OES = 0x8D61;\r\n\r\n    public static readonly DOUBLE = 0x140A;\r\n\r\n    public static readonly READ_BUFFER = 0x0C02;\r\n    public static readonly UNPACK_ROW_LENGTH = 0x0CF2;\r\n    public static readonly UNPACK_SKIP_ROWS = 0x0CF3;\r\n    public static readonly UNPACK_SKIP_PIXELS = 0x0CF4;\r\n    public static readonly PACK_ROW_LENGTH = 0x0D02;\r\n    public static readonly PACK_SKIP_ROWS = 0x0D03;\r\n    public static readonly PACK_SKIP_PIXELS = 0x0D04;\r\n    public static readonly COLOR = 0x1800;\r\n    public static readonly DEPTH = 0x1801;\r\n    public static readonly STENCIL = 0x1802;\r\n    public static readonly RED = 0x1903;\r\n    public static readonly RGB8 = 0x8051;\r\n    public static readonly RGBA8 = 0x8058;\r\n    public static readonly RGB10_A2 = 0x8059;\r\n    public static readonly TEXTURE_BINDING_3D = 0x806A;\r\n    public static readonly UNPACK_SKIP_IMAGES = 0x806D;\r\n    public static readonly UNPACK_IMAGE_HEIGHT = 0x806E;\r\n    public static readonly TEXTURE_3D = 0x806F;\r\n    public static readonly TEXTURE_WRAP_R = 0x8072;\r\n    public static readonly MAX_3D_TEXTURE_SIZE = 0x8073;\r\n    public static readonly UNSIGNED_INT_2_10_10_10_REV = 0x8368;\r\n    public static readonly MAX_ELEMENTS_VERTICES = 0x80E8;\r\n    public static readonly MAX_ELEMENTS_INDICES = 0x80E9;\r\n    public static readonly TEXTURE_MIN_LOD = 0x813A;\r\n    public static readonly TEXTURE_MAX_LOD = 0x813B;\r\n    public static readonly TEXTURE_BASE_LEVEL = 0x813C;\r\n    public static readonly TEXTURE_MAX_LEVEL = 0x813D;\r\n    public static readonly MIN = 0x8007;\r\n    public static readonly MAX = 0x8008;\r\n    public static readonly DEPTH_COMPONENT24 = 0x81A6;\r\n    public static readonly MAX_TEXTURE_LOD_BIAS = 0x84FD;\r\n    public static readonly TEXTURE_COMPARE_MODE = 0x884C;\r\n    public static readonly TEXTURE_COMPARE_FUNC = 0x884D;\r\n    public static readonly CURRENT_QUERY = 0x8865;\r\n    public static readonly QUERY_RESULT = 0x8866;\r\n    public static readonly QUERY_RESULT_AVAILABLE = 0x8867;\r\n    public static readonly STREAM_READ = 0x88E1;\r\n    public static readonly STREAM_COPY = 0x88E2;\r\n    public static readonly STATIC_READ = 0x88E5;\r\n    public static readonly STATIC_COPY = 0x88E6;\r\n    public static readonly DYNAMIC_READ = 0x88E9;\r\n    public static readonly DYNAMIC_COPY = 0x88EA;\r\n    public static readonly MAX_DRAW_BUFFERS = 0x8824;\r\n    public static readonly DRAW_BUFFER0 = 0x8825;\r\n    public static readonly DRAW_BUFFER1 = 0x8826;\r\n    public static readonly DRAW_BUFFER2 = 0x8827;\r\n    public static readonly DRAW_BUFFER3 = 0x8828;\r\n    public static readonly DRAW_BUFFER4 = 0x8829;\r\n    public static readonly DRAW_BUFFER5 = 0x882A;\r\n    public static readonly DRAW_BUFFER6 = 0x882B;\r\n    public static readonly DRAW_BUFFER7 = 0x882C;\r\n    public static readonly DRAW_BUFFER8 = 0x882D;\r\n    public static readonly DRAW_BUFFER9 = 0x882E;\r\n    public static readonly DRAW_BUFFER10 = 0x882F;\r\n    public static readonly DRAW_BUFFER11 = 0x8830;\r\n    public static readonly DRAW_BUFFER12 = 0x8831;\r\n    public static readonly DRAW_BUFFER13 = 0x8832;\r\n    public static readonly DRAW_BUFFER14 = 0x8833;\r\n    public static readonly DRAW_BUFFER15 = 0x8834;\r\n    public static readonly MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;\r\n    public static readonly MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;\r\n    public static readonly SAMPLER_3D = 0x8B5F;\r\n    public static readonly SAMPLER_2D_SHADOW = 0x8B62;\r\n    public static readonly FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;\r\n    public static readonly PIXEL_PACK_BUFFER = 0x88EB;\r\n    public static readonly PIXEL_UNPACK_BUFFER = 0x88EC;\r\n    public static readonly PIXEL_PACK_BUFFER_BINDING = 0x88ED;\r\n    public static readonly PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;\r\n    public static readonly FLOAT_MAT2x3 = 0x8B65;\r\n    public static readonly FLOAT_MAT2x4 = 0x8B66;\r\n    public static readonly FLOAT_MAT3x2 = 0x8B67;\r\n    public static readonly FLOAT_MAT3x4 = 0x8B68;\r\n    public static readonly FLOAT_MAT4x2 = 0x8B69;\r\n    public static readonly FLOAT_MAT4x3 = 0x8B6A;\r\n    public static readonly SRGB = 0x8C40;\r\n    public static readonly SRGB8 = 0x8C41;\r\n    public static readonly SRGB8_ALPHA8 = 0x8C43;\r\n    public static readonly COMPARE_REF_TO_TEXTURE = 0x884E;\r\n    public static readonly RGBA32F = 0x8814;\r\n    public static readonly RGB32F = 0x8815;\r\n    public static readonly RGBA16F = 0x881A;\r\n    public static readonly RGB16F = 0x881B;\r\n    public static readonly VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;\r\n    public static readonly MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;\r\n    public static readonly MIN_PROGRAM_TEXEL_OFFSET = 0x8904;\r\n    public static readonly MAX_PROGRAM_TEXEL_OFFSET = 0x8905;\r\n    public static readonly MAX_VARYING_COMPONENTS = 0x8B4B;\r\n    public static readonly TEXTURE_2D_ARRAY = 0x8C1A;\r\n    public static readonly TEXTURE_BINDING_2D_ARRAY = 0x8C1D;\r\n    public static readonly R11F_G11F_B10F = 0x8C3A;\r\n    public static readonly UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;\r\n    public static readonly RGB9_E5 = 0x8C3D;\r\n    public static readonly UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;\r\n    public static readonly TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;\r\n    public static readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;\r\n    public static readonly TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;\r\n    public static readonly TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;\r\n    public static readonly TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;\r\n    public static readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;\r\n    public static readonly RASTERIZER_DISCARD = 0x8C89;\r\n    public static readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;\r\n    public static readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;\r\n    public static readonly INTERLEAVED_ATTRIBS = 0x8C8C;\r\n    public static readonly SEPARATE_ATTRIBS = 0x8C8D;\r\n    public static readonly TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;\r\n    public static readonly TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;\r\n    public static readonly RGBA32UI = 0x8D70;\r\n    public static readonly RGB32UI = 0x8D71;\r\n    public static readonly RGBA16UI = 0x8D76;\r\n    public static readonly RGB16UI = 0x8D77;\r\n    public static readonly RGBA8UI = 0x8D7C;\r\n    public static readonly RGB8UI = 0x8D7D;\r\n    public static readonly RGBA32I = 0x8D82;\r\n    public static readonly RGB32I = 0x8D83;\r\n    public static readonly RGBA16I = 0x8D88;\r\n    public static readonly RGB16I = 0x8D89;\r\n    public static readonly RGBA8I = 0x8D8E;\r\n    public static readonly RGB8I = 0x8D8F;\r\n    public static readonly RED_INTEGER = 0x8D94;\r\n    public static readonly RGB_INTEGER = 0x8D98;\r\n    public static readonly RGBA_INTEGER = 0x8D99;\r\n    public static readonly SAMPLER_2D_ARRAY = 0x8DC1;\r\n    public static readonly SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;\r\n    public static readonly SAMPLER_CUBE_SHADOW = 0x8DC5;\r\n    public static readonly UNSIGNED_INT_VEC2 = 0x8DC6;\r\n    public static readonly UNSIGNED_INT_VEC3 = 0x8DC7;\r\n    public static readonly UNSIGNED_INT_VEC4 = 0x8DC8;\r\n    public static readonly INT_SAMPLER_2D = 0x8DCA;\r\n    public static readonly INT_SAMPLER_3D = 0x8DCB;\r\n    public static readonly INT_SAMPLER_CUBE = 0x8DCC;\r\n    public static readonly INT_SAMPLER_2D_ARRAY = 0x8DCF;\r\n    public static readonly UNSIGNED_INT_SAMPLER_2D = 0x8DD2;\r\n    public static readonly UNSIGNED_INT_SAMPLER_3D = 0x8DD3;\r\n    public static readonly UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;\r\n    public static readonly UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;\r\n    public static readonly DEPTH_COMPONENT32F = 0x8CAC;\r\n    public static readonly DEPTH32F_STENCIL8 = 0x8CAD;\r\n    public static readonly FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;\r\n    public static readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;\r\n    public static readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;\r\n    public static readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;\r\n    public static readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;\r\n    public static readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;\r\n    public static readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;\r\n    public static readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;\r\n    public static readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;\r\n    public static readonly FRAMEBUFFER_DEFAULT = 0x8218;\r\n    public static readonly UNSIGNED_INT_24_8 = 0x84FA;\r\n    public static readonly DEPTH24_STENCIL8 = 0x88F0;\r\n    public static readonly UNSIGNED_NORMALIZED = 0x8C17;\r\n    public static readonly DRAW_FRAMEBUFFER_BINDING = 0x8CA6; // Same as FRAMEBUFFER_BINDING\r\n    public static readonly READ_FRAMEBUFFER = 0x8CA8;\r\n    public static readonly DRAW_FRAMEBUFFER = 0x8CA9;\r\n    public static readonly READ_FRAMEBUFFER_BINDING = 0x8CAA;\r\n    public static readonly RENDERBUFFER_SAMPLES = 0x8CAB;\r\n    public static readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;\r\n    public static readonly MAX_COLOR_ATTACHMENTS = 0x8CDF;\r\n    public static readonly COLOR_ATTACHMENT1 = 0x8CE1;\r\n    public static readonly COLOR_ATTACHMENT2 = 0x8CE2;\r\n    public static readonly COLOR_ATTACHMENT3 = 0x8CE3;\r\n    public static readonly COLOR_ATTACHMENT4 = 0x8CE4;\r\n    public static readonly COLOR_ATTACHMENT5 = 0x8CE5;\r\n    public static readonly COLOR_ATTACHMENT6 = 0x8CE6;\r\n    public static readonly COLOR_ATTACHMENT7 = 0x8CE7;\r\n    public static readonly COLOR_ATTACHMENT8 = 0x8CE8;\r\n    public static readonly COLOR_ATTACHMENT9 = 0x8CE9;\r\n    public static readonly COLOR_ATTACHMENT10 = 0x8CEA;\r\n    public static readonly COLOR_ATTACHMENT11 = 0x8CEB;\r\n    public static readonly COLOR_ATTACHMENT12 = 0x8CEC;\r\n    public static readonly COLOR_ATTACHMENT13 = 0x8CED;\r\n    public static readonly COLOR_ATTACHMENT14 = 0x8CEE;\r\n    public static readonly COLOR_ATTACHMENT15 = 0x8CEF;\r\n    public static readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;\r\n    public static readonly MAX_SAMPLES = 0x8D57;\r\n    public static readonly HALF_FLOAT = 0x140B;\r\n    public static readonly RG = 0x8227;\r\n    public static readonly RG_INTEGER = 0x8228;\r\n    public static readonly R8 = 0x8229;\r\n    public static readonly RG8 = 0x822B;\r\n    public static readonly R16F = 0x822D;\r\n    public static readonly R32F = 0x822E;\r\n    public static readonly RG16F = 0x822F;\r\n    public static readonly RG32F = 0x8230;\r\n    public static readonly R8I = 0x8231;\r\n    public static readonly R8UI = 0x8232;\r\n    public static readonly R16I = 0x8233;\r\n    public static readonly R16UI = 0x8234;\r\n    public static readonly R32I = 0x8235;\r\n    public static readonly R32UI = 0x8236;\r\n    public static readonly RG8I = 0x8237;\r\n    public static readonly RG8UI = 0x8238;\r\n    public static readonly RG16I = 0x8239;\r\n    public static readonly RG16UI = 0x823A;\r\n    public static readonly RG32I = 0x823B;\r\n    public static readonly RG32UI = 0x823C;\r\n    public static readonly VERTEX_ARRAY_BINDING = 0x85B5;\r\n    public static readonly R8_SNORM = 0x8F94;\r\n    public static readonly RG8_SNORM = 0x8F95;\r\n    public static readonly RGB8_SNORM = 0x8F96;\r\n    public static readonly RGBA8_SNORM = 0x8F97;\r\n    public static readonly SIGNED_NORMALIZED = 0x8F9C;\r\n    public static readonly COPY_READ_BUFFER = 0x8F36;\r\n    public static readonly COPY_WRITE_BUFFER = 0x8F37;\r\n    public static readonly COPY_READ_BUFFER_BINDING = 0x8F36; // Same as COPY_READ_BUFFER\r\n    public static readonly COPY_WRITE_BUFFER_BINDING = 0x8F37; // Same as COPY_WRITE_BUFFER\r\n    public static readonly UNIFORM_BUFFER = 0x8A11;\r\n    public static readonly UNIFORM_BUFFER_BINDING = 0x8A28;\r\n    public static readonly UNIFORM_BUFFER_START = 0x8A29;\r\n    public static readonly UNIFORM_BUFFER_SIZE = 0x8A2A;\r\n    public static readonly MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;\r\n    public static readonly MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;\r\n    public static readonly MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;\r\n    public static readonly MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;\r\n    public static readonly MAX_UNIFORM_BLOCK_SIZE = 0x8A30;\r\n    public static readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;\r\n    public static readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;\r\n    public static readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;\r\n    public static readonly ACTIVE_UNIFORM_BLOCKS = 0x8A36;\r\n    public static readonly UNIFORM_TYPE = 0x8A37;\r\n    public static readonly UNIFORM_SIZE = 0x8A38;\r\n    public static readonly UNIFORM_BLOCK_INDEX = 0x8A3A;\r\n    public static readonly UNIFORM_OFFSET = 0x8A3B;\r\n    public static readonly UNIFORM_ARRAY_STRIDE = 0x8A3C;\r\n    public static readonly UNIFORM_MATRIX_STRIDE = 0x8A3D;\r\n    public static readonly UNIFORM_IS_ROW_MAJOR = 0x8A3E;\r\n    public static readonly UNIFORM_BLOCK_BINDING = 0x8A3F;\r\n    public static readonly UNIFORM_BLOCK_DATA_SIZE = 0x8A40;\r\n    public static readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;\r\n    public static readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;\r\n    public static readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;\r\n    public static readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;\r\n    public static readonly INVALID_INDEX = 0xFFFFFFFF;\r\n    public static readonly MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;\r\n    public static readonly MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;\r\n    public static readonly MAX_SERVER_WAIT_TIMEOUT = 0x9111;\r\n    public static readonly OBJECT_TYPE = 0x9112;\r\n    public static readonly SYNC_CONDITION = 0x9113;\r\n    public static readonly SYNC_STATUS = 0x9114;\r\n    public static readonly SYNC_FLAGS = 0x9115;\r\n    public static readonly SYNC_FENCE = 0x9116;\r\n    public static readonly SYNC_GPU_COMMANDS_COMPLETE = 0x9117;\r\n    public static readonly UNSIGNALED = 0x9118;\r\n    public static readonly SIGNALED = 0x9119;\r\n    public static readonly ALREADY_SIGNALED = 0x911A;\r\n    public static readonly TIMEOUT_EXPIRED = 0x911B;\r\n    public static readonly CONDITION_SATISFIED = 0x911C;\r\n    public static readonly WAIT_FAILED = 0x911D;\r\n    public static readonly SYNC_FLUSH_COMMANDS_BIT = 0x00000001;\r\n    public static readonly VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;\r\n    public static readonly ANY_SAMPLES_PASSED = 0x8C2F;\r\n    public static readonly ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;\r\n    public static readonly SAMPLER_BINDING = 0x8919;\r\n    public static readonly RGB10_A2UI = 0x906F;\r\n    public static readonly INT_2_10_10_10_REV = 0x8D9F;\r\n    public static readonly TRANSFORM_FEEDBACK = 0x8E22;\r\n    public static readonly TRANSFORM_FEEDBACK_PAUSED = 0x8E23;\r\n    public static readonly TRANSFORM_FEEDBACK_ACTIVE = 0x8E24;\r\n    public static readonly TRANSFORM_FEEDBACK_BINDING = 0x8E25;\r\n    public static readonly COMPRESSED_R11_EAC = 0x9270;\r\n    public static readonly COMPRESSED_SIGNED_R11_EAC = 0x9271;\r\n    public static readonly COMPRESSED_RG11_EAC = 0x9272;\r\n    public static readonly COMPRESSED_SIGNED_RG11_EAC = 0x9273;\r\n    public static readonly COMPRESSED_RGB8_ETC2 = 0x9274;\r\n    public static readonly COMPRESSED_SRGB8_ETC2 = 0x9275;\r\n    public static readonly COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;\r\n    public static readonly COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;\r\n    public static readonly COMPRESSED_RGBA8_ETC2_EAC = 0x9278;\r\n    public static readonly COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;\r\n    public static readonly TEXTURE_IMMUTABLE_FORMAT = 0x912F;\r\n    public static readonly MAX_ELEMENT_INDEX = 0x8D6B;\r\n    public static readonly TEXTURE_IMMUTABLE_LEVELS = 0x82DF;\r\n\r\n    public static readonly MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;\r\n\r\n    static glErrorString(value: number): string {\r\n        switch (value) {\r\n            case GLConstants.NO_ERROR:\r\n                return 'NO_ERROR';\r\n            case GLConstants.INVALID_ENUM:\r\n                return 'INVALID_ENUM';\r\n            case GLConstants.INVALID_VALUE:\r\n                return 'INVALID_VALUE';\r\n            case GLConstants.INVALID_OPERATION:\r\n                return 'INVALID_OPERATION';\r\n            case GLConstants.OUT_OF_MEMORY:\r\n                return 'OUT_OF_MEMORY';\r\n            default:\r\n                return 'UNKNOWN_ERROR';\r\n        }\r\n    }\r\n}\r\n",
        "import { EngineCapabilities } from \"./EngineCapabilities\";\r\nimport { EngineOptions } from \"./EngineOptions\";\r\nimport { Nullable } from \"../types\";\r\nimport { ColorRGB, ColorRGBA } from \"../Math\";\r\nimport { GLQuery } from \"./GLQuery\";\r\nimport { EventDispatcher } from \"../Events\";\r\nimport { GLTexture } from \"./GLTexture\";\r\nimport { Texture } from \"./Textures/Texture\";\r\nimport { RenderTargetTexture } from \"./Textures/RenderTargetTexture\";\r\nimport { IViewportLike } from \"../Math/InterfaceType/InterfaceLike\";\r\nimport { GLPipelineContext } from \"./GLPipelineContext\";\r\nimport { Scene } from \"../Scene\";\r\nimport { GLDataBuffer } from \"./GLDataBuffer\";\r\nimport { BufferAttribute, InterleavedBufferAttribute } from \"../Scene/Geometries\";\r\n\r\n/**\r\n * 基础引擎\r\n * @category Engine\r\n */\r\nexport abstract class BaseEngine extends EventDispatcher {\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _gl: any;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _webGLVersion: number;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _caps: EngineCapabilities;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _renderingCanvas: HTMLCanvasElement;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _creationOptions: EngineOptions;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _glVersion: string;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _glRenderer: string;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _glVendor: string;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _gpuVendor: string;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _onContextLost: (evt: Event) => void;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _onContextRestored: (evt: Event) => void;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _contextWasLost: boolean = false;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _devicePixelRatio: number = 1.0;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _renderLoopLaunched: boolean = false;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _activeRenderLoops = new Array<() => void>();\r\n    /**\r\n     * @ignore\r\n     */\r\n    public _boundRenderFunction: any;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _frameHandler: number;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _frameId: number = 0;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _windowIsBackground = false;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public _cachedViewport: IViewportLike;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public _cachedQueries: GLQuery[] = [];\r\n    /**\r\n     * @ignore\r\n     */\r\n    public _cachedTextures: GLTexture[] = [];\r\n    /**\r\n     * @ignore\r\n     */\r\n    public _currentRenderTarget: Nullable<RenderTargetTexture> = null;\r\n    /**\r\n     * @ignore\r\n     */\r\n    public _cachedScenes: Scene[] = [];\r\n\r\n    /**\r\n     * 强制使用2的幂纹理\r\n     */\r\n    public forcePOTTextures: boolean = false;\r\n    /**\r\n     * 窗口不在前面也渲染\r\n     */\r\n    public renderEvenInBackground: boolean = true;\r\n    /**\r\n     * 编译后验证shader\r\n     */\r\n    public validateShaderPrograms: boolean = false;\r\n    /**\r\n     * 构造函数\r\n     * @param canvasOrContext\r\n     * @param options\r\n     * @param adaptToDeviceRatio\r\n     */\r\n    constructor(canvasOrContext:  Nullable<HTMLCanvasElement | WebGLRenderingContext | WebGL2RenderingContext>, options?: EngineOptions, adaptToDeviceRatio: boolean = false) {\r\n        super();\r\n\r\n        let canvas: Nullable<HTMLCanvasElement> = null;\r\n\r\n        if (!canvasOrContext) {\r\n            return;\r\n        }\r\n\r\n        options = options || {};\r\n\r\n        if ((canvasOrContext as any).getContext) {\r\n            canvas = <HTMLCanvasElement>canvasOrContext;\r\n            this._renderingCanvas = canvas;\r\n\r\n            if (options.alpha == undefined) {\r\n                options.alpha = true;\r\n            }\r\n\r\n            if (options.antialias == undefined) {\r\n                options.antialias = true;\r\n            }\r\n\r\n            if (options.depth == undefined) {\r\n                options.depth = true;\r\n            }\r\n\r\n            if (options.stencil == undefined) {\r\n                options.stencil = true;\r\n            }\r\n\r\n            if (options.premultipliedAlpha == undefined) {\r\n                options.premultipliedAlpha = false;\r\n            }\r\n\r\n            if (options.xrCompatible == undefined) {\r\n                options.xrCompatible = true;\r\n            }\r\n\r\n            options.powerPreference = \"high-performance\";\r\n\r\n            this._onContextLost = this.onContextLost.bind(this);\r\n            this._onContextRestored = this.onContextRestored.bind(this);\r\n\r\n            this._creationOptions = options;\r\n\r\n            this._InitGL();\r\n        }\r\n        else {\r\n\r\n            this._gl = <WebGL2RenderingContext>canvasOrContext;\r\n            this._renderingCanvas = this._gl.canvas as HTMLCanvasElement;\r\n\r\n        }\r\n\r\n        const devicePixelRatio = window.devicePixelRatio || 1.0;\r\n        const limitDeviceRatio = options.limitDeviceRatio || devicePixelRatio;\r\n        this._devicePixelRatio = adaptToDeviceRatio ? devicePixelRatio : Math.min(limitDeviceRatio, devicePixelRatio);\r\n\r\n        this.resize(options.fullScreen ?? false, true);\r\n\r\n        this._initGLContext();\r\n\r\n        if ((typeof window) != \"undefined\") {\r\n\r\n            const onBlur = () => {\r\n                this._windowIsBackground = true;\r\n            };\r\n\r\n            const onFocus = () => {\r\n                this._windowIsBackground = false;\r\n            };\r\n\r\n            const hostWindow = this.getHostWindow()!;\r\n            hostWindow.addEventListener(\"blur\", onBlur);\r\n            hostWindow.addEventListener(\"focus\", onFocus);\r\n        }\r\n\r\n        this._renderingCanvas.addEventListener(\"webglcontextlost\", this._onContextLost, false);\r\n        this._renderingCanvas.addEventListener(\"webglcontextrestored\", this._onContextRestored, false);\r\n    }\r\n\r\n    /**\r\n     * GL句柄\r\n     */\r\n    public get gl() {\r\n        return this._gl;\r\n    }\r\n\r\n    /**\r\n     * GL版本\r\n     */\r\n    public get webGLVersion() {\r\n        return this._webGLVersion;\r\n    }\r\n\r\n    /**\r\n     * GL硬件参数\r\n     */\r\n    public get caps() {\r\n        return this._caps;\r\n    }\r\n\r\n    /**\r\n     * 当前视口\r\n     */\r\n    public get currentViewport(): IViewportLike {\r\n        return this._cachedViewport;\r\n    }\r\n\r\n    /**\r\n     * 是否需要2的幂纹理\r\n     */\r\n    public get needPOTTextures(): boolean {\r\n        return this._webGLVersion < 2 || this.forcePOTTextures;\r\n    }\r\n\r\n    /**\r\n     * 当前渲染Canvas\r\n     */\r\n    public getRenderingCanvas(): Nullable<HTMLCanvasElement> {\r\n        return this._renderingCanvas;\r\n    }\r\n\r\n    /**\r\n     * 当前帧ID\r\n     */\r\n    public getCurrentFrameId(): number {\r\n        return this._frameId;\r\n    }\r\n\r\n    /**\r\n     * 当前设备橡塑比\r\n     */\r\n    public getDevicePixelRatio(): number {\r\n        return this._devicePixelRatio;\r\n    }\r\n\r\n    /**\r\n     * 设置设备橡塑比\r\n     * @param radio\r\n     */\r\n    public setDevicePixelRatio(radio: number): boolean {\r\n        if (this._devicePixelRatio != radio) {\r\n            this._devicePixelRatio = radio;\r\n            return this.resize(false, false);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 当前渲染宽度\r\n     * @param useScreen\r\n     */\r\n    public getRenderWidth(useScreen = false): number {\r\n        if (!useScreen && this._currentRenderTarget) {\r\n            return this._currentRenderTarget.width;\r\n        }\r\n\r\n        return this._gl.drawingBufferWidth;\r\n    }\r\n\r\n    /**\r\n     * 当前渲染高度\r\n     * @param useScreen\r\n     */\r\n    public getRenderHeight(useScreen = false): number {\r\n        if (!useScreen && this._currentRenderTarget) {\r\n            return this._currentRenderTarget.height;\r\n        }\r\n\r\n        return this._gl.drawingBufferHeight;\r\n    }\r\n\r\n    /**\r\n     * 设置视口\r\n     */\r\n    public setViewport(viewport: IViewportLike, requiredWidth: Nullable<number> = null, requiredHeight: Nullable<number> = null): BaseEngine {\r\n\r\n        const width = requiredWidth || this.getRenderWidth();\r\n        const height = requiredHeight || this.getRenderHeight();\r\n        const x = viewport.x || 0;\r\n        const y = viewport.y || 0;\r\n\r\n        this._cachedViewport = viewport;\r\n        this._viewport(x * width, y * height, width * viewport.width, height * viewport.height);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @private\r\n     */\r\n    public _viewport(x: number, y: number, width: number, height: number): void {\r\n    }\r\n\r\n    /**\r\n     * 重置画布尺寸\r\n     */\r\n    public resize(fullScreen: boolean, updateStyle: boolean = false): boolean {\r\n\r\n        let width: number;\r\n        let height: number;\r\n\r\n        if (fullScreen && (typeof window) != \"undefined\") {\r\n            width = window.innerWidth;\r\n            height = window.innerHeight;\r\n        } else if (!fullScreen && this._renderingCanvas && this._renderingCanvas.parentElement) {\r\n            width = this._renderingCanvas.parentElement.clientWidth;\r\n            height = this._renderingCanvas.parentElement.clientHeight;\r\n        } else {\r\n            width = this._renderingCanvas ? (this._renderingCanvas.clientWidth || this._renderingCanvas.width) : 100;\r\n            height = this._renderingCanvas ? (this._renderingCanvas.clientHeight || this._renderingCanvas.height) : 100;\r\n        }\r\n\r\n        return this.setSize(width, height, updateStyle);\r\n    }\r\n\r\n    /**\r\n     * 设置画布尺寸\r\n     * @param width\r\n     * @param height\r\n     * @param updateStyle\r\n     */\r\n    public setSize(width: number, height: number, updateStyle: boolean = false): boolean {\r\n\r\n        if (!this._renderingCanvas) {\r\n            return false;\r\n        }\r\n\r\n        width = width | 0;\r\n        height = height | 0;\r\n\r\n        this._renderingCanvas.width = Math.floor(width * this._devicePixelRatio);\r\n        this._renderingCanvas.height = Math.floor(height * this._devicePixelRatio);\r\n\r\n        if (updateStyle) {\r\n            this._renderingCanvas.style.width = `${width}px`;\r\n            this._renderingCanvas.style.height = `${height}px`;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 清空缓冲\r\n     * @param color\r\n     * @param depth\r\n     * @param stencil\r\n     */\r\n    public clear(color: boolean = true, depth: boolean = true, stencil: boolean = true): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 运行渲染循环\r\n     */\r\n    public runRenderLoop(renderFunction: () => void): void {\r\n\r\n        if (this._activeRenderLoops.indexOf(renderFunction) != -1) {\r\n            return;\r\n        }\r\n        this._activeRenderLoops.push(renderFunction);\r\n\r\n        if (!this._renderLoopLaunched) {\r\n            this._renderLoopLaunched = true;\r\n            this._boundRenderFunction = this._renderLoop.bind(this);\r\n            this._frameHandler = this._queueNewFrame(this._boundRenderFunction, this.getHostWindow());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 停止渲染循环\r\n     */\r\n    public stopRenderLoop(renderFunction?: () => void): void {\r\n\r\n        if (!renderFunction) {\r\n            this._activeRenderLoops = [];\r\n            return;\r\n        }\r\n\r\n        const index = this._activeRenderLoops.indexOf(renderFunction);\r\n        if (index >= 0) {\r\n            this._activeRenderLoops.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param bindedRenderFunction\r\n     * @param requester\r\n     * @private\r\n     */\r\n    protected _queueNewFrame(bindedRenderFunction: any, requester?: any): number {\r\n        return BaseEngine.QueueNewFrame(bindedRenderFunction, requester);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @private\r\n     */\r\n    protected _renderLoop(): void {\r\n        if (!this._contextWasLost) {\r\n\r\n            let shouldRender = true;\r\n            if (!this.renderEvenInBackground && this._windowIsBackground) {\r\n                shouldRender = false;\r\n            }\r\n\r\n            if (shouldRender) {\r\n\r\n                this._frameId++;\r\n\r\n                this.beginFrame();\r\n\r\n                this.render();\r\n\r\n                this.endFrame();\r\n            }\r\n        }\r\n\r\n        if (this._activeRenderLoops.length > 0) {\r\n            this._frameHandler = this._queueNewFrame(this._boundRenderFunction, this.getHostWindow());\r\n        } else {\r\n            this._renderLoopLaunched = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取窗口\r\n     */\r\n    public getHostWindow(): Nullable<Window> {\r\n        if (!((typeof window) != \"undefined\")) {\r\n            return null;\r\n        }\r\n\r\n        if (this._renderingCanvas && this._renderingCanvas.ownerDocument && this._renderingCanvas.ownerDocument.defaultView) {\r\n            return this._renderingCanvas.ownerDocument.defaultView;\r\n        }\r\n\r\n        return window;\r\n    }\r\n\r\n    /**\r\n     * 获取GL错误\r\n     */\r\n    public getError(): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     * @param evt\r\n     */\r\n    protected onContextLost(evt: Event): void {\r\n\r\n        evt.preventDefault();\r\n\r\n        this._contextWasLost = true;\r\n        console.warn(\"WebGL context lost.\");\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     * @param evt\r\n     */\r\n    protected onContextRestored(evt: Event): void {\r\n\r\n        this._contextWasLost = false;\r\n        console.warn(\"WebGL context restored.\");\r\n    }\r\n\r\n    /**\r\n     * 帧开始\r\n     */\r\n    protected beginFrame(): void {\r\n    }\r\n\r\n    /**\r\n     * 帧结束\r\n     */\r\n    protected endFrame(): void {\r\n    }\r\n\r\n    /**\r\n     * 渲染\r\n     */\r\n    protected render(): void {\r\n\r\n        for (let index = 0; index < this._activeRenderLoops.length; index++) {\r\n            const renderFunction = this._activeRenderLoops[index];\r\n            renderFunction();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 初始化GL\r\n     * @protected\r\n     */\r\n    protected _InitGL(): void {\r\n    }\r\n\r\n    /**\r\n     * 初始化GL上下文\r\n     * @protected\r\n     */\r\n    protected _initGLContext(): void {\r\n    }\r\n\r\n    /**\r\n     * 格式化GPU信息\r\n     * @protected\r\n     */\r\n    protected _identifyGPUVendor(vendor: string, renderer: string): string {\r\n        if (vendor.match(/NVIDIA/i) || renderer.match(/NVIDIA/i)) {\r\n            return 'NVIDIA';\r\n        }\r\n        if (vendor.match(/INTEL/i) || renderer.match(/INTEL/i)) {\r\n            return 'INTEL';\r\n        }\r\n        if (vendor.match(/AMD/i) ||\r\n            renderer.match(/AMD/i) ||\r\n            vendor.match(/ATI/i) ||\r\n            renderer.match(/ATI/i)) {\r\n            return 'AMD';\r\n        }\r\n        return 'UNKNOWN GPU';\r\n    }\r\n\r\n    /**\r\n     * 纹理GL类型\r\n     * @param type\r\n     * @private\r\n     */\r\n    public _getWebGLTextureType(type: number): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * 纹理GL格式\r\n     * @param format\r\n     * @private\r\n     */\r\n    public _getInternalFormat(format: number): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Buffer数据格式\r\n     * @protected\r\n     */\r\n    public _getRGBABufferInternalSizedFormat(type: number, format?: number): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * 多重采样Buffer格式\r\n     * @protected\r\n     */\r\n    public _getRGBAMultiSampleBufferFormat(type: number): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * 深度Buffer格式\r\n     * @param type\r\n     * @param format\r\n     * @private\r\n     */\r\n    public _getDepthBufferInternalFormat(format: number, type?: number): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * 初始化颜色状态\r\n     * @ignore\r\n     */\r\n    public _initColorState(): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置颜色状态掩码\r\n     * @param rMask\r\n     * @param gMask\r\n     * @param bMask\r\n     * @param aMask\r\n     */\r\n    public setColorStateMask(rMask: boolean, gMask?: boolean, bMask?: boolean, aMask?: boolean): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 锁定颜色状态\r\n     * @param lock\r\n     */\r\n    public setColorStateLocked(lock: boolean): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置清空颜色\r\n     * @param r\r\n     * @param g\r\n     * @param b\r\n     * @param a\r\n     * @param premultipliedAlpha\r\n     */\r\n    public setColorStateClear(r: number, g: number, b: number, a: number, premultipliedAlpha: boolean): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 重置颜色状态\r\n     */\r\n    public setColorStateReset(): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 初始深度状态\r\n     * @ignore\r\n     */\r\n    public _initDepthState(): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置深度测试状态\r\n     */\r\n    public setDepthTest(test: boolean): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置深掩码状态\r\n     */\r\n    public setDepthMask(mask: boolean): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置深度函数\r\n     */\r\n    public setDepthFunc(func: number): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 锁定深度设置\r\n     */\r\n    public setDepthLock(lock: boolean): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 清空深度状态\r\n     */\r\n    public setDepthClear(depth: number): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 重置深度状态\r\n     */\r\n    public setDepthReset(): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 初始化模板状态\r\n     * @private\r\n     */\r\n    public _initStencilState(): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置模板测试状态\r\n     */\r\n    public setStencilTest(test: boolean): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 获取模板测试状态\r\n     */\r\n    public getStencilTest(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 设置模板码状态\r\n     */\r\n    public setStencilhMask(mask: number): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置模板函数\r\n     */\r\n    public setStencilFunc(func: number, ref: number, mask: number): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置模板比较函数\r\n     */\r\n    public setStencilOp(fail: number, zFail: number, zPass: number): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 锁定模板设置\r\n     */\r\n    public setStencilLock(lock: boolean): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 清空模板状态\r\n     */\r\n    public setStencilClear(depth: number): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 重置模板状态\r\n     */\r\n    public setStencilReset(): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 初始化混合状态\r\n     * @private\r\n     */\r\n    public _initBlendingState(): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置混合状态\r\n     */\r\n    public setBlending(blending: number): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置混合颜色\r\n     * @param blendColor\r\n     */\r\n    public setBlendingColor(blendColor: ColorRGB | ColorRGBA): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置混合方程\r\n     * @param blendEquation\r\n     * @param blendEquationAlpha\r\n     */\r\n    public setBlendingEquation(blendEquation: number, blendEquationAlpha: number): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置混合因子\r\n     * @param blendSrc\r\n     * @param blendDst\r\n     * @param blendSrcAlpha\r\n     * @param blendDstAlpha\r\n     */\r\n    public setBlendingFunc(blendSrc: number, blendDst: number, blendSrcAlpha: number, blendDstAlpha: number): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 初始化裁剪状态\r\n     * @private\r\n     */\r\n    public _initCullState(): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置多边形正反面剔除\r\n     * @param cullFace\r\n     */\r\n    public setCullFace(cullFace: number): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置面顺时针/逆时针\r\n     */\r\n    public setFrontFace(cw: boolean): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 添加多边形片段的深度值偏移\r\n     * @param polygonOffset\r\n     * @param factor\r\n     * @param units\r\n     */\r\n    public setPolygonOffset(polygonOffset: boolean, factor: number, units: number): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 剪裁测试，即丢弃在剪裁矩形范围外的片段\r\n     * @param scissorTest\r\n     */\r\n    public setScissorTest(scissorTest: boolean): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 在写入颜色缓冲区之前，抖动颜色成分\r\n     * @param dithering\r\n     */\r\n    public setDithering(dithering: boolean): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 图元光栅化阶段之前，但在任意的transform反馈之后，就立刻被丢弃\r\n     * @param rasterizer\r\n     */\r\n    public setRasterizer(rasterizer: boolean): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 创建TransformFeedback\r\n     */\r\n    public createTransformFeedback(): any {\r\n    }\r\n\r\n    /**\r\n     * 删除TransformFeedback\r\n     * @param glObj\r\n     */\r\n    public deleteTransformFeedback(glObj: any): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 绑定TransformFeedback\r\n     * @param glObj\r\n     */\r\n    public bindTransformFeedback(glObj: any): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 开始TransformFeedback\r\n     * @param usePoints\r\n     */\r\n    public beginTransformFeedback(usePoints: boolean = true): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 结束TransformFeedback\r\n     */\r\n    public endTransformFeedback(): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 暂停TransformFeedback\r\n     */\r\n    public pauseTransformFeedback(): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 恢复TransformFeedback\r\n     */\r\n    public resumeTransformFeedback(): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置TransformFeedback变量\r\n     * @param glProgram\r\n     * @param varyings\r\n     * @param separate\r\n     */\r\n    public setTranformFeedbackVaryings(glProgram: any, varyings: string[], separate: boolean = false): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 绑定TransformFeedback Buffer\r\n     * @param glObj\r\n     * @param index\r\n     */\r\n    public bindTransformFeedbackBuffer(glObj: any, index: number = 0): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 更新查询\r\n     * @private\r\n     */\r\n    public _updateQuery(): void {\r\n    }\r\n\r\n    /**\r\n     * 创建查询\r\n     * @param conservative\r\n     */\r\n    public createQuery(conservative: boolean = true): GLQuery {\r\n        // @ts-ignore\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * 删除查询\r\n     * @param query\r\n     */\r\n    public deleteQuery(query: GLQuery): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 开始查询\r\n     * @param query\r\n     */\r\n    public beginQuery(query: GLQuery): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 结束查询\r\n     * @param query\r\n     */\r\n    public endQuery(query: GLQuery): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 初始化VBO状态\r\n     */\r\n    public _initDataBufferState(): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 绑定VBO\r\n     * @param dataBuffer\r\n     * @param target\r\n     * @param index\r\n     * @param offset\r\n     * @param size\r\n     */\r\n    public _bindDataBuffer(dataBuffer: GLDataBuffer, target: Nullable<number> = null, index: number = -1, offset: number = 0, size: Nullable<number> = null): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 解绑VBO\r\n     * @param dataBuffer\r\n     * @param target\r\n     * @param index\r\n     */\r\n    public _unbindDataBuffer(dataBuffer: GLDataBuffer, target: Nullable<number> = null, index: number = -1): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置Buffer属性\r\n     * @param dataBuffer\r\n     */\r\n    public _setBufferAttribute(dataBuffer: BufferAttribute | InterleavedBufferAttribute): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 释放Buffer属性\r\n     * @param dataBuffer\r\n     */\r\n    public _releaseBufferAttribute(dataBuffer: GLDataBuffer): void {\r\n    }\r\n\r\n    /**\r\n     *  设置纹理\r\n     * @param texture\r\n     * @param solt\r\n     */\r\n    public _setTexture(texture: Texture, solt: Nullable<number> = null): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 释放GL纹理\r\n     * @param texture\r\n     * @private\r\n     */\r\n    public _releaseTexture(texture: GLTexture): void {\r\n\r\n    }\r\n\r\n    /**\r\n     * 初始化纹理状态\r\n     * @private\r\n     */\r\n    public _initTextureState(): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 分配纹理单元\r\n     * @private\r\n     */\r\n    public _allocateTextureUnit(): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * 重置纹理单元\r\n     * @private\r\n     */\r\n    public _resetTextureUnits(): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 激活纹理\r\n     * @param slot\r\n     * @private\r\n     */\r\n    public _activeTexture(slot: Nullable<number> = null): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 绑定纹理\r\n     * @param texture\r\n     * @private\r\n     */\r\n    public _bindTexture(texture: GLTexture): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 解绑纹理\r\n     * @private\r\n     */\r\n    public _unbindTexture(): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 绑定渲染目标\r\n     * @param texture\r\n     * @param faceIndex\r\n     * @param requiredWidth\r\n     * @param requiredHeight\r\n     * @param forceFullscreenViewport\r\n     * @param lodLevel\r\n     * @param layer\r\n     */\r\n    public bindFramebuffer(texture: RenderTargetTexture, faceIndex: number = 0, requiredWidth: Nullable<number> = null, requiredHeight: Nullable<number> = null, forceFullscreenViewport: boolean = false, lodLevel: number = 0, layer: number = 0): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 取消绑定渲染目标\r\n     */\r\n    public unBindFramebuffer(): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 还原默认渲染目标\r\n     */\r\n    public restoreDefaultFramebuffer(): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 创建管道上下文\r\n     */\r\n    public createPipelineContext(): GLPipelineContext {\r\n\r\n        const pipelineContext = new GLPipelineContext();\r\n        pipelineContext.engine = this;\r\n\r\n        if (this._caps.parallelShaderCompile) {\r\n            pipelineContext.isParallelCompiled = true;\r\n        }\r\n\r\n        return pipelineContext;\r\n    }\r\n\r\n    /**\r\n     * 删除管道上下文\r\n     * @param pipelineContext\r\n     */\r\n    public deletePipelineContext(pipelineContext: GLPipelineContext): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 创建shader\r\n     * @param pipelineContext\r\n     * @param vertexCode\r\n     * @param fragmentCode\r\n     * @param defines\r\n     * @param transformFeedbackVaryings\r\n     */\r\n    public createShaderProgram(pipelineContext: GLPipelineContext, vertexCode: string, fragmentCode: string, defines: Nullable<string>, transformFeedbackVaryings: Nullable<string[]> = null): any {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 给统一变量设置Int\r\n     * @param uniform\r\n     * @param value\r\n     */\r\n    public setInt(uniform: Nullable<any>, value: number): BaseEngine {\r\n        return this;\r\n    }\r\n    /**\r\n     * 给统一变量设置Int数组\r\n     * @param uniform\r\n     * @param array\r\n     */\r\n    public setIntArray(uniform: Nullable<any>, array: Int32Array): BaseEngine {\r\n        return this;\r\n    }\r\n    /**\r\n     * 给统一变量设置Int数组(vec2)\r\n     * @param uniform\r\n     * @param array\r\n     */\r\n    public setIntArray2(uniform: Nullable<any>, array: Int32Array): BaseEngine {\r\n        return this;\r\n    }\r\n    /**\r\n     * 给统一变量设置Int数组(vec3)\r\n     * @param uniform\r\n     * @param array\r\n     */\r\n    public setIntArray3(uniform: Nullable<any>, array: Int32Array): BaseEngine {\r\n        return this;\r\n    }\r\n    /**\r\n     * 给统一变量设置Int数组(vec4)\r\n     * @param uniform\r\n     * @param array\r\n     */\r\n    public setIntArray4(uniform: Nullable<any>, array: Int32Array): BaseEngine {\r\n        return this;\r\n    }\r\n    /**\r\n     * 给统一变量设置Float数组\r\n     * @param uniform\r\n     * @param array\r\n     */\r\n    public setArray(uniform: Nullable<any>, array: number[] | Float32Array): BaseEngine {\r\n        return this;\r\n    }\r\n    /**\r\n     * 给统一变量设置Float数组(vec2)\r\n     * @param uniform\r\n     * @param array\r\n     */\r\n    public setArray2(uniform: Nullable<any>, array: number[] | Float32Array): BaseEngine {\r\n        return this;\r\n    }\r\n    /**\r\n     * 给统一变量设置Float数组(vec3)\r\n     * @param uniform\r\n     * @param array\r\n     */\r\n    public setArray3(uniform: Nullable<any>, array: number[] | Float32Array): BaseEngine {\r\n        return this;\r\n    }\r\n    /**\r\n     * 给统一变量设置Float数组(vec4)\r\n     * @param uniform\r\n     * @param array\r\n     */\r\n    public setArray4(uniform: Nullable<any>, array: number[] | Float32Array): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 给统一变量设置4x4矩阵\r\n     * @param uniform\r\n     * @param matrices\r\n     */\r\n    public setMatrices(uniform: Nullable<any>, matrices: Float32Array): BaseEngine {\r\n        return this;\r\n    }\r\n    /**\r\n     * 给统一变量设置3x3矩阵\r\n     * @param uniform\r\n     * @param matrix\r\n     */\r\n    public setMatrix3x3(uniform: Nullable<any>, matrix: Float32Array): BaseEngine {\r\n        return this;\r\n    }\r\n    /**\r\n     * 给统一变量设置2x2矩阵\r\n     * @param uniform\r\n     * @param matrix\r\n     */\r\n    public setMatrix2x2(uniform: Nullable<any>, matrix: Float32Array): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 给统一变量设置浮点\r\n     * @param uniform\r\n     * @param value\r\n     */\r\n    public setFloat(uniform: Nullable<any>, value: number): BaseEngine {\r\n        return this;\r\n    }\r\n    /**\r\n     * 给统一变量设置vec2\r\n     * @param uniform\r\n     * @param x\r\n     * @param y\r\n     */\r\n    public setFloat2(uniform: Nullable<any>, x: number, y: number): BaseEngine {\r\n        return this;\r\n    }\r\n    /**\r\n     * 给统一变量设置vec3\r\n     * @param uniform\r\n     * @param x\r\n     * @param y\r\n     * @param z\r\n     */\r\n    public setFloat3(uniform: Nullable<any>, x: number, y: number, z: number): BaseEngine {\r\n        return this;\r\n    }\r\n    /**\r\n     * 给统一变量设置vec4\r\n     * @param uniform\r\n     * @param x\r\n     * @param y\r\n     * @param z\r\n     * @param w\r\n     */\r\n    public setFloat4(uniform: Nullable<any>, x: number, y: number, z: number, w: number): BaseEngine {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 请求下一帧\r\n     * @param func\r\n     * @param requester\r\n     */\r\n    public static QueueNewFrame(func: () => void, requester?: any): number {\r\n        if (!((typeof window) != \"undefined\")) {\r\n            if (typeof requestAnimationFrame != \"undefined\") {\r\n                return requestAnimationFrame(func);\r\n            }\r\n\r\n            return setTimeout(func, 16);\r\n        }\r\n\r\n        if (!requester) {\r\n            requester = window;\r\n        }\r\n\r\n        if (requester.requestPostAnimationFrame) {\r\n            return requester.requestPostAnimationFrame(func);\r\n        }\r\n        else if (requester.requestAnimationFrame) {\r\n            return requester.requestAnimationFrame(func);\r\n        }\r\n        else if (requester.msRequestAnimationFrame) {\r\n            return requester.msRequestAnimationFrame(func);\r\n        }\r\n        else if (requester.webkitRequestAnimationFrame) {\r\n            return requester.webkitRequestAnimationFrame(func);\r\n        }\r\n        else if (requester.mozRequestAnimationFrame) {\r\n            return requester.mozRequestAnimationFrame(func);\r\n        }\r\n        else if (requester.oRequestAnimationFrame) {\r\n            return requester.oRequestAnimationFrame(func);\r\n        }\r\n        else {\r\n            return window.setTimeout(func, 16);\r\n        }\r\n    }\r\n}\r\n",
        "import { BaseEngine } from \"./BaseEngine\";\r\nimport { Nullable } from \"../types\";\r\n\r\n/**\r\n * 管道上下文\r\n */\r\nexport class GLPipelineContext {\r\n\r\n    public engine: BaseEngine;\r\n    public program: Nullable<WebGLProgram>;\r\n    public vertexShader?: WebGLShader;\r\n    public fragmentShader?: WebGLShader;\r\n    public isParallelCompiled: boolean;\r\n    public onCompiled?: () => void;\r\n    public transformFeedback?: WebGLTransformFeedback | null;\r\n\r\n    public vertexCompilationError: Nullable<string> = null;\r\n    public fragmentCompilationError: Nullable<string> = null;\r\n    public programLinkError: Nullable<string> = null;\r\n    public programValidationError: Nullable<string> = null;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    public get isAsync() {\r\n        return this.isParallelCompiled;\r\n    }\r\n}\r\n",
        "export * from \"./Engine.BlendState\";\r\nexport * from \"./Engine.ColorState\";\r\nexport * from \"./Engine.CullState\";\r\nexport * from \"./Engine.DepthState\";\r\nexport * from \"./Engine.StencilState\";\r\nexport * from \"./Engine.QueryState\";\r\nexport * from \"./Engine.TextureState\";\r\nexport * from \"./Engine.TransformFeedback\";\r\n",
        "import { WebGLEngine } from \"../WebGLEngine\";\r\nimport { Vector4 } from \"../../Math/Vector4\";\r\nimport { ColorRGB, ColorRGBA } from \"../../Math\";\r\nimport { Constants } from \"../Constants\";\r\nimport { MathTmp } from \"../../Math/MathTmp\";\r\nimport { Nullable } from \"../../types\";\r\n\r\n/**\r\n * @ignore\r\n */\r\ndeclare module \"../WebGLEngine\" {\r\n\r\n    export interface WebGLEngine {\r\n\r\n        currentBlending: number;\r\n        currentBlendEquation: number;\r\n        currentBlendSrc: number;\r\n        currentBlendDst: number;\r\n        currentBlendEquationAlpha: number;\r\n        currentBlendSrcAlpha: number;\r\n        currentBlendDstAlpha: number;\r\n        currentBlendColor: Vector4;\r\n        equationToGL: any;\r\n        factorToGL: any;\r\n\r\n        _initBlendingState(): WebGLEngine;\r\n        setBlending(blending: number): WebGLEngine;\r\n        setBlendingColor(blendColor: ColorRGB | ColorRGBA): WebGLEngine;\r\n        setBlendingEquation(blendEquation: number, blendEquationAlpha: number): WebGLEngine;\r\n        setBlendingFunc(blendSrc: number, blendDst: number, blendSrcAlpha: number, blendDstAlpha: number): WebGLEngine;\r\n    }\r\n}\r\n\r\nWebGLEngine.prototype._initBlendingState = function(): WebGLEngine {\r\n\r\n    this.currentBlending = Constants.NoBlending;\r\n    this.currentBlendEquation = -1;\r\n    this.currentBlendSrc = -1;\r\n    this.currentBlendDst = -1;\r\n    this.currentBlendEquationAlpha = -1;\r\n    this.currentBlendSrcAlpha = -1;\r\n    this.currentBlendDstAlpha = -1;\r\n    this.currentBlendColor = new Vector4();\r\n\r\n    const gl = this.gl;\r\n\r\n    gl.disable(gl.BLEND);\r\n\r\n    this.equationToGL = {\r\n        [ Constants.AddEquation ]: gl.FUNC_ADD,\r\n        [ Constants.SubtractEquation ]: gl.FUNC_SUBTRACT,\r\n        [ Constants.ReverseSubtractEquation ]: gl.FUNC_REVERSE_SUBTRACT,\r\n        [ Constants.MinEquation ]: gl.MIN,\r\n        [ Constants.MaxEquation ]: gl.MAX,\r\n    };\r\n\r\n    this.factorToGL = {\r\n        [ Constants.ZeroFactor ]: gl.ZERO,\r\n        [ Constants.OneFactor ]: gl.ONE,\r\n        [ Constants.SrcColorFactor ]: gl.SRC_COLOR,\r\n        [ Constants.SrcAlphaFactor ]: gl.SRC_ALPHA,\r\n        [ Constants.SrcAlphaSaturateFactor ]: gl.SRC_ALPHA_SATURATE,\r\n        [ Constants.DstColorFactor ]: gl.DST_COLOR,\r\n        [ Constants.DstAlphaFactor ]: gl.DST_ALPHA,\r\n        [ Constants.OneMinusSrcColorFactor ]: gl.ONE_MINUS_SRC_COLOR,\r\n        [ Constants.OneMinusSrcAlphaFactor ]: gl.ONE_MINUS_SRC_ALPHA,\r\n        [ Constants.OneMinusDstColorFactor ]: gl.ONE_MINUS_DST_COLOR,\r\n        [ Constants.OneMinusDstAlphaFactor ]: gl.ONE_MINUS_DST_ALPHA\r\n    };\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.setBlending = function(blending: number): WebGLEngine {\r\n\r\n    const gl = this.gl;\r\n\r\n    if (this.currentBlending != blending) {\r\n\r\n        if (blending == Constants.NoBlending) {\r\n            gl.disable(gl.BLEND);\r\n        }\r\n        else {\r\n            gl.enable(gl.BLEND);\r\n        }\r\n\r\n        this.currentBlending = blending;\r\n\r\n        switch (blending) {\r\n            case Constants.PremultipliedBlending:\r\n                this.setBlendingFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA, this.gl.ONE, this.gl.ONE);\r\n                break;\r\n            case Constants.PremultipliedPorterDuffBlending:\r\n                this.setBlendingFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA, this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\r\n                break;\r\n            case Constants.CombineBlending:\r\n                this.setBlendingFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA, this.gl.ONE, this.gl.ONE);\r\n                break;\r\n            case Constants.OneOneBlending:\r\n                this.setBlendingFunc(this.gl.ONE, this.gl.ONE, this.gl.ZERO, this.gl.ONE);\r\n                break;\r\n            case Constants.AddBlending:\r\n                this.setBlendingFunc(this.gl.SRC_ALPHA, this.gl.ONE, this.gl.ZERO, this.gl.ONE);\r\n                break;\r\n            case Constants.SubtractBlending:\r\n                this.setBlendingFunc(this.gl.ZERO, this.gl.ONE_MINUS_SRC_COLOR, this.gl.ONE, this.gl.ONE);\r\n                break;\r\n            case Constants.MultiplyBlending:\r\n                this.setBlendingFunc(this.gl.DST_COLOR, this.gl.ZERO, this.gl.ONE, this.gl.ONE);\r\n                break;\r\n            case Constants.MaximizedBlending:\r\n                this.setBlendingFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_COLOR, this.gl.ONE, this.gl.ONE);\r\n                break;\r\n            case Constants.InterpolateBlending:\r\n                this.setBlendingFunc(this.gl.CONSTANT_COLOR, this.gl.ONE_MINUS_CONSTANT_COLOR, this.gl.CONSTANT_ALPHA, this.gl.ONE_MINUS_CONSTANT_ALPHA);\r\n                break;\r\n            case Constants.ScreenModeBlending:\r\n                this.setBlendingFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_COLOR, this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\r\n                break;\r\n            case Constants.OneOneOneOneBlending:\r\n                this.setBlendingFunc(this.gl.ONE, this.gl.ONE, this.gl.ONE, this.gl.ONE);\r\n                break;\r\n            case Constants.AlphaToColorBlending:\r\n                this.setBlendingFunc(this.gl.DST_ALPHA, this.gl.ONE, this.gl.ZERO, this.gl.ZERO);\r\n                break;\r\n            case Constants.ReverseOneMinusBlending:\r\n                this.setBlendingFunc(this.gl.ONE_MINUS_DST_COLOR, this.gl.ONE_MINUS_SRC_COLOR, this.gl.ONE_MINUS_DST_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\r\n                break;\r\n            case Constants.SrcDstOneMinusSrcAlphaBlending:\r\n                this.setBlendingFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA, this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\r\n                break;\r\n            case Constants.OneOneOneZeroBlending:\r\n                this.setBlendingFunc(this.gl.ONE, this.gl.ONE, this.gl.ONE, this.gl.ZERO);\r\n                break;\r\n            case Constants.ExclusionBlending:\r\n                this.setBlendingFunc(this.gl.ONE_MINUS_DST_COLOR, this.gl.ONE_MINUS_SRC_COLOR, this.gl.ZERO, this.gl.ONE);\r\n                break;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.setBlendingColor = function(blendColor: ColorRGB | ColorRGBA): WebGLEngine {\r\n\r\n    if (blendColor instanceof ColorRGBA) {\r\n        MathTmp.Vector4[0].set(blendColor.r, blendColor.g, blendColor.b, blendColor.a);\r\n    }\r\n    else {\r\n        MathTmp.Vector4[0].set(blendColor.r, blendColor.g, blendColor.b, 1.0);\r\n    }\r\n\r\n    const gl = this.gl;\r\n\r\n    if (!MathTmp.Vector4[0].equals(this.currentBlendColor)) {\r\n        this.currentBlendColor.copy(MathTmp.Vector4[0]);\r\n        gl.blendColor(this.currentBlendColor.x, this.currentBlendColor.y, this.currentBlendColor.z, this.currentBlendColor.w);\r\n    }\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.setBlendingEquation = function(blendEquation: number, blendEquationAlpha: Nullable<number> = null): WebGLEngine {\r\n\r\n    const gl = this.gl;\r\n\r\n    if (this.currentBlendEquation != blendEquation || this.currentBlendEquationAlpha != blendEquationAlpha) {\r\n\r\n        if (blendEquationAlpha != null) {\r\n            gl.blendEquationSeparate(this.equationToGL[blendEquation], this.equationToGL[blendEquationAlpha]);\r\n        } else {\r\n            gl.blendEquation(this.equationToGL[blendEquation]);\r\n        }\r\n\r\n        this.currentBlendEquation = blendEquation;\r\n        this.currentBlendEquationAlpha = blendEquationAlpha ?? -1;\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.setBlendingFunc = function(blendSrc: number, blendDst: number, blendSrcAlpha: Nullable<number> = null, blendDstAlpha: Nullable<number> = null): WebGLEngine {\r\n\r\n    const gl = this.gl;\r\n\r\n    if (this.currentBlendSrc != blendSrc || this.currentBlendDst != blendDst || this.currentBlendSrcAlpha != blendSrcAlpha || this.currentBlendDstAlpha != blendDstAlpha) {\r\n\r\n        if (blendSrcAlpha != null && blendDstAlpha != null) {\r\n            gl.blendFuncSeparate(this.factorToGL[blendSrc], this.factorToGL[blendDst], this.factorToGL[blendSrcAlpha], this.factorToGL[blendDstAlpha]);\r\n        } else {\r\n            gl.blendFunc(this.factorToGL[blendSrc], this.factorToGL[blendDst]);\r\n        }\r\n\r\n        this.currentBlendSrc = blendSrc;\r\n        this.currentBlendDst = blendDst;\r\n        this.currentBlendSrcAlpha = blendSrcAlpha ?? -1;\r\n        this.currentBlendDstAlpha = blendDstAlpha ?? -1;\r\n    }\r\n\r\n    return this;\r\n};\r\n",
        "import { WebGLEngine } from \"../WebGLEngine\";\r\nimport { Vector4 } from \"../../Math/Vector4\";\r\nimport { MathTmp } from \"../../Math/MathTmp\";\r\n\r\n/**\r\n * @ignore\r\n */\r\ndeclare module \"../WebGLEngine\" {\r\n\r\n    export interface WebGLEngine {\r\n\r\n        colorLocked: boolean;\r\n        colorState: Vector4;\r\n        currentColorMask: Vector4;\r\n        currentColorClear: Vector4;\r\n\r\n        _initColorState(): WebGLEngine;\r\n        setColorStateMask(rMask: boolean, gMask?: boolean, bMask?: boolean, aMask?: boolean): WebGLEngine;\r\n        setColorStateLocked(lock: boolean): WebGLEngine;\r\n        setColorStateClear(r: number, g: number, b: number, a: number, premultipliedAlpha: boolean): WebGLEngine;\r\n        setColorStateReset(): WebGLEngine;\r\n    }\r\n}\r\n\r\nWebGLEngine.prototype._initColorState = function(): WebGLEngine {\r\n\r\n    const gl = this.gl;\r\n    this.colorLocked = false;\r\n    this.colorState = new Vector4();\r\n    this.currentColorMask = new Vector4(1, 1, 1, 1);\r\n    this.currentColorClear = new Vector4(1, 1, 1, 1);\r\n    gl.colorMask(true, true, true, true);\r\n    gl.clearColor(1, 1, 1, 1);\r\n\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.setColorStateMask = function(rMask: boolean, gMask?: boolean, bMask?: boolean, aMask?: boolean): WebGLEngine {\r\n\r\n    const gl = this.gl;\r\n\r\n    gMask = gMask ?? rMask;\r\n    bMask = bMask ?? rMask;\r\n    aMask = aMask ?? rMask;\r\n\r\n    MathTmp.Vector4[0].set(rMask ? 1 : 0, gMask ? 1 : 0, bMask ? 1 : 0, aMask ? 1 : 0);\r\n\r\n    if (!this.currentColorMask.equals(MathTmp.Vector4[0]) && !this.colorLocked) {\r\n        gl.colorMask(rMask, gMask, bMask, aMask);\r\n        this.currentColorMask.copy(MathTmp.Vector4[0]);\r\n    }\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.setColorStateLocked = function(lock: boolean): WebGLEngine {\r\n    this.colorLocked = lock;\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.setColorStateClear = function(r: number, g: number, b: number, a: number, premultipliedAlpha: boolean): WebGLEngine {\r\n\r\n    const gl = this.gl;\r\n\r\n    if (premultipliedAlpha) {\r\n        r *= a; g *= a; b *= a;\r\n    }\r\n\r\n    this.colorState.set(r, g, b, a);\r\n\r\n    if (!this.currentColorClear.equals(this.colorState)) {\r\n        gl.clearColor(r, g, b, a);\r\n        this.currentColorClear.copy(this.colorState);\r\n    }\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.setColorStateReset = function(): WebGLEngine {\r\n\r\n    this.colorLocked = false;\r\n    this.currentColorMask.set(-1, 0, 0, 0);\r\n    this.currentColorClear.set(-1, 0, 0, 0);\r\n    return this;\r\n};\r\n",
        "import { WebGLEngine } from \"../WebGLEngine\";\r\nimport { Constants } from \"../Constants\";\r\n\r\n/**\r\n * @ignore\r\n */\r\ndeclare module \"../WebGLEngine\" {\r\n\r\n    export interface WebGLEngine {\r\n\r\n        currentCullFace: number;\r\n        currentFrontFace: boolean;\r\n        currentPolygonOffset: boolean;\r\n        currentPolygonOffsetFactor: number;\r\n        currentPolygonOffsetUnits: number;\r\n\r\n        _initCullState(): WebGLEngine;\r\n        setCullFace(cullFace: number): WebGLEngine;\r\n        setFrontFace(cw: boolean): WebGLEngine;\r\n        setPolygonOffset(polygonOffset: boolean, factor: number, units: number): WebGLEngine;\r\n    }\r\n}\r\n\r\nWebGLEngine.prototype._initCullState = function(): WebGLEngine {\r\n    this.currentCullFace = Constants.CullFaceBack;\r\n    this.currentFrontFace = false;\r\n    this.currentPolygonOffset = false;\r\n    this.currentPolygonOffsetFactor = 0;\r\n    this.currentPolygonOffsetUnits = 0;\r\n\r\n    const gl = this.gl;\r\n    gl.enable(gl.CULL_FACE);\r\n    gl.cullFace(gl.BACK);\r\n    gl.frontFace(gl.CCW);\r\n    gl.disable(gl.POLYGON_OFFSET_FILL);\r\n\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.setCullFace = function(cullFace: number): WebGLEngine {\r\n\r\n    const gl = this.gl;\r\n\r\n    if (this.currentCullFace != cullFace) {\r\n\r\n        if (cullFace != Constants.CullFaceNone) {\r\n            gl.enable(gl.CULL_FACE);\r\n\r\n            if (cullFace == Constants.CullFaceBack) {\r\n                gl.cullFace(gl.BACK);\r\n            } else if (cullFace == Constants.CullFaceFront) {\r\n                gl.cullFace(gl.FRONT);\r\n            } else {\r\n                gl.cullFace(gl.FRONT_AND_BACK);\r\n            }\r\n\r\n        } else {\r\n            gl.disable(gl.CULL_FACE);\r\n        }\r\n\r\n        this.currentCullFace = cullFace;\r\n    }\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.setFrontFace = function(cw: boolean): WebGLEngine {\r\n\r\n    const gl = this.gl;\r\n\r\n    if (this.currentFrontFace != cw) {\r\n        if (cw) {\r\n            gl.frontFace(gl.CW);\r\n        } else {\r\n            gl.frontFace(gl.CCW);\r\n        }\r\n\r\n        this.currentFrontFace = cw;\r\n    }\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.setPolygonOffset = function(polygonOffset: boolean, factor: number, units: number): WebGLEngine {\r\n\r\n    const gl = this.gl;\r\n\r\n    if (this.currentPolygonOffset != polygonOffset) {\r\n\r\n        if (polygonOffset) {\r\n            gl.enable(gl.POLYGON_OFFSET_FILL);\r\n\r\n            if (this.currentPolygonOffsetFactor != factor || this.currentPolygonOffsetUnits != units) {\r\n                gl.polygonOffset(factor, units);\r\n\r\n                this.currentPolygonOffsetFactor = factor;\r\n                this.currentPolygonOffsetUnits = units;\r\n            }\r\n        } else {\r\n            gl.disable(gl.POLYGON_OFFSET_FILL);\r\n        }\r\n\r\n        this.currentPolygonOffset = polygonOffset;\r\n    }\r\n    return this;\r\n};\r\n",
        "import { WebGLEngine } from \"../WebGLEngine\";\r\nimport { Constants } from \"../Constants\";\r\n\r\n/**\r\n * @ignore\r\n */\r\ndeclare module \"../WebGLEngine\" {\r\n\r\n    export interface WebGLEngine {\r\n\r\n        depthLocked: boolean;\r\n        currentDepthTest: boolean;\r\n        currentDepthMask: boolean;\r\n        currentDepthClear: number;\r\n        currentDepthFunc: number;\r\n\r\n        _initDepthState(): WebGLEngine;\r\n        setDepthTest(test: boolean): WebGLEngine;\r\n        setDepthMask(mask: boolean): WebGLEngine;\r\n        setDepthFunc(func: number): WebGLEngine;\r\n        setDepthLock(lock: boolean): WebGLEngine;\r\n        setDepthClear(depth: number): WebGLEngine;\r\n        setDepthReset(): WebGLEngine;\r\n    }\r\n}\r\n\r\nWebGLEngine.prototype._initDepthState = function(): WebGLEngine {\r\n    this.depthLocked = false;\r\n    this.currentDepthTest = true;\r\n    this.currentDepthMask = true;\r\n    this.currentDepthClear = 0;\r\n    this.currentDepthFunc = Constants.LessEqualDepth;\r\n\r\n    const gl = this.gl;\r\n\r\n    gl.enable(gl.DEPTH_TEST);\r\n    gl.depthMask(true);\r\n    gl.depthFunc(gl.LEQUAL);\r\n\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.setDepthTest = function(test: boolean): WebGLEngine {\r\n\r\n    const gl = this.gl;\r\n\r\n    if (this.currentDepthTest != test) {\r\n        if (test) {\r\n            gl.enable(gl.DEPTH_TEST);\r\n        } else {\r\n            gl.disable(gl.DEPTH_TEST);\r\n        }\r\n        this.currentDepthTest = test;\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.setDepthMask = function(mask: boolean): WebGLEngine {\r\n\r\n    const gl = this.gl;\r\n\r\n    if (this.currentDepthMask != mask && !this.depthLocked) {\r\n        gl.depthMask(mask);\r\n        this.currentDepthMask = mask;\r\n    }\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.setDepthFunc = function(func: number): WebGLEngine {\r\n\r\n    const gl = this.gl;\r\n\r\n    if (this.currentDepthFunc != func) {\r\n        if (func) {\r\n            switch (func) {\r\n                case Constants.NeverDepth:\r\n\r\n                    gl.depthFunc(gl.NEVER);\r\n                    break;\r\n\r\n                case Constants.AlwaysDepth:\r\n\r\n                    gl.depthFunc(gl.ALWAYS);\r\n                    break;\r\n\r\n                case Constants.LessDepth:\r\n\r\n                    gl.depthFunc(gl.LESS);\r\n                    break;\r\n\r\n                case Constants.LessEqualDepth:\r\n\r\n                    gl.depthFunc(gl.LEQUAL);\r\n                    break;\r\n\r\n                case Constants.EqualDepth:\r\n\r\n                    gl.depthFunc(gl.EQUAL);\r\n                    break;\r\n\r\n                case Constants.GreaterEqualDepth:\r\n\r\n                    gl.depthFunc(gl.GEQUAL);\r\n                    break;\r\n\r\n                case Constants.GreaterDepth:\r\n\r\n                    gl.depthFunc(gl.GREATER);\r\n                    break;\r\n\r\n                case Constants.NotEqualDepth:\r\n\r\n                    gl.depthFunc(gl.NOTEQUAL);\r\n                    break;\r\n\r\n                default:\r\n\r\n                    gl.depthFunc(gl.LEQUAL);\r\n            }\r\n        } else {\r\n            gl.depthFunc(gl.LEQUAL);\r\n        }\r\n\r\n        this.currentDepthFunc = func;\r\n    }\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.setDepthLock = function(lock: boolean): WebGLEngine {\r\n    this.depthLocked = lock;\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.setDepthClear = function(depth: number): WebGLEngine {\r\n\r\n    const gl = this.gl;\r\n\r\n    if (this.currentDepthClear != depth) {\r\n        gl.clearDepth(depth);\r\n        this.currentDepthClear = depth;\r\n    }\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.setDepthReset = function(): WebGLEngine {\r\n\r\n    this.depthLocked = false;\r\n\r\n    this.currentDepthMask = true;\r\n    this.currentDepthFunc = -1;\r\n    this.currentDepthClear = -1;\r\n\r\n    return this;\r\n};\r\n",
        "import { WebGLEngine } from \"../WebGLEngine\";\r\n\r\n/**\r\n * @ignore\r\n */\r\ndeclare module \"../WebGLEngine\" {\r\n\r\n    export interface WebGLEngine {\r\n\r\n        stencilLocked: boolean;\r\n        currentStencilTest: boolean;\r\n        currentStencilMask: number;\r\n        currentStencilFunc: number;\r\n        currentStencilRef: number;\r\n        currentStencilFuncMask: number;\r\n        currentStencilFail: number;\r\n        currentStencilZFail: number;\r\n        currentStencilZPass: number;\r\n        currentStencilClear: number;\r\n\r\n        _initStencilState(): WebGLEngine;\r\n        setStencilTest(test: boolean): WebGLEngine;\r\n        setStencilhMask(mask: number): WebGLEngine;\r\n        setStencilFunc(func: number, ref: number, mask: number): WebGLEngine;\r\n        setStencilOp(fail: number, zFail: number, zPass: number): WebGLEngine;\r\n        setStencilLock(lock: boolean): WebGLEngine;\r\n        setStencilClear(depth: number): WebGLEngine;\r\n        setStencilReset(): WebGLEngine;\r\n\r\n        getStencilTest(): boolean;\r\n    }\r\n}\r\n\r\nWebGLEngine.prototype._initStencilState = function(): WebGLEngine {\r\n\r\n    this.stencilLocked = false;\r\n    this.currentStencilTest = false;\r\n    this.currentStencilMask = -1;\r\n    this.currentStencilFunc = -1;\r\n    this.currentStencilRef = -1;\r\n    this.currentStencilFuncMask = -1;\r\n    this.currentStencilFail = -1;\r\n    this.currentStencilZFail = -1;\r\n    this.currentStencilZPass = -1;\r\n    this.currentStencilClear = -1;\r\n\r\n    const gl = this.gl;\r\n\r\n    gl.disable(gl.STENCIL_TEST);\r\n    gl.stencilMask(0);\r\n\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.setStencilTest = function(test: boolean): WebGLEngine {\r\n\r\n    const gl = this.gl;\r\n\r\n    if (!this.stencilLocked && this.currentStencilTest != test) {\r\n        if (test) {\r\n            gl.enable(gl.STENCIL_TEST);\r\n        } else {\r\n            gl.disable(gl.STENCIL_TEST);\r\n        }\r\n        this.currentStencilTest = test;\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.setStencilhMask = function(mask: number): WebGLEngine {\r\n\r\n    const gl = this.gl;\r\n\r\n    if (this.currentStencilMask != mask && !this.stencilLocked) {\r\n        gl.stencilMask(mask);\r\n        this.currentStencilMask = mask;\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.setStencilFunc = function(func: number, ref: number, mask: number): WebGLEngine {\r\n\r\n    const gl = this.gl;\r\n\r\n    if (this.currentStencilFunc != func ||\r\n        this.currentStencilRef \t!= ref ||\r\n        this.currentStencilFuncMask != mask) {\r\n\r\n        gl.stencilFunc(func, ref, mask);\r\n\r\n        this.currentStencilFunc = func;\r\n        this.currentStencilRef = ref;\r\n        this.currentStencilFuncMask = mask;\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.setStencilOp = function(fail: number, zFail: number, zPass: number): WebGLEngine {\r\n\r\n    const gl = this.gl;\r\n\r\n    if (this.currentStencilFail != fail ||\r\n        this.currentStencilZFail != zFail ||\r\n        this.currentStencilZPass != zPass) {\r\n\r\n        gl.stencilOp(fail, zFail, zPass);\r\n\r\n        this.currentStencilFail = fail;\r\n        this.currentStencilZFail = zFail;\r\n        this.currentStencilZPass = zPass;\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.setStencilLock = function(lock: boolean): WebGLEngine {\r\n    this.stencilLocked = lock;\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.setStencilClear = function(stencil: number): WebGLEngine {\r\n\r\n    const gl = this.gl;\r\n\r\n    if (this.currentStencilClear != stencil) {\r\n        gl.clearStencil(stencil);\r\n        this.currentStencilClear = stencil;\r\n    }\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.setStencilReset = function(): WebGLEngine {\r\n\r\n    this.stencilLocked = false;\r\n    this.currentStencilMask = -1;\r\n    this.currentStencilFunc = -1;\r\n    this.currentStencilRef = -1;\r\n    this.currentStencilFuncMask = -1;\r\n    this.currentStencilFail = -1;\r\n    this.currentStencilZFail = -1;\r\n    this.currentStencilZPass = -1;\r\n    this.currentStencilClear = -1;\r\n\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.getStencilTest = function(): boolean {\r\n    return this.currentStencilTest;\r\n};\r\n",
        "import { WebGLEngine } from \"../WebGLEngine\";\r\nimport { GLQuery } from \"../GLQuery\";\r\n\r\n/**\r\n * @ignore\r\n */\r\ndeclare module \"../WebGLEngine\" {\r\n\r\n    export interface WebGLEngine {\r\n        _updateQuery(): void;\r\n        createQuery(conservative: boolean): GLQuery;\r\n        deleteQuery(query: GLQuery): WebGLEngine;\r\n        beginQuery(query: GLQuery): boolean;\r\n        endQuery(query: GLQuery): boolean;\r\n    }\r\n}\r\n\r\nWebGLEngine.prototype._updateQuery = function(): void {\r\n    this._cachedQueries.forEach((query) => {\r\n        if (query.pending && this.gl.getQueryParameter(query.handler, this.gl.QUERY_RESULT_AVAILABLE)) {\r\n            query.result = this.gl.getQueryParameter(query.handler, this.gl.QUERY_RESULT);\r\n            query.pending = false;\r\n        }\r\n    });\r\n};\r\n\r\nWebGLEngine.prototype.createQuery = function(conservative: boolean): GLQuery {\r\n    const query = new GLQuery(this.gl.createQuery(), conservative ? this.gl.ANY_SAMPLES_PASSED_CONSERVATIVE : this.gl.ANY_SAMPLES_PASSED);\r\n    this._cachedQueries.push(query);\r\n    return query;\r\n};\r\n\r\nWebGLEngine.prototype.deleteQuery = function(query: GLQuery): WebGLEngine {\r\n    const index = this._cachedQueries.indexOf(query);\r\n    this._cachedQueries.splice(index, 1);\r\n    this.gl.deleteQuery(query.handler);\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.beginQuery = function(query: GLQuery): boolean {\r\n\r\n    if (!query.pending) {\r\n\r\n        this.gl.beginQuery(query.target, query.handler);\r\n\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\nWebGLEngine.prototype.endQuery = function(query: GLQuery): boolean {\r\n\r\n    if (!query.pending) {\r\n\r\n        query.pending = true;\r\n\r\n        this.gl.endQuery(query.target);\r\n\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n};\r\n",
        "import { Nullable } from \"../types\";\r\n\r\n/**\r\n * GL查询对象\r\n * @ignore\r\n */\r\nlet queryPoolId = 0;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport class GLQuery {\r\n\r\n    public id: number;\r\n    public handler: any;\r\n    public target: number;\r\n    public pending: boolean;\r\n    public result: Nullable<boolean>;\r\n\r\n    constructor(handler: any, target: number) {\r\n        this.id = queryPoolId++;\r\n        this.handler = handler;\r\n        this.target = target;\r\n        this.pending = false;\r\n        this.result = null;\r\n    }\r\n}\r\n",
        "import { WebGLEngine } from \"../WebGLEngine\";\r\nimport {\r\n    Constants,\r\n    Texture,\r\n    Texture2D,\r\n    TextureCanvas,\r\n    TextureCube,\r\n    TextureRaw,\r\n    TextureRaw2DArray,\r\n    TextureRaw3D,\r\n    TextureRawCube,\r\n    TextureVideo\r\n} from \"..\";\r\nimport { GLTexture } from \"../GLTexture\";\r\nimport { GLTextureSource } from \"../GLTextureSource\";\r\nimport { Nullable } from \"../../types\";\r\n\r\n/**\r\n * @ignore\r\n */\r\ninterface BoundTexture {\r\n    target: number;\r\n    texture: Nullable<WebGLTexture>;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\ndeclare module \"../WebGLEngine\" {\r\n\r\n    export interface WebGLEngine {\r\n\r\n        maxTextures: number;\r\n        currentTextureUnits: number;\r\n        currentTextureSlot: number;\r\n        currentBoundTextures: {[key: number]: BoundTexture};\r\n\r\n        _setTexture(texture: Texture, slot: Nullable<number>): boolean;\r\n        _releaseTexture(texture: GLTexture): void;\r\n\r\n        _initTextureState(): WebGLEngine;\r\n        _allocateTextureUnit(): number;\r\n        _resetTextureUnits(): WebGLEngine;\r\n        _activeTexture(slot: Nullable<number>): WebGLEngine;\r\n        _bindTexture(texture: GLTexture): WebGLEngine;\r\n        _unbindTexture(): WebGLEngine;\r\n\r\n        setTexture(texture: Texture, slot: Nullable<number>): boolean;\r\n        setTexture2D(texture: Texture2D, slot: Nullable<number>): boolean;\r\n        setTextureCube(texture: TextureCube, slot: Nullable<number>): boolean;\r\n        setTextureCanvas(texture: TextureCanvas, slot: Nullable<number>): boolean;\r\n        setTextureVideo(texture: TextureVideo, slot: Nullable<number>): boolean;\r\n        setTextureRaw(texture: TextureRaw, slot: Nullable<number>): boolean;\r\n        setTextureRawCube(texture: TextureRawCube, slot: Nullable<number>): boolean;\r\n        setTextureRaw2DArray(texture: TextureRaw2DArray, slot: Nullable<number>): boolean;\r\n        setTextureRaw3D(texture: TextureRaw3D, slot: Nullable<number>): boolean;\r\n\r\n        _uploadTexture(texture: Texture): boolean;\r\n        _uploadTexture2D(texture: Texture2D): boolean;\r\n        _uploadTextureCube(texture: TextureCube): boolean;\r\n        _uploadTextureCanvas(texture: TextureCanvas): boolean;\r\n        _uploadTextureVideo(texture: TextureVideo): boolean;\r\n        _uploadTextureRaw(texture: TextureRaw): boolean;\r\n        _uploadTextureRawCube(texture: TextureRawCube): boolean;\r\n        _uploadTextureRaw2DArray(texture: TextureRaw2DArray): boolean;\r\n        _uploadTextureRaw3D(texture: TextureRaw3D): boolean;\r\n\r\n        _getTextureTarget(texture: GLTexture): number;\r\n        _getFilterParameters(texture: Texture): { min: number; mag: number };\r\n        _getTextureWrapMode(mode: number): number;\r\n        _updateTextureFilterMode(texture: Texture): void;\r\n        _updateTextureWrapMode(texture: Texture): void;\r\n    }\r\n}\r\n\r\nWebGLEngine.prototype._initTextureState = function(): WebGLEngine {\r\n    this.maxTextures = this.caps.maxCombinedTexturesImageUnits;\r\n    this.currentTextureSlot = 0;\r\n    this.currentBoundTextures = {};\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype._allocateTextureUnit = function(): number {\r\n    let textureUnit = this.currentTextureUnits;\r\n    if (textureUnit >= this.maxTextures) {\r\n        console.warn(`${textureUnit} 纹理单元大于 ${this.maxTextures}!`);\r\n    }\r\n\r\n    this.currentTextureUnits += 1;\r\n    return textureUnit;\r\n};\r\n\r\nWebGLEngine.prototype._resetTextureUnits = function(): WebGLEngine {\r\n    this.currentTextureUnits = 0;\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype._activeTexture = function(slot: Nullable<number> = null): WebGLEngine {\r\n\r\n    let webGLSlot: number;\r\n    if (!slot) {\r\n        webGLSlot = this.gl.TEXTURE0 + this.maxTextures - 1;\r\n    }\r\n    else {\r\n        webGLSlot = this.gl.TEXTURE0 + slot;\r\n    }\r\n\r\n    if (this.currentTextureSlot != webGLSlot) {\r\n        this.gl.activeTexture(webGLSlot);\r\n        this.currentTextureSlot = webGLSlot;\r\n    }\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype._bindTexture = function(texture: GLTexture): WebGLEngine {\r\n\r\n    let target = this._getTextureTarget(texture);\r\n\r\n    let boundTexture = this.currentBoundTextures[this.currentTextureSlot];\r\n    if (!boundTexture) {\r\n        boundTexture = {\r\n            target: -1,\r\n            texture: null\r\n        };\r\n        this.currentBoundTextures[this.currentTextureSlot] = boundTexture;\r\n    }\r\n\r\n    if (boundTexture.target != target || boundTexture.texture != texture._glTexture) {\r\n        this.gl.bindTexture(target, texture._glTexture);\r\n\r\n        boundTexture.target = target;\r\n        boundTexture.texture = texture._glTexture;\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype._unbindTexture = function(): WebGLEngine {\r\n\r\n    const boundTexture = this.currentBoundTextures[ this.currentTextureSlot ];\r\n\r\n    if (boundTexture && boundTexture.texture) {\r\n\r\n        this.gl.bindTexture(boundTexture.target, null);\r\n\r\n        boundTexture.target = -1;\r\n        boundTexture.texture = null;\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype._setTexture = function(texture: Texture, slot: Nullable<number>): boolean {\r\n\r\n    if (texture.type == Constants.FloatType && !this.caps.textureFloatLinearFiltering) {\r\n        texture.filter = Constants.NearestNearestFilter;\r\n    } else if (texture.type == Constants.HalfFloatType && !this.caps.textureHalfFloatLinearFiltering) {\r\n        texture.filter = Constants.NearestNearestFilter;\r\n    }\r\n    if (texture.type == Constants.FloatType && !this.caps.textureFloat) {\r\n        texture.type = Constants.UnsignedIntType;\r\n    }\r\n\r\n    if (texture instanceof TextureRawCube) {\r\n        return this.setTextureRawCube(texture, slot);\r\n    }\r\n    else if (texture instanceof TextureRaw3D) {\r\n        return this.setTextureRaw3D(texture, slot);\r\n    }\r\n    else if (texture instanceof TextureRaw2DArray) {\r\n        return this.setTextureRaw2DArray(texture, slot);\r\n    }\r\n    else if (texture instanceof TextureRaw) {\r\n        return this.setTextureRaw(texture, slot);\r\n    }\r\n    else if (texture instanceof TextureCube) {\r\n        return this.setTextureCube(texture, slot);\r\n    }\r\n    else if (texture instanceof TextureCanvas) {\r\n        return this.setTextureCanvas(texture, slot);\r\n    }\r\n    else if (texture instanceof TextureVideo) {\r\n        return this.setTextureVideo(texture, slot);\r\n    }\r\n    else if (texture instanceof Texture2D) {\r\n        return this.setTexture2D(texture, slot);\r\n    }\r\n    else {\r\n        return this.setTexture(texture, slot);\r\n    }\r\n};\r\n\r\nWebGLEngine.prototype._releaseTexture = function(texture: GLTexture): void {\r\n\r\n};\r\n\r\nWebGLEngine.prototype.setTexture = function(texture: Texture, slot: Nullable<number>): boolean {\r\n    if (!texture.glTexture) {\r\n        texture.glTexture = new GLTexture(this, GLTextureSource.Raw);\r\n        texture.glTexture.baseWidth = texture.width;\r\n        texture.glTexture.baseHeight = texture.height;\r\n        texture.glTexture.width = texture.width;\r\n        texture.glTexture.height = texture.height;\r\n        texture.glTexture.isCompression = texture.compression;\r\n        texture.glTexture.format = texture.format;\r\n        texture.glTexture.type = texture.type;\r\n    }\r\n    if (!texture.glTexture._glTexture) {\r\n        texture.glTexture._glTexture = this.gl.createTexture();\r\n    }\r\n\r\n    this._activeTexture(slot);\r\n    this._bindTexture(texture.glTexture);\r\n\r\n    if (texture.glTexture._version != texture.version) {\r\n        return this._uploadTexture(texture);\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nWebGLEngine.prototype.setTexture2D = function(texture: Texture2D, slot: Nullable<number>): boolean {\r\n    if (!texture.glTexture) {\r\n        texture.glTexture = new GLTexture(this, GLTextureSource.Url);\r\n        texture.glTexture.baseWidth = texture.width;\r\n        texture.glTexture.baseHeight = texture.height;\r\n        texture.glTexture.width = texture.width;\r\n        texture.glTexture.height = texture.height;\r\n        texture.glTexture.isCompression = texture.compression;\r\n        texture.glTexture.format = texture.format;\r\n        texture.glTexture.type = texture.type;\r\n    }\r\n    if (!texture.glTexture._glTexture) {\r\n        texture.glTexture._glTexture = this.gl.createTexture();\r\n    }\r\n\r\n    this._activeTexture(slot);\r\n    this._bindTexture(texture.glTexture);\r\n\r\n    if (texture.glTexture._version != texture.version) {\r\n        return this._uploadTexture2D(texture);\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nWebGLEngine.prototype.setTextureCube = function(texture: TextureCube, slot: Nullable<number>): boolean {\r\n    if (!texture.glTexture) {\r\n        texture.glTexture = new GLTexture(this, GLTextureSource.Cube);\r\n        texture.glTexture.baseWidth = texture.width;\r\n        texture.glTexture.baseHeight = texture.height;\r\n        texture.glTexture.width = texture.width;\r\n        texture.glTexture.height = texture.height;\r\n        texture.glTexture.isCompression = texture.compression;\r\n        texture.glTexture.isCube = true;\r\n        texture.glTexture.format = texture.format;\r\n        texture.glTexture.type = texture.type;\r\n    }\r\n    if (!texture.glTexture._glTexture) {\r\n        texture.glTexture._glTexture = this.gl.createTexture();\r\n    }\r\n\r\n    this._activeTexture(slot);\r\n    this._bindTexture(texture.glTexture);\r\n\r\n    if (texture.glTexture._version != texture.version) {\r\n        return this._uploadTextureCube(texture);\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nWebGLEngine.prototype.setTextureCanvas = function(texture: TextureCanvas, slot: Nullable<number>): boolean {\r\n    if (!texture.glTexture) {\r\n        texture.glTexture = new GLTexture(this, GLTextureSource.Dynamic);\r\n        texture.glTexture.baseWidth = texture.width;\r\n        texture.glTexture.baseHeight = texture.height;\r\n        texture.glTexture.width = texture.width;\r\n        texture.glTexture.height = texture.height;\r\n        texture.glTexture.isCompression = texture.compression;\r\n        texture.glTexture.format = texture.format;\r\n        texture.glTexture.type = texture.type;\r\n    }\r\n    if (!texture.glTexture._glTexture) {\r\n        texture.glTexture._glTexture = this.gl.createTexture();\r\n    }\r\n\r\n    this._activeTexture(slot);\r\n    this._bindTexture(texture.glTexture);\r\n\r\n    if (texture.glTexture._version != texture.version) {\r\n        return this._uploadTextureCanvas(texture);\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nWebGLEngine.prototype.setTextureVideo = function(texture: TextureVideo, slot: Nullable<number>): boolean {\r\n    if (!texture.glTexture) {\r\n        texture.glTexture = new GLTexture(this, GLTextureSource.Dynamic);\r\n        texture.glTexture.baseWidth = texture.width;\r\n        texture.glTexture.baseHeight = texture.height;\r\n        texture.glTexture.width = texture.width;\r\n        texture.glTexture.height = texture.height;\r\n        texture.glTexture.isCompression = texture.compression;\r\n        texture.glTexture.format = texture.format;\r\n        texture.glTexture.type = texture.type;\r\n    }\r\n    if (!texture.glTexture._glTexture) {\r\n        texture.glTexture._glTexture = this.gl.createTexture();\r\n    }\r\n\r\n    this._activeTexture(slot);\r\n    this._bindTexture(texture.glTexture);\r\n\r\n    if (texture.glTexture._version != texture.version) {\r\n        return this._uploadTextureVideo(texture);\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nWebGLEngine.prototype.setTextureRaw = function(texture: TextureRaw, slot: Nullable<number>): boolean {\r\n    if (!texture.glTexture) {\r\n        texture.glTexture = new GLTexture(this, GLTextureSource.Raw);\r\n        texture.glTexture.baseWidth = texture.width;\r\n        texture.glTexture.baseHeight = texture.height;\r\n        texture.glTexture.width = texture.width;\r\n        texture.glTexture.height = texture.height;\r\n        texture.glTexture.isCompression = texture.compression;\r\n        texture.glTexture.format = texture.format;\r\n        texture.glTexture.type = texture.type;\r\n    }\r\n    if (!texture.glTexture._glTexture) {\r\n        texture.glTexture._glTexture = this.gl.createTexture();\r\n    }\r\n\r\n    this._activeTexture(slot);\r\n    this._bindTexture(texture.glTexture);\r\n\r\n    if (texture.glTexture._version != texture.version) {\r\n        return this._uploadTextureRaw(texture);\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nWebGLEngine.prototype.setTextureRawCube = function(texture: TextureRawCube, slot: Nullable<number>): boolean {\r\n    if (!texture.glTexture) {\r\n        texture.glTexture = new GLTexture(this, GLTextureSource.CubeRaw);\r\n        texture.glTexture.baseWidth = texture.width;\r\n        texture.glTexture.baseHeight = texture.height;\r\n        texture.glTexture.width = texture.width;\r\n        texture.glTexture.height = texture.height;\r\n        texture.glTexture.isCompression = texture.compression;\r\n        texture.glTexture.isCube = true;\r\n        texture.glTexture.format = texture.format;\r\n        texture.glTexture.type = texture.type;\r\n    }\r\n    if (!texture.glTexture._glTexture) {\r\n        texture.glTexture._glTexture = this.gl.createTexture();\r\n    }\r\n\r\n    this._activeTexture(slot);\r\n    this._bindTexture(texture.glTexture);\r\n\r\n    if (texture.glTexture._version != texture.version) {\r\n        return this._uploadTextureRawCube(texture);\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nWebGLEngine.prototype.setTextureRaw2DArray = function(texture: TextureRaw2DArray, slot: Nullable<number>): boolean {\r\n    if (!texture.glTexture) {\r\n        texture.glTexture = new GLTexture(this, GLTextureSource.Raw2DArray);\r\n        texture.glTexture.baseWidth = texture.width;\r\n        texture.glTexture.baseHeight = texture.height;\r\n        texture.glTexture.baseDepth = texture.depth;\r\n        texture.glTexture.width = texture.width;\r\n        texture.glTexture.height = texture.height;\r\n        texture.glTexture.depth = texture.depth;\r\n        texture.glTexture.isCompression = texture.compression;\r\n        texture.glTexture.is2DArray = true;\r\n        texture.glTexture.format = texture.format;\r\n        texture.glTexture.type = texture.type;\r\n    }\r\n    if (!texture.glTexture._glTexture) {\r\n        texture.glTexture._glTexture = this.gl.createTexture();\r\n    }\r\n\r\n    this._activeTexture(slot);\r\n    this._bindTexture(texture.glTexture);\r\n\r\n    if (texture.glTexture._version != texture.version) {\r\n        return this._uploadTextureRaw2DArray(texture);\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nWebGLEngine.prototype.setTextureRaw3D = function(texture: TextureRaw3D, slot: Nullable<number>): boolean {\r\n    if (!texture.glTexture) {\r\n        texture.glTexture = new GLTexture(this, GLTextureSource.Raw3D);\r\n        texture.glTexture.baseWidth = texture.width;\r\n        texture.glTexture.baseHeight = texture.height;\r\n        texture.glTexture.baseDepth = texture.depth;\r\n        texture.glTexture.width = texture.width;\r\n        texture.glTexture.height = texture.height;\r\n        texture.glTexture.depth = texture.depth;\r\n        texture.glTexture.isCompression = texture.compression;\r\n        texture.glTexture.is3D = true;\r\n        texture.glTexture.format = texture.format;\r\n        texture.glTexture.type = texture.type;\r\n    }\r\n    if (!texture.glTexture._glTexture) {\r\n        texture.glTexture._glTexture = this.gl.createTexture();\r\n    }\r\n\r\n    this._activeTexture(slot);\r\n    this._bindTexture(texture.glTexture);\r\n\r\n    if (texture.glTexture._version != texture.version) {\r\n        return this._uploadTextureRaw3D(texture);\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nWebGLEngine.prototype._uploadTexture = function(texture: Texture): boolean {\r\n\r\n    const gl = this.gl;\r\n    const glTex = texture.glTexture;\r\n\r\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\r\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\r\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\r\n\r\n    this._updateTextureFilterMode(texture);\r\n    this._updateTextureWrapMode(texture);\r\n\r\n    const internalSizedFomat = this._getRGBABufferInternalSizedFormat(texture.type, texture.format);\r\n    const internalFormat = this._getInternalFormat(texture.format);\r\n    const textureType = this._getWebGLTextureType(texture.type);\r\n\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalSizedFomat, glTex!.width, glTex!.height, 0, internalFormat, textureType, null);\r\n\r\n    if (texture.generateMipmaps) {\r\n        gl.generateMipmap(gl.TEXTURE_2D);\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nWebGLEngine.prototype._uploadTexture2D = function(texture: Texture2D): boolean {\r\n\r\n    const gl = this.gl;\r\n    const glTex = texture.glTexture;\r\n\r\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\r\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\r\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\r\n\r\n    this._updateTextureFilterMode(texture);\r\n    this._updateTextureWrapMode(texture);\r\n\r\n    const internalSizedFomat = this._getRGBABufferInternalSizedFormat(texture.type, texture.format);\r\n    const internalFormat = this._getInternalFormat(texture.format);\r\n    const textureType = this._getWebGLTextureType(texture.type);\r\n\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalSizedFomat, internalFormat, textureType, texture.buffer);\r\n\r\n    if (texture.mipmaps.length > 0) {\r\n        for (let i = 0, n = texture.mipmaps.length; i < n; ++i) {\r\n            gl.texImage2D(gl.TEXTURE_2D, i + 1, internalSizedFomat, internalFormat, textureType, texture.mipmaps[i]);\r\n        }\r\n    }\r\n\r\n    if (texture.generateMipmaps) {\r\n        gl.generateMipmap(gl.TEXTURE_2D);\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nWebGLEngine.prototype._uploadTextureCube = function(texture: TextureCube): boolean {\r\n\r\n    const gl = this.gl;\r\n    const glTex = texture.glTexture;\r\n\r\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\r\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\r\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\r\n\r\n    this._updateTextureFilterMode(texture);\r\n    this._updateTextureWrapMode(texture);\r\n\r\n    const internalSizedFomat = this._getRGBABufferInternalSizedFormat(texture.type, texture.format);\r\n    const internalFormat = this._getInternalFormat(texture.format);\r\n    const textureType = this._getWebGLTextureType(texture.type);\r\n\r\n    for (let i = 0, n = texture.buffers.length; i < n; ++i) {\r\n        gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, internalSizedFomat, internalFormat, textureType, texture.buffers[i]);\r\n    }\r\n\r\n    if (texture.mipmaps.length > 0) {\r\n        for (let i = 0, n = texture.mipmaps.length; i < n; ++i) {\r\n            for (let j = 0, m = texture.mipmaps[i].length; j < m; ++j) {\r\n                gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, internalSizedFomat, internalFormat, textureType, texture.mipmaps[i][j]);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (texture.generateMipmaps) {\r\n        gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nWebGLEngine.prototype._uploadTextureCanvas = function(texture: TextureCanvas): boolean {\r\n\r\n    const gl = this.gl;\r\n    const glTex = texture.glTexture;\r\n\r\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\r\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\r\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\r\n\r\n    const internalFormat = this._getInternalFormat(texture.format);\r\n\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, internalFormat, gl.UNSIGNED_BYTE, texture.canvas);\r\n\r\n    this._updateTextureFilterMode(texture);\r\n    this._updateTextureWrapMode(texture);\r\n\r\n    if (texture.generateMipmaps) {\r\n        gl.generateMipmap(gl.TEXTURE_2D);\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nWebGLEngine.prototype._uploadTextureVideo = function(texture: TextureVideo): boolean {\r\n\r\n    const gl = this.gl;\r\n    const glTex = texture.glTexture;\r\n\r\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\r\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\r\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\r\n\r\n    const internalFormat = this._getInternalFormat(texture.format);\r\n\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, internalFormat, gl.UNSIGNED_BYTE, texture.video);\r\n\r\n    this._updateTextureFilterMode(texture);\r\n    this._updateTextureWrapMode(texture);\r\n\r\n    if (texture.generateMipmaps) {\r\n        gl.generateMipmap(gl.TEXTURE_2D);\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nWebGLEngine.prototype._uploadTextureRaw = function(texture: TextureRaw): boolean {\r\n    const gl = this.gl;\r\n    const glTex = texture.glTexture;\r\n\r\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\r\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\r\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\r\n\r\n    this._updateTextureFilterMode(texture);\r\n    this._updateTextureWrapMode(texture);\r\n\r\n    const internalSizedFomat = this._getRGBABufferInternalSizedFormat(texture.type, texture.format);\r\n    const internalFormat = this._getInternalFormat(texture.format);\r\n    const textureType = this._getWebGLTextureType(texture.type);\r\n\r\n    if (glTex!.isCompression) {\r\n        gl.compressedTexImage2D(gl.TEXTURE_2D, 0, texture.format, glTex!.width, glTex!.height, 0, texture.buffer);\r\n    }\r\n    else {\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, internalSizedFomat, glTex!.width, glTex!.height, 0, internalFormat, textureType, texture.buffer);\r\n    }\r\n\r\n    if (texture.mipmaps.length > 0) {\r\n        for (let i = 0, n = texture.mipmaps.length; i < n; ++i) {\r\n            if (glTex!.isCompression) {\r\n                gl.compressedTexImage2D(gl.TEXTURE_2D, i + 1, texture.format, texture.mipmaps[i].width, texture.mipmaps[i].height, 0, texture.mipmaps[i].buffer);\r\n            } else {\r\n                gl.texImage2D(gl.TEXTURE_2D, i + 1, internalSizedFomat, texture.mipmaps[i].width, texture.mipmaps[i].height, 0, internalFormat, textureType, texture.mipmaps[i].buffer);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (texture.generateMipmaps) {\r\n        gl.generateMipmap(gl.TEXTURE_2D);\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nWebGLEngine.prototype._uploadTextureRawCube = function(texture: TextureRawCube): boolean {\r\n\r\n    const gl = this.gl;\r\n    const glTex = texture.glTexture;\r\n\r\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\r\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\r\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\r\n\r\n    this._updateTextureFilterMode(texture);\r\n    this._updateTextureWrapMode(texture);\r\n\r\n    const internalSizedFomat = this._getRGBABufferInternalSizedFormat(texture.type, texture.format);\r\n    const internalFormat = this._getInternalFormat(texture.format);\r\n    const textureType = this._getWebGLTextureType(texture.type);\r\n\r\n    for (let i = 0, n = texture.bufferRaws.length; i < n; ++i) {\r\n        if (glTex!.isCompression) {\r\n            gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, texture.format, glTex!.width, glTex!.height, 0, texture.bufferRaws[i]);\r\n        }\r\n        else {\r\n            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, internalSizedFomat, glTex!.width, glTex!.height, 0, internalFormat, textureType, texture.bufferRaws[i]);\r\n        }\r\n    }\r\n\r\n    if (texture.mipmapRaws.length > 0) {\r\n        for (let i = 0, n = texture.mipmapRaws.length; i < n; ++i) {\r\n            for (let j = 0, m = texture.mipmapRaws[i].length; j < m; ++j) {\r\n                if (glTex!.isCompression) {\r\n                    gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, texture.format, texture.mipmapRaws[i][j].width, texture.mipmapRaws[i][j].height, 0, texture.bufferRaws[i]);\r\n                }\r\n                else {\r\n                    gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, internalSizedFomat, texture.mipmapRaws[i][j].width, texture.mipmapRaws[i][j].height, 0, internalFormat, textureType, texture.mipmapRaws[i][j].buffer);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (texture.generateMipmaps) {\r\n        gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nWebGLEngine.prototype._uploadTextureRaw2DArray = function(texture: TextureRaw2DArray): boolean {\r\n\r\n    const gl = this.gl;\r\n    const glTex = texture.glTexture;\r\n\r\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\r\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\r\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\r\n\r\n    this._updateTextureFilterMode(texture);\r\n    this._updateTextureWrapMode(texture);\r\n\r\n    const internalSizedFomat = this._getRGBABufferInternalSizedFormat(texture.type, texture.format);\r\n    const internalFormat = this._getInternalFormat(texture.format);\r\n    const textureType = this._getWebGLTextureType(texture.type);\r\n\r\n    if (glTex!.isCompression) {\r\n        gl.compressedTexImage3D(gl.TEXTURE_2D_ARRAY, 0, texture.format, glTex!.width, glTex!.height, glTex!.depth, 0, texture.buffer);\r\n    }\r\n    else {\r\n        gl.texImage3D(gl.TEXTURE_2D_ARRAY, 0, internalSizedFomat, glTex!.width, glTex!.height, glTex!.depth, 0, internalFormat, textureType, texture.buffer);\r\n    }\r\n\r\n    if (texture.mipmaps.length > 0) {\r\n        for (let i = 0, n = texture.mipmaps.length; i < n; ++i) {\r\n            if (glTex!.isCompression) {\r\n                gl.compressedTexImage3D(gl.TEXTURE_2D_ARRAY, i + 1, texture.format, texture.mipmaps[i].width, texture.mipmaps[i].height, texture.mipmaps[i].depth, 0, texture.mipmaps[i].buffer);\r\n            } else {\r\n                gl.texImage3D(gl.TEXTURE_2D_ARRAY, i + 1, internalSizedFomat, texture.mipmaps[i].width, texture.mipmaps[i].height, texture.mipmaps[i].depth, 0, internalFormat, textureType, texture.mipmaps[i].buffer);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (texture.generateMipmaps) {\r\n        gl.generateMipmap(gl.TEXTURE_2D);\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nWebGLEngine.prototype._uploadTextureRaw3D = function(texture: TextureRaw3D): boolean {\r\n\r\n    const gl = this.gl;\r\n    const glTex = texture.glTexture;\r\n\r\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\r\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\r\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\r\n\r\n    this._updateTextureFilterMode(texture);\r\n    this._updateTextureWrapMode(texture);\r\n\r\n    const internalSizedFomat = this._getRGBABufferInternalSizedFormat(texture.type, texture.format);\r\n    const internalFormat = this._getInternalFormat(texture.format);\r\n    const textureType = this._getWebGLTextureType(texture.type);\r\n\r\n    if (glTex!.isCompression) {\r\n        gl.compressedTexImage3D(gl.TEXTURE_3D, 0, texture.format, glTex!.width, glTex!.height, glTex!.depth, 0, texture.buffer);\r\n    }\r\n    else {\r\n        gl.texImage3D(gl.TEXTURE_3D, 0, internalSizedFomat, glTex!.width, glTex!.height, glTex!.depth, 0, internalFormat, textureType, texture.buffer);\r\n    }\r\n\r\n    if (texture.mipmaps.length > 0) {\r\n        for (let i = 0, n = texture.mipmaps.length; i < n; ++i) {\r\n            if (glTex!.isCompression) {\r\n                gl.compressedTexImage3D(gl.TEXTURE_3D, i + 1, texture.format, texture.mipmaps[i].width, texture.mipmaps[i].height, texture.mipmaps[i].depth, 0, texture.mipmaps[i].buffer);\r\n            } else {\r\n                gl.texImage3D(gl.TEXTURE_3D, i + 1, internalSizedFomat, texture.mipmaps[i].width, texture.mipmaps[i].height, texture.mipmaps[i].depth, 0, internalFormat, textureType, texture.mipmaps[i].buffer);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (texture.generateMipmaps) {\r\n        gl.generateMipmap(gl.TEXTURE_2D);\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nWebGLEngine.prototype._getTextureTarget = function(texture: GLTexture): number {\r\n\r\n    let target;\r\n    switch (texture._source) {\r\n        case GLTextureSource.Depth:\r\n        case GLTextureSource.Url:\r\n        case GLTextureSource.Raw:\r\n        case GLTextureSource.Dynamic:\r\n            target = this.gl.TEXTURE_2D;\r\n            break;\r\n        case GLTextureSource.Raw3D:\r\n            target = this.gl.TEXTURE_3D;\r\n            break;\r\n        case GLTextureSource.Raw2DArray:\r\n            target = this.gl.TEXTURE_2D_ARRAY;\r\n            break;\r\n        case GLTextureSource.Cube:\r\n        case GLTextureSource.CubeRaw:\r\n            target = this.gl.TEXTURE_CUBE_MAP;\r\n            break;\r\n        default:\r\n            target = this.gl.TEXTURE_2D;\r\n            break;\r\n    }\r\n    return target;\r\n};\r\n\r\nWebGLEngine.prototype._getFilterParameters = function(texture: Texture): { min: number; mag: number } {\r\n\r\n    const gl = this.gl;\r\n\r\n    const generateMipMaps = texture.generateMipmaps;\r\n\r\n    var magFilter = gl.NEAREST;\r\n    var minFilter = gl.NEAREST;\r\n\r\n    switch (texture.filter) {\r\n        case Constants.LinearLinearMipNearestFilter:\r\n            magFilter = gl.LINEAR;\r\n            if (generateMipMaps) {\r\n                minFilter = gl.LINEAR_MIPMAP_NEAREST;\r\n            } else {\r\n                minFilter = gl.LINEAR;\r\n            }\r\n            break;\r\n        case Constants.LinearLinearMipLinearFilter:\r\n            magFilter = gl.LINEAR;\r\n            if (generateMipMaps) {\r\n                minFilter = gl.LINEAR_MIPMAP_LINEAR;\r\n            } else {\r\n                minFilter = gl.LINEAR;\r\n            }\r\n            break;\r\n        case Constants.NearestNearestMipLinearFilter:\r\n            magFilter = gl.NEAREST;\r\n            if (generateMipMaps) {\r\n                minFilter = gl.NEAREST_MIPMAP_LINEAR;\r\n            } else {\r\n                minFilter = gl.NEAREST;\r\n            }\r\n            break;\r\n        case Constants.NearestNearestMipNearestFilter:\r\n            magFilter = gl.NEAREST;\r\n            if (generateMipMaps) {\r\n                minFilter = gl.NEAREST_MIPMAP_NEAREST;\r\n            } else {\r\n                minFilter = gl.NEAREST;\r\n            }\r\n            break;\r\n        case Constants.NearestLinearMipNearestFilter:\r\n            magFilter = gl.NEAREST;\r\n            if (generateMipMaps) {\r\n                minFilter = gl.LINEAR_MIPMAP_NEAREST;\r\n            } else {\r\n                minFilter = gl.LINEAR;\r\n            }\r\n            break;\r\n        case Constants.NearestLinearMipLinearFilter:\r\n            magFilter = gl.NEAREST;\r\n            if (generateMipMaps) {\r\n                minFilter = gl.LINEAR_MIPMAP_LINEAR;\r\n            } else {\r\n                minFilter = gl.LINEAR;\r\n            }\r\n            break;\r\n        case Constants.NearestLinearFilter:\r\n            magFilter = gl.NEAREST;\r\n            minFilter = gl.LINEAR;\r\n            break;\r\n        case Constants.NearestNearestFilter:\r\n            magFilter = gl.NEAREST;\r\n            minFilter = gl.NEAREST;\r\n            break;\r\n        case Constants.LinearNearestMipNearestFilter:\r\n            magFilter = gl.LINEAR;\r\n            if (generateMipMaps) {\r\n                minFilter = gl.NEAREST_MIPMAP_NEAREST;\r\n            } else {\r\n                minFilter = gl.NEAREST;\r\n            }\r\n            break;\r\n        case Constants.LinearNearestMipLinearFilter:\r\n            magFilter = gl.LINEAR;\r\n            if (generateMipMaps) {\r\n                minFilter = gl.NEAREST_MIPMAP_LINEAR;\r\n            } else {\r\n                minFilter = gl.NEAREST;\r\n            }\r\n            break;\r\n        case Constants.LinearLinearFilter:\r\n            magFilter = gl.LINEAR;\r\n            minFilter = gl.LINEAR;\r\n            break;\r\n        case Constants.LinearNearestFilter:\r\n            magFilter = gl.LINEAR;\r\n            minFilter = gl.NEAREST;\r\n            break;\r\n    }\r\n\r\n    return {\r\n        min: minFilter,\r\n        mag: magFilter\r\n    };\r\n};\r\n\r\nWebGLEngine.prototype._getTextureWrapMode = function(mode: number): number {\r\n\r\n    const gl = this.gl;\r\n\r\n    switch (mode) {\r\n        case Constants.RepeatWrapping:\r\n            return gl.REPEAT;\r\n        case Constants.ClampToEdgeWrapping:\r\n            return gl.CLAMP_TO_EDGE;\r\n        case Constants.MirroredRepeatWrapping:\r\n            return gl.MIRRORED_REPEAT;\r\n    }\r\n    return gl.REPEAT;\r\n};\r\n\r\nWebGLEngine.prototype._updateTextureFilterMode = function(texture: Texture): void {\r\n\r\n    const gl = this.gl;\r\n\r\n    const glTexture = texture.glTexture;\r\n\r\n    const target = this._getTextureTarget(glTexture!);\r\n    const filters = this._getFilterParameters(texture);\r\n\r\n    gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, filters.mag);\r\n    gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, filters.min);\r\n};\r\n\r\nWebGLEngine.prototype._updateTextureWrapMode = function(texture: Texture): void {\r\n\r\n    const gl = this.gl;\r\n\r\n    const glTexture = texture.glTexture;\r\n\r\n    const target = this._getTextureTarget(glTexture!);\r\n\r\n    gl.texParameteri(target, gl.TEXTURE_WRAP_S, this._getTextureWrapMode(texture.wrapU));\r\n    gl.texParameteri(target, gl.TEXTURE_WRAP_T, this._getTextureWrapMode(texture.wrapV));\r\n\r\n    if (glTexture!.is3D || glTexture!.is2DArray) {\r\n        gl.texParameteri(target, gl.TEXTURE_WRAP_R, texture.wrapR);\r\n    }\r\n};\r\n",
        "import { BaseEngine } from \"./BaseEngine\";\r\nimport { Nullable } from \"../types\";\r\nimport { GLTextureSource } from \"./GLTextureSource\";\r\n\r\n/**\r\n * GL纹理对象\r\n */\r\nexport class GLTexture {\r\n\r\n    public isCube: boolean = false;\r\n    public is3D: boolean = false;\r\n    public is2DArray: boolean = false;\r\n    public isCompression: boolean = false;\r\n\r\n    public baseWidth: number = 0;\r\n    public baseHeight: number = 0;\r\n    public baseDepth: number = 0;\r\n\r\n    public width: number = 0;\r\n    public height: number = 0;\r\n    public depth: number = 0;\r\n\r\n    public format: number = -1;\r\n    public type: number = -1;\r\n\r\n    public _version: number = -1;\r\n    public _source: GLTextureSource;\r\n    public _references: number = 0;\r\n    public _engine: BaseEngine;\r\n\r\n    public _framebuffer: Nullable<WebGLFramebuffer> = null;\r\n\r\n    public _depthStencilBuffer: Nullable<GLTexture>;\r\n    public _colorBuffer: Nullable<GLTexture>;\r\n\r\n    public _MSAAFramebuffer: Nullable<WebGLFramebuffer> = null;\r\n    public _MSAARenderBuffer: Nullable<WebGLRenderbuffer> = null;\r\n\r\n    public _glTexture: Nullable<WebGLTexture> = null;\r\n    public _glRenderbuffer: Nullable<WebGLRenderbuffer> = null;\r\n\r\n    public _colorBuffers: Nullable<GLTexture[]> = null;\r\n    public _colorAttachments: Nullable<number[]> = null;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param engine\r\n     * @param source\r\n     */\r\n    constructor(engine: BaseEngine, source: GLTextureSource) {\r\n        this._engine = engine;\r\n        this._source = source;\r\n    }\r\n\r\n    /**\r\n     * 增加引用\r\n     */\r\n    public addReference(): void {\r\n        this._references++;\r\n    }\r\n\r\n    /**\r\n     * 释放\r\n     */\r\n    public dispose(): void {\r\n        this._references--;\r\n        if (this._references == 0) {\r\n            this._engine._releaseTexture(this);\r\n        }\r\n    }\r\n}\r\n",
        "export enum GLTextureSource {\r\n    /**\r\n     * The source of the texture data is unknown\r\n     */\r\n    Unknown,\r\n    /**\r\n     * Texture data comes from an URL\r\n     */\r\n    Url,\r\n    /**\r\n     * Texture data is only used for temporary storage\r\n     */\r\n    Temp,\r\n    /**\r\n     * Texture data comes from raw data (ArrayBuffer)\r\n     */\r\n    Raw,\r\n    /**\r\n     * Texture content is dynamic (video or canvas texture)\r\n     */\r\n    Dynamic,\r\n    /**\r\n     * Texture content is generated by rendering to it\r\n     */\r\n    RenderTarget,\r\n    /**\r\n     * Texture content is part of a multi render target process\r\n     */\r\n    MultiRenderTarget,\r\n    /**\r\n     * Texture data comes from a cube data file\r\n     */\r\n    Cube,\r\n    /**\r\n     * Texture data comes from a raw cube data\r\n     */\r\n    CubeRaw,\r\n    /**\r\n     * Texture content is raw 3D data\r\n     */\r\n    Raw3D,\r\n    /**\r\n     * Texture content is raw 2D array data\r\n     */\r\n    Raw2DArray,\r\n    /**\r\n     * Texture content is a depth texture\r\n     */\r\n    Depth,\r\n}\r\n",
        "import { WebGLEngine } from \"../WebGLEngine\";\r\n\r\n/**\r\n * @ignore\r\n */\r\ndeclare module \"../WebGLEngine\" {\r\n\r\n    export interface WebGLEngine {\r\n        createTransformFeedback(): WebGLTransformFeedback;\r\n        deleteTransformFeedback(glObj: WebGLTransformFeedback): WebGLEngine;\r\n        bindTransformFeedback(glObj: WebGLTransformFeedback): WebGLEngine;\r\n        beginTransformFeedback(usePoints: boolean): WebGLEngine;\r\n        endTransformFeedback(): WebGLEngine;\r\n        pauseTransformFeedback(): WebGLEngine;\r\n        resumeTransformFeedback(): WebGLEngine;\r\n        setTranformFeedbackVaryings(glProgram: WebGLProgram, varyings: string[], separate: boolean): WebGLEngine;\r\n        bindTransformFeedbackBuffer(glObj: WebGLBuffer, index: number): WebGLEngine;\r\n    }\r\n}\r\n\r\nWebGLEngine.prototype.createTransformFeedback = function(): WebGLTransformFeedback {\r\n    return this.gl.createTransformFeedback();\r\n};\r\n\r\nWebGLEngine.prototype.deleteTransformFeedback = function(glObj: WebGLTransformFeedback): WebGLEngine {\r\n    this.gl.deleteTransformFeedback(glObj);\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.bindTransformFeedback = function(glObj: WebGLTransformFeedback): WebGLEngine {\r\n    this.gl.bindTransformFeedback(this.gl.TRANSFORM_FEEDBACK, glObj);\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.beginTransformFeedback = function(usePoints: boolean = true): WebGLEngine {\r\n    this.gl.beginTransformFeedback(usePoints ? this.gl.POINTS : this.gl.TRIANGLES);\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.endTransformFeedback = function(): WebGLEngine {\r\n    this.gl.endTransformFeedback();\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.pauseTransformFeedback = function(): WebGLEngine {\r\n    this.gl.pauseTransformFeedback();\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.resumeTransformFeedback = function(): WebGLEngine {\r\n    this.gl.resumeTransformFeedback();\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.setTranformFeedbackVaryings = function(glProgram: WebGLProgram, varyings: string[], separate: boolean = false): WebGLEngine {\r\n    this.gl.transformFeedbackVaryings(glProgram, varyings, separate ? this.gl.SEPARATE_ATTRIBS : this.gl.INTERLEAVED_ATTRIBS);\r\n    return this;\r\n};\r\n\r\nWebGLEngine.prototype.bindTransformFeedbackBuffer = function(glObj: WebGLBuffer, index: number = 0): WebGLEngine {\r\n    this.gl.bindBufferBase(this.gl.TRANSFORM_FEEDBACK_BUFFER, index, glObj);\r\n    return this;\r\n};\r\n",
        "import { Texture } from \"./Texture\";\r\nimport { Nullable } from \"../../types\";\r\n\r\n/**\r\n * 2D纹理\r\n */\r\nexport class Texture2D extends Texture {\r\n\r\n    public buffer: Nullable<HTMLImageElement | ImageBitmap> = null;\r\n    public deleteBuffer: boolean = false;\r\n    public width: number;\r\n    public height: number;\r\n    public mipmaps: HTMLImageElement[] | ImageBitmap[];\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param generateMipmaps\r\n     * @param flipY\r\n     * @param buffer\r\n     * @param deleteBuffer\r\n     * @param format\r\n     * @param wrapU\r\n     * @param wrapV\r\n     */\r\n    constructor(buffer: Nullable<HTMLImageElement | ImageBitmap> = null, deleteBuffer: boolean = false, generateMipmaps: boolean = false, flipY: boolean = true,\r\n                format?: number, wrapU?: number, wrapV?: number) {\r\n        super();\r\n\r\n        this.deleteBuffer = deleteBuffer;\r\n        this.generateMipmaps = generateMipmaps;\r\n\r\n        if (format) {\r\n            this.format = format;\r\n        }\r\n\r\n        this._flipY = flipY;\r\n\r\n        if (wrapU) {\r\n            this._wrapU = wrapU;\r\n        }\r\n        if (wrapV) {\r\n            this._wrapV = wrapV;\r\n        }\r\n\r\n        if (buffer) {\r\n            this.buffer = buffer;\r\n            this.width = buffer.width;\r\n            this.height = buffer.height;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否准备好\r\n     */\r\n    public get isReady(): boolean {\r\n        return this.buffer != null && this.buffer.width > 0 && this.buffer.height > 0;\r\n    }\r\n\r\n    /**\r\n     * 更新Buffer\r\n     * @param buffer\r\n     */\r\n    public updateBuffer(buffer: HTMLImageElement | ImageBitmap): void {\r\n        this.buffer = buffer;\r\n        this.width = buffer.width;\r\n        this.height = buffer.height;\r\n        this.unpackAlignment = (this.width % 4 != 0) ? 1 : 4;\r\n        this.needsUpdate = true;\r\n    }\r\n\r\n    /**\r\n     * 更新Mipmaps\r\n     * @param buffers\r\n     */\r\n    public updateMipmaps(buffers: HTMLImageElement[] | ImageBitmap[]): void {\r\n        this.mipmaps = buffers;\r\n        this.needsUpdate = true;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): Texture2D {\r\n        return new Texture2D(this.buffer, this.deleteBuffer).copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: Texture2D): Texture2D {\r\n        super.copy(source);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 释放\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        if (this.deleteBuffer) {\r\n            delete this.buffer;\r\n        }\r\n    }\r\n}\r\n",
        "import { Texture } from \"./Texture\";\r\n\r\n/**\r\n * Canvas纹理\r\n */\r\nexport class TextureCanvas extends Texture {\r\n\r\n    public canvas: HTMLCanvasElement | OffscreenCanvas;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param options\r\n     * @param generateMipmaps\r\n     */\r\n    constructor(options: any, generateMipmaps: boolean = false) {\r\n        super();\r\n\r\n        this.generateMipmaps = generateMipmaps;\r\n\r\n        if (options.getContext) {\r\n            this.canvas = options;\r\n        }\r\n        else {\r\n            this.canvas = document.createElement(\"canvas\");\r\n\r\n            if (options.width || options.width == 0) {\r\n                this.canvas.width = options.width;\r\n                this.canvas.height = options.height;\r\n            }\r\n            else {\r\n                this.canvas.width = options;\r\n                this.canvas.height = options;\r\n            }\r\n        }\r\n    }\r\n\r\n    public get width() {\r\n        return this.canvas?.width;\r\n    }\r\n\r\n    public get height() {\r\n        return this.canvas?.height;\r\n    }\r\n\r\n    /**\r\n    * 是否准备好\r\n    */\r\n    public get isReady(): boolean {\r\n        return this.canvas != null;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): TextureCanvas {\r\n        return new TextureCanvas(this.canvas).copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: TextureCanvas): TextureCanvas {\r\n        super.copy(source);\r\n\r\n        return this;\r\n    }\r\n}\r\n",
        "import { TextureRaw } from \"./TextureRaw\";\r\nimport { Constants } from \"../Constants\";\r\nimport { Nullable } from \"../../types\";\r\n\r\n/**\r\n * 2D数组纹理\r\n */\r\nexport class TextureRaw2DArray extends TextureRaw {\r\n\r\n    public depth: number;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param data\r\n     * @param width\r\n     * @param height\r\n     * @param depth\r\n     * @param deleteBuffer\r\n     * @param generateMipmaps\r\n     * @param format\r\n     * @param type\r\n     * @param flipY\r\n     */\r\n    constructor(data: Nullable<ArrayBuffer | ArrayBufferView>, width: number, height: number, depth: number, deleteBuffer: boolean = false,\r\n                generateMipmaps: boolean = true, format: number = Constants.RGBAFormat, type: number = Constants.UnsignedByteType,\r\n                flipY: boolean = false) {\r\n        super(data, width, height, deleteBuffer, generateMipmaps, format, type, flipY);\r\n\r\n        this.depth = depth;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): TextureRaw2DArray {\r\n        return new TextureRaw2DArray(this.buffer, this.width, this.height, this.depth, this.deleteBuffer).copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: TextureRaw2DArray): TextureRaw2DArray {\r\n        super.copy(source);\r\n\r\n        return this;\r\n    }\r\n}\r\n",
        "import { TextureRaw } from \"./TextureRaw\";\r\nimport { Constants } from \"../Constants\";\r\nimport { Nullable } from \"../../types\";\r\n\r\n/**\r\n * 3D纹理\r\n */\r\nexport class TextureRaw3D extends TextureRaw {\r\n\r\n    public depth: number;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param data\r\n     * @param width\r\n     * @param height\r\n     * @param depth\r\n     * @param deleteBuffer\r\n     * @param generateMipmaps\r\n     * @param format\r\n     * @param type\r\n     * @param flipY\r\n     */\r\n    constructor(data: Nullable<ArrayBuffer | ArrayBufferView>, width: number, height: number, depth: number, deleteBuffer: boolean = false,\r\n                generateMipmaps: boolean = true, format: number = Constants.RGBAFormat, type: number = Constants.UnsignedByteType,\r\n                flipY: boolean = false) {\r\n        super(data, width, height, deleteBuffer, generateMipmaps, format, type, flipY);\r\n\r\n        this.depth = depth;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): TextureRaw3D {\r\n        return new TextureRaw3D(this.buffer, this.width, this.height, this.depth, this.deleteBuffer).copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: TextureRaw3D): TextureRaw3D {\r\n        super.copy(source);\r\n\r\n        return this;\r\n    }\r\n}\r\n",
        "import { TextureCube } from \"./TextureCube\";\r\n\r\n/**\r\n * Mipmap数据纹理\r\n */\r\nexport interface MipmapRawCubeBuffer {\r\n    buffer: ArrayBuffer | ArrayBufferView;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\n/**\r\n * 数据立方体纹理\r\n */\r\nexport class TextureRawCube extends TextureCube {\r\n\r\n    public bufferRaws: ArrayBuffer[] | ArrayBufferView[] = [];\r\n    public mipmapRaws: MipmapRawCubeBuffer[][];\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param buffers\r\n     * @param size\r\n     * @param deleteBuffer\r\n     * @param generateMipmaps\r\n     * @param flipY\r\n     * @param format\r\n     * @param wrapU\r\n     * @param wrapV\r\n     */\r\n    constructor(buffers: ArrayBuffer[] | ArrayBufferView[], size: number, deleteBuffer: boolean = false, generateMipmaps: boolean = false, flipY: boolean = false,\r\n                format?: number, wrapU?: number, wrapV?: number) {\r\n        super(null, deleteBuffer, generateMipmaps, flipY, format, wrapU, wrapV);\r\n\r\n        this.width = size;\r\n        this.height = size;\r\n        this.bufferRaws = buffers;\r\n        this.unpackAlignment = (this.width % 4 != 0) ? 1 : 4;\r\n    }\r\n\r\n    /**\r\n     * 是否准备好\r\n     */\r\n    public get isReady(): boolean {\r\n        return this.bufferRaws.length > 0;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): TextureRawCube {\r\n        return new TextureRawCube(this.bufferRaws, this.width, this.deleteBuffer).copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: TextureRawCube): TextureRawCube {\r\n        super.copy(source);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 释放\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        if (this.deleteBuffer) {\r\n            this.bufferRaws.forEach((buffer: any, index: number) => {\r\n                delete this.bufferRaws[index];\r\n            });\r\n            this.bufferRaws.length = 0;\r\n        }\r\n    }\r\n}\r\n",
        "import { Texture } from \"./Texture\";\r\nimport { Nullable } from \"../../types\";\r\n\r\n/**\r\n * 视频纹理\r\n */\r\nexport class TextureVideo extends Texture {\r\n\r\n    public autoUpdateTexture: boolean;\r\n    public autoPlay: boolean;\r\n    public loop: boolean;\r\n    public video: HTMLVideoElement;\r\n    public currentSrc: Nullable<string | string[] | HTMLVideoElement>;\r\n    public frameId: number;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param src\r\n     * @param autoplay\r\n     * @param loop\r\n     * @param generateMipMaps\r\n     * @param flip\r\n     */\r\n    constructor(src: string | string[] | HTMLVideoElement, autoplay: boolean = true, loop: boolean = true,\r\n                generateMipMaps: boolean = false, flip: boolean = false) {\r\n        super();\r\n\r\n        this.currentSrc = src;\r\n        this.video = this._getVideo(src);\r\n        this.video.autoplay = true;\r\n        this.video.loop = true;\r\n        this.video.muted = true;\r\n        this.video.setAttribute(\"playsinline\", \"\");\r\n    }\r\n\r\n    public get width() {\r\n        return this.video?.width;\r\n    }\r\n\r\n    public get height() {\r\n        return this.video?.height;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param src\r\n     * @private\r\n     */\r\n    private _getVideo(src: string | string[] | HTMLVideoElement): HTMLVideoElement {\r\n        if (src instanceof HTMLVideoElement) {\r\n            return src;\r\n        }\r\n        const video: HTMLVideoElement = document.createElement(\"video\");\r\n        if (typeof src == \"string\") {\r\n            video.src = src;\r\n        } else {\r\n            src.forEach((url) => {\r\n                const source = document.createElement(\"source\");\r\n                source.src = url;\r\n                video.appendChild(source);\r\n            });\r\n        }\r\n        return video;\r\n    }\r\n\r\n    /**\r\n     * 是否准备好\r\n     */\r\n    public get isReady(): boolean {\r\n        return this.video != null;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): TextureVideo {\r\n        return new TextureVideo(this.currentSrc!, this.autoPlay, this.loop).copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: TextureVideo): TextureVideo {\r\n        super.copy(source);\r\n\r\n        this.autoUpdateTexture = source.autoUpdateTexture;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 释放\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n\r\n        this.currentSrc = null;\r\n        this.video.pause();\r\n    }\r\n}\r\n",
        "import { IOBuffer } from \"../Libs\";\r\nimport { ColorRGB } from \"../Math/ColorRGB\";\r\nimport { ColorRGBA } from \"../Math/ColorRGBA\";\r\nimport { Vector2 } from \"../Math/Vector2\";\r\nimport { Vector3 } from \"../Math/Vector3\";\r\nimport { Vector4 } from \"../Math/Vector4\";\r\nimport { Matrix3 } from \"../Math/Matrix3\";\r\nimport { Matrix4 } from \"../Math/Matrix4\";\r\nimport { Quaternion } from \"../Math/Quaternion\";\r\nimport { Euler } from \"../Math/Euler\";\r\nimport { Box2 } from \"../Math/Box2\";\r\nimport { Box3 } from \"../Math/Box3\";\r\nimport { int } from \"../types\";\r\nimport { encode } from \"../Libs/Utf8\";\r\n\r\n/**\r\n * 二进制缓冲\r\n * @category Misc\r\n */\r\nexport class BinaryBuffer extends IOBuffer {\r\n    private _growCount: number;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param data\r\n     */\r\n    constructor(data: IOBuffer | ArrayBuffer | Float32Array | number = 1024 * 100) {\r\n        super(data);\r\n\r\n        this._growCount = 0;\r\n    }\r\n\r\n    /**\r\n     * 读取一个字符串\r\n     */\r\n    public readChars(): string {\r\n        const length = this.readUint32();\r\n        if (length > 0) {\r\n            return super.readChars(length);\r\n        }\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * 读取一个UTF8字符串\r\n     */\r\n    public readString(): string {\r\n        const length = this.readUint32();\r\n        if (length > 0) {\r\n            return this.readUtf8(length);\r\n        }\r\n        return '';\r\n    }\r\n\r\n    /**\r\n     * 读取ColorRGB\r\n     * @param obj\r\n     */\r\n    public readColorRGB(obj: ColorRGB = new ColorRGB()): ColorRGB {\r\n        obj.fromDataBuffer(this);\r\n        return obj;\r\n    }\r\n\r\n    /**\r\n     * 读取ColorRGBA\r\n     * @param obj\r\n     */\r\n    public readColorRGBA(obj: ColorRGBA = new ColorRGBA()): ColorRGBA {\r\n        obj.fromDataBuffer(this);\r\n        return obj;\r\n    }\r\n\r\n    /**\r\n     * 读取Vector2\r\n     * @param obj\r\n     */\r\n    public readVector2(obj: Vector2 = new Vector2()): Vector2 {\r\n        obj.fromDataBuffer(this);\r\n        return obj;\r\n    }\r\n\r\n    /**\r\n     * 读取Vector3\r\n     * @param obj\r\n     */\r\n    public readVector3(obj: Vector3 = new Vector3()): Vector3 {\r\n        obj.fromDataBuffer(this);\r\n        return obj;\r\n    }\r\n\r\n    /**\r\n     * 读取Vector4\r\n     * @param obj\r\n     */\r\n    public readVector4(obj: Vector4 = new Vector4()): Vector4 {\r\n        obj.fromDataBuffer(this);\r\n        return obj;\r\n    }\r\n\r\n    /**\r\n     * 读取Matrix3\r\n     * @param obj\r\n     */\r\n    public readMatrix3(obj: Matrix3 = new Matrix3()): Matrix3 {\r\n        obj.fromDataBuffer(this);\r\n        return obj;\r\n    }\r\n\r\n    /**\r\n     * 读取Matrix4\r\n     * @param obj\r\n     */\r\n    public readMatrix4(obj: Matrix4 = new Matrix4()): Matrix4 {\r\n        obj.fromDataBuffer(this);\r\n        return obj;\r\n    }\r\n\r\n    /**\r\n     * 读取Quaternion\r\n     * @param obj\r\n     */\r\n    public readQuaternion(obj: Quaternion = new Quaternion()): Quaternion {\r\n        obj.fromDataBuffer(this);\r\n        return obj;\r\n    }\r\n\r\n    /**\r\n     * 读取Euler\r\n     * @param obj\r\n     */\r\n    public readEuler(obj: Euler = new Euler()): Euler {\r\n        obj.fromDataBuffer(this);\r\n        return obj;\r\n    }\r\n\r\n    /**\r\n     * 读取dBox2\r\n     * @param obj\r\n     */\r\n    public readBox2(obj: Box2 = new Box2()): Box2 {\r\n        obj.min.fromDataBuffer(this);\r\n        obj.max.fromDataBuffer(this);\r\n        return obj;\r\n    }\r\n\r\n    /**\r\n     * 读取dBox3\r\n     * @param obj\r\n     */\r\n    public readBox3(obj: Box3 = new Box3()): Box3 {\r\n        obj.min.fromDataBuffer(this);\r\n        obj.max.fromDataBuffer(this);\r\n        return obj;\r\n    }\r\n\r\n    /**\r\n     * 写入布尔, 为真写0xff，否则写0x00，并将指针向前移动1字节。\r\n     */\r\n    public writeBoolean(value: boolean): IOBuffer {\r\n        this._growBuffer(1);\r\n        return super.writeBoolean(value);\r\n    }\r\n\r\n    /**\r\n     * 写入一个8位有符号整数，并将指针向前移动1字节。\r\n     */\r\n    public writeInt8(value: int): IOBuffer {\r\n        this._growBuffer(1);\r\n        return super.writeInt8(value);\r\n    }\r\n\r\n    /**\r\n     * 写入一个8位无符号整数，并将指针向前移动1字节。\r\n     */\r\n    public writeUint8(value: int): IOBuffer {\r\n        this._growBuffer(1);\r\n        return super.writeUint8(value);\r\n    }\r\n\r\n    /**\r\n     * 写入一个字节，并将指针向前移动1字节。\r\n     * @param value\r\n     */\r\n    public writeByte(value: int): IOBuffer {\r\n        this._growBuffer(1);\r\n        return super.writeByte(value);\r\n    }\r\n\r\n    /**\r\n     * 写入n个字节，并将指针向前移动m个字节。\r\n     */\r\n    public writeBytes(bytes: int[]): IOBuffer {\r\n        this._growBuffer(bytes.length);\r\n        return super.writeBytes(bytes);\r\n    }\r\n\r\n    /**\r\n     * 写入一个16位有符号整数，并将指针向前移动2字节。\r\n     */\r\n    public writeInt16(value: int): IOBuffer {\r\n        this._growBuffer(2);\r\n        return super.writeInt16(value);\r\n    }\r\n\r\n    /**\r\n     * 写入一个16位无符号整数，并将指针向前移动2字节。\r\n     */\r\n    public writeUint16(value: int): IOBuffer {\r\n        this._growBuffer(2);\r\n        return super.writeUint16(value);\r\n    }\r\n\r\n    /**\r\n     * 写入一个32位有符号整数，并将指针向前移动4字节。\r\n     */\r\n    public writeInt32(value: int): IOBuffer {\r\n        this._growBuffer(4);\r\n        return super.writeInt32(value);\r\n    }\r\n\r\n    /**\r\n     * 写入一个32位无符号整数，并将指针向前移动4字节。\r\n     * @param value\r\n     */\r\n    public writeUint32(value: int): IOBuffer {\r\n        this._growBuffer(4);\r\n        return super.writeUint32(value);\r\n    }\r\n\r\n    /**\r\n     * 写入一个32位浮点数，并将指针向前移动4字节。\r\n     */\r\n    public writeFloat32(value: number): IOBuffer {\r\n        this._growBuffer(4);\r\n        return super.writeFloat32(value);\r\n    }\r\n\r\n    /**\r\n     * 写入一个64位浮点数，并将指针向前移动8字节。\r\n     */\r\n    public writeFloat64(value: number): IOBuffer {\r\n        this._growBuffer(8);\r\n        return super.writeFloat64(value);\r\n    }\r\n\r\n    /**\r\n     * 写入一个字符，并将指针向前移动1字节。\r\n     */\r\n    public writeChar(str: string): IOBuffer {\r\n        this._growBuffer(1);\r\n        return super.writeChar(str);\r\n    }\r\n\r\n    /**\r\n     * 写入n个字符，并将指针向前移动n个字节。\r\n     */\r\n    public writeChars(str: string): IOBuffer {\r\n        this._growBuffer(str.length);\r\n        this.writeUint32(str.length);\r\n        return super.writeChars(str);\r\n    }\r\n\r\n    /**\r\n     * 写入UTF8字符串\r\n     * @param str\r\n     */\r\n    public writeString(str: string): IOBuffer {\r\n        const utf8 = encode(str);\r\n        this._growBuffer(utf8.length);\r\n        this.writeUint32(utf8.length);\r\n        this.writeChars(utf8);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 写入ColorRGB\r\n     * @param obj\r\n     */\r\n    public writeColorRGB(obj: ColorRGB): IOBuffer {\r\n        obj.toDataBuffer(this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 写入ColorRGBA\r\n     * @param obj\r\n     */\r\n    public writeColorRGBA(obj: ColorRGBA): IOBuffer {\r\n        obj.toDataBuffer(this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 写入Vector2\r\n     * @param obj\r\n     */\r\n    public writeVector2(obj: Vector2): IOBuffer {\r\n        obj.toDataBuffer(this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 写入Vector3\r\n     * @param obj\r\n     */\r\n    public writeVector3(obj: Vector3): IOBuffer {\r\n        obj.toDataBuffer(this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 写入Vector4\r\n     * @param obj\r\n     */\r\n    public writeVector4(obj: Vector4): IOBuffer {\r\n        obj.toDataBuffer(this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 写入Matrix3\r\n     * @param obj\r\n     */\r\n    public writeMatrix3(obj: Matrix3): IOBuffer {\r\n        obj.toDataBuffer(this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 写入Matrix4\r\n     * @param obj\r\n     */\r\n    public writeMatrix4(obj: Matrix4): IOBuffer {\r\n        obj.toDataBuffer(this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 写入Quaternion\r\n     * @param obj\r\n     */\r\n    public writeQuaternion(obj: Quaternion): IOBuffer {\r\n        obj.toDataBuffer(this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 写入Euler\r\n     * @param obj\r\n     */\r\n    public writeEuler(obj: Euler): IOBuffer {\r\n        obj.toDataBuffer(this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 写入Box2\r\n     * @param obj\r\n     */\r\n    public writeBox2(obj: Box2): IOBuffer {\r\n        obj.min.toDataBuffer(this);\r\n        obj.max.toDataBuffer(this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 写入Box3\r\n     * @param obj\r\n     */\r\n    public writeBox3(obj: Box3): IOBuffer {\r\n        obj.min.toDataBuffer(this);\r\n        obj.max.toDataBuffer(this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 内存增长\r\n     * @param byteLength\r\n     * @private\r\n     */\r\n    private _growBuffer(byteLength: number): void {\r\n        if (!this.available(byteLength)) {\r\n            this._growCount++;\r\n            const grow = Math.max(1024 * 100 * this._growCount, byteLength);\r\n            this.ensureAvailable(((byteLength < grow) ? grow : byteLength * 2));\r\n        }\r\n    }\r\n}\r\n",
        "import { Constants } from \"../Engines\";\r\n\r\n/**\r\n * 像素格式工具\r\n * @category Misc\r\n */\r\nexport abstract class PixelFormat {\r\n\r\n    /**\r\n     * 像素格式元素个数\r\n     * @param pixelFormat\r\n     */\r\n    public static formatComponentsLength(pixelFormat: number): number {\r\n        switch (pixelFormat) {\r\n            case Constants.RGBFormat:\r\n            case Constants.RGBIntegerFormat:\r\n                return 3;\r\n            case Constants.RGBAFormat:\r\n            case Constants.RGBAIntegerFormat:\r\n                return 4;\r\n            case Constants.RGFormat:\r\n            case Constants.RGIntegerFormat:\r\n            case Constants.LuminanceAlphaFormat:\r\n                return 2;\r\n            default:\r\n                return 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 压缩纹理字节大小\r\n     * @param pixelFormat\r\n     * @param width\r\n     * @param height\r\n     */\r\n    public static compressedTextureSizeInBytes(pixelFormat: number, width: number, height: number): number {\r\n        switch (pixelFormat) {\r\n            case Constants.RGB_S3TC_DXT1_Format:\r\n            case Constants.RGBA_S3TC_DXT1_Format:\r\n            case Constants.RGB_ETC1_Format:\r\n            case Constants.RGB_ETC2_Format:\r\n                return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 8;\r\n\r\n            case Constants.RGBA_S3TC_DXT3_Format:\r\n            case Constants.RGBA_S3TC_DXT5_Format:\r\n                return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;\r\n\r\n            case Constants.RGB_PVRTC_4BPPV1_Format:\r\n            case Constants.RGBA_PVRTC_4BPPV1_Format:\r\n                return Math.floor(\r\n                    (Math.max(width, 8) * Math.max(height, 8) * 4 + 7) / 8\r\n                );\r\n\r\n            case Constants.RGB_PVRTC_2BPPV1_Format:\r\n            case Constants.RGBA_PVRTC_2BPPV1_Format:\r\n                return Math.floor(\r\n                    (Math.max(width, 16) * Math.max(height, 8) * 2 + 7) / 8\r\n                );\r\n\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 纹理字节大小\r\n     * @param pixelFormat\r\n     * @param pixelDatatype\r\n     * @param width\r\n     * @param height\r\n     */\r\n    public static textureSizeInBytes(pixelFormat: number, pixelDatatype: number, width: number, height: number): number {\r\n        let componentsLength = PixelFormat.formatComponentsLength(pixelFormat);\r\n        if (PixelFormat.dataTypeIsPacked(pixelDatatype)) {\r\n            componentsLength = 1;\r\n        }\r\n        return (\r\n            componentsLength *\r\n            PixelFormat.dataTypeSizeInBytes(pixelDatatype) *\r\n            width *\r\n            height\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 计算字节对齐大小\r\n     * @param pixelFormat\r\n     * @param pixelDatatype\r\n     * @param width\r\n     */\r\n    public static alignmentInBytes(pixelFormat: number, pixelDatatype: number, width: number): number {\r\n        const mod = PixelFormat.textureSizeInBytes(pixelFormat, pixelDatatype, width, 1) % 4;\r\n        return mod == 0 ? 4 : mod == 2 ? 2 : 1;\r\n    }\r\n\r\n    /**\r\n     * 数据类型是否Packed\r\n     * @param pixelDatatype\r\n     */\r\n    public static dataTypeIsPacked(pixelDatatype: number): boolean {\r\n        return (\r\n            pixelDatatype == Constants.UnsignedInt248Type ||\r\n            pixelDatatype == Constants.UnsignedShort4444Type ||\r\n            pixelDatatype == Constants.UnsignedShort5551Type ||\r\n            pixelDatatype == Constants.UnsignedShort565Type\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 数据类型的字节大小\r\n     * @param pixelDatatype\r\n     */\r\n    public static dataTypeSizeInBytes(pixelDatatype: number): number {\r\n        switch (pixelDatatype) {\r\n            case Constants.ByteType:\r\n            case Constants.UnsignedByteType:\r\n                return 1;\r\n            case Constants.ShortType:\r\n            case Constants.UnsignedShortType:\r\n            case Constants.UnsignedShort4444Type:\r\n            case Constants.UnsignedShort5551Type:\r\n            case Constants.UnsignedShort565Type:\r\n            case Constants.HalfFloatType:\r\n                return 2;\r\n            case Constants.IntType:\r\n            case Constants.UnsignedIntType:\r\n            case Constants.FloatType:\r\n            case Constants.UnsignedInt248Type:\r\n                return 4;\r\n            case Constants.DoubleType:\r\n                return 8;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n",
        "import { FloatArray } from \"../types\";\r\n\r\n/**\r\n * 数组扩展工具\r\n */\r\nexport abstract class ArrayUtils {\r\n\r\n    /**\r\n     * 数组最小值\r\n     * @param array\r\n     */\r\n    public static arrayMin(array: FloatArray) {\r\n\r\n        if (array.length == 0) { return Infinity; }\r\n\r\n        let min = array[0];\r\n        for (let i = 1, l = array.length; i < l; ++i) {\r\n            if (array[i] < min) { min = array[i]; }\r\n        }\r\n\r\n        return min;\r\n    }\r\n\r\n    /**\r\n     * 数组最大值\r\n     * @param array\r\n     */\r\n    public static arrayMax(array: FloatArray) {\r\n\r\n        if (array.length == 0) { return -Infinity; }\r\n\r\n        let max = array[0];\r\n        for (let i = 1, l = array.length; i < l; ++i) {\r\n            if (array[i] > max) { max = array[i]; }\r\n        }\r\n\r\n        return max;\r\n    }\r\n}\r\n",
        "export * from \"./BufferAttribute\";\r\nexport * from \"./BufferAttributeKind\";\r\nexport * from \"./BufferAttrUpdate\";\r\nexport * from \"./Geometry\";\r\nexport * from \"./GeometryDrawRange\";\r\nexport * from \"./GeometryGroup\";\r\nexport * from \"./InstancedBufferAttribute\";\r\nexport * from \"./InstancedGeometry\";\r\nexport * from \"./InstancedInterleavedBuffer\";\r\nexport * from \"./InstancedInterleavedBufferAttribute\";\r\nexport * from \"./InterleavedBuffer\";\r\nexport * from \"./InterleavedBufferAttribute\";\r\nexport * from \"./InterleavedBufferClone\";\r\nexport * from \"./TypeBufferAttribute\";\r\n\r\nexport * from \"./Builder/BoxGeometryBuilder\"\r\n",
        "import { BufferAttribute } from \"./BufferAttribute\";\r\nimport { BufferArray } from \"../../types\";\r\n\r\n/**\r\n * 实例属性Buffer\r\n */\r\nexport class InstancedBufferAttribute extends BufferAttribute {\r\n\r\n    public meshPerAttribute: number;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param array\r\n     * @param itemSize\r\n     * @param normalized\r\n     * @param meshPerAttribute\r\n     */\r\n    constructor(array: BufferArray, itemSize: number, normalized: boolean = false, meshPerAttribute: number = 1) {\r\n        super(array, itemSize, normalized);\r\n\r\n        this.meshPerAttribute = meshPerAttribute;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): InstancedBufferAttribute {\r\n        return new InstancedBufferAttribute(this.array, this.itemSize, this.normalized, this.meshPerAttribute).copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: InstancedBufferAttribute): InstancedBufferAttribute {\r\n        super.copy(source);\r\n        return this;\r\n    }\r\n}\r\n",
        "import { Geometry } from \"./Geometry\";\r\nimport { Nullable } from \"../../types\";\r\n\r\n/**\r\n * 实例几何对象\r\n */\r\nexport class InstancedBufferGeometry extends Geometry {\r\n\r\n    public instanceCount: Nullable<number>;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.instanceCount = null;\r\n    }\r\n}\r\n",
        "import { InterleavedBuffer } from \"./InterleavedBuffer\";\r\nimport { BufferArray } from \"../../types\";\r\n\r\n/**\r\n * 实例交叉Buffer\r\n */\r\nexport class InstancedInterleavedBuffer extends InterleavedBuffer {\r\n\r\n    public meshPerAttribute: number;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param array\r\n     * @param stride\r\n     * @param meshPerAttribute\r\n     */\r\n    constructor(array: BufferArray, stride: number, meshPerAttribute: number = 1) {\r\n        super(array, stride);\r\n\r\n        this.meshPerAttribute = meshPerAttribute;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): InstancedInterleavedBuffer {\r\n        return new InstancedInterleavedBuffer(this.array, this.stride, this.meshPerAttribute).copy(this);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: InstancedInterleavedBuffer): InstancedInterleavedBuffer {\r\n        super.copy(source);\r\n        return this;\r\n    }\r\n}\r\n",
        "import { InterleavedBufferAttribute } from \"./InterleavedBufferAttribute\";\r\nimport { InstancedInterleavedBuffer } from \"./InstancedInterleavedBuffer\";\r\nimport { int } from \"../../types\";\r\n\r\n/**\r\n * 实例交叉Buffer属性\r\n */\r\nexport class InstancedInterleavedBufferAttribute extends InterleavedBufferAttribute {\r\n\r\n    public meshPerAttribute: number;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param interleavedBuffer\r\n     * @param itemSize\r\n     * @param offset\r\n     * @param normalized\r\n     * @param meshPerAttribute\r\n     */\r\n    constructor(interleavedBuffer: InstancedInterleavedBuffer, itemSize: int, offset: int, normalized: boolean = false, meshPerAttribute: number = 1) {\r\n        super(interleavedBuffer, itemSize, offset, normalized);\r\n\r\n        this.meshPerAttribute = meshPerAttribute;\r\n    }\r\n\r\n    /**\r\n     * 克隆\r\n     */\r\n    public clone(): InstancedInterleavedBufferAttribute {\r\n        return new InstancedInterleavedBufferAttribute(<InstancedInterleavedBuffer>this.buffer, this.itemSize, this.offset, this.normalized, this.meshPerAttribute);\r\n    }\r\n\r\n    /**\r\n     * 复制\r\n     * @param source\r\n     */\r\n    public copy(source: InstancedInterleavedBufferAttribute): InstancedInterleavedBufferAttribute {\r\n        super.copy(source);\r\n        return this;\r\n    }\r\n}\r\n",
        "import { Vector3 } from \"../../../Math\";\r\nimport { Geometry } from \"../Geometry\";\r\nimport { Float32BufferAttribute } from \"../TypeBufferAttribute\";\r\n\r\nexport abstract class BoxGeometryBuilder {\r\n    /**\r\n     * 生成立方体\r\n     * @param width\r\n     * @param height\r\n     * @param depth\r\n     * @param widthSegments\r\n     * @param heightSegments\r\n     * @param depthSegments\r\n     * @param normalizeUV\r\n     */\r\n    public static build(width: number = 1, height: number = 1, depth: number = 1, widthSegments: number = 1, heightSegments: number = 1, depthSegments: number = 1, normalizeUV: boolean = true): Geometry {\r\n\r\n        const indices = new Array<number>();\r\n        const vertices = new Array<number>();\r\n        const normals = new Array<number>();\r\n        const uvs = new Array<number>();\r\n\r\n        let numberOfVertices = 0;\r\n        let groupStart = 0;\r\n        let geometry = new Geometry();\r\n\r\n        function buildPlane(u: number, v: number, w: number, udir: number, vdir: number, width: number, height: number, depth: number, gridX: number, gridY: number, materialIndex: number) {\r\n            let segmentWidth = width / gridX;\r\n            let segmentHeight = height / gridY;\r\n\r\n            let widthHalf = width / 2;\r\n            let heightHalf = height / 2;\r\n            let depthHalf = depth / 2;\r\n\r\n            let gridX1 = gridX + 1;\r\n            let gridY1 = gridY + 1;\r\n\r\n            let vertexCounter = 0;\r\n            let groupCount = 0;\r\n\r\n            let ix;\r\n            let iy;\r\n\r\n            let vector = new Vector3();\r\n\r\n            // generate vertices, normals and uvs\r\n\r\n            for (iy = 0; iy < gridY1; iy++) {\r\n                let y = iy * segmentHeight - heightHalf;\r\n\r\n                for (ix = 0; ix < gridX1; ix++) {\r\n                    let x = ix * segmentWidth - widthHalf;\r\n\r\n                    // set values to correct vector component\r\n\r\n                    vector.setComponent(u, x * udir);\r\n                    vector.setComponent(v, y * vdir);\r\n                    vector.setComponent(w, depthHalf);\r\n\r\n                    // now apply vector to vertex buffer\r\n\r\n                    vertices.push(vector.x, vector.y, vector.z);\r\n\r\n                    // set values to correct vector component\r\n\r\n                    vector.setComponent(u, 0);\r\n                    vector.setComponent(v, 0);\r\n                    vector.setComponent(w, depth > 0 ? 1 : -1);\r\n\r\n                    // now apply vector to normal buffer\r\n\r\n                    normals.push(vector.x, vector.y, vector.z);\r\n\r\n                    // uvs\r\n\r\n                    uvs.push(ix / gridX);\r\n                    uvs.push(1 - (iy / gridY));\r\n\r\n                    if (normalizeUV == false) {\r\n                        uvs[uvs.length - 2] = uvs[uvs.length - 2] * width;\r\n                        uvs[uvs.length - 1] = uvs[uvs.length - 1] * height;\r\n                    }\r\n\r\n                    // counters\r\n\r\n                    vertexCounter += 1;\r\n                }\r\n            }\r\n\r\n            // indices\r\n\r\n            // 1. you need three indices to draw a single face\r\n            // 2. a single segment consists of two faces\r\n            // 3. so we need to generate six (2*3) indices per segment\r\n\r\n            for (iy = 0; iy < gridY; iy++) {\r\n                for (ix = 0; ix < gridX; ix++) {\r\n                    let a = numberOfVertices + ix + gridX1 * iy;\r\n                    let b = numberOfVertices + ix + gridX1 * (iy + 1);\r\n                    let c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);\r\n                    let d = numberOfVertices + (ix + 1) + gridX1 * iy;\r\n\r\n                    // faces\r\n\r\n                    indices.push(a, b, d);\r\n                    indices.push(b, c, d);\r\n\r\n                    // increase counter\r\n\r\n                    groupCount += 6;\r\n                }\r\n            }\r\n\r\n            // add a group to the geometry. this will ensure multi material support\r\n\r\n            geometry.addGroup(groupStart, groupCount, materialIndex);\r\n\r\n            // calculate new start value for groups\r\n\r\n            groupStart += groupCount;\r\n\r\n            // update total number of vertices\r\n\r\n            numberOfVertices += vertexCounter;\r\n        }\r\n\r\n        buildPlane(2, 1, 0, -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px\r\n        buildPlane(2, 1, 0, 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx\r\n        buildPlane(0, 2, 1, 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py\r\n        buildPlane(0, 2, 1, 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny\r\n        buildPlane(0, 1, 2, 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz\r\n        buildPlane(0, 1, 2, -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz\r\n\r\n        geometry.setIndexAttrbute(indices);\r\n        geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\r\n        geometry.setAttribute('normal', new Float32BufferAttribute(normals, 3));\r\n        geometry.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\r\n\r\n        return geometry;\r\n    }\r\n}\r\n",
        "export * from \"./Light\";\r\nexport * from \"./AmbientLight\";\r\nexport * from \"./DirectionalLight\";\r\nexport * from \"./HemisphereLight\";\r\nexport * from \"./PointLight\";\r\nexport * from \"./RectAreaLight\";\r\nexport * from \"./SpotLight\";\r\n",
        "import { Light } from \"./Light\";\r\nimport { AbstractObject, Scene } from \"../Scene\";\r\nimport { Nullable } from \"../types\";\r\n\r\n/**\r\n * 环境光\r\n */\r\nexport class AmbientLight extends Light {\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param scene\r\n     * @param parent\r\n     * @param name\r\n     */\r\n    constructor(scene: Scene, parent: Nullable<AbstractObject> = null, name: string = '') {\r\n        super(scene, parent, name);\r\n    }\r\n\r\n    public set castShadow(value: boolean) {\r\n        this._castShadow = false;\r\n    }\r\n}\r\n",
        "import { Light } from \"./Light\";\r\nimport { Vector3 } from \"../Math\";\r\nimport { AbstractObject, Scene } from \"../Scene\";\r\nimport { Nullable } from \"../types\";\r\n\r\n/**\r\n * 方向光\r\n */\r\nexport class DirectionalLight extends Light {\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public _target: Vector3;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param scene\r\n     * @param parent\r\n     * @param name\r\n     */\r\n    constructor(scene: Scene, parent: Nullable<AbstractObject> = null, name: string = '') {\r\n        super(scene, parent, name);\r\n\r\n        this._position.set(0, 1, 0);\r\n        this._target = new Vector3();\r\n    }\r\n\r\n    /**\r\n     * 目标位置\r\n     */\r\n    public get target() {\r\n        return this._target;\r\n    }\r\n    public set target(value) {\r\n        this._target.copy(value);\r\n    }\r\n}\r\n",
        "import { Light } from \"./Light\";\r\nimport { ColorRGB } from \"../Math\";\r\nimport { AbstractObject, Scene } from \"../Scene\";\r\nimport { Nullable } from \"../types\";\r\n\r\n/**\r\n * 半球光\r\n */\r\nexport class HemisphereLight extends Light {\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _groundColor: ColorRGB  = new ColorRGB(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param scene\r\n     * @param parent\r\n     * @param name\r\n     */\r\n    constructor(scene: Scene, parent: Nullable<AbstractObject> = null, name: string = '') {\r\n        super(scene, parent, name);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public set castShadow(value: boolean) {\r\n        this._castShadow = false;\r\n    }\r\n\r\n    /**\r\n     * 地面光颜色\r\n     */\r\n    public get groundColor() {\r\n        return this._groundColor;\r\n    }\r\n    public set groundColor(value) {\r\n        this._groundColor.copy(value);\r\n    }\r\n}\r\n",
        "import { Light } from \"./Light\";\r\nimport { AbstractObject, Scene } from \"../Scene\";\r\nimport { Nullable } from \"../types\";\r\n\r\n/**\r\n * 点光源\r\n */\r\nexport class PointLight extends Light {\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _distance: number = 0;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _decay: number = 1;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param scene\r\n     * @param parent\r\n     * @param name\r\n     */\r\n    constructor(scene: Scene, parent: Nullable<AbstractObject> = null, name: string = '') {\r\n        super(scene, parent, name);\r\n    }\r\n\r\n    /**\r\n     * 强度\r\n     */\r\n    public get intensity() {\r\n        return this._intensity * 4 * Math.PI;\r\n    }\r\n    public set intensity(value: number) {\r\n        this._intensity = value / (4 * Math.PI);\r\n    }\r\n\r\n    /**\r\n     * 距离\r\n     */\r\n    public get distance() {\r\n        return this._distance;\r\n    }\r\n    public set distance(value: number) {\r\n        this._distance = value;\r\n    }\r\n\r\n    /**\r\n     * 衰减\r\n     */\r\n    public get decay() {\r\n        return this._decay;\r\n    }\r\n    public set decay(value: number) {\r\n        this._decay = value;\r\n    }\r\n}\r\n",
        "import { Light } from \"./Light\";\r\nimport { AbstractObject, Scene } from \"../Scene\";\r\nimport { Nullable } from \"../types\";\r\n\r\n/**\r\n * 区域光\r\n */\r\nexport class RectAreaLight extends Light {\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _width: number = 10;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _height: number = 10;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param scene\r\n     * @param parent\r\n     * @param name\r\n     */\r\n    constructor(scene: Scene, parent: Nullable<AbstractObject> = null, name: string = '') {\r\n        super(scene, parent, name);\r\n    }\r\n\r\n    public get width() {\r\n        return this._width;\r\n    }\r\n    public set width(value) {\r\n        if (this._width != value) {\r\n            this._width = value;\r\n        }\r\n    }\r\n\r\n    public get height() {\r\n        return this._height;\r\n    }\r\n    public set height(value) {\r\n        if (this._height != value) {\r\n            this._height = value;\r\n        }\r\n    }\r\n}\r\n",
        "import { Light } from \"./Light\";\r\nimport { Vector3 } from \"../Math\";\r\nimport { AbstractObject, Scene } from \"../Scene\";\r\nimport { Nullable } from \"../types\";\r\n\r\n/**\r\n * 探照灯\r\n */\r\nexport class SpotLight extends Light {\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _target: Vector3;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _distance: number = 0;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _angle: number = Math.PI / 3;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _penumbra: number = 0;\r\n    /**\r\n     * @ignore\r\n     */\r\n    protected _decay: number = 1;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param scene\r\n     * @param parent\r\n     * @param name\r\n     */\r\n    constructor(scene: Scene, parent: Nullable<AbstractObject> = null, name: string = '') {\r\n        super(scene, parent, name);\r\n\r\n        this._target = new Vector3();\r\n        this._position.set(0, 1, 0);\r\n    }\r\n\r\n    /**\r\n     * 强度\r\n     */\r\n    public get intensity() {\r\n        return this._intensity * 4 * Math.PI;\r\n    }\r\n    public set intensity(value: number) {\r\n        this._intensity = value / Math.PI;\r\n    }\r\n\r\n    /**\r\n     * 距离\r\n     */\r\n    public get distance() {\r\n        return this._distance;\r\n    }\r\n    public set distance(value: number) {\r\n        this._distance = value;\r\n    }\r\n\r\n    /**\r\n     * 角度\r\n     */\r\n    public get angle() {\r\n        return this._angle;\r\n    }\r\n    public set angle(value: number) {\r\n        this._angle = value;\r\n    }\r\n\r\n    /**\r\n     * 半影区\r\n     */\r\n    public get penumbra() {\r\n        return this._penumbra;\r\n    }\r\n    public set penumbra(value: number) {\r\n        this._penumbra = value;\r\n    }\r\n\r\n    /**\r\n     * 衰减\r\n     */\r\n    public get decay() {\r\n        return this._decay;\r\n    }\r\n    public set decay(value: number) {\r\n        this._decay = value;\r\n    }\r\n}\r\n",
        "export * from \"./LineBasicMaterial\";\r\nexport * from \"./LineDashedMaterial\";\r\nexport * from \"./LineFlatMaterial\";\r\nexport * from \"./Material\";\r\nexport * from \"./MeshBasicMaterial\";\r\nexport * from \"./MeshDepthMaterial\";\r\nexport * from \"./MeshDistanceMaterial\";\r\nexport * from \"./MeshLambertMaterial\";\r\nexport * from \"./MeshMatcapMaterial\";\r\nexport * from \"./MeshNormalMaterial\";\r\nexport * from \"./MeshPhongMaterial\";\r\nexport * from \"./MeshPhysicalMaterial\";\r\nexport * from \"./MeshStandardMaterial\";\r\nexport * from \"./MeshToonMaterial\";\r\nexport * from \"./MultiMaterial\";\r\nexport * from \"./PointsMaterial\";\r\nexport * from \"./ShaderMaterial\";\r\nexport * from \"./ShadowMaterial\";\r\nexport * from \"./SpriteMaterial\";\r\n",
        "import { Material } from \"./Material\";\r\n\r\nexport class LineBasicMaterial extends Material {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public clone(): LineBasicMaterial {\r\n        return new LineBasicMaterial().copy(this);\r\n    }\r\n}\r\n",
        "import { Material } from \"./Material\";\r\n\r\nexport class LineDashedMaterial extends Material {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public clone(): LineDashedMaterial {\r\n        return new LineDashedMaterial().copy(this);\r\n    }\r\n}\r\n",
        "import { Material } from \"./Material\";\r\n\r\nexport class LineFlatMaterial extends Material {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public clone(): LineFlatMaterial {\r\n        return new LineFlatMaterial().copy(this);\r\n    }\r\n}\r\n",
        "import { Material } from \"./Material\";\r\n\r\nexport class MeshDepthMaterial extends Material {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public clone(): MeshDepthMaterial {\r\n        return new MeshDepthMaterial().copy(this);\r\n    }\r\n}\r\n",
        "import { Material } from \"./Material\";\r\n\r\nexport class MeshDistanceMaterial extends Material {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public clone(): MeshDistanceMaterial {\r\n        return new MeshDistanceMaterial().copy(this);\r\n    }\r\n}\r\n",
        "import { Material } from \"./Material\";\r\n\r\nexport class MeshLambertMaterial extends Material {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public clone(): MeshLambertMaterial {\r\n        return new MeshLambertMaterial().copy(this);\r\n    }\r\n}\r\n",
        "import { Material } from \"./Material\";\r\n\r\nexport class MeshMatcapMaterial extends Material {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public clone(): MeshMatcapMaterial {\r\n        return new MeshMatcapMaterial().copy(this);\r\n    }\r\n}\r\n",
        "import { Material } from \"./Material\";\r\n\r\nexport class MeshNormalMaterial extends Material {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public clone(): MeshNormalMaterial {\r\n        return new MeshNormalMaterial().copy(this);\r\n    }\r\n}\r\n",
        "import { Material } from \"./Material\";\r\n\r\nexport class MeshPhongMaterial extends Material {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public clone(): MeshPhongMaterial {\r\n        return new MeshPhongMaterial().copy(this);\r\n    }\r\n}\r\n",
        "import { Material } from \"./Material\";\r\n\r\nexport class MeshPhysicalMaterial extends Material {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public clone(): MeshPhysicalMaterial {\r\n        return new MeshPhysicalMaterial().copy(this);\r\n    }\r\n}\r\n",
        "import { Material } from \"./Material\";\r\n\r\nexport class MeshStandardMaterial extends Material {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public clone(): MeshStandardMaterial {\r\n        return new MeshStandardMaterial().copy(this);\r\n    }\r\n}\r\n",
        "import { Material } from \"./Material\";\r\n\r\nexport class MeshToonMaterial extends Material {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public clone(): MeshToonMaterial {\r\n        return new MeshToonMaterial().copy(this);\r\n    }\r\n}\r\n",
        "import { Material } from \"./Material\";\r\n\r\nexport class MultiMaterial extends Material {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public clone(): MultiMaterial {\r\n        return new MultiMaterial().copy(this);\r\n    }\r\n}\r\n",
        "import { Material } from \"./Material\";\r\n\r\nexport class PointsMaterial extends Material {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public clone(): PointsMaterial {\r\n        return new PointsMaterial().copy(this);\r\n    }\r\n}\r\n",
        "import { Material } from \"./Material\";\r\n\r\nexport class ShaderMaterial extends Material {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public clone(): ShaderMaterial {\r\n        return new ShaderMaterial().copy(this);\r\n    }\r\n}\r\n",
        "import { Material } from \"./Material\";\r\n\r\nexport class ShadowMaterial extends Material {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public clone(): ShadowMaterial {\r\n        return new ShadowMaterial().copy(this);\r\n    }\r\n}\r\n",
        "import { Material } from \"./Material\";\r\n\r\nexport class SpriteMaterial extends Material {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public clone(): SpriteMaterial {\r\n        return new SpriteMaterial().copy(this);\r\n    }\r\n}\r\n",
        "export * from \"./AbstractObject\";\r\nexport * from \"./TransformObject\";\r\nexport * from \"./Renderable\";\r\nexport * from \"./Mesh\";\r\nexport * from \"./Scene\";\r\n",
        "import { AbstractObject } from \"./AbstractObject\";\r\nimport { Camera } from \"../Cameras\";\r\nimport { Light } from \"../Lights/Light\";\r\nimport { Mesh } from \"./Mesh\";\r\nimport { TransformObject } from \"./TransformObject\";\r\nimport { ColorRGB, ColorRGBA, Frustum } from \"../Math\";\r\nimport { Constants } from \"../Engines\";\r\nimport { Nullable } from \"../types\";\r\nimport { BaseEngine } from \"../Engines/BaseEngine\";\r\nimport { EventDispatcher } from \"../Events\";\r\nimport { IRenderingManagerAutoClearSetup, RenderingManager } from \"./Rendering/RenderingManager\";\r\nimport { ProjectingManager } from \"./Projecting/ProjectingManager\";\r\n\r\n/**\r\n * 场景\r\n */\r\nexport class Scene extends EventDispatcher {\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _rootNodes: AbstractObject[] = new Array<AbstractObject>();\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _cameras: Camera[] = new Array<Camera>();\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _lights: Light[] = new Array<Light>();\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _meshes: Mesh[] = new Array<Mesh>();\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _transforms: TransformObject[] = new Array<TransformObject>();\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _autoClear: boolean = true;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _autoClearDepth: boolean = true;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _autoClearStencil: boolean = true;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _clearColor: ColorRGBA = new ColorRGBA(0.2, 0.2, 0.3, 1.0);\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _fogMode: number = Constants.NoFog;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _fogColor: ColorRGB = new ColorRGB(0.2, 0.2, 0.3);\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _fogDensity: number = 0.1;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _fogStart: number = 1.0;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _fogEnd: number = 1000.0;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _activeCamera: Nullable<Camera> = null;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _renderingManager: RenderingManager;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _projectingManager: ProjectingManager;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private readonly _engine: BaseEngine;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param engine\r\n     */\r\n    constructor(engine: BaseEngine) {\r\n        super();\r\n\r\n        this._engine = engine;\r\n\r\n        this._renderingManager = new RenderingManager(this);\r\n        this._projectingManager = new ProjectingManager(this);\r\n    }\r\n\r\n    /**\r\n     * 释放\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n    }\r\n\r\n    /**\r\n     * 引擎\r\n     */\r\n    public get engine() {\r\n        return this._engine;\r\n    }\r\n\r\n    /**\r\n     * 根节点列表\r\n     */\r\n    public get rootNodes() {\r\n        return this._rootNodes;\r\n    }\r\n\r\n    /**\r\n     * 摄像机列表\r\n     */\r\n    public get cameras() {\r\n        return this._cameras;\r\n    }\r\n\r\n    /**\r\n     * 灯光列表\r\n     */\r\n    public get lights() {\r\n        return this._lights;\r\n    }\r\n\r\n    /**\r\n     * 网格列表\r\n     */\r\n    public get meshes() {\r\n        return this._meshes;\r\n    }\r\n\r\n    /**\r\n     * Transform节点列表\r\n     */\r\n    public get transforms() {\r\n        return this._transforms;\r\n    }\r\n\r\n    /**\r\n     * 渲染管理\r\n     */\r\n    public get renderingManager() {\r\n        return this._renderingManager;\r\n    }\r\n\r\n    /**\r\n     * 激活管理\r\n     */\r\n    public get projectingManager() {\r\n        return this._projectingManager;\r\n    }\r\n\r\n    /**\r\n     * 自动清除\r\n     */\r\n    public get autoClear() {\r\n        return this._autoClear;\r\n    }\r\n    public set autoClear(value) {\r\n        this._autoClear = value;\r\n    }\r\n\r\n    /**\r\n     * 自动清除深度\r\n     */\r\n    public get autoClearDepth() {\r\n        return this._autoClearDepth;\r\n    }\r\n    public set autoClearDepth(value) {\r\n        this._autoClearDepth = value;\r\n    }\r\n\r\n    /**\r\n     * 自动清除模板\r\n     */\r\n    public get autoClearStencil() {\r\n        return this._autoClearStencil;\r\n    }\r\n    public set autoClearStencil(value) {\r\n        this._autoClearStencil = value;\r\n    }\r\n\r\n    /**\r\n     * 清除颜色\r\n     */\r\n    public get clearColor() {\r\n        return this._clearColor;\r\n    }\r\n    public set clearColor(value) {\r\n        this._clearColor.copy(value);\r\n    }\r\n\r\n    /**\r\n     * 雾化模式\r\n     */\r\n    public get fogMode() {\r\n        return this._fogMode;\r\n    }\r\n    public set fogMode(value) {\r\n        this._fogMode = value;\r\n    }\r\n\r\n    /**\r\n     * 雾化颜色\r\n     */\r\n    public get fogColor() {\r\n        return this._fogColor;\r\n    }\r\n    public set fogColor(value) {\r\n        this._fogColor.copy(value);\r\n    }\r\n\r\n    /**\r\n     * 雾化强度\r\n     */\r\n    public get fogDensity() {\r\n        return this._fogDensity;\r\n    }\r\n    public set fogDensity(value) {\r\n        this._fogDensity = value;\r\n    }\r\n\r\n    /**\r\n     * 雾化开始距离\r\n     */\r\n    public get fogStart() {\r\n        return this._fogStart;\r\n    }\r\n    public set fogStart(value) {\r\n        this._fogStart = value;\r\n    }\r\n\r\n    /**\r\n     * 雾化结束距离\r\n     */\r\n    public get fogEnd() {\r\n        return this._fogEnd;\r\n    }\r\n    public set fogEnd(value) {\r\n        this._fogEnd = value;\r\n    }\r\n\r\n    /**\r\n     * 激活的摄像机\r\n     */\r\n    public get activeCamera(): Nullable<Camera> {\r\n        return this._activeCamera;\r\n    }\r\n    public set activeCamera(value: Nullable<Camera>) {\r\n        if (value == this._activeCamera) {\r\n            return;\r\n        }\r\n        this._activeCamera = value;\r\n    }\r\n\r\n    /**\r\n     * 添加Mesh\r\n     * @param mesh\r\n     * @param recursive\r\n     */\r\n    public addMesh(mesh: Mesh, recursive = false): void {\r\n\r\n        this._meshes.push(mesh);\r\n\r\n        mesh._resyncLightSources();\r\n\r\n        if (!mesh.parent) {\r\n            mesh._addToSceneRootNodes();\r\n        }\r\n\r\n        mesh.onAddScene();\r\n\r\n        if (recursive) {\r\n            mesh.traverse((subMesh: AbstractObject) => {\r\n                if (subMesh instanceof Mesh) {\r\n                    this.addMesh(subMesh);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 删除Mesh\r\n     * @param mesh\r\n     * @param recursive\r\n     */\r\n    public removeMesh(mesh: Mesh, recursive = false): void {\r\n\r\n        const index = this._meshes.indexOf(mesh);\r\n        if (index != -1) {\r\n            this._meshes[index] = this._meshes[this._meshes.length - 1];\r\n            this._meshes.pop();\r\n\r\n            if (!mesh.parent) {\r\n                mesh._removeFromSceneRootNodes();\r\n            }\r\n\r\n            mesh.onRemoveScene();\r\n        }\r\n\r\n        if (recursive) {\r\n            mesh.traverse((subMesh: AbstractObject) => {\r\n                if (subMesh instanceof Mesh) {\r\n                    this.removeMesh(subMesh);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 添加Transform\r\n     * @param transform\r\n     * @param recursive\r\n     */\r\n    public addTransform(transform: TransformObject, recursive = false) {\r\n\r\n        this._transforms.push(transform);\r\n\r\n        if (!transform.parent) {\r\n            transform._addToSceneRootNodes();\r\n        }\r\n\r\n        transform.onAddScene();\r\n\r\n        if (recursive) {\r\n            transform.traverse((subMesh: AbstractObject) => {\r\n                if (subMesh instanceof TransformObject) {\r\n                    this.addTransform(subMesh);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 删除Transform\r\n     * @param transform\r\n     * @param recursive\r\n     */\r\n    public removeTransform(transform: TransformObject, recursive = false) {\r\n\r\n        const index = this._transforms.indexOf(transform);\r\n        if (index != -1) {\r\n            this._transforms[index] = this._transforms[this._transforms.length - 1];\r\n            this._transforms.pop();\r\n\r\n            if (!transform.parent) {\r\n                transform._removeFromSceneRootNodes();\r\n            }\r\n\r\n            transform.onRemoveScene();\r\n        }\r\n\r\n        if (recursive) {\r\n            transform.traverse((subMesh: AbstractObject) => {\r\n                if (subMesh instanceof TransformObject) {\r\n                    this.removeTransform(subMesh);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 添加Light\r\n     * @param newLight\r\n     */\r\n    public addLight(newLight: Light): void {\r\n\r\n        this._lights.push(newLight);\r\n\r\n        if (!newLight.parent) {\r\n            newLight._addToSceneRootNodes();\r\n        }\r\n\r\n        newLight.onAddScene();\r\n\r\n        for (const mesh of this._meshes) {\r\n            mesh._resyncLightSource(newLight);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 删除Light\r\n     * @param toRemove\r\n     */\r\n    public removeLight(toRemove: Light): number {\r\n        const index = this._lights.indexOf(toRemove);\r\n        if (index != -1) {\r\n\r\n            for (const mesh of this._meshes) {\r\n                mesh._removeLightSource(toRemove, false);\r\n            }\r\n\r\n            this._lights.splice(index, 1);\r\n\r\n            if (!toRemove.parent) {\r\n                toRemove._removeFromSceneRootNodes();\r\n            }\r\n\r\n            toRemove.onRemoveScene();\r\n        }\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * 添加Camera\r\n     * @param newCamera\r\n     */\r\n    public addCamera(newCamera: Camera): void {\r\n\r\n        this._cameras.push(newCamera);\r\n\r\n        if (!newCamera.parent) {\r\n            newCamera._addToSceneRootNodes();\r\n        }\r\n\r\n        newCamera.onAddScene();\r\n    }\r\n\r\n    /**\r\n     * 删除Camera\r\n     * @param toRemove\r\n     */\r\n    public removeCamera(toRemove: Camera): number {\r\n        const index = this._cameras.indexOf(toRemove);\r\n        if (index != -1) {\r\n\r\n            this._cameras.splice(index, 1);\r\n            if (!toRemove.parent) {\r\n                toRemove._removeFromSceneRootNodes();\r\n            }\r\n\r\n            toRemove.onRemoveScene();\r\n        }\r\n\r\n        if (this._activeCamera == toRemove) {\r\n            if (this._cameras.length > 0) {\r\n                this._activeCamera = this._cameras[0];\r\n            } else {\r\n                this._activeCamera = null;\r\n            }\r\n        }\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * 设置激活相机的ID\r\n     * @param id\r\n     */\r\n    public setActiveCameraByID(id: number): Nullable<Camera> {\r\n        const camera = this.getCameraByID(id);\r\n\r\n        if (camera) {\r\n            this.activeCamera = camera;\r\n            return camera;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 从列表获取指定属性名和值的对象\r\n     * @param list\r\n     * @param property\r\n     * @param value\r\n     */\r\n    public getAbstractObjectListByProperty(list: AbstractObject[], property: string, value: any): Nullable<AbstractObject> {\r\n        for (let index = 0; index < list.length; index++) {\r\n            if (list[index][property] == value) {\r\n                return list[index];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 获取指定ID的摄像机\r\n     * @param id\r\n     */\r\n    public getCameraByID(id: number): Nullable<Camera> {\r\n        return this.getAbstractObjectListByProperty(this._cameras, 'id', id) as Camera;\r\n    }\r\n\r\n    /**\r\n     * 获取指定UUID的摄像机\r\n     * @param uuid\r\n     */\r\n    public getCameraByUUID(uuid: string): Nullable<Camera> {\r\n        return this.getAbstractObjectListByProperty(this._cameras, 'uuid', uuid) as Camera;\r\n    }\r\n\r\n    /**\r\n     * 获取指定名称的摄像机\r\n     * @param name\r\n     */\r\n    public getCameraByName(name: string): Nullable<Camera> {\r\n        return this.getAbstractObjectListByProperty(this._cameras, 'name', name) as Camera;\r\n    }\r\n\r\n    /**\r\n     * 获取指定ID的灯光\r\n     * @param id\r\n     */\r\n    public getLightByID(id: number): Nullable<Light> {\r\n        return this.getAbstractObjectListByProperty(this._lights, 'id', id) as Light;\r\n    }\r\n\r\n    /**\r\n     * 获取指定UUID的灯光\r\n     * @param uuid\r\n     */\r\n    public getLightByUUID(uuid: string): Nullable<Light> {\r\n        return this.getAbstractObjectListByProperty(this._lights, 'uuid', uuid) as Light;\r\n    }\r\n\r\n    /**\r\n     * 获取指定名称的灯光\r\n     * @param name\r\n     */\r\n    public getLightByName(name: string): Nullable<Light> {\r\n        return this.getAbstractObjectListByProperty(this._lights, 'name', name) as Light;\r\n    }\r\n\r\n    /**\r\n     * 获取指定ID的Mesh\r\n     * @param id\r\n     */\r\n    public getMeshByID(id: number): Nullable<Mesh> {\r\n        return this.getAbstractObjectListByProperty(this._meshes, 'id', id) as Mesh;\r\n    }\r\n\r\n    /**\r\n     * 获取指定UUID的Mesh\r\n     * @param uuid\r\n     */\r\n    public getMeshByUUID(uuid: string): Nullable<Mesh> {\r\n        return this.getAbstractObjectListByProperty(this._meshes, 'uuid', uuid) as Mesh;\r\n    }\r\n\r\n    /**\r\n     * 获取指定名称的Mesh\r\n     * @param name\r\n     */\r\n    public getMeshByName(name: string): Nullable<Mesh> {\r\n        return this.getAbstractObjectListByProperty(this._meshes, 'name', name) as Mesh;\r\n    }\r\n\r\n    /**\r\n     * 获取指定ID的TransformObject\r\n     * @param id\r\n     */\r\n    public getTransformByID(id: number): Nullable<TransformObject> {\r\n        return this.getAbstractObjectListByProperty(this._transforms, 'id', id) as TransformObject;\r\n    }\r\n\r\n    /**\r\n     * 获取指定UUID的TransformObject\r\n     * @param uuid\r\n     */\r\n    public getTransformByUUID(uuid: string): Nullable<TransformObject> {\r\n        return this.getAbstractObjectListByProperty(this._transforms, 'uuid', uuid) as TransformObject;\r\n    }\r\n\r\n    /**\r\n     * 获取指定名称的TransformObject\r\n     * @param name\r\n     */\r\n    public getTransformByName(name: string): Nullable<TransformObject> {\r\n        return this.getAbstractObjectListByProperty(this._transforms, 'name', name) as TransformObject;\r\n    }\r\n\r\n    /**\r\n     * 获取指定ID的节点\r\n     * @param id\r\n     */\r\n    public getNodeByID(id: number): Nullable<AbstractObject> {\r\n        const camera = this.getCameraByID(id);\r\n        if (!camera) {\r\n            return camera;\r\n        }\r\n\r\n        const light = this.getLightByID(id);\r\n        if (!light) {\r\n            return light;\r\n        }\r\n\r\n        const mesh = this.getMeshByID(id);\r\n        if (!mesh) {\r\n            return mesh;\r\n        }\r\n\r\n        const transform = this.getTransformByID(id);\r\n        if (!transform) {\r\n            return transform;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 获取指定UUID的节点\r\n     * @param uuid\r\n     */\r\n    public getNodeByUUID(uuid: string): Nullable<AbstractObject> {\r\n        const camera = this.getCameraByUUID(uuid);\r\n        if (!camera) {\r\n            return camera;\r\n        }\r\n\r\n        const light = this.getLightByUUID(uuid);\r\n        if (!light) {\r\n            return light;\r\n        }\r\n\r\n        const mesh = this.getMeshByUUID(uuid);\r\n        if (!mesh) {\r\n            return mesh;\r\n        }\r\n\r\n        const transform = this.getTransformByUUID(uuid);\r\n        if (!transform) {\r\n            return transform;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 获取指定名称的节点\r\n     * @param name\r\n     */\r\n    public getNodeByName(name: string): Nullable<AbstractObject> {\r\n        const camera = this.getCameraByName(name);\r\n        if (!camera) {\r\n            return camera;\r\n        }\r\n\r\n        const light = this.getLightByName(name);\r\n        if (!light) {\r\n            return light;\r\n        }\r\n\r\n        const mesh = this.getMeshByName(name);\r\n        if (!mesh) {\r\n            return mesh;\r\n        }\r\n\r\n        const transform = this.getTransformByName(name);\r\n        if (!transform) {\r\n            return transform;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 获取场景渲染组的深度模板清除配置\r\n     * @param index\r\n     */\r\n    public getAutoClearDepthStencilSetup(index: number): IRenderingManagerAutoClearSetup {\r\n        return this._renderingManager.getAutoClearDepthStencilSetup(index);\r\n    }\r\n\r\n    /**\r\n     * 渲染\r\n     */\r\n    public render(): void {\r\n\r\n        this._processTransform();\r\n\r\n        if (this._autoClear || this._autoClearDepth || this._autoClearStencil) {\r\n\r\n            if (this._autoClear) {\r\n                this._engine.setColorStateClear(this._clearColor.r, this._clearColor.g, this._clearColor.b, this._clearColor.a, false);\r\n            }\r\n\r\n            this._engine.clear(this._autoClear, this._autoClearDepth, this._autoClearStencil);\r\n        }\r\n\r\n        if (this._activeCamera) {\r\n\r\n            this._bindFrameBuffer();\r\n\r\n            this._processSubCameras(this._activeCamera);\r\n        }\r\n    }\r\n\r\n    private _processTransform(): void {\r\n        this._transforms.forEach((obj) => {\r\n            obj.updateMatrixWorld();\r\n        });\r\n    }\r\n\r\n    private _processSubCameras(camera: Camera): void {\r\n        this._renderForCamera(camera);\r\n    }\r\n\r\n    private _renderForCamera(camera: Camera): void {\r\n\r\n        this._engine.setViewport(camera.viewport);\r\n\r\n        this._projectingManager.reset();\r\n        this._renderingManager.reset();\r\n\r\n        this._projectingManager.project(camera);\r\n        this._renderingManager.render();\r\n    }\r\n\r\n    private _bindFrameBuffer() {\r\n        this._engine.restoreDefaultFramebuffer();\r\n    }\r\n\r\n    // private _evaluateMesh(mesh: Mesh): void {\r\n    //\r\n    //     mesh.updateMatrixWorld();\r\n    //\r\n    //     const activeCamera = this._activeCamera!;\r\n    //     const testVisible = mesh.visibleLayers.test(activeCamera.visibleLayers);\r\n    //\r\n    //     if (mesh.visible && testVisible && (!mesh.frustumCulled || this._frustum.intersectsObject(mesh))) {\r\n    //\r\n    //         mesh.modelViewMatrix.multiplyMatrices(activeCamera.matrixWorldInverse, mesh.matrixWorld);\r\n    //         mesh.modelViewProjectionMatrix.multiplyMatrices(activeCamera.projectionMatrix, mesh.modelViewMatrix);\r\n    //\r\n    //         mesh.normalMatrix.getNormalMatrix(mesh.modelViewMatrix);\r\n    //\r\n    //         mesh.transModelViewMatrix.copy(mesh.modelViewMatrix).transpose();\r\n    //         mesh.transModelViewMatrixInverse.getInverse(mesh.transModelViewMatrix);\r\n    //\r\n    //         mesh.modelViewRelativeMatrix.copy(mesh.modelViewMatrix);\r\n    //         mesh.modelViewRelativeMatrix.setPositionXYZ(0 , 0, 0);\r\n    //         mesh.modelViewProjectionRelativeMatrix.multiplyMatrices(activeCamera.projectionMatrix, mesh.modelViewRelativeMatrix);\r\n    //\r\n    //         this._renderingManager.dispatch(mesh, mesh.material);\r\n    //\r\n    //     }\r\n    // }\r\n}\r\n",
        "import { Scene } from \"../Scene\";\r\nimport { Nullable } from \"../../types\";\r\nimport { Mesh } from \"../Mesh\";\r\nimport { Camera } from \"../../Cameras\";\r\nimport { RenderingGroup } from \"./RenderingGroup\";\r\nimport { IDisposable } from \"../../Misc/IDisposable\";\r\n\r\n/**\r\n * 渲染管理清除设置\r\n */\r\nexport interface IRenderingManagerAutoClearSetup {\r\n    autoClear: boolean;\r\n    clearDepth: boolean;\r\n    clearDtencil: boolean;\r\n}\r\n\r\n/**\r\n * 渲染组信息\r\n */\r\nexport class RenderingGroupInfo {\r\n    scene: Scene;\r\n    camera: Nullable<Camera>;\r\n    renderingGroupId: number;\r\n}\r\n\r\n/**\r\n * 渲染管理\r\n */\r\nexport class RenderingManager implements IDisposable {\r\n\r\n    /**\r\n     * 最大渲染组\r\n     */\r\n    public static MAX_RENDERINGGROUPS = 4;\r\n\r\n    /**\r\n     * 最小渲染组\r\n     */\r\n    public static MIN_RENDERINGGROUPS = 0;\r\n\r\n    /**\r\n     * 使用场景清除配置\r\n     */\r\n    public _useSceneAutoClearSetup = false;\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    private readonly _scene: Scene;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _renderingGroups = new Array<RenderingGroup>();\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _depthStencilBufferAlreadyCleaned: boolean;\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _autoClearDepthStencil: { [id: number]: IRenderingManagerAutoClearSetup } = {};\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _renderingGroupInfo: Nullable<RenderingGroupInfo> = new RenderingGroupInfo();\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _customOpaqueSortCompareFn: { [id: number]: Nullable<(a: Mesh, b: Mesh) => number> } = {};\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _customAlphaTestSortCompareFn: { [id: number]: Nullable<(a: Mesh, b: Mesh) => number> } = {};\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _customTransparentSortCompareFn: { [id: number]: Nullable<(a: Mesh, b: Mesh) => number> } = {};\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param scene\r\n     */\r\n    constructor(scene: Scene) {\r\n        this._scene = scene;\r\n\r\n        for (let i = RenderingManager.MIN_RENDERINGGROUPS; i < RenderingManager.MAX_RENDERINGGROUPS; i++) {\r\n            this._autoClearDepthStencil[i] = { autoClear: true, clearDepth: true, clearDtencil: true };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 释放\r\n     */\r\n    public dispose(): void {\r\n        this.freeRenderingGroups();\r\n        this._renderingGroups.length = 0;\r\n        this._renderingGroupInfo = null;\r\n    }\r\n\r\n    /**\r\n     * 重置\r\n     */\r\n    public reset(): void {\r\n        for (let index = RenderingManager.MIN_RENDERINGGROUPS; index < RenderingManager.MAX_RENDERINGGROUPS; index++) {\r\n            const renderingGroup = this._renderingGroups[index];\r\n            if (renderingGroup) {\r\n                renderingGroup.prepare();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 释放渲染组\r\n     */\r\n    public freeRenderingGroups(): void {\r\n        for (let index = RenderingManager.MIN_RENDERINGGROUPS; index < RenderingManager.MAX_RENDERINGGROUPS; index++) {\r\n            const renderingGroup = this._renderingGroups[index];\r\n            if (renderingGroup) {\r\n                renderingGroup.dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置渲染组清除设置\r\n     * @param renderingGroupId\r\n     * @param autoClearDepthStencil\r\n     * @param depth\r\n     * @param stencil\r\n     */\r\n    public setRenderingAutoClearDepthStencil(renderingGroupId: number, autoClearDepthStencil: boolean, depth = true, stencil = true): void {\r\n        this._autoClearDepthStencil[renderingGroupId] = {\r\n            autoClear: autoClearDepthStencil,\r\n            clearDepth: depth,\r\n            clearDtencil: stencil\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 设置渲染组排序函数\r\n     * @param renderingGroupId\r\n     * @param opaqueSortCompareFn\r\n     * @param alphaTestSortCompareFn\r\n     * @param transparentSortCompareFn\r\n     */\r\n    public setRenderingOrder(renderingGroupId: number,\r\n                             opaqueSortCompareFn: Nullable<(a: Mesh, b: Mesh) => number> = null,\r\n                             alphaTestSortCompareFn: Nullable<(a: Mesh, b: Mesh) => number> = null,\r\n                             transparentSortCompareFn: Nullable<(a: Mesh, b: Mesh) => number> = null) {\r\n\r\n        this._customOpaqueSortCompareFn[renderingGroupId] = opaqueSortCompareFn;\r\n        this._customAlphaTestSortCompareFn[renderingGroupId] = alphaTestSortCompareFn;\r\n        this._customTransparentSortCompareFn[renderingGroupId] = transparentSortCompareFn;\r\n\r\n        if (this._renderingGroups[renderingGroupId]) {\r\n            const group = this._renderingGroups[renderingGroupId];\r\n            group.opaqueSortCompareFn = this._customOpaqueSortCompareFn[renderingGroupId];\r\n            group.alphaTestSortCompareFn = this._customAlphaTestSortCompareFn[renderingGroupId];\r\n            group.transparentSortCompareFn = this._customTransparentSortCompareFn[renderingGroupId];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取渲染组清除配置\r\n     * @param index\r\n     */\r\n    public getAutoClearDepthStencilSetup(index: number): IRenderingManagerAutoClearSetup {\r\n        return this._autoClearDepthStencil[index];\r\n    }\r\n\r\n    /**\r\n     * 渲染\r\n     */\r\n    public render(): void {\r\n\r\n        const info = this._renderingGroupInfo!;\r\n        info.scene = this._scene;\r\n        info.camera = this._scene.activeCamera;\r\n\r\n        for (let index = RenderingManager.MIN_RENDERINGGROUPS; index < RenderingManager.MAX_RENDERINGGROUPS; index++) {\r\n\r\n            const renderingGroup = this._renderingGroups[index];\r\n            if (!renderingGroup) {\r\n                continue;\r\n            }\r\n\r\n            info.renderingGroupId = index;\r\n\r\n            const autoClear = this._useSceneAutoClearSetup ?\r\n                this._scene.getAutoClearDepthStencilSetup(index) :\r\n                this._autoClearDepthStencil[index];\r\n\r\n            if (autoClear && autoClear.autoClear) {\r\n                this._clearDepthStencilBuffer(autoClear.clearDepth, autoClear.clearDtencil);\r\n            }\r\n\r\n            renderingGroup.render();\r\n\r\n        }\r\n    }\r\n\r\n    public dispatch(mesh: Mesh): void {\r\n\r\n        const renderingGroupId = mesh.renderingGroupId || 0;\r\n\r\n        this._prepareRenderingGroup(renderingGroupId);\r\n\r\n        this._renderingGroups[renderingGroupId].dispatch(mesh);\r\n    }\r\n\r\n    /**\r\n     * 准备渲染组\r\n     * @param renderingGroupId\r\n     * @private\r\n     * @ignore\r\n     */\r\n    private _prepareRenderingGroup(renderingGroupId: number): void {\r\n        if (this._renderingGroups[renderingGroupId] === undefined) {\r\n            this._renderingGroups[renderingGroupId] = new RenderingGroup(renderingGroupId, this._scene,\r\n                this._customOpaqueSortCompareFn[renderingGroupId],\r\n                this._customAlphaTestSortCompareFn[renderingGroupId],\r\n                this._customTransparentSortCompareFn[renderingGroupId]\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清空深度和模板\r\n     * @param depth\r\n     * @param stencil\r\n     * @private\r\n     */\r\n    private _clearDepthStencilBuffer(depth = true, stencil = true): void {\r\n        if (this._depthStencilBufferAlreadyCleaned) {\r\n            return;\r\n        }\r\n\r\n        this._scene.engine.clear(false, depth, stencil);\r\n        this._depthStencilBufferAlreadyCleaned = true;\r\n    }\r\n}\r\n",
        "import { IDisposable } from \"../../Misc/IDisposable\";\r\nimport { SmartArray } from \"../../Misc/SmartArray\";\r\nimport { Mesh } from \"../Mesh\";\r\nimport { Nullable } from \"../../types\";\r\nimport { Scene } from \"../Scene\";\r\nimport { Constants } from \"../../Engines\";\r\nimport { Camera } from \"../../Cameras\";\r\nimport { Vector3 } from \"../../Math\";\r\nimport { MathTmp } from \"../../Math/MathTmp\";\r\n\r\nexport class RenderingGroup implements IDisposable {\r\n\r\n    private _scene: Scene;\r\n\r\n    private _opaqueMeshes = new SmartArray<Mesh>(256);\r\n    private _transparentMeshes = new SmartArray<Mesh>(256);\r\n    private _alphaTestMeshes = new SmartArray<Mesh>(256);\r\n    private _depthOnlyMeshes = new SmartArray<Mesh>(256);\r\n\r\n    private _opaqueSortCompareFn: Nullable<(a: Mesh, b: Mesh) => number>;\r\n    private _alphaTestSortCompareFn: Nullable<(a: Mesh, b: Mesh) => number>;\r\n    private _transparentSortCompareFn: (a: Mesh, b: Mesh) => number;\r\n\r\n    private _renderOpaque: (subMeshes: SmartArray<Mesh>) => void;\r\n    private _renderAlphaTest: (subMeshes: SmartArray<Mesh>) => void;\r\n    private _renderTransparent: (subMeshes: SmartArray<Mesh>) => void;\r\n\r\n    constructor(public index: number, scene: Scene,\r\n                opaqueSortCompareFn: Nullable<(a: Mesh, b: Mesh) => number> = null,\r\n                alphaTestSortCompareFn: Nullable<(a: Mesh, b: Mesh) => number> = null,\r\n                transparentSortCompareFn: Nullable<(a: Mesh, b: Mesh) => number> = null) {\r\n\r\n        this._scene = scene;\r\n\r\n        this.opaqueSortCompareFn = opaqueSortCompareFn;\r\n        this.alphaTestSortCompareFn = alphaTestSortCompareFn;\r\n        this.transparentSortCompareFn = transparentSortCompareFn;\r\n    }\r\n\r\n    public set opaqueSortCompareFn(value: Nullable<(a: Mesh, b: Mesh) => number>) {\r\n        this._opaqueSortCompareFn = value;\r\n        if (value) {\r\n            this._renderOpaque = this.renderOpaqueSorted;\r\n        }\r\n        else {\r\n            this._renderOpaque = RenderingGroup.renderUnsorted;\r\n        }\r\n    }\r\n\r\n    public set alphaTestSortCompareFn(value: Nullable<(a: Mesh, b: Mesh) => number>) {\r\n        this._alphaTestSortCompareFn = value;\r\n        if (value) {\r\n            this._renderAlphaTest = this.renderAlphaTestSorted;\r\n        }\r\n        else {\r\n            this._renderAlphaTest = RenderingGroup.renderUnsorted;\r\n        }\r\n    }\r\n\r\n    public set transparentSortCompareFn(value: Nullable<(a: Mesh, b: Mesh) => number>) {\r\n        if (value) {\r\n            this._transparentSortCompareFn = value;\r\n        }\r\n        else {\r\n            this._transparentSortCompareFn = RenderingGroup.defaultTransparentSortCompare;\r\n        }\r\n        this._renderTransparent = this.renderTransparentSorted;\r\n    }\r\n\r\n    public dispose() {\r\n        this._opaqueMeshes.dispose();\r\n        this._transparentMeshes.dispose();\r\n        this._alphaTestMeshes.dispose();\r\n        this._depthOnlyMeshes.dispose();\r\n    }\r\n\r\n    public prepare() {\r\n        this._opaqueMeshes.reset();\r\n        this._transparentMeshes.reset();\r\n        this._alphaTestMeshes.reset();\r\n        this._depthOnlyMeshes.reset();\r\n    }\r\n\r\n    public dispatch(mesh: Mesh): void {\r\n\r\n        const material = mesh.material;\r\n\r\n        if (material.needAlphaBlending()) {\r\n            this._transparentMeshes.push(mesh);\r\n        }\r\n        else if (material.needAlphaTesting()) {\r\n            this._alphaTestMeshes.push(mesh);\r\n        }\r\n        else {\r\n            this._opaqueMeshes.push(mesh);\r\n        }\r\n\r\n        mesh._renderingGroup = this;\r\n    }\r\n\r\n    public render(): void {\r\n\r\n        const engine = this._scene.engine;\r\n\r\n        if (this._depthOnlyMeshes.length !== 0) {\r\n            engine.setColorStateMask(false);\r\n            this._renderAlphaTest(this._depthOnlyMeshes);\r\n            engine.setColorStateMask(true);\r\n        }\r\n\r\n        if (this._opaqueMeshes.length !== 0) {\r\n            this._renderOpaque(this._opaqueMeshes);\r\n        }\r\n\r\n        if (this._alphaTestMeshes.length !== 0) {\r\n            this._renderAlphaTest(this._alphaTestMeshes);\r\n        }\r\n\r\n        const stencilState = engine.getStencilTest();\r\n        engine.setStencilTest(false);\r\n\r\n        if (this._transparentMeshes.length !== 0) {\r\n            engine.setStencilTest(stencilState);\r\n            this._renderTransparent(this._transparentMeshes);\r\n            engine.setBlending(Constants.NoBlending);\r\n        }\r\n\r\n        engine.setStencilTest(false);\r\n\r\n        engine.setStencilTest(stencilState);\r\n    }\r\n\r\n    private renderOpaqueSorted(meshs: SmartArray<Mesh>): void {\r\n        return RenderingGroup.renderSorted(meshs, this._opaqueSortCompareFn, this._scene.activeCamera, false);\r\n    }\r\n\r\n    private renderAlphaTestSorted(meshs: SmartArray<Mesh>): void {\r\n        return RenderingGroup.renderSorted(meshs, this._alphaTestSortCompareFn, this._scene.activeCamera, false);\r\n    }\r\n\r\n    private renderTransparentSorted(meshs: SmartArray<Mesh>): void {\r\n        return RenderingGroup.renderSorted(meshs, this._transparentSortCompareFn, this._scene.activeCamera, true);\r\n    }\r\n\r\n    private static renderSorted(meshs: SmartArray<Mesh>, sortCompareFn: Nullable<(a: Mesh, b: Mesh) => number>, camera: Nullable<Camera>, transparent: boolean): void {\r\n        let subIndex = 0;\r\n        let subMesh: Mesh;\r\n        let cameraPosition = camera ? camera.getWorldPosition(MathTmp.Vector3[0]) : Vector3.ZERO;\r\n        for (; subIndex < meshs.length; subIndex++) {\r\n            subMesh = meshs.data[subIndex];\r\n            subMesh._distanceToCamera = subMesh.boundingSphere.center.distanceTo(cameraPosition);\r\n        }\r\n\r\n        let sortedArray = meshs.data.slice(0, meshs.length);\r\n        if (sortCompareFn) {\r\n            sortedArray.sort(sortCompareFn);\r\n        }\r\n\r\n        for (subIndex = 0; subIndex < sortedArray.length; subIndex++) {\r\n            subMesh = sortedArray[subIndex];\r\n            subMesh.render(transparent);\r\n        }\r\n    }\r\n\r\n    private static renderUnsorted(meshs: SmartArray<Mesh>): void {\r\n        for (let subIndex = 0; subIndex < meshs.length; subIndex++) {\r\n            let mesh = meshs.data[subIndex];\r\n            mesh.render(false);\r\n        }\r\n    }\r\n\r\n    public static defaultTransparentSortCompare(a: Mesh, b: Mesh): number {\r\n        // Alpha index first\r\n        if (a._renderOrder > b._renderOrder) {\r\n            return 1;\r\n        }\r\n        if (a._renderOrder < b._renderOrder) {\r\n            return -1;\r\n        }\r\n\r\n        // Then distance to camera\r\n        return RenderingGroup.backToFrontSortCompare(a, b);\r\n    }\r\n\r\n    public static backToFrontSortCompare(a: Mesh, b: Mesh): number {\r\n        // Then distance to camera\r\n        if (a._distanceToCamera < b._distanceToCamera) {\r\n            return 1;\r\n        }\r\n        if (a._distanceToCamera > b._distanceToCamera) {\r\n            return -1;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    public static frontToBackSortCompare(a: Mesh, b: Mesh): number {\r\n        // Then distance to camera\r\n        if (a._distanceToCamera < b._distanceToCamera) {\r\n            return -1;\r\n        }\r\n        if (a._distanceToCamera > b._distanceToCamera) {\r\n            return 1;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n",
        "import { IDisposable } from \"../../Misc/IDisposable\";\r\nimport { SmartArray } from \"../../Misc/SmartArray\";\r\nimport { Mesh } from \"../Mesh\";\r\nimport { Scene } from \"../Scene\";\r\nimport { Camera } from \"../../Cameras\";\r\n\r\n/**\r\n * 计划管理\r\n */\r\nexport class ProjectingManager implements IDisposable {\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    private _activeMeshes = new SmartArray<Mesh>(256);\r\n    /**\r\n     * @ignore\r\n     */\r\n    private readonly _scene: Scene;\r\n\r\n    /**\r\n     * 构造函数\r\n     * @param scene\r\n     */\r\n    constructor(scene: Scene) {\r\n        this._scene = scene;\r\n    }\r\n\r\n    /**\r\n     * 释放\r\n     */\r\n    public dispose(): void {\r\n    }\r\n\r\n    /**\r\n     * 重置\r\n     */\r\n    public reset(): void {\r\n        this._activeMeshes.reset();\r\n    }\r\n\r\n    public project(camera: Camera): void {\r\n        this._projectMeshs(camera);\r\n    }\r\n\r\n    private _projectMeshs(camera: Camera): void {\r\n\r\n        const meshs = this._scene.meshes;\r\n        meshs.forEach((mesh) => {\r\n            this._projectMesh(camera, mesh);\r\n        });\r\n    }\r\n\r\n    private _projectMesh(camera: Camera, mesh: Mesh): void {\r\n\r\n        if (!mesh.visible) {\r\n            return;\r\n        }\r\n\r\n        const renderingManager = this._scene.renderingManager;\r\n\r\n        const layerVisible = mesh.visibleLayers.test(camera.visibleLayers);\r\n        if (layerVisible) {\r\n            if (!mesh.frustumCulled || camera.frustum.intersectsObject(mesh)) {\r\n                renderingManager.dispatch(mesh);\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    ],
    "sourceRoot": ""
}
